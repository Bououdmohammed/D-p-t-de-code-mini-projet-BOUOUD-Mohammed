
UART7_MAST1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e600  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cdc  0800e7d0  0800e7d0  0001e7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134ac  080134ac  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  080134ac  080134ac  000234ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080134b4  080134b4  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080134b4  080134b4  000234b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080134b8  080134b8  000234b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  080134bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004958  200000b0  0801356c  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a08  0801356c  00034a08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030b97  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bc8  00000000  00000000  00060c77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002680  00000000  00000000  00066840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002418  00000000  00000000  00068ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb36  00000000  00000000  0006b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d672  00000000  00000000  00099e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117c5c  00000000  00000000  000c7480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001df0dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a884  00000000  00000000  001df12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e7b8 	.word	0x0800e7b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800e7b8 	.word	0x0800e7b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000cc 	.word	0x200000cc
 80005e4:	20000180 	.word	0x20000180

080005e8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f002 f828 	bl	8002648 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f9b4 	bl	8000964 <ft5336_I2C_InitializeIfRequired>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800062c:	2300      	movs	r3, #0
 800062e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000630:	f000 f998 	bl	8000964 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e010      	b.n	800065c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	21a8      	movs	r1, #168	; 0xa8
 8000640:	4618      	mov	r0, r3
 8000642:	f001 ffe3 	bl	800260c <TS_IO_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b51      	cmp	r3, #81	; 0x51
 8000650:	d101      	bne.n	8000656 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d802      	bhi.n	8000668 <ft5336_ReadID+0x4e>
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0e8      	beq.n	800063a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	b29b      	uxth	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f97e 	bl	8000984 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f932 	bl	80008f4 <ft5336_TS_DisableIT>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 ffad 	bl	800260c <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d901      	bls.n	80006ce <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000380 	.word	0x20000380

080006ec <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000710:	789a      	ldrb	r2, [r3, #2]
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	429a      	cmp	r2, r3
 8000718:	f080 80cf 	bcs.w	80008ba <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800071c:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b09      	cmp	r3, #9
 8000722:	d871      	bhi.n	8000808 <ft5336_TS_GetXY+0x11c>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <ft5336_TS_GetXY+0x40>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000755 	.word	0x08000755
 8000730:	08000767 	.word	0x08000767
 8000734:	08000779 	.word	0x08000779
 8000738:	0800078b 	.word	0x0800078b
 800073c:	0800079d 	.word	0x0800079d
 8000740:	080007af 	.word	0x080007af
 8000744:	080007c1 	.word	0x080007c1
 8000748:	080007d3 	.word	0x080007d3
 800074c:	080007e5 	.word	0x080007e5
 8000750:	080007f7 	.word	0x080007f7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000754:	2304      	movs	r3, #4
 8000756:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000758:	2303      	movs	r3, #3
 800075a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800075c:	2306      	movs	r3, #6
 800075e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000760:	2305      	movs	r3, #5
 8000762:	753b      	strb	r3, [r7, #20]
      break;
 8000764:	e051      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000766:	230a      	movs	r3, #10
 8000768:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800076a:	2309      	movs	r3, #9
 800076c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800076e:	230c      	movs	r3, #12
 8000770:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000772:	230b      	movs	r3, #11
 8000774:	753b      	strb	r3, [r7, #20]
      break;
 8000776:	e048      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000778:	2310      	movs	r3, #16
 800077a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800077c:	230f      	movs	r3, #15
 800077e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000780:	2312      	movs	r3, #18
 8000782:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000784:	2311      	movs	r3, #17
 8000786:	753b      	strb	r3, [r7, #20]
      break;
 8000788:	e03f      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800078a:	2316      	movs	r3, #22
 800078c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800078e:	2315      	movs	r3, #21
 8000790:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000792:	2318      	movs	r3, #24
 8000794:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000796:	2317      	movs	r3, #23
 8000798:	753b      	strb	r3, [r7, #20]
      break;
 800079a:	e036      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800079c:	231c      	movs	r3, #28
 800079e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007a0:	231b      	movs	r3, #27
 80007a2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007a4:	231e      	movs	r3, #30
 80007a6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007a8:	231d      	movs	r3, #29
 80007aa:	753b      	strb	r3, [r7, #20]
      break;
 80007ac:	e02d      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007ae:	2322      	movs	r3, #34	; 0x22
 80007b0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007b2:	2321      	movs	r3, #33	; 0x21
 80007b4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007b6:	2324      	movs	r3, #36	; 0x24
 80007b8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ba:	2323      	movs	r3, #35	; 0x23
 80007bc:	753b      	strb	r3, [r7, #20]
      break;
 80007be:	e024      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007c8:	232a      	movs	r3, #42	; 0x2a
 80007ca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007cc:	2329      	movs	r3, #41	; 0x29
 80007ce:	753b      	strb	r3, [r7, #20]
      break;
 80007d0:	e01b      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007d2:	232e      	movs	r3, #46	; 0x2e
 80007d4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007d6:	232d      	movs	r3, #45	; 0x2d
 80007d8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007da:	2330      	movs	r3, #48	; 0x30
 80007dc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007de:	232f      	movs	r3, #47	; 0x2f
 80007e0:	753b      	strb	r3, [r7, #20]
      break;
 80007e2:	e012      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007e4:	2334      	movs	r3, #52	; 0x34
 80007e6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007e8:	2333      	movs	r3, #51	; 0x33
 80007ea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007ec:	2336      	movs	r3, #54	; 0x36
 80007ee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007f0:	2335      	movs	r3, #53	; 0x35
 80007f2:	753b      	strb	r3, [r7, #20]
      break;
 80007f4:	e009      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007f6:	233a      	movs	r3, #58	; 0x3a
 80007f8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007fa:	2339      	movs	r3, #57	; 0x39
 80007fc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007fe:	233c      	movs	r3, #60	; 0x3c
 8000800:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000802:	233b      	movs	r3, #59	; 0x3b
 8000804:	753b      	strb	r3, [r7, #20]
      break;
 8000806:	e000      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000808:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	7dfa      	ldrb	r2, [r7, #23]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 fefa 	bl	800260c <TS_IO_Read>
 8000818:	4603      	mov	r3, r0
 800081a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000824:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7dba      	ldrb	r2, [r7, #22]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f001 feec 	bl	800260c <TS_IO_Read>
 8000834:	4603      	mov	r3, r0
 8000836:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000842:	b21a      	sxth	r2, r3
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000852:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	7d7a      	ldrb	r2, [r7, #21]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fed1 	bl	800260c <TS_IO_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	7d3a      	ldrb	r2, [r7, #20]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f001 fec3 	bl	800260c <TS_IO_Read>
 8000886:	4603      	mov	r3, r0
 8000888:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000894:	b21a      	sxth	r2, r3
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000380 	.word	0x20000380
 80008c8:	20000384 	.word	0x20000384

080008cc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	21a4      	movs	r1, #164	; 0xa4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fe76 	bl	80025d8 <TS_IO_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	21a4      	movs	r1, #164	; 0xa4
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fe62 	bl	80025d8 <TS_IO_Write>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000952:	781b      	ldrb	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000380 	.word	0x20000380

08000964 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000968:	f7ff fff0 	bl	800094c <ft5336_Get_I2C_InitializedStatus>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d104      	bne.n	800097c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000972:	f001 fe27 	bl	80025c4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000976:	4b02      	ldr	r3, [pc, #8]	; (8000980 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
  }
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000380 	.word	0x20000380

08000984 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b0b8      	sub	sp, #224	; 0xe0
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f003 fd80 	bl	80044aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f943 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 ff0b 	bl	80017c8 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009b2:	f000 fa03 	bl	8000dbc <MX_ADC3_Init>
  MX_DMA2D_Init();
 80009b6:	f000 fa7d 	bl	8000eb4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80009ba:	f000 feb5 	bl	8001728 <MX_FMC_Init>
  MX_I2C1_Init();
 80009be:	f000 faab 	bl	8000f18 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009c2:	f000 fae9 	bl	8000f98 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009c6:	f000 fb27 	bl	8001018 <MX_LTDC_Init>
  MX_RTC_Init();
 80009ca:	f000 fba7 	bl	800111c <MX_RTC_Init>
  MX_SPI2_Init();
 80009ce:	f000 fc4b 	bl	8001268 <MX_SPI2_Init>
  MX_TIM1_Init();
 80009d2:	f000 fc87 	bl	80012e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009d6:	f000 fcd9 	bl	800138c <MX_TIM2_Init>
  MX_TIM3_Init();
 80009da:	f000 fd25 	bl	8001428 <MX_TIM3_Init>
  MX_TIM5_Init();
 80009de:	f000 fd71 	bl	80014c4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80009e2:	f000 fdbd 	bl	8001560 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80009e6:	f000 fe3f 	bl	8001668 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ea:	f000 fe6d 	bl	80016c8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80009ee:	f000 f993 	bl	8000d18 <MX_ADC1_Init>
  MX_DAC_Init();
 80009f2:	f000 fa35 	bl	8000e60 <MX_DAC_Init>
  MX_UART7_Init();
 80009f6:	f000 fe07 	bl	8001608 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  	BSP_LCD_Init();
 80009fa:	f001 fe31 	bl	8002660 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80009fe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a02:	2000      	movs	r0, #0
 8000a04:	f001 fec4 	bl	8002790 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000a08:	f001 fe9a 	bl	8002740 <BSP_LCD_GetXSize>
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	f001 feab 	bl	8002768 <BSP_LCD_GetYSize>
 8000a12:	4603      	mov	r3, r0
 8000a14:	fb04 f303 	mul.w	r3, r4, r3
 8000a18:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	f001 feb5 	bl	8002790 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000a26:	f002 fa17 	bl	8002e58 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 ff10 	bl	8002850 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f001 ff68 	bl	8002908 <BSP_LCD_Clear>
    BSP_LCD_SelectLayer(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 ff09 	bl	8002850 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(00);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 ff62 	bl	8002908 <BSP_LCD_Clear>
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)diableRGB565_bmp);
 8000a44:	4a66      	ldr	r2, [pc, #408]	; (8000be0 <main+0x240>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f002 f8d9 	bl	8002c00 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font12);
 8000a4e:	4865      	ldr	r0, [pc, #404]	; (8000be4 <main+0x244>)
 8000a50:	f001 ff40 	bl	80028d4 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000a54:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000a58:	f001 ff0a 	bl	8002870 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 ff1f 	bl	80028a0 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a62:	f001 fe6d 	bl	8002740 <BSP_LCD_GetXSize>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29c      	uxth	r4, r3
 8000a6a:	f001 fe7d 	bl	8002768 <BSP_LCD_GetYSize>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f002 fe01 	bl	800367c <BSP_TS_Init>
    //uart7
    HAL_UART_Receive_IT(&huart7,(uint8_t *)rxbuffer,4);
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	495a      	ldr	r1, [pc, #360]	; (8000be8 <main+0x248>)
 8000a7e:	485b      	ldr	r0, [pc, #364]	; (8000bec <main+0x24c>)
 8000a80:	f009 f964 	bl	8009d4c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MUTEX */
  osMutexDef(MUTEX);
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  MUTEXHandle = osMutexCreate(osMutex(MUTEX));
 8000a90:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00a fd94 	bl	800b5c2 <osMutexCreate>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4a54      	ldr	r2, [pc, #336]	; (8000bf0 <main+0x250>)
 8000a9e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueP2V */
  osMessageQDef(myQueueP2V, 2, uint16_t);
 8000aa0:	4b54      	ldr	r3, [pc, #336]	; (8000bf4 <main+0x254>)
 8000aa2:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueP2VHandle = osMessageCreate(osMessageQ(myQueueP2V), NULL);
 8000aac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00a fd9d 	bl	800b5f2 <osMessageCreate>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a4f      	ldr	r2, [pc, #316]	; (8000bf8 <main+0x258>)
 8000abc:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 2, uint16_t);
 8000abe:	4b4d      	ldr	r3, [pc, #308]	; (8000bf4 <main+0x254>)
 8000ac0:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000aca:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00a fd8e 	bl	800b5f2 <osMessageCreate>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a48      	ldr	r2, [pc, #288]	; (8000bfc <main+0x25c>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueHommePos */
  osMessageQDef(myQueueHommePos, 2, uint16_t);
 8000adc:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <main+0x254>)
 8000ade:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHommePosHandle = osMessageCreate(osMessageQ(myQueueHommePos), NULL);
 8000ae8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f00a fd7f 	bl	800b5f2 <osMessageCreate>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a42      	ldr	r2, [pc, #264]	; (8000c00 <main+0x260>)
 8000af8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <main+0x264>)
 8000afc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000b00:	461d      	mov	r5, r3
 8000b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b0e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00a fcf4 	bl	800b502 <osThreadCreate>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4a3a      	ldr	r2, [pc, #232]	; (8000c08 <main+0x268>)
 8000b1e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1 */
  osThreadDef(Task_1, Task_diable, osPriorityNormal, 0, 1024);
 8000b20:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <main+0x26c>)
 8000b22:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b26:	461d      	mov	r5, r3
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1Handle = osThreadCreate(osThread(Task_1), NULL);
 8000b34:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f00a fce1 	bl	800b502 <osThreadCreate>
 8000b40:	4603      	mov	r3, r0
 8000b42:	4a33      	ldr	r2, [pc, #204]	; (8000c10 <main+0x270>)
 8000b44:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Task_homme, osPriorityNormal, 0, 1024);
 8000b46:	4b33      	ldr	r3, [pc, #204]	; (8000c14 <main+0x274>)
 8000b48:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b4c:	461d      	mov	r5, r3
 8000b4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000b5a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00a fcce 	bl	800b502 <osThreadCreate>
 8000b66:	4603      	mov	r3, r0
 8000b68:	4a2b      	ldr	r2, [pc, #172]	; (8000c18 <main+0x278>)
 8000b6a:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, Task_Transmit_data, osPriorityNormal, 0, 128);
 8000b6c:	4b2b      	ldr	r3, [pc, #172]	; (8000c1c <main+0x27c>)
 8000b6e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b72:	461d      	mov	r5, r3
 8000b74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b84:	2100      	movs	r1, #0
 8000b86:	4618      	mov	r0, r3
 8000b88:	f00a fcbb 	bl	800b502 <osThreadCreate>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a24      	ldr	r2, [pc, #144]	; (8000c20 <main+0x280>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, Task_missiles, osPriorityNormal, 0, 1024);
 8000b92:	4b24      	ldr	r3, [pc, #144]	; (8000c24 <main+0x284>)
 8000b94:	f107 041c 	add.w	r4, r7, #28
 8000b98:	461d      	mov	r5, r3
 8000b9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b9e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2100      	movs	r1, #0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f00a fca8 	bl	800b502 <osThreadCreate>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	4a1c      	ldr	r2, [pc, #112]	; (8000c28 <main+0x288>)
 8000bb6:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, Task_Game_Over, osPriorityIdle, 0, 128);
 8000bb8:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <main+0x28c>)
 8000bba:	463c      	mov	r4, r7
 8000bbc:	461d      	mov	r5, r3
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f00a fc97 	bl	800b502 <osThreadCreate>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	4a16      	ldr	r2, [pc, #88]	; (8000c30 <main+0x290>)
 8000bd8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bda:	f00a fc8b 	bl	800b4f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <main+0x23e>
 8000be0:	0800e904 	.word	0x0800e904
 8000be4:	20000030 	.word	0x20000030
 8000be8:	20000994 	.word	0x20000994
 8000bec:	200007ac 	.word	0x200007ac
 8000bf0:	20000990 	.word	0x20000990
 8000bf4:	0800e814 	.word	0x0800e814
 8000bf8:	20000984 	.word	0x20000984
 8000bfc:	20000988 	.word	0x20000988
 8000c00:	2000098c 	.word	0x2000098c
 8000c04:	0800e824 	.word	0x0800e824
 8000c08:	2000096c 	.word	0x2000096c
 8000c0c:	0800e840 	.word	0x0800e840
 8000c10:	20000970 	.word	0x20000970
 8000c14:	0800e85c 	.word	0x0800e85c
 8000c18:	20000974 	.word	0x20000974
 8000c1c:	0800e878 	.word	0x0800e878
 8000c20:	20000978 	.word	0x20000978
 8000c24:	0800e894 	.word	0x0800e894
 8000c28:	2000097c 	.word	0x2000097c
 8000c2c:	0800e8b0 	.word	0x0800e8b0
 8000c30:	20000980 	.word	0x20000980

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	; 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f00d f8e8 	bl	800de18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c58:	f006 fcd4 	bl	8007604 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <SystemClock_Config+0xdc>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a2b      	ldr	r2, [pc, #172]	; (8000d10 <SystemClock_Config+0xdc>)
 8000c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b29      	ldr	r3, [pc, #164]	; (8000d10 <SystemClock_Config+0xdc>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c74:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <SystemClock_Config+0xe0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a26      	ldr	r2, [pc, #152]	; (8000d14 <SystemClock_Config+0xe0>)
 8000c7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c7e:	6013      	str	r3, [r2, #0]
 8000c80:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <SystemClock_Config+0xe0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c8c:	2309      	movs	r3, #9
 8000c8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000ca4:	2319      	movs	r3, #25
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ca8:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cb2:	2309      	movs	r3, #9
 8000cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f006 fd02 	bl	80076c4 <HAL_RCC_OscConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cc6:	f001 fb21 	bl	800230c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cca:	f006 fcab 	bl	8007624 <HAL_PWREx_EnableOverDrive>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000cd4:	f001 fb1a 	bl	800230c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd8:	230f      	movs	r3, #15
 8000cda:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ce4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cf0:	f107 030c 	add.w	r3, r7, #12
 8000cf4:	2106      	movs	r1, #6
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f006 ff88 	bl	8007c0c <HAL_RCC_ClockConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d02:	f001 fb03 	bl	800230c <Error_Handler>
  }
}
 8000d06:	bf00      	nop
 8000d08:	3750      	adds	r7, #80	; 0x50
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40007000 	.word	0x40007000

08000d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d1e:	463b      	mov	r3, r7
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <MX_ADC1_Init+0x9c>)
 8000d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d38:	4b1d      	ldr	r3, [pc, #116]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d3e:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d44:	4b1a      	ldr	r3, [pc, #104]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d52:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d58:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d5a:	4a17      	ldr	r2, [pc, #92]	; (8000db8 <MX_ADC1_Init+0xa0>)
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d72:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d7a:	f003 fbe7 	bl	800454c <HAL_ADC_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d84:	f001 fac2 	bl	800230c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_ADC1_Init+0x98>)
 8000d9a:	f003 fd81 	bl	80048a0 <HAL_ADC_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000da4:	f001 fab2 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20000388 	.word	0x20000388
 8000db4:	40012000 	.word	0x40012000
 8000db8:	0f000001 	.word	0x0f000001

08000dbc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000dce:	4b21      	ldr	r3, [pc, #132]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000dd0:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <MX_ADC3_Init+0x9c>)
 8000dd2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dd4:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000dd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dda:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000de2:	4b1c      	ldr	r3, [pc, #112]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000dee:	4b19      	ldr	r3, [pc, #100]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000df6:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000dfe:	4a17      	ldr	r2, [pc, #92]	; (8000e5c <MX_ADC3_Init+0xa0>)
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000e1e:	f003 fb95 	bl	800454c <HAL_ADC_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e28:	f001 fa70 	bl	800230c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e30:	2301      	movs	r3, #1
 8000e32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_ADC3_Init+0x98>)
 8000e3e:	f003 fd2f 	bl	80048a0 <HAL_ADC_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e48:	f001 fa60 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200003d0 	.word	0x200003d0
 8000e58:	40012200 	.word	0x40012200
 8000e5c:	0f000001 	.word	0x0f000001

08000e60 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_DAC_Init+0x4c>)
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <MX_DAC_Init+0x50>)
 8000e72:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e74:	480d      	ldr	r0, [pc, #52]	; (8000eac <MX_DAC_Init+0x4c>)
 8000e76:	f004 f845 	bl	8004f04 <HAL_DAC_Init>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e80:	f001 fa44 	bl	800230c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	4806      	ldr	r0, [pc, #24]	; (8000eac <MX_DAC_Init+0x4c>)
 8000e94:	f004 f8bc 	bl	8005010 <HAL_DAC_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e9e:	f001 fa35 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000418 	.word	0x20000418
 8000eb0:	40007400 	.word	0x40007400

08000eb4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000eba:	4a16      	ldr	r2, [pc, #88]	; (8000f14 <MX_DMA2D_Init+0x60>)
 8000ebc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000ee8:	4809      	ldr	r0, [pc, #36]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000eea:	f004 fb3b 	bl	8005564 <HAL_DMA2D_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000ef4:	f001 fa0a 	bl	800230c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_DMA2D_Init+0x5c>)
 8000efc:	f004 fda0 	bl	8005a40 <HAL_DMA2D_ConfigLayer>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f06:	f001 fa01 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000042c 	.word	0x2000042c
 8000f14:	4002b000 	.word	0x4002b000

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <MX_I2C1_Init+0x78>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <MX_I2C1_Init+0x7c>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f28:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f2e:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3a:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f52:	480e      	ldr	r0, [pc, #56]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f54:	f005 f9a4 	bl	80062a0 <HAL_I2C_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f5e:	f001 f9d5 	bl	800230c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f62:	2100      	movs	r1, #0
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f66:	f005 ff3d 	bl	8006de4 <HAL_I2CEx_ConfigAnalogFilter>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f70:	f001 f9cc 	bl	800230c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f74:	2100      	movs	r1, #0
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_I2C1_Init+0x74>)
 8000f78:	f005 ff7f 	bl	8006e7a <HAL_I2CEx_ConfigDigitalFilter>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f001 f9c3 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	2000046c 	.word	0x2000046c
 8000f90:	40005400 	.word	0x40005400
 8000f94:	00c0eaff 	.word	0x00c0eaff

08000f98 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_I2C3_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_I2C3_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_I2C3_Init+0x74>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <MX_I2C3_Init+0x7c>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_I2C3_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_I2C3_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_I2C3_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_I2C3_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C3_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C3_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C3_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_I2C3_Init+0x74>)
 8000fd4:	f005 f964 	bl	80062a0 <HAL_I2C_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f001 f995 	bl	800230c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_I2C3_Init+0x74>)
 8000fe6:	f005 fefd 	bl	8006de4 <HAL_I2CEx_ConfigAnalogFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f001 f98c 	bl	800230c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_I2C3_Init+0x74>)
 8000ff8:	f005 ff3f 	bl	8006e7a <HAL_I2CEx_ConfigDigitalFilter>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001002:	f001 f983 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004b8 	.word	0x200004b8
 8001010:	40005c00 	.word	0x40005c00
 8001014:	00c0eaff 	.word	0x00c0eaff

08001018 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08e      	sub	sp, #56	; 0x38
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2234      	movs	r2, #52	; 0x34
 8001022:	2100      	movs	r1, #0
 8001024:	4618      	mov	r0, r3
 8001026:	f00c fef7 	bl	800de18 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800102a:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <MX_LTDC_Init+0xfc>)
 800102c:	4a3a      	ldr	r2, [pc, #232]	; (8001118 <MX_LTDC_Init+0x100>)
 800102e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001030:	4b38      	ldr	r3, [pc, #224]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001032:	2200      	movs	r2, #0
 8001034:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001036:	4b37      	ldr	r3, [pc, #220]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800103c:	4b35      	ldr	r3, [pc, #212]	; (8001114 <MX_LTDC_Init+0xfc>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001042:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001048:	4b32      	ldr	r3, [pc, #200]	; (8001114 <MX_LTDC_Init+0xfc>)
 800104a:	2228      	movs	r2, #40	; 0x28
 800104c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001050:	2209      	movs	r2, #9
 8001052:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001056:	2235      	movs	r2, #53	; 0x35
 8001058:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800105a:	4b2e      	ldr	r3, [pc, #184]	; (8001114 <MX_LTDC_Init+0xfc>)
 800105c:	220b      	movs	r2, #11
 800105e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001062:	f240 2215 	movw	r2, #533	; 0x215
 8001066:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <MX_LTDC_Init+0xfc>)
 800106a:	f240 121b 	movw	r2, #283	; 0x11b
 800106e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001072:	f240 2235 	movw	r2, #565	; 0x235
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001078:	4b26      	ldr	r3, [pc, #152]	; (8001114 <MX_LTDC_Init+0xfc>)
 800107a:	f240 121d 	movw	r2, #285	; 0x11d
 800107e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001080:	4b24      	ldr	r3, [pc, #144]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001082:	2200      	movs	r2, #0
 8001084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_LTDC_Init+0xfc>)
 800108a:	2200      	movs	r2, #0
 800108c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <MX_LTDC_Init+0xfc>)
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001098:	481e      	ldr	r0, [pc, #120]	; (8001114 <MX_LTDC_Init+0xfc>)
 800109a:	f005 ff3b 	bl	8006f14 <HAL_LTDC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010a4:	f001 f932 	bl	800230c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010ac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010b0:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80010b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010ba:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010bc:	2302      	movs	r3, #2
 80010be:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010c0:	23ff      	movs	r3, #255	; 0xff
 80010c2:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010cc:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010ce:	2307      	movs	r3, #7
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010d2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010d6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80010d8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80010de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	4805      	ldr	r0, [pc, #20]	; (8001114 <MX_LTDC_Init+0xfc>)
 80010fe:	f006 f89b 	bl	8007238 <HAL_LTDC_ConfigLayer>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001108:	f001 f900 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	; 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000504 	.word	0x20000504
 8001118:	40016800 	.word	0x40016800

0800111c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b092      	sub	sp, #72	; 0x48
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]
 8001132:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001138:	463b      	mov	r3, r7
 800113a:	222c      	movs	r2, #44	; 0x2c
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f00c fe6a 	bl	800de18 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001144:	4b46      	ldr	r3, [pc, #280]	; (8001260 <MX_RTC_Init+0x144>)
 8001146:	4a47      	ldr	r2, [pc, #284]	; (8001264 <MX_RTC_Init+0x148>)
 8001148:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800114a:	4b45      	ldr	r3, [pc, #276]	; (8001260 <MX_RTC_Init+0x144>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001150:	4b43      	ldr	r3, [pc, #268]	; (8001260 <MX_RTC_Init+0x144>)
 8001152:	227f      	movs	r2, #127	; 0x7f
 8001154:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001156:	4b42      	ldr	r3, [pc, #264]	; (8001260 <MX_RTC_Init+0x144>)
 8001158:	22ff      	movs	r2, #255	; 0xff
 800115a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800115c:	4b40      	ldr	r3, [pc, #256]	; (8001260 <MX_RTC_Init+0x144>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001162:	4b3f      	ldr	r3, [pc, #252]	; (8001260 <MX_RTC_Init+0x144>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001168:	4b3d      	ldr	r3, [pc, #244]	; (8001260 <MX_RTC_Init+0x144>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800116e:	483c      	ldr	r0, [pc, #240]	; (8001260 <MX_RTC_Init+0x144>)
 8001170:	f007 fb54 	bl	800881c <HAL_RTC_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800117a:	f001 f8c7 	bl	800230c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800117e:	2300      	movs	r3, #0
 8001180:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001184:	2300      	movs	r3, #0
 8001186:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001190:	2300      	movs	r3, #0
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001198:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800119c:	2201      	movs	r2, #1
 800119e:	4619      	mov	r1, r3
 80011a0:	482f      	ldr	r0, [pc, #188]	; (8001260 <MX_RTC_Init+0x144>)
 80011a2:	f007 fbcd 	bl	8008940 <HAL_RTC_SetTime>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011ac:	f001 f8ae 	bl	800230c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011b0:	2301      	movs	r3, #1
 80011b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011b6:	2301      	movs	r3, #1
 80011b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x5;
 80011bc:	2305      	movs	r3, #5
 80011be:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x22;
 80011c2:	2322      	movs	r3, #34	; 0x22
 80011c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011cc:	2201      	movs	r2, #1
 80011ce:	4619      	mov	r1, r3
 80011d0:	4823      	ldr	r0, [pc, #140]	; (8001260 <MX_RTC_Init+0x144>)
 80011d2:	f007 fc73 	bl	8008abc <HAL_RTC_SetDate>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 80011dc:	f001 f896 	bl	800230c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001204:	2301      	movs	r3, #1
 8001206:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800120a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001210:	463b      	mov	r3, r7
 8001212:	2201      	movs	r2, #1
 8001214:	4619      	mov	r1, r3
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <MX_RTC_Init+0x144>)
 8001218:	f007 fcf8 	bl	8008c0c <HAL_RTC_SetAlarm>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001222:	f001 f873 	bl	800230c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800122c:	463b      	mov	r3, r7
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	480b      	ldr	r0, [pc, #44]	; (8001260 <MX_RTC_Init+0x144>)
 8001234:	f007 fcea 	bl	8008c0c <HAL_RTC_SetAlarm>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800123e:	f001 f865 	bl	800230c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001242:	2202      	movs	r2, #2
 8001244:	2100      	movs	r1, #0
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_RTC_Init+0x144>)
 8001248:	f007 fe6a 	bl	8008f20 <HAL_RTCEx_SetTimeStamp>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001252:	f001 f85b 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3748      	adds	r7, #72	; 0x48
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200005ac 	.word	0x200005ac
 8001264:	40002800 	.word	0x40002800

08001268 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_SPI2_Init+0x74>)
 800126e:	4a1c      	ldr	r2, [pc, #112]	; (80012e0 <MX_SPI2_Init+0x78>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <MX_SPI2_Init+0x74>)
 8001274:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <MX_SPI2_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_SPI2_Init+0x74>)
 8001282:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001286:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_SPI2_Init+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_SPI2_Init+0x74>)
 8001290:	2200      	movs	r2, #0
 8001292:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_SPI2_Init+0x74>)
 8001296:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800129a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_SPI2_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_SPI2_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_SPI2_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_SPI2_Init+0x74>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_SPI2_Init+0x74>)
 80012b6:	2207      	movs	r2, #7
 80012b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_SPI2_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_SPI2_Init+0x74>)
 80012c2:	2208      	movs	r2, #8
 80012c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_SPI2_Init+0x74>)
 80012c8:	f007 ff11 	bl	80090ee <HAL_SPI_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012d2:	f001 f81b 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200005cc 	.word	0x200005cc
 80012e0:	40003800 	.word	0x40003800

080012e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0310 	add.w	r3, r7, #16
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_TIM1_Init+0xa0>)
 8001304:	4a20      	ldr	r2, [pc, #128]	; (8001388 <MX_TIM1_Init+0xa4>)
 8001306:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_TIM1_Init+0xa0>)
 800130a:	2200      	movs	r2, #0
 800130c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM1_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_TIM1_Init+0xa0>)
 8001316:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800131a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131c:	4b19      	ldr	r3, [pc, #100]	; (8001384 <MX_TIM1_Init+0xa0>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_TIM1_Init+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_TIM1_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132e:	4815      	ldr	r0, [pc, #84]	; (8001384 <MX_TIM1_Init+0xa0>)
 8001330:	f007 ff88 	bl	8009244 <HAL_TIM_Base_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800133a:	f000 ffe7 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4619      	mov	r1, r3
 800134a:	480e      	ldr	r0, [pc, #56]	; (8001384 <MX_TIM1_Init+0xa0>)
 800134c:	f008 f96a 	bl	8009624 <HAL_TIM_ConfigClockSource>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001356:	f000 ffd9 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4806      	ldr	r0, [pc, #24]	; (8001384 <MX_TIM1_Init+0xa0>)
 800136c:	f008 fb86 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001376:	f000 ffc9 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800137a:	bf00      	nop
 800137c:	3720      	adds	r7, #32
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000630 	.word	0x20000630
 8001388:	40010000 	.word	0x40010000

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0310 	add.w	r3, r7, #16
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_TIM2_Init+0x98>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_TIM2_Init+0x98>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM2_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_TIM2_Init+0x98>)
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <MX_TIM2_Init+0x98>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_TIM2_Init+0x98>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d2:	4814      	ldr	r0, [pc, #80]	; (8001424 <MX_TIM2_Init+0x98>)
 80013d4:	f007 ff36 	bl	8009244 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80013de:	f000 ff95 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_TIM2_Init+0x98>)
 80013f0:	f008 f918 	bl	8009624 <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013fa:	f000 ff87 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <MX_TIM2_Init+0x98>)
 800140c:	f008 fb36 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001416:	f000 ff79 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	2000067c 	.word	0x2000067c

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0310 	add.w	r3, r7, #16
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001446:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM3_Init+0x94>)
 8001448:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <MX_TIM3_Init+0x98>)
 800144a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_TIM3_Init+0x94>)
 800144e:	2200      	movs	r2, #0
 8001450:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM3_Init+0x94>)
 800145a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_TIM3_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_TIM3_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_TIM3_Init+0x94>)
 800146e:	f007 fee9 	bl	8009244 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001478:	f000 ff48 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0310 	add.w	r3, r7, #16
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM3_Init+0x94>)
 800148a:	f008 f8cb 	bl	8009624 <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 ff3a 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM3_Init+0x94>)
 80014a6:	f008 fae9 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f000 ff2c 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3720      	adds	r7, #32
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200006c8 	.word	0x200006c8
 80014c0:	40000400 	.word	0x40000400

080014c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014e2:	4b1d      	ldr	r3, [pc, #116]	; (8001558 <MX_TIM5_Init+0x94>)
 80014e4:	4a1d      	ldr	r2, [pc, #116]	; (800155c <MX_TIM5_Init+0x98>)
 80014e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <MX_TIM5_Init+0x94>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ee:	4b1a      	ldr	r3, [pc, #104]	; (8001558 <MX_TIM5_Init+0x94>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80014f4:	4b18      	ldr	r3, [pc, #96]	; (8001558 <MX_TIM5_Init+0x94>)
 80014f6:	f04f 32ff 	mov.w	r2, #4294967295
 80014fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <MX_TIM5_Init+0x94>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <MX_TIM5_Init+0x94>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001508:	4813      	ldr	r0, [pc, #76]	; (8001558 <MX_TIM5_Init+0x94>)
 800150a:	f007 fe9b 	bl	8009244 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001514:	f000 fefa 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	4619      	mov	r1, r3
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_TIM5_Init+0x94>)
 8001526:	f008 f87d 	bl	8009624 <HAL_TIM_ConfigClockSource>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001530:	f000 feec 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_TIM5_Init+0x94>)
 8001542:	f008 fa9b 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800154c:	f000 fede 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001550:	bf00      	nop
 8001552:	3720      	adds	r7, #32
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000714 	.word	0x20000714
 800155c:	40000c00 	.word	0x40000c00

08001560 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0310 	add.w	r3, r7, #16
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	1d3b      	adds	r3, r7, #4
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <MX_TIM8_Init+0xa0>)
 8001580:	4a20      	ldr	r2, [pc, #128]	; (8001604 <MX_TIM8_Init+0xa4>)
 8001582:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001584:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM8_Init+0xa0>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM8_Init+0xa0>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM8_Init+0xa0>)
 8001592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001596:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001598:	4b19      	ldr	r3, [pc, #100]	; (8001600 <MX_TIM8_Init+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM8_Init+0xa0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM8_Init+0xa0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015aa:	4815      	ldr	r0, [pc, #84]	; (8001600 <MX_TIM8_Init+0xa0>)
 80015ac:	f007 fe4a 	bl	8009244 <HAL_TIM_Base_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80015b6:	f000 fea9 	bl	800230c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	480e      	ldr	r0, [pc, #56]	; (8001600 <MX_TIM8_Init+0xa0>)
 80015c8:	f008 f82c 	bl	8009624 <HAL_TIM_ConfigClockSource>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80015d2:	f000 fe9b 	bl	800230c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <MX_TIM8_Init+0xa0>)
 80015e8:	f008 fa48 	bl	8009a7c <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015f2:	f000 fe8b 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3720      	adds	r7, #32
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000760 	.word	0x20000760
 8001604:	40010400 	.word	0x40010400

08001608 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <MX_UART7_Init+0x58>)
 800160e:	4a15      	ldr	r2, [pc, #84]	; (8001664 <MX_UART7_Init+0x5c>)
 8001610:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001612:	4b13      	ldr	r3, [pc, #76]	; (8001660 <MX_UART7_Init+0x58>)
 8001614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001618:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800161a:	4b11      	ldr	r3, [pc, #68]	; (8001660 <MX_UART7_Init+0x58>)
 800161c:	2200      	movs	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001620:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <MX_UART7_Init+0x58>)
 8001622:	2200      	movs	r2, #0
 8001624:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001626:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <MX_UART7_Init+0x58>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <MX_UART7_Init+0x58>)
 800162e:	220c      	movs	r2, #12
 8001630:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <MX_UART7_Init+0x58>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	4b09      	ldr	r3, [pc, #36]	; (8001660 <MX_UART7_Init+0x58>)
 800163a:	2200      	movs	r2, #0
 800163c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163e:	4b08      	ldr	r3, [pc, #32]	; (8001660 <MX_UART7_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001644:	4b06      	ldr	r3, [pc, #24]	; (8001660 <MX_UART7_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <MX_UART7_Init+0x58>)
 800164c:	f008 fac2 	bl	8009bd4 <HAL_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001656:	f000 fe59 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	200007ac 	.word	0x200007ac
 8001664:	40007800 	.word	0x40007800

08001668 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <MX_USART1_UART_Init+0x5c>)
 8001670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b11      	ldr	r3, [pc, #68]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0e      	ldr	r3, [pc, #56]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016aa:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_USART1_UART_Init+0x58>)
 80016ac:	f008 fa92 	bl	8009bd4 <HAL_UART_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016b6:	f000 fe29 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000830 	.word	0x20000830
 80016c4:	40011000 	.word	0x40011000

080016c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016ce:	4a15      	ldr	r2, [pc, #84]	; (8001724 <MX_USART6_UART_Init+0x5c>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <MX_USART6_UART_Init+0x58>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <MX_USART6_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <MX_USART6_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800170a:	4805      	ldr	r0, [pc, #20]	; (8001720 <MX_USART6_UART_Init+0x58>)
 800170c:	f008 fa62 	bl	8009bd4 <HAL_UART_Init>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001716:	f000 fdf9 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200008b4 	.word	0x200008b4
 8001724:	40011400 	.word	0x40011400

08001728 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b088      	sub	sp, #32
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
 800173c:	615a      	str	r2, [r3, #20]
 800173e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001740:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <MX_FMC_Init+0x98>)
 8001742:	4a20      	ldr	r2, [pc, #128]	; (80017c4 <MX_FMC_Init+0x9c>)
 8001744:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <MX_FMC_Init+0x98>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800174c:	4b1c      	ldr	r3, [pc, #112]	; (80017c0 <MX_FMC_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001752:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <MX_FMC_Init+0x98>)
 8001754:	2204      	movs	r2, #4
 8001756:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <MX_FMC_Init+0x98>)
 800175a:	2210      	movs	r2, #16
 800175c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800175e:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_FMC_Init+0x98>)
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <MX_FMC_Init+0x98>)
 8001766:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800176a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_FMC_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_FMC_Init+0x98>)
 8001774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001778:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_FMC_Init+0x98>)
 800177c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_FMC_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001788:	2302      	movs	r3, #2
 800178a:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800178c:	2307      	movs	r3, #7
 800178e:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001790:	2304      	movs	r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001794:	2307      	movs	r3, #7
 8001796:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001798:	2303      	movs	r3, #3
 800179a:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017a0:	2302      	movs	r3, #2
 80017a2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_FMC_Init+0x98>)
 80017aa:	f007 fc0f 	bl	8008fcc <HAL_SDRAM_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017b4:	f000 fdaa 	bl	800230c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017b8:	bf00      	nop
 80017ba:	3720      	adds	r7, #32
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000938 	.word	0x20000938
 80017c4:	a0000140 	.word	0xa0000140

080017c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b090      	sub	sp, #64	; 0x40
 80017cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	4bae      	ldr	r3, [pc, #696]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4aad      	ldr	r2, [pc, #692]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4bab      	ldr	r3, [pc, #684]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017f6:	4ba8      	ldr	r3, [pc, #672]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4aa7      	ldr	r2, [pc, #668]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80017fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4ba5      	ldr	r3, [pc, #660]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
 800180c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	4ba2      	ldr	r3, [pc, #648]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4aa1      	ldr	r2, [pc, #644]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b9f      	ldr	r3, [pc, #636]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	4b9c      	ldr	r3, [pc, #624]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a9b      	ldr	r2, [pc, #620]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b99      	ldr	r3, [pc, #612]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	61fb      	str	r3, [r7, #28]
 800183c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	4b96      	ldr	r3, [pc, #600]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a95      	ldr	r2, [pc, #596]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b93      	ldr	r3, [pc, #588]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	4b90      	ldr	r3, [pc, #576]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	4a8f      	ldr	r2, [pc, #572]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	; 0x30
 8001862:	4b8d      	ldr	r3, [pc, #564]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800186e:	4b8a      	ldr	r3, [pc, #552]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a89      	ldr	r2, [pc, #548]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b87      	ldr	r3, [pc, #540]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001886:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a83      	ldr	r2, [pc, #524]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b81      	ldr	r3, [pc, #516]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800189e:	4b7e      	ldr	r3, [pc, #504]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a7d      	ldr	r2, [pc, #500]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b7b      	ldr	r3, [pc, #492]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b6:	4b78      	ldr	r3, [pc, #480]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a77      	ldr	r2, [pc, #476]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b75      	ldr	r3, [pc, #468]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ce:	4b72      	ldr	r3, [pc, #456]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a71      	ldr	r2, [pc, #452]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <MX_GPIO_Init+0x2d0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2160      	movs	r1, #96	; 0x60
 80018ea:	486c      	ldr	r0, [pc, #432]	; (8001a9c <MX_GPIO_Init+0x2d4>)
 80018ec:	f004 fca6 	bl	800623c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2120      	movs	r1, #32
 80018f4:	486a      	ldr	r0, [pc, #424]	; (8001aa0 <MX_GPIO_Init+0x2d8>)
 80018f6:	f004 fca1 	bl	800623c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2108      	movs	r1, #8
 80018fe:	4868      	ldr	r0, [pc, #416]	; (8001aa0 <MX_GPIO_Init+0x2d8>)
 8001900:	f004 fc9c 	bl	800623c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	2108      	movs	r1, #8
 8001908:	4866      	ldr	r0, [pc, #408]	; (8001aa4 <MX_GPIO_Init+0x2dc>)
 800190a:	f004 fc97 	bl	800623c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	4864      	ldr	r0, [pc, #400]	; (8001aa8 <MX_GPIO_Init+0x2e0>)
 8001916:	f004 fc91 	bl	800623c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800191a:	2200      	movs	r2, #0
 800191c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001920:	4862      	ldr	r0, [pc, #392]	; (8001aac <MX_GPIO_Init+0x2e4>)
 8001922:	f004 fc8b 	bl	800623c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	21c8      	movs	r1, #200	; 0xc8
 800192a:	4861      	ldr	r0, [pc, #388]	; (8001ab0 <MX_GPIO_Init+0x2e8>)
 800192c:	f004 fc86 	bl	800623c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001930:	2308      	movs	r3, #8
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	4856      	ldr	r0, [pc, #344]	; (8001a9c <MX_GPIO_Init+0x2d4>)
 8001944:	f004 f9aa 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001948:	2304      	movs	r3, #4
 800194a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001958:	2309      	movs	r3, #9
 800195a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 800195c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001960:	4619      	mov	r1, r3
 8001962:	484e      	ldr	r0, [pc, #312]	; (8001a9c <MX_GPIO_Init+0x2d4>)
 8001964:	f004 f99a 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001968:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001976:	2303      	movs	r3, #3
 8001978:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800197a:	230b      	movs	r3, #11
 800197c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800197e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001982:	4619      	mov	r1, r3
 8001984:	484a      	ldr	r0, [pc, #296]	; (8001ab0 <MX_GPIO_Init+0x2e8>)
 8001986:	f004 f989 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800198a:	f643 0323 	movw	r3, #14371	; 0x3823
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800199c:	230a      	movs	r3, #10
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a4:	4619      	mov	r1, r3
 80019a6:	4843      	ldr	r0, [pc, #268]	; (8001ab4 <MX_GPIO_Init+0x2ec>)
 80019a8:	f004 f978 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80019bc:	2308      	movs	r3, #8
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c4:	4619      	mov	r1, r3
 80019c6:	4836      	ldr	r0, [pc, #216]	; (8001aa0 <MX_GPIO_Init+0x2d8>)
 80019c8:	f004 f968 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80019cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	2302      	movs	r3, #2
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019da:	2303      	movs	r3, #3
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019de:	230c      	movs	r3, #12
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e6:	4619      	mov	r1, r3
 80019e8:	4833      	ldr	r0, [pc, #204]	; (8001ab8 <MX_GPIO_Init+0x2f0>)
 80019ea:	f004 f957 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a02:	4619      	mov	r1, r3
 8001a04:	482d      	ldr	r0, [pc, #180]	; (8001abc <MX_GPIO_Init+0x2f4>)
 8001a06:	f004 f949 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001a0a:	2360      	movs	r3, #96	; 0x60
 8001a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	481e      	ldr	r0, [pc, #120]	; (8001a9c <MX_GPIO_Init+0x2d4>)
 8001a22:	f004 f93b 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a26:	2340      	movs	r3, #64	; 0x40
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a36:	230a      	movs	r3, #10
 8001a38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <MX_GPIO_Init+0x2ec>)
 8001a42:	f004 f92b 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4819      	ldr	r0, [pc, #100]	; (8001ac0 <MX_GPIO_Init+0x2f8>)
 8001a5c:	f004 f91e 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a60:	2340      	movs	r3, #64	; 0x40
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a64:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	480a      	ldr	r0, [pc, #40]	; (8001aa0 <MX_GPIO_Init+0x2d8>)
 8001a76:	f004 f911 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001a7a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a84:	2300      	movs	r3, #0
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a94:	4619      	mov	r1, r3
 8001a96:	e015      	b.n	8001ac4 <MX_GPIO_Init+0x2fc>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40020c00 	.word	0x40020c00
 8001aa4:	40022800 	.word	0x40022800
 8001aa8:	40022000 	.word	0x40022000
 8001aac:	40021c00 	.word	0x40021c00
 8001ab0:	40021800 	.word	0x40021800
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40022400 	.word	0x40022400
 8001ac4:	48a3      	ldr	r0, [pc, #652]	; (8001d54 <MX_GPIO_Init+0x58c>)
 8001ac6:	f004 f8e9 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001aca:	23f0      	movs	r3, #240	; 0xf0
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001ada:	230a      	movs	r3, #10
 8001adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001ade:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	489c      	ldr	r0, [pc, #624]	; (8001d58 <MX_GPIO_Init+0x590>)
 8001ae6:	f004 f8d9 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001afc:	230a      	movs	r3, #10
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b04:	4619      	mov	r1, r3
 8001b06:	4895      	ldr	r0, [pc, #596]	; (8001d5c <MX_GPIO_Init+0x594>)
 8001b08:	f004 f8c8 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b0c:	2328      	movs	r3, #40	; 0x28
 8001b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b20:	4619      	mov	r1, r3
 8001b22:	488f      	ldr	r0, [pc, #572]	; (8001d60 <MX_GPIO_Init+0x598>)
 8001b24:	f004 f8ba 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4889      	ldr	r0, [pc, #548]	; (8001d64 <MX_GPIO_Init+0x59c>)
 8001b3e:	f004 f8ad 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b42:	2308      	movs	r3, #8
 8001b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b56:	4619      	mov	r1, r3
 8001b58:	4883      	ldr	r0, [pc, #524]	; (8001d68 <MX_GPIO_Init+0x5a0>)
 8001b5a:	f004 f89f 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001b5e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b64:	2300      	movs	r3, #0
 8001b66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b70:	4619      	mov	r1, r3
 8001b72:	487a      	ldr	r0, [pc, #488]	; (8001d5c <MX_GPIO_Init+0x594>)
 8001b74:	f004 f892 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b78:	2310      	movs	r3, #16
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4875      	ldr	r0, [pc, #468]	; (8001d60 <MX_GPIO_Init+0x598>)
 8001b8c:	f004 f886 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001b90:	2304      	movs	r3, #4
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	486d      	ldr	r0, [pc, #436]	; (8001d60 <MX_GPIO_Init+0x598>)
 8001bac:	f004 f876 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001bb0:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4869      	ldr	r0, [pc, #420]	; (8001d6c <MX_GPIO_Init+0x5a4>)
 8001bc6:	f004 f869 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	4619      	mov	r1, r3
 8001be2:	485d      	ldr	r0, [pc, #372]	; (8001d58 <MX_GPIO_Init+0x590>)
 8001be4:	f004 f85a 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001be8:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	485a      	ldr	r0, [pc, #360]	; (8001d6c <MX_GPIO_Init+0x5a4>)
 8001c02:	f004 f84b 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP1_Pin|GPIO_PIN_6;
 8001c06:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c18:	4619      	mov	r1, r3
 8001c1a:	484e      	ldr	r0, [pc, #312]	; (8001d54 <MX_GPIO_Init+0x58c>)
 8001c1c:	f004 f83e 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c26:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c34:	4619      	mov	r1, r3
 8001c36:	4848      	ldr	r0, [pc, #288]	; (8001d58 <MX_GPIO_Init+0x590>)
 8001c38:	f004 f830 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c3c:	2310      	movs	r3, #16
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c40:	2302      	movs	r3, #2
 8001c42:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c54:	4619      	mov	r1, r3
 8001c56:	4845      	ldr	r0, [pc, #276]	; (8001d6c <MX_GPIO_Init+0x5a4>)
 8001c58:	f004 f820 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c5c:	23c8      	movs	r3, #200	; 0xc8
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c70:	4619      	mov	r1, r3
 8001c72:	483a      	ldr	r0, [pc, #232]	; (8001d5c <MX_GPIO_Init+0x594>)
 8001c74:	f004 f812 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c78:	2305      	movs	r3, #5
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c88:	230a      	movs	r3, #10
 8001c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c90:	4619      	mov	r1, r3
 8001c92:	4834      	ldr	r0, [pc, #208]	; (8001d64 <MX_GPIO_Init+0x59c>)
 8001c94:	f004 f802 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c98:	2332      	movs	r3, #50	; 0x32
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ca8:	230b      	movs	r3, #11
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	482c      	ldr	r0, [pc, #176]	; (8001d64 <MX_GPIO_Init+0x59c>)
 8001cb4:	f003 fff2 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cb8:	2304      	movs	r3, #4
 8001cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cc8:	2309      	movs	r3, #9
 8001cca:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4827      	ldr	r0, [pc, #156]	; (8001d70 <MX_GPIO_Init+0x5a8>)
 8001cd4:	f003 ffe2 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001cd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cea:	2309      	movs	r3, #9
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481a      	ldr	r0, [pc, #104]	; (8001d60 <MX_GPIO_Init+0x598>)
 8001cf6:	f003 ffd1 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001cfa:	2386      	movs	r3, #134	; 0x86
 8001cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d0a:	230b      	movs	r3, #11
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d12:	4619      	mov	r1, r3
 8001d14:	480f      	ldr	r0, [pc, #60]	; (8001d54 <MX_GPIO_Init+0x58c>)
 8001d16:	f003 ffc1 	bl	8005c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d1a:	2328      	movs	r3, #40	; 0x28
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d32:	4619      	mov	r1, r3
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <MX_GPIO_Init+0x58c>)
 8001d36:	f003 ffb1 	bl	8005c9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2105      	movs	r1, #5
 8001d3e:	2028      	movs	r0, #40	; 0x28
 8001d40:	f003 f8b6 	bl	8004eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d44:	2028      	movs	r0, #40	; 0x28
 8001d46:	f003 f8cf 	bl	8004ee8 <HAL_NVIC_EnableIRQ>

}
 8001d4a:	bf00      	nop
 8001d4c:	3740      	adds	r7, #64	; 0x40
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020000 	.word	0x40020000
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40020c00 	.word	0x40020c00
 8001d64:	40020800 	.word	0x40020800
 8001d68:	40022800 	.word	0x40022800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40020400 	.word	0x40020400

08001d74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// EXTI Line4 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_15) // If The INT Source Is EXTI Line4 (A15 Pin) BP2
    {

    }
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
		x_diable = 2*rxbuffer[1];
 8001d94:	4b23      	ldr	r3, [pc, #140]	; (8001e24 <HAL_UART_RxCpltCallback+0x98>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_UART_RxCpltCallback+0x9c>)
 8001da0:	801a      	strh	r2, [r3, #0]
		y_bompe = 2*rxbuffer[2];
 8001da2:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_UART_RxCpltCallback+0x98>)
 8001da4:	789b      	ldrb	r3, [r3, #2]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_UART_RxCpltCallback+0xa0>)
 8001dae:	801a      	strh	r2, [r3, #0]
		Game_Over = rxbuffer[3];
 8001db0:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <HAL_UART_RxCpltCallback+0x98>)
 8001db2:	78db      	ldrb	r3, [r3, #3]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <HAL_UART_RxCpltCallback+0xa4>)
 8001db8:	801a      	strh	r2, [r3, #0]
		if(rxbuffer[0]==0){
 8001dba:	4b1a      	ldr	r3, [pc, #104]	; (8001e24 <HAL_UART_RxCpltCallback+0x98>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d111      	bne.n	8001de6 <HAL_UART_RxCpltCallback+0x5a>
			HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 1);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc8:	481a      	ldr	r0, [pc, #104]	; (8001e34 <HAL_UART_RxCpltCallback+0xa8>)
 8001dca:	f004 fa37 	bl	800623c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 1);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dd4:	4817      	ldr	r0, [pc, #92]	; (8001e34 <HAL_UART_RxCpltCallback+0xa8>)
 8001dd6:	f004 fa31 	bl	800623c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001de0:	4814      	ldr	r0, [pc, #80]	; (8001e34 <HAL_UART_RxCpltCallback+0xa8>)
 8001de2:	f004 fa2b 	bl	800623c <HAL_GPIO_WritePin>
			//Bompe = 1;
		}
		if(rxbuffer[0]==1) {
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_UART_RxCpltCallback+0x98>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d111      	bne.n	8001e12 <HAL_UART_RxCpltCallback+0x86>
			HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 8001dee:	2200      	movs	r2, #0
 8001df0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001df4:	480f      	ldr	r0, [pc, #60]	; (8001e34 <HAL_UART_RxCpltCallback+0xa8>)
 8001df6:	f004 fa21 	bl	800623c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <HAL_UART_RxCpltCallback+0xa8>)
 8001e02:	f004 fa1b 	bl	800623c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <HAL_UART_RxCpltCallback+0xa8>)
 8001e0e:	f004 fa15 	bl	800623c <HAL_GPIO_WritePin>
			//Bompe = 0;
		}
		HAL_UART_Receive_IT(&huart7,(uint8_t *)rxbuffer,4);
 8001e12:	2204      	movs	r2, #4
 8001e14:	4903      	ldr	r1, [pc, #12]	; (8001e24 <HAL_UART_RxCpltCallback+0x98>)
 8001e16:	4808      	ldr	r0, [pc, #32]	; (8001e38 <HAL_UART_RxCpltCallback+0xac>)
 8001e18:	f007 ff98 	bl	8009d4c <HAL_UART_Receive_IT>
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20000994 	.word	0x20000994
 8001e28:	200009ac 	.word	0x200009ac
 8001e2c:	200009ae 	.word	0x200009ae
 8001e30:	200009b2 	.word	0x200009b2
 8001e34:	40021c00 	.word	0x40021c00
 8001e38:	200007ac 	.word	0x200007ac

08001e3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e44:	2001      	movs	r0, #1
 8001e46:	f009 fba8 	bl	800b59a <osDelay>
 8001e4a:	e7fb      	b.n	8001e44 <StartDefaultTask+0x8>

08001e4c <Task_diable>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_diable */
void Task_diable(void const * argument)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_diable */
	uint16_t y_diable = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	82bb      	strh	r3, [r7, #20]
	uint16_t old_x_diable=x_diable;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <Task_diable+0xa4>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	82fb      	strh	r3, [r7, #22]
	//uint16_t size_x_diable = 50;
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=3;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	613b      	str	r3, [r7, #16]
	// y_diable est fixe à 0
	uint16_t Message;
	HAL_GPIO_WritePin(LED13_GPIO_Port, LED11_Pin,1);
 8001e62:	2201      	movs	r2, #1
 8001e64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e68:	4822      	ldr	r0, [pc, #136]	; (8001ef4 <Task_diable+0xa8>)
 8001e6a:	f004 f9e7 	bl	800623c <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// task take mutex
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <Task_diable+0xac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f04f 31ff 	mov.w	r1, #4294967295
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00a f81e 	bl	800beb8 <xQueueSemaphoreTake>

	 BSP_LCD_SelectLayer(1);
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f000 fce7 	bl	8002850 <BSP_LCD_SelectLayer>
	 BSP_LCD_DrawBitmap(x_diable,y_diable,(uint8_t*)diableRGB565_bmp);
 8001e82:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <Task_diable+0xa4>)
 8001e84:	881b      	ldrh	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	8abb      	ldrh	r3, [r7, #20]
 8001e8a:	4a1c      	ldr	r2, [pc, #112]	; (8001efc <Task_diable+0xb0>)
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f000 feb7 	bl	8002c00 <BSP_LCD_DrawBitmap>

	 if(x_diable!=old_x_diable){
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <Task_diable+0xa4>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	8afa      	ldrh	r2, [r7, #22]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d00c      	beq.n	8001eb6 <Task_diable+0x6a>
		BSP_LCD_SelectLayer(1);
 8001e9c:	2001      	movs	r0, #1
 8001e9e:	f000 fcd7 	bl	8002850 <BSP_LCD_SelectLayer>
	 	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ea6:	f000 fce3 	bl	8002870 <BSP_LCD_SetTextColor>
	 	BSP_LCD_FillRect(old_x_diable, y_diable, 60, 50);
 8001eaa:	8ab9      	ldrh	r1, [r7, #20]
 8001eac:	8af8      	ldrh	r0, [r7, #22]
 8001eae:	2332      	movs	r3, #50	; 0x32
 8001eb0:	223c      	movs	r2, #60	; 0x3c
 8001eb2:	f000 ff57 	bl	8002d64 <BSP_LCD_FillRect>
	 	  }
	 old_x_diable=x_diable;
 8001eb6:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <Task_diable+0xa4>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	82fb      	strh	r3, [r7, #22]
	 // Envoie de position
	 Message = x_diable;
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <Task_diable+0xa4>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	817b      	strh	r3, [r7, #10]
	 xQueueSend(myQueueP2VHandle, &Message, 0);
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <Task_diable+0xb4>)
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	f107 010a 	add.w	r1, r7, #10
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f009 fe07 	bl	800bae0 <xQueueGenericSend>

	 xSemaphoreGive(MUTEXHandle);//task give mutex
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <Task_diable+0xac>)
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2100      	movs	r1, #0
 8001edc:	f009 fe00 	bl	800bae0 <xQueueGenericSend>
	 vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f00a fc66 	bl	800c7b8 <vTaskDelayUntil>
	xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// task take mutex
 8001eec:	e7bf      	b.n	8001e6e <Task_diable+0x22>
 8001eee:	bf00      	nop
 8001ef0:	200009ac 	.word	0x200009ac
 8001ef4:	40021c00 	.word	0x40021c00
 8001ef8:	20000990 	.word	0x20000990
 8001efc:	0800e904 	.word	0x0800e904
 8001f00:	20000984 	.word	0x20000984

08001f04 <Task_homme>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_homme */
void Task_homme(void const * argument)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08c      	sub	sp, #48	; 0x30
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_homme */
	uint16_t x_homme = 5;
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t y_homme = 220; // fixe en bas
 8001f10:	23dc      	movs	r3, #220	; 0xdc
 8001f12:	85fb      	strh	r3, [r7, #46]	; 0x2e
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=3;
 8001f14:	2303      	movs	r3, #3
 8001f16:	62bb      	str	r3, [r7, #40]	; 0x28

	uint32_t joystick_h;//, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
	sConfig.Channel = ADC_CHANNEL_8;
 8001f2e:	2308      	movs	r3, #8
 8001f30:	60fb      	str	r3, [r7, #12]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001f32:	f107 030c 	add.w	r3, r7, #12
 8001f36:	4619      	mov	r1, r3
 8001f38:	483f      	ldr	r0, [pc, #252]	; (8002038 <Task_homme+0x134>)
 8001f3a:	f002 fcb1 	bl	80048a0 <HAL_ADC_ConfigChannel>

	uint16_t missile = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	817b      	strh	r3, [r7, #10]
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// Task homme prend mutex
 8001f42:	4b3e      	ldr	r3, [pc, #248]	; (800203c <Task_homme+0x138>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f04f 31ff 	mov.w	r1, #4294967295
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f009 ffb4 	bl	800beb8 <xQueueSemaphoreTake>
  	  HAL_ADC_Start(&hadc1);
 8001f50:	483b      	ldr	r0, [pc, #236]	; (8002040 <Task_homme+0x13c>)
 8001f52:	f002 fb3f 	bl	80045d4 <HAL_ADC_Start>
  	  while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001f56:	bf00      	nop
 8001f58:	2164      	movs	r1, #100	; 0x64
 8001f5a:	4839      	ldr	r0, [pc, #228]	; (8002040 <Task_homme+0x13c>)
 8001f5c:	f002 fc08 	bl	8004770 <HAL_ADC_PollForConversion>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f8      	bne.n	8001f58 <Task_homme+0x54>
  	  joystick_h = HAL_ADC_GetValue(&hadc1);
 8001f66:	4836      	ldr	r0, [pc, #216]	; (8002040 <Task_homme+0x13c>)
 8001f68:	f002 fc8d 	bl	8004886 <HAL_ADC_GetValue>
 8001f6c:	6278      	str	r0, [r7, #36]	; 0x24

	  if((joystick_h>3000)&(x_homme>5)){
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001f74:	4293      	cmp	r3, r2
 8001f76:	bf8c      	ite	hi
 8001f78:	2301      	movhi	r3, #1
 8001f7a:	2300      	movls	r3, #0
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	bf8c      	ite	hi
 8001f84:	2301      	movhi	r3, #1
 8001f86:	2300      	movls	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <Task_homme+0x98>
		  x_homme--;
 8001f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f94:	3b01      	subs	r3, #1
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f9a:	e016      	b.n	8001fca <Task_homme+0xc6>
	  }
	  else if((joystick_h<1000)&(x_homme<445)){
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	bf94      	ite	ls
 8001fa6:	2301      	movls	r3, #1
 8001fa8:	2300      	movhi	r3, #0
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fae:	f5b3 7fde 	cmp.w	r3, #444	; 0x1bc
 8001fb2:	bf94      	ite	ls
 8001fb4:	2301      	movls	r3, #1
 8001fb6:	2300      	movhi	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4013      	ands	r3, r2
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <Task_homme+0xc6>
		  x_homme++;
 8001fc2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	847b      	strh	r3, [r7, #34]	; 0x22
	  }// end else if
	  pos_hommex = x_homme;//pour transmettre la position
 8001fca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <Task_homme+0x140>)
 8001fce:	801a      	strh	r2, [r3, #0]

	  BSP_LCD_SelectLayer(1);
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	f000 fc3d 	bl	8002850 <BSP_LCD_SelectLayer>
	  BSP_LCD_DrawBitmap(x_homme,y_homme,(uint8_t*)batmanRGB565_bmp);
 8001fd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fd8:	4618      	mov	r0, r3
 8001fda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <Task_homme+0x144>)
 8001fde:	4619      	mov	r1, r3
 8001fe0:	f000 fe0e 	bl	8002c00 <BSP_LCD_DrawBitmap>
	  xQueueSend(myQueueHommePosHandle, &x_homme, 0);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <Task_homme+0x148>)
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8001fec:	2300      	movs	r3, #0
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f009 fd76 	bl	800bae0 <xQueueGenericSend>
	  if(HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin)==0){//tir
 8001ff4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ff8:	4815      	ldr	r0, [pc, #84]	; (8002050 <Task_homme+0x14c>)
 8001ffa:	f004 f907 	bl	800620c <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <Task_homme+0x104>
		  missile =1;
 8002004:	2301      	movs	r3, #1
 8002006:	817b      	strh	r3, [r7, #10]
	  }
	  xQueueSend(myQueueU2HHandle, &missile, 0);
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <Task_homme+0x150>)
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	f107 010a 	add.w	r1, r7, #10
 8002010:	2300      	movs	r3, #0
 8002012:	2200      	movs	r2, #0
 8002014:	f009 fd64 	bl	800bae0 <xQueueGenericSend>
	  missile = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	817b      	strh	r3, [r7, #10]
	  xSemaphoreGive(MUTEXHandle); /* La tache homme rend le mutex */
 800201c:	4b07      	ldr	r3, [pc, #28]	; (800203c <Task_homme+0x138>)
 800201e:	6818      	ldr	r0, [r3, #0]
 8002020:	2300      	movs	r3, #0
 8002022:	2200      	movs	r2, #0
 8002024:	2100      	movs	r1, #0
 8002026:	f009 fd5b 	bl	800bae0 <xQueueGenericSend>
	  vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 800202a:	f107 031c 	add.w	r3, r7, #28
 800202e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002030:	4618      	mov	r0, r3
 8002032:	f00a fbc1 	bl	800c7b8 <vTaskDelayUntil>
	  xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// Task homme prend mutex
 8002036:	e784      	b.n	8001f42 <Task_homme+0x3e>
 8002038:	200003d0 	.word	0x200003d0
 800203c:	20000990 	.word	0x20000990
 8002040:	20000388 	.word	0x20000388
 8002044:	200009aa 	.word	0x200009aa
 8002048:	08010134 	.word	0x08010134
 800204c:	2000098c 	.word	0x2000098c
 8002050:	40020000 	.word	0x40020000
 8002054:	20000988 	.word	0x20000988

08002058 <Task_Transmit_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Transmit_data */
void Task_Transmit_data(void const * argument)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Transmit_data */
  /* Infinite loop */
  for(;;)
  {
	  txbuffer[0]=HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin);
 8002060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002064:	480e      	ldr	r0, [pc, #56]	; (80020a0 <Task_Transmit_data+0x48>)
 8002066:	f004 f8d1 	bl	800620c <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	461a      	mov	r2, r3
 800206e:	4b0d      	ldr	r3, [pc, #52]	; (80020a4 <Task_Transmit_data+0x4c>)
 8002070:	701a      	strb	r2, [r3, #0]
	  // transmit pos Batman
	  txbuffer[1]=pos_hommex/2;
 8002072:	4b0d      	ldr	r3, [pc, #52]	; (80020a8 <Task_Transmit_data+0x50>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	b29b      	uxth	r3, r3
 800207a:	b2da      	uxtb	r2, r3
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <Task_Transmit_data+0x4c>)
 800207e:	705a      	strb	r2, [r3, #1]
	  txbuffer[2]=pos_missiley/2;
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <Task_Transmit_data+0x54>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	085b      	lsrs	r3, r3, #1
 8002086:	b29b      	uxth	r3, r3
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <Task_Transmit_data+0x4c>)
 800208c:	709a      	strb	r2, [r3, #2]
	  HAL_UART_Transmit_IT(&huart7,(uint8_t *)txbuffer,3);
 800208e:	2203      	movs	r2, #3
 8002090:	4904      	ldr	r1, [pc, #16]	; (80020a4 <Task_Transmit_data+0x4c>)
 8002092:	4807      	ldr	r0, [pc, #28]	; (80020b0 <Task_Transmit_data+0x58>)
 8002094:	f007 fdec 	bl	8009c70 <HAL_UART_Transmit_IT>
	  osDelay(100);
 8002098:	2064      	movs	r0, #100	; 0x64
 800209a:	f009 fa7e 	bl	800b59a <osDelay>
	  txbuffer[0]=HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin);
 800209e:	e7df      	b.n	8002060 <Task_Transmit_data+0x8>
 80020a0:	40020000 	.word	0x40020000
 80020a4:	200009a0 	.word	0x200009a0
 80020a8:	200009aa 	.word	0x200009aa
 80020ac:	200009b0 	.word	0x200009b0
 80020b0:	200007ac 	.word	0x200007ac

080020b4 <Task_missiles>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_missiles */
void Task_missiles(void const * argument)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b096      	sub	sp, #88	; 0x58
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_missiles */
	uint16_t x_bompe = x_diable;
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <Task_missiles+0x1b4>)
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	uint16_t old_x_bompe = x_bompe;
 80020c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80020c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t old_y_bompe = y_bompe;
 80020cc:	4b67      	ldr	r3, [pc, #412]	; (800226c <Task_missiles+0x1b8>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	uint16_t x_missile = 5;
 80020d4:	2305      	movs	r3, #5
 80020d6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t y_missile = 250;
 80020da:	23fa      	movs	r3, #250	; 0xfa
 80020dc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=2;
 80020e0:	2302      	movs	r3, #2
 80020e2:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint16_t missile;
	uint16_t x_homme;
	char text[50]={};
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	f107 0310 	add.w	r3, r7, #16
 80020ec:	222e      	movs	r2, #46	; 0x2e
 80020ee:	2100      	movs	r1, #0
 80020f0:	4618      	mov	r0, r3
 80020f2:	f00b fe91 	bl	800de18 <memset>
  /* Infinite loop */
  for(;;)
  {
	 xQueueReceive(myQueueU2HHandle, &missile, 10);
 80020f6:	4b5e      	ldr	r3, [pc, #376]	; (8002270 <Task_missiles+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f107 0142 	add.w	r1, r7, #66	; 0x42
 80020fe:	220a      	movs	r2, #10
 8002100:	4618      	mov	r0, r3
 8002102:	f009 fdf3 	bl	800bcec <xQueueReceive>
	 xQueueReceive(myQueueHommePosHandle, &x_homme, 10);
 8002106:	4b5b      	ldr	r3, [pc, #364]	; (8002274 <Task_missiles+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800210e:	220a      	movs	r2, #10
 8002110:	4618      	mov	r0, r3
 8002112:	f009 fdeb 	bl	800bcec <xQueueReceive>

	 if(Game_Over==2){
 8002116:	4b58      	ldr	r3, [pc, #352]	; (8002278 <Task_missiles+0x1c4>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d11c      	bne.n	8002158 <Task_missiles+0xa4>
		 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800211e:	4857      	ldr	r0, [pc, #348]	; (800227c <Task_missiles+0x1c8>)
 8002120:	f000 fba6 	bl	8002870 <BSP_LCD_SetTextColor>
		 sprintf(text,"YOU WIN :)");
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	4955      	ldr	r1, [pc, #340]	; (8002280 <Task_missiles+0x1cc>)
 800212a:	4618      	mov	r0, r3
 800212c:	f00b ff8a 	bl	800e044 <siprintf>
		 BSP_LCD_DisplayStringAt(0, 136,(uint8_t*) text, CENTER_MODE);
 8002130:	f107 020c 	add.w	r2, r7, #12
 8002134:	2301      	movs	r3, #1
 8002136:	2188      	movs	r1, #136	; 0x88
 8002138:	2000      	movs	r0, #0
 800213a:	f000 fc51 	bl	80029e0 <BSP_LCD_DisplayStringAt>
		 sprintf(text,"Press RESET to restart");
 800213e:	f107 030c 	add.w	r3, r7, #12
 8002142:	4950      	ldr	r1, [pc, #320]	; (8002284 <Task_missiles+0x1d0>)
 8002144:	4618      	mov	r0, r3
 8002146:	f00b ff7d 	bl	800e044 <siprintf>
		 BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, CENTER_MODE);
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	2301      	movs	r3, #1
 8002150:	2196      	movs	r1, #150	; 0x96
 8002152:	2000      	movs	r0, #0
 8002154:	f000 fc44 	bl	80029e0 <BSP_LCD_DisplayStringAt>
	 }
	 if(Game_Over==1){
 8002158:	4b47      	ldr	r3, [pc, #284]	; (8002278 <Task_missiles+0x1c4>)
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d11c      	bne.n	800219a <Task_missiles+0xe6>
		 BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002160:	4849      	ldr	r0, [pc, #292]	; (8002288 <Task_missiles+0x1d4>)
 8002162:	f000 fb85 	bl	8002870 <BSP_LCD_SetTextColor>
		 sprintf(text,"YOU LOSS ):");
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	4948      	ldr	r1, [pc, #288]	; (800228c <Task_missiles+0x1d8>)
 800216c:	4618      	mov	r0, r3
 800216e:	f00b ff69 	bl	800e044 <siprintf>
		 BSP_LCD_DisplayStringAt(0, 136,(uint8_t*) text, CENTER_MODE);
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	2301      	movs	r3, #1
 8002178:	2188      	movs	r1, #136	; 0x88
 800217a:	2000      	movs	r0, #0
 800217c:	f000 fc30 	bl	80029e0 <BSP_LCD_DisplayStringAt>
		 sprintf(text,"Press RESET to restart");
 8002180:	f107 030c 	add.w	r3, r7, #12
 8002184:	493f      	ldr	r1, [pc, #252]	; (8002284 <Task_missiles+0x1d0>)
 8002186:	4618      	mov	r0, r3
 8002188:	f00b ff5c 	bl	800e044 <siprintf>
		 BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, CENTER_MODE);
 800218c:	f107 020c 	add.w	r2, r7, #12
 8002190:	2301      	movs	r3, #1
 8002192:	2196      	movs	r1, #150	; 0x96
 8002194:	2000      	movs	r0, #0
 8002196:	f000 fc23 	bl	80029e0 <BSP_LCD_DisplayStringAt>
	 }

	 // defence
	 xQueueReceive(myQueueU2HHandle, &missile, 10);
 800219a:	4b35      	ldr	r3, [pc, #212]	; (8002270 <Task_missiles+0x1bc>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f107 0142 	add.w	r1, r7, #66	; 0x42
 80021a2:	220a      	movs	r2, #10
 80021a4:	4618      	mov	r0, r3
 80021a6:	f009 fda1 	bl	800bcec <xQueueReceive>
	 if(missile){
 80021aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <Task_missiles+0x118>
		 y_missile--;
 80021b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021b6:	3b01      	subs	r3, #1
 80021b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 	 xQueueReceive(myQueueHommePosHandle, &x_missile, 10);
 80021bc:	4b2d      	ldr	r3, [pc, #180]	; (8002274 <Task_missiles+0x1c0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f107 014a 	add.w	r1, r7, #74	; 0x4a
 80021c4:	220a      	movs	r2, #10
 80021c6:	4618      	mov	r0, r3
 80021c8:	f009 fd90 	bl	800bcec <xQueueReceive>
	 }// end if
	 if(y_missile<10){
 80021cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021d0:	2b09      	cmp	r3, #9
 80021d2:	d802      	bhi.n	80021da <Task_missiles+0x126>
		 y_missile=250;
 80021d4:	23fa      	movs	r3, #250	; 0xfa
 80021d6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 }
	 pos_missiley = y_missile; //transmission série
 80021da:	4a2d      	ldr	r2, [pc, #180]	; (8002290 <Task_missiles+0x1dc>)
 80021dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021e0:	8013      	strh	r3, [r2, #0]

	 x_bompe = x_diable;
 80021e2:	4b21      	ldr	r3, [pc, #132]	; (8002268 <Task_missiles+0x1b4>)
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	 BSP_LCD_SelectLayer(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 fb30 	bl	8002850 <BSP_LCD_SelectLayer>
	 BSP_LCD_DrawBitmap(x_missile,y_missile,(uint8_t*)missileRGB565_bmp);
 80021f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80021f4:	4618      	mov	r0, r3
 80021f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80021fa:	4a26      	ldr	r2, [pc, #152]	; (8002294 <Task_missiles+0x1e0>)
 80021fc:	4619      	mov	r1, r3
 80021fe:	f000 fcff 	bl	8002c00 <BSP_LCD_DrawBitmap>
	 BSP_LCD_DrawBitmap(x_bompe,y_bompe,(uint8_t*)missile_diableRGB565_bmp);
 8002202:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002206:	4a19      	ldr	r2, [pc, #100]	; (800226c <Task_missiles+0x1b8>)
 8002208:	8812      	ldrh	r2, [r2, #0]
 800220a:	4611      	mov	r1, r2
 800220c:	4a22      	ldr	r2, [pc, #136]	; (8002298 <Task_missiles+0x1e4>)
 800220e:	4618      	mov	r0, r3
 8002210:	f000 fcf6 	bl	8002c00 <BSP_LCD_DrawBitmap>
	 if((old_x_bompe!=x_bompe)||(old_y_bompe != y_bompe)){
 8002214:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8002218:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800221c:	429a      	cmp	r2, r3
 800221e:	d105      	bne.n	800222c <Task_missiles+0x178>
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <Task_missiles+0x1b8>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8002228:	429a      	cmp	r2, r3
 800222a:	d00e      	beq.n	800224a <Task_missiles+0x196>
		 BSP_LCD_SelectLayer(1);
 800222c:	2001      	movs	r0, #1
 800222e:	f000 fb0f 	bl	8002850 <BSP_LCD_SelectLayer>
		 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002232:	f04f 30ff 	mov.w	r0, #4294967295
 8002236:	f000 fb1b 	bl	8002870 <BSP_LCD_SetTextColor>
		 BSP_LCD_FillRect(old_x_bompe, old_y_bompe, 20, 30);
 800223a:	f8b7 1054 	ldrh.w	r1, [r7, #84]	; 0x54
 800223e:	f8b7 0056 	ldrh.w	r0, [r7, #86]	; 0x56
 8002242:	231e      	movs	r3, #30
 8002244:	2214      	movs	r2, #20
 8002246:	f000 fd8d 	bl	8002d64 <BSP_LCD_FillRect>
	 }
	 old_x_bompe = x_bompe;
 800224a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800224e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	 old_y_bompe = y_bompe;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <Task_missiles+0x1b8>)
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	 vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 800225a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800225e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002260:	4618      	mov	r0, r3
 8002262:	f00a faa9 	bl	800c7b8 <vTaskDelayUntil>
	 xQueueReceive(myQueueU2HHandle, &missile, 10);
 8002266:	e746      	b.n	80020f6 <Task_missiles+0x42>
 8002268:	200009ac 	.word	0x200009ac
 800226c:	200009ae 	.word	0x200009ae
 8002270:	20000988 	.word	0x20000988
 8002274:	2000098c 	.word	0x2000098c
 8002278:	200009b2 	.word	0x200009b2
 800227c:	ff0000ff 	.word	0xff0000ff
 8002280:	0800e8cc 	.word	0x0800e8cc
 8002284:	0800e8d8 	.word	0x0800e8d8
 8002288:	ffff0000 	.word	0xffff0000
 800228c:	0800e8f0 	.word	0x0800e8f0
 8002290:	200009b0 	.word	0x200009b0
 8002294:	080112f4 	.word	0x080112f4
 8002298:	08011054 	.word	0x08011054

0800229c <Task_Game_Over>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Game_Over */
void Task_Game_Over(void const * argument)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Game_Over */
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=2;
 80022a4:	2302      	movs	r3, #2
 80022a6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(Game_Over==1){
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <Task_Game_Over+0x40>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d104      	bne.n	80022ba <Task_Game_Over+0x1e>
		  vTaskDelete(myTask03Handle);// delete Task homme
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <Task_Game_Over+0x44>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f00a f9ed 	bl	800c694 <vTaskDelete>
	  }
	  if(Game_Over==2){
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <Task_Game_Over+0x40>)
 80022bc:	881b      	ldrh	r3, [r3, #0]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d104      	bne.n	80022cc <Task_Game_Over+0x30>
		  vTaskDelete(Task_1Handle);// delete Task Diable
 80022c2:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <Task_Game_Over+0x48>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00a f9e4 	bl	800c694 <vTaskDelete>
	  }
	  vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	68f9      	ldr	r1, [r7, #12]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f00a fa70 	bl	800c7b8 <vTaskDelayUntil>
	  if(Game_Over==1){
 80022d8:	e7e6      	b.n	80022a8 <Task_Game_Over+0xc>
 80022da:	bf00      	nop
 80022dc:	200009b2 	.word	0x200009b2
 80022e0:	20000974 	.word	0x20000974
 80022e4:	20000970 	.word	0x20000970

080022e8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a04      	ldr	r2, [pc, #16]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022fa:	f002 f8e3 	bl	80044c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40001000 	.word	0x40001000

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	e7fe      	b.n	8002314 <Error_Handler+0x8>
	...

08002318 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08c      	sub	sp, #48	; 0x30
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a51      	ldr	r2, [pc, #324]	; (8002468 <I2Cx_MspInit+0x150>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d14d      	bne.n	80023c4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002328:	4b50      	ldr	r3, [pc, #320]	; (800246c <I2Cx_MspInit+0x154>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a4f      	ldr	r2, [pc, #316]	; (800246c <I2Cx_MspInit+0x154>)
 800232e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002332:	6313      	str	r3, [r2, #48]	; 0x30
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <I2Cx_MspInit+0x154>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800233c:	61bb      	str	r3, [r7, #24]
 800233e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002344:	2312      	movs	r3, #18
 8002346:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800234c:	2302      	movs	r3, #2
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002350:	2304      	movs	r3, #4
 8002352:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002354:	f107 031c 	add.w	r3, r7, #28
 8002358:	4619      	mov	r1, r3
 800235a:	4845      	ldr	r0, [pc, #276]	; (8002470 <I2Cx_MspInit+0x158>)
 800235c:	f003 fc9e 	bl	8005c9c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4840      	ldr	r0, [pc, #256]	; (8002470 <I2Cx_MspInit+0x158>)
 800236e:	f003 fc95 	bl	8005c9c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <I2Cx_MspInit+0x154>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a3d      	ldr	r2, [pc, #244]	; (800246c <I2Cx_MspInit+0x154>)
 8002378:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <I2Cx_MspInit+0x154>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800238a:	4b38      	ldr	r3, [pc, #224]	; (800246c <I2Cx_MspInit+0x154>)
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4a37      	ldr	r2, [pc, #220]	; (800246c <I2Cx_MspInit+0x154>)
 8002390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002394:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002396:	4b35      	ldr	r3, [pc, #212]	; (800246c <I2Cx_MspInit+0x154>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <I2Cx_MspInit+0x154>)
 800239c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023a0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80023a2:	2200      	movs	r2, #0
 80023a4:	210f      	movs	r1, #15
 80023a6:	2048      	movs	r0, #72	; 0x48
 80023a8:	f002 fd82 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80023ac:	2048      	movs	r0, #72	; 0x48
 80023ae:	f002 fd9b 	bl	8004ee8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80023b2:	2200      	movs	r2, #0
 80023b4:	210f      	movs	r1, #15
 80023b6:	2049      	movs	r0, #73	; 0x49
 80023b8:	f002 fd7a 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80023bc:	2049      	movs	r0, #73	; 0x49
 80023be:	f002 fd93 	bl	8004ee8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80023c2:	e04d      	b.n	8002460 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <I2Cx_MspInit+0x154>)
 80023c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c8:	4a28      	ldr	r2, [pc, #160]	; (800246c <I2Cx_MspInit+0x154>)
 80023ca:	f043 0302 	orr.w	r3, r3, #2
 80023ce:	6313      	str	r3, [r2, #48]	; 0x30
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <I2Cx_MspInit+0x154>)
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80023dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023e2:	2312      	movs	r3, #18
 80023e4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023ea:	2302      	movs	r3, #2
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80023ee:	2304      	movs	r3, #4
 80023f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	481e      	ldr	r0, [pc, #120]	; (8002474 <I2Cx_MspInit+0x15c>)
 80023fa:	f003 fc4f 	bl	8005c9c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80023fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002402:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002404:	f107 031c 	add.w	r3, r7, #28
 8002408:	4619      	mov	r1, r3
 800240a:	481a      	ldr	r0, [pc, #104]	; (8002474 <I2Cx_MspInit+0x15c>)
 800240c:	f003 fc46 	bl	8005c9c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002410:	4b16      	ldr	r3, [pc, #88]	; (800246c <I2Cx_MspInit+0x154>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	4a15      	ldr	r2, [pc, #84]	; (800246c <I2Cx_MspInit+0x154>)
 8002416:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800241a:	6413      	str	r3, [r2, #64]	; 0x40
 800241c:	4b13      	ldr	r3, [pc, #76]	; (800246c <I2Cx_MspInit+0x154>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002428:	4b10      	ldr	r3, [pc, #64]	; (800246c <I2Cx_MspInit+0x154>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a0f      	ldr	r2, [pc, #60]	; (800246c <I2Cx_MspInit+0x154>)
 800242e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002432:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <I2Cx_MspInit+0x154>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a0c      	ldr	r2, [pc, #48]	; (800246c <I2Cx_MspInit+0x154>)
 800243a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800243e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	210f      	movs	r1, #15
 8002444:	201f      	movs	r0, #31
 8002446:	f002 fd33 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800244a:	201f      	movs	r0, #31
 800244c:	f002 fd4c 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002450:	2200      	movs	r2, #0
 8002452:	210f      	movs	r1, #15
 8002454:	2020      	movs	r0, #32
 8002456:	f002 fd2b 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800245a:	2020      	movs	r0, #32
 800245c:	f002 fd44 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
}
 8002460:	bf00      	nop
 8002462:	3730      	adds	r7, #48	; 0x30
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200009b4 	.word	0x200009b4
 800246c:	40023800 	.word	0x40023800
 8002470:	40021c00 	.word	0x40021c00
 8002474:	40020400 	.word	0x40020400

08002478 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f004 f9fb 	bl	800687c <HAL_I2C_GetState>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d125      	bne.n	80024d8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <I2Cx_Init+0x68>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d103      	bne.n	800249c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <I2Cx_Init+0x6c>)
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	e002      	b.n	80024a2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <I2Cx_Init+0x70>)
 80024a0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a11      	ldr	r2, [pc, #68]	; (80024ec <I2Cx_Init+0x74>)
 80024a6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2201      	movs	r2, #1
 80024b2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7ff ff23 	bl	8002318 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f003 fee4 	bl	80062a0 <HAL_I2C_Init>
  }
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	200009b4 	.word	0x200009b4
 80024e4:	40005c00 	.word	0x40005c00
 80024e8:	40005400 	.word	0x40005400
 80024ec:	40912732 	.word	0x40912732

080024f0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af04      	add	r7, sp, #16
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	4608      	mov	r0, r1
 80024fa:	4611      	mov	r1, r2
 80024fc:	461a      	mov	r2, r3
 80024fe:	4603      	mov	r3, r0
 8002500:	72fb      	strb	r3, [r7, #11]
 8002502:	460b      	mov	r3, r1
 8002504:	813b      	strh	r3, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	b299      	uxth	r1, r3
 8002512:	88f8      	ldrh	r0, [r7, #6]
 8002514:	893a      	ldrh	r2, [r7, #8]
 8002516:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800251a:	9302      	str	r3, [sp, #8]
 800251c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800251e:	9301      	str	r3, [sp, #4]
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4603      	mov	r3, r0
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f004 f88e 	bl	8006648 <HAL_I2C_Mem_Read>
 800252c:	4603      	mov	r3, r0
 800252e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002530:	7dfb      	ldrb	r3, [r7, #23]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002536:	7afb      	ldrb	r3, [r7, #11]
 8002538:	4619      	mov	r1, r3
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f832 	bl	80025a4 <I2Cx_Error>
  }
  return status;    
 8002540:	7dfb      	ldrb	r3, [r7, #23]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b08a      	sub	sp, #40	; 0x28
 800254e:	af04      	add	r7, sp, #16
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	4608      	mov	r0, r1
 8002554:	4611      	mov	r1, r2
 8002556:	461a      	mov	r2, r3
 8002558:	4603      	mov	r3, r0
 800255a:	72fb      	strb	r3, [r7, #11]
 800255c:	460b      	mov	r3, r1
 800255e:	813b      	strh	r3, [r7, #8]
 8002560:	4613      	mov	r3, r2
 8002562:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002568:	7afb      	ldrb	r3, [r7, #11]
 800256a:	b299      	uxth	r1, r3
 800256c:	88f8      	ldrh	r0, [r7, #6]
 800256e:	893a      	ldrh	r2, [r7, #8]
 8002570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002574:	9302      	str	r3, [sp, #8]
 8002576:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4603      	mov	r3, r0
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f003 ff4d 	bl	8006420 <HAL_I2C_Mem_Write>
 8002586:	4603      	mov	r3, r0
 8002588:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800258a:	7dfb      	ldrb	r3, [r7, #23]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d004      	beq.n	800259a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	4619      	mov	r1, r3
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f000 f805 	bl	80025a4 <I2Cx_Error>
  }
  return status;
 800259a:	7dfb      	ldrb	r3, [r7, #23]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f003 ff05 	bl	80063c0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f7ff ff5e 	bl	8002478 <I2Cx_Init>
}
 80025bc:	bf00      	nop
 80025be:	3708      	adds	r7, #8
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <TS_IO_Init+0x10>)
 80025ca:	f7ff ff55 	bl	8002478 <I2Cx_Init>
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	200009b4 	.word	0x200009b4

080025d8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af02      	add	r7, sp, #8
 80025de:	4603      	mov	r3, r0
 80025e0:	71fb      	strb	r3, [r7, #7]
 80025e2:	460b      	mov	r3, r1
 80025e4:	71bb      	strb	r3, [r7, #6]
 80025e6:	4613      	mov	r3, r2
 80025e8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	79f9      	ldrb	r1, [r7, #7]
 80025f0:	2301      	movs	r3, #1
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	1d7b      	adds	r3, r7, #5
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	2301      	movs	r3, #1
 80025fa:	4803      	ldr	r0, [pc, #12]	; (8002608 <TS_IO_Write+0x30>)
 80025fc:	f7ff ffa5 	bl	800254a <I2Cx_WriteMultiple>
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200009b4 	.word	0x200009b4

0800260c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	4603      	mov	r3, r0
 8002614:	460a      	mov	r2, r1
 8002616:	71fb      	strb	r3, [r7, #7]
 8002618:	4613      	mov	r3, r2
 800261a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002620:	79bb      	ldrb	r3, [r7, #6]
 8002622:	b29a      	uxth	r2, r3
 8002624:	79f9      	ldrb	r1, [r7, #7]
 8002626:	2301      	movs	r3, #1
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	f107 030f 	add.w	r3, r7, #15
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	2301      	movs	r3, #1
 8002632:	4804      	ldr	r0, [pc, #16]	; (8002644 <TS_IO_Read+0x38>)
 8002634:	f7ff ff5c 	bl	80024f0 <I2Cx_ReadMultiple>

  return read_value;
 8002638:	7bfb      	ldrb	r3, [r7, #15]
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	200009b4 	.word	0x200009b4

08002648 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f001 ff57 	bl	8004504 <HAL_Delay>
}
 8002656:	bf00      	nop
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002664:	4b31      	ldr	r3, [pc, #196]	; (800272c <BSP_LCD_Init+0xcc>)
 8002666:	2228      	movs	r2, #40	; 0x28
 8002668:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800266a:	4b30      	ldr	r3, [pc, #192]	; (800272c <BSP_LCD_Init+0xcc>)
 800266c:	2209      	movs	r2, #9
 800266e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002670:	4b2e      	ldr	r3, [pc, #184]	; (800272c <BSP_LCD_Init+0xcc>)
 8002672:	2235      	movs	r2, #53	; 0x35
 8002674:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002676:	4b2d      	ldr	r3, [pc, #180]	; (800272c <BSP_LCD_Init+0xcc>)
 8002678:	220b      	movs	r2, #11
 800267a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800267c:	4b2b      	ldr	r3, [pc, #172]	; (800272c <BSP_LCD_Init+0xcc>)
 800267e:	f240 121b 	movw	r2, #283	; 0x11b
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002684:	4b29      	ldr	r3, [pc, #164]	; (800272c <BSP_LCD_Init+0xcc>)
 8002686:	f240 2215 	movw	r2, #533	; 0x215
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <BSP_LCD_Init+0xcc>)
 800268e:	f240 121d 	movw	r2, #285	; 0x11d
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002694:	4b25      	ldr	r3, [pc, #148]	; (800272c <BSP_LCD_Init+0xcc>)
 8002696:	f240 2235 	movw	r2, #565	; 0x235
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800269c:	2100      	movs	r1, #0
 800269e:	4823      	ldr	r0, [pc, #140]	; (800272c <BSP_LCD_Init+0xcc>)
 80026a0:	f000 fcd2 	bl	8003048 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80026a4:	4b21      	ldr	r3, [pc, #132]	; (800272c <BSP_LCD_Init+0xcc>)
 80026a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026aa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80026ac:	4b1f      	ldr	r3, [pc, #124]	; (800272c <BSP_LCD_Init+0xcc>)
 80026ae:	f44f 7288 	mov.w	r2, #272	; 0x110
 80026b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <BSP_LCD_Init+0xcc>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80026bc:	4b1b      	ldr	r3, [pc, #108]	; (800272c <BSP_LCD_Init+0xcc>)
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <BSP_LCD_Init+0xcc>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <BSP_LCD_Init+0xcc>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <BSP_LCD_Init+0xcc>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <BSP_LCD_Init+0xcc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <BSP_LCD_Init+0xcc>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80026e4:	4b11      	ldr	r3, [pc, #68]	; (800272c <BSP_LCD_Init+0xcc>)
 80026e6:	4a12      	ldr	r2, [pc, #72]	; (8002730 <BSP_LCD_Init+0xd0>)
 80026e8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80026ea:	4810      	ldr	r0, [pc, #64]	; (800272c <BSP_LCD_Init+0xcc>)
 80026ec:	f004 fde2 	bl	80072b4 <HAL_LTDC_GetState>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80026f6:	2100      	movs	r1, #0
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <BSP_LCD_Init+0xcc>)
 80026fa:	f000 fbcb 	bl	8002e94 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80026fe:	480b      	ldr	r0, [pc, #44]	; (800272c <BSP_LCD_Init+0xcc>)
 8002700:	f004 fc08 	bl	8006f14 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002704:	2201      	movs	r2, #1
 8002706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800270a:	480a      	ldr	r0, [pc, #40]	; (8002734 <BSP_LCD_Init+0xd4>)
 800270c:	f003 fd96 	bl	800623c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002710:	2201      	movs	r2, #1
 8002712:	2108      	movs	r1, #8
 8002714:	4808      	ldr	r0, [pc, #32]	; (8002738 <BSP_LCD_Init+0xd8>)
 8002716:	f003 fd91 	bl	800623c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800271a:	f000 fdf9 	bl	8003310 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800271e:	4807      	ldr	r0, [pc, #28]	; (800273c <BSP_LCD_Init+0xdc>)
 8002720:	f000 f8d8 	bl	80028d4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000a00 	.word	0x20000a00
 8002730:	40016800 	.word	0x40016800
 8002734:	40022000 	.word	0x40022000
 8002738:	40022800 	.word	0x40022800
 800273c:	20000028 	.word	0x20000028

08002740 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <BSP_LCD_GetXSize+0x20>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a06      	ldr	r2, [pc, #24]	; (8002764 <BSP_LCD_GetXSize+0x24>)
 800274a:	2134      	movs	r1, #52	; 0x34
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	3360      	adds	r3, #96	; 0x60
 8002754:	681b      	ldr	r3, [r3, #0]
}
 8002756:	4618      	mov	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	20000ae8 	.word	0x20000ae8
 8002764:	20000a00 	.word	0x20000a00

08002768 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <BSP_LCD_GetYSize+0x20>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a06      	ldr	r2, [pc, #24]	; (800278c <BSP_LCD_GetYSize+0x24>)
 8002772:	2134      	movs	r1, #52	; 0x34
 8002774:	fb01 f303 	mul.w	r3, r1, r3
 8002778:	4413      	add	r3, r2
 800277a:	3364      	adds	r3, #100	; 0x64
 800277c:	681b      	ldr	r3, [r3, #0]
}
 800277e:	4618      	mov	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	20000ae8 	.word	0x20000ae8
 800278c:	20000a00 	.word	0x20000a00

08002790 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002790:	b580      	push	{r7, lr}
 8002792:	b090      	sub	sp, #64	; 0x40
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80027a0:	f7ff ffce 	bl	8002740 <BSP_LCD_GetXSize>
 80027a4:	4603      	mov	r3, r0
 80027a6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80027ac:	f7ff ffdc 	bl	8002768 <BSP_LCD_GetYSize>
 80027b0:	4603      	mov	r3, r0
 80027b2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80027bc:	23ff      	movs	r3, #255	; 0xff
 80027be:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80027c4:	2300      	movs	r3, #0
 80027c6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80027d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80027dc:	2307      	movs	r3, #7
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80027e0:	f7ff ffae 	bl	8002740 <BSP_LCD_GetXSize>
 80027e4:	4603      	mov	r3, r0
 80027e6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80027e8:	f7ff ffbe 	bl	8002768 <BSP_LCD_GetYSize>
 80027ec:	4603      	mov	r3, r0
 80027ee:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80027f0:	88fa      	ldrh	r2, [r7, #6]
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	4619      	mov	r1, r3
 80027f8:	4812      	ldr	r0, [pc, #72]	; (8002844 <BSP_LCD_LayerDefaultInit+0xb4>)
 80027fa:	f004 fd1d 	bl	8007238 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80027fe:	88fa      	ldrh	r2, [r7, #6]
 8002800:	4911      	ldr	r1, [pc, #68]	; (8002848 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002802:	4613      	mov	r3, r2
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3304      	adds	r3, #4
 800280e:	f04f 32ff 	mov.w	r2, #4294967295
 8002812:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002814:	88fa      	ldrh	r2, [r7, #6]
 8002816:	490c      	ldr	r1, [pc, #48]	; (8002848 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	3308      	adds	r3, #8
 8002824:	4a09      	ldr	r2, [pc, #36]	; (800284c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002826:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002828:	88fa      	ldrh	r2, [r7, #6]
 800282a:	4907      	ldr	r1, [pc, #28]	; (8002848 <BSP_LCD_LayerDefaultInit+0xb8>)
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	440b      	add	r3, r1
 8002836:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800283a:	601a      	str	r2, [r3, #0]
}
 800283c:	bf00      	nop
 800283e:	3740      	adds	r7, #64	; 0x40
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20000a00 	.word	0x20000a00
 8002848:	20000aec 	.word	0x20000aec
 800284c:	20000028 	.word	0x20000028

08002850 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <BSP_LCD_SelectLayer+0x1c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
} 
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000ae8 	.word	0x20000ae8

08002870 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <BSP_LCD_SetTextColor+0x28>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <BSP_LCD_SetTextColor+0x2c>)
 800287e:	4613      	mov	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	440b      	add	r3, r1
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	20000ae8 	.word	0x20000ae8
 800289c:	20000aec 	.word	0x20000aec

080028a0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <BSP_LCD_SetBackColor+0x2c>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4908      	ldr	r1, [pc, #32]	; (80028d0 <BSP_LCD_SetBackColor+0x30>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3304      	adds	r3, #4
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000ae8 	.word	0x20000ae8
 80028d0:	20000aec 	.word	0x20000aec

080028d4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <BSP_LCD_SetFont+0x2c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4908      	ldr	r1, [pc, #32]	; (8002904 <BSP_LCD_SetFont+0x30>)
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	3308      	adds	r3, #8
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000ae8 	.word	0x20000ae8
 8002904:	20000aec 	.word	0x20000aec

08002908 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	b085      	sub	sp, #20
 800290c:	af02      	add	r7, sp, #8
 800290e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002910:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <BSP_LCD_Clear+0x48>)
 8002912:	681c      	ldr	r4, [r3, #0]
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <BSP_LCD_Clear+0x48>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <BSP_LCD_Clear+0x4c>)
 800291a:	2134      	movs	r1, #52	; 0x34
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	4413      	add	r3, r2
 8002922:	335c      	adds	r3, #92	; 0x5c
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	461e      	mov	r6, r3
 8002928:	f7ff ff0a 	bl	8002740 <BSP_LCD_GetXSize>
 800292c:	4605      	mov	r5, r0
 800292e:	f7ff ff1b 	bl	8002768 <BSP_LCD_GetYSize>
 8002932:	4602      	mov	r2, r0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	2300      	movs	r3, #0
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	4613      	mov	r3, r2
 800293e:	462a      	mov	r2, r5
 8002940:	4631      	mov	r1, r6
 8002942:	4620      	mov	r0, r4
 8002944:	f000 fc54 	bl	80031f0 <LL_FillBuffer>
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002950:	20000ae8 	.word	0x20000ae8
 8002954:	20000a00 	.word	0x20000a00

08002958 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	80fb      	strh	r3, [r7, #6]
 8002962:	460b      	mov	r3, r1
 8002964:	80bb      	strh	r3, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800296a:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <BSP_LCD_DisplayChar+0x80>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	491b      	ldr	r1, [pc, #108]	; (80029dc <BSP_LCD_DisplayChar+0x84>)
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3308      	adds	r3, #8
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	78fb      	ldrb	r3, [r7, #3]
 8002982:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <BSP_LCD_DisplayChar+0x80>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4c14      	ldr	r4, [pc, #80]	; (80029dc <BSP_LCD_DisplayChar+0x84>)
 800298c:	4613      	mov	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4423      	add	r3, r4
 8002996:	3308      	adds	r3, #8
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800299c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029a0:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <BSP_LCD_DisplayChar+0x80>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <BSP_LCD_DisplayChar+0x84>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4423      	add	r3, r4
 80029b0:	3308      	adds	r3, #8
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	889b      	ldrh	r3, [r3, #4]
 80029b6:	3307      	adds	r3, #7
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	da00      	bge.n	80029be <BSP_LCD_DisplayChar+0x66>
 80029bc:	3307      	adds	r3, #7
 80029be:	10db      	asrs	r3, r3, #3
 80029c0:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029c4:	18ca      	adds	r2, r1, r3
 80029c6:	88b9      	ldrh	r1, [r7, #4]
 80029c8:	88fb      	ldrh	r3, [r7, #6]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fb58 	bl	8003080 <DrawChar>
}
 80029d0:	bf00      	nop
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd90      	pop	{r4, r7, pc}
 80029d8:	20000ae8 	.word	0x20000ae8
 80029dc:	20000aec 	.word	0x20000aec

080029e0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80029e0:	b5b0      	push	{r4, r5, r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60ba      	str	r2, [r7, #8]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4603      	mov	r3, r0
 80029ec:	81fb      	strh	r3, [r7, #14]
 80029ee:	460b      	mov	r3, r1
 80029f0:	81bb      	strh	r3, [r7, #12]
 80029f2:	4613      	mov	r3, r2
 80029f4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80029f6:	2301      	movs	r3, #1
 80029f8:	83fb      	strh	r3, [r7, #30]
 80029fa:	2300      	movs	r3, #0
 80029fc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80029fe:	2300      	movs	r3, #0
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a0a:	e002      	b.n	8002a12 <BSP_LCD_DisplayStringAt+0x32>
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	617a      	str	r2, [r7, #20]
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f6      	bne.n	8002a0c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a1e:	f7ff fe8f 	bl	8002740 <BSP_LCD_GetXSize>
 8002a22:	4601      	mov	r1, r0
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <BSP_LCD_DisplayStringAt+0x188>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4850      	ldr	r0, [pc, #320]	; (8002b6c <BSP_LCD_DisplayStringAt+0x18c>)
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4403      	add	r3, r0
 8002a34:	3308      	adds	r3, #8
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	889b      	ldrh	r3, [r3, #4]
 8002a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d01c      	beq.n	8002a80 <BSP_LCD_DisplayStringAt+0xa0>
 8002a46:	2b03      	cmp	r3, #3
 8002a48:	dc33      	bgt.n	8002ab2 <BSP_LCD_DisplayStringAt+0xd2>
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d002      	beq.n	8002a54 <BSP_LCD_DisplayStringAt+0x74>
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d019      	beq.n	8002a86 <BSP_LCD_DisplayStringAt+0xa6>
 8002a52:	e02e      	b.n	8002ab2 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	1ad1      	subs	r1, r2, r3
 8002a5a:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <BSP_LCD_DisplayStringAt+0x188>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	4843      	ldr	r0, [pc, #268]	; (8002b6c <BSP_LCD_DisplayStringAt+0x18c>)
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4403      	add	r3, r0
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	889b      	ldrh	r3, [r3, #4]
 8002a70:	fb01 f303 	mul.w	r3, r1, r3
 8002a74:	085b      	lsrs	r3, r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	83fb      	strh	r3, [r7, #30]
      break;
 8002a7e:	e01b      	b.n	8002ab8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002a80:	89fb      	ldrh	r3, [r7, #14]
 8002a82:	83fb      	strh	r3, [r7, #30]
      break;
 8002a84:	e018      	b.n	8002ab8 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	b299      	uxth	r1, r3
 8002a8e:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <BSP_LCD_DisplayStringAt+0x188>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	4836      	ldr	r0, [pc, #216]	; (8002b6c <BSP_LCD_DisplayStringAt+0x18c>)
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4403      	add	r3, r0
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	889b      	ldrh	r3, [r3, #4]
 8002aa4:	fb11 f303 	smulbb	r3, r1, r3
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	89fb      	ldrh	r3, [r7, #14]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	83fb      	strh	r3, [r7, #30]
      break;
 8002ab0:	e002      	b.n	8002ab8 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002ab2:	89fb      	ldrh	r3, [r7, #14]
 8002ab4:	83fb      	strh	r3, [r7, #30]
      break;
 8002ab6:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002ab8:	8bfb      	ldrh	r3, [r7, #30]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <BSP_LCD_DisplayStringAt+0xe6>
 8002abe:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da1d      	bge.n	8002b02 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002aca:	e01a      	b.n	8002b02 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	781a      	ldrb	r2, [r3, #0]
 8002ad0:	89b9      	ldrh	r1, [r7, #12]
 8002ad2:	8bfb      	ldrh	r3, [r7, #30]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff3f 	bl	8002958 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002ada:	4b23      	ldr	r3, [pc, #140]	; (8002b68 <BSP_LCD_DisplayStringAt+0x188>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4923      	ldr	r1, [pc, #140]	; (8002b6c <BSP_LCD_DisplayStringAt+0x18c>)
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	3308      	adds	r3, #8
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	889a      	ldrh	r2, [r3, #4]
 8002af0:	8bfb      	ldrh	r3, [r7, #30]
 8002af2:	4413      	add	r3, r2
 8002af4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	3301      	adds	r3, #1
 8002afa:	60bb      	str	r3, [r7, #8]
    i++;
 8002afc:	8bbb      	ldrh	r3, [r7, #28]
 8002afe:	3301      	adds	r3, #1
 8002b00:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2dc      	uxtb	r4, r3
 8002b10:	f7ff fe16 	bl	8002740 <BSP_LCD_GetXSize>
 8002b14:	8bb9      	ldrh	r1, [r7, #28]
 8002b16:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <BSP_LCD_DisplayStringAt+0x188>)
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	4d14      	ldr	r5, [pc, #80]	; (8002b6c <BSP_LCD_DisplayStringAt+0x18c>)
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	442b      	add	r3, r5
 8002b26:	3308      	adds	r3, #8
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	889b      	ldrh	r3, [r3, #4]
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	1ac3      	subs	r3, r0, r3
 8002b32:	b299      	uxth	r1, r3
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <BSP_LCD_DisplayStringAt+0x188>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <BSP_LCD_DisplayStringAt+0x18c>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4403      	add	r3, r0
 8002b44:	3308      	adds	r3, #8
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	889b      	ldrh	r3, [r3, #4]
 8002b4a:	4299      	cmp	r1, r3
 8002b4c:	bf2c      	ite	cs
 8002b4e:	2301      	movcs	r3, #1
 8002b50:	2300      	movcc	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	4023      	ands	r3, r4
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1b7      	bne.n	8002acc <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002b5c:	bf00      	nop
 8002b5e:	bf00      	nop
 8002b60:	3720      	adds	r7, #32
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bdb0      	pop	{r4, r5, r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000ae8 	.word	0x20000ae8
 8002b6c:	20000aec 	.word	0x20000aec

08002b70 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	603a      	str	r2, [r7, #0]
 8002b7a:	80fb      	strh	r3, [r7, #6]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002b80:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <BSP_LCD_DrawPixel+0x88>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	; (8002bfc <BSP_LCD_DrawPixel+0x8c>)
 8002b86:	2134      	movs	r1, #52	; 0x34
 8002b88:	fb01 f303 	mul.w	r3, r1, r3
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3348      	adds	r3, #72	; 0x48
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d116      	bne.n	8002bc4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <BSP_LCD_DrawPixel+0x88>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a18      	ldr	r2, [pc, #96]	; (8002bfc <BSP_LCD_DrawPixel+0x8c>)
 8002b9c:	2134      	movs	r1, #52	; 0x34
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	681c      	ldr	r4, [r3, #0]
 8002ba8:	88bd      	ldrh	r5, [r7, #4]
 8002baa:	f7ff fdc9 	bl	8002740 <BSP_LCD_GetXSize>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	fb03 f205 	mul.w	r2, r3, r5
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	4423      	add	r3, r4
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b292      	uxth	r2, r2
 8002bc0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002bc2:	e015      	b.n	8002bf0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <BSP_LCD_DrawPixel+0x88>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0c      	ldr	r2, [pc, #48]	; (8002bfc <BSP_LCD_DrawPixel+0x8c>)
 8002bca:	2134      	movs	r1, #52	; 0x34
 8002bcc:	fb01 f303 	mul.w	r3, r1, r3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	335c      	adds	r3, #92	; 0x5c
 8002bd4:	681c      	ldr	r4, [r3, #0]
 8002bd6:	88bd      	ldrh	r5, [r7, #4]
 8002bd8:	f7ff fdb2 	bl	8002740 <BSP_LCD_GetXSize>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	fb03 f205 	mul.w	r2, r3, r5
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4423      	add	r3, r4
 8002bea:	461a      	mov	r2, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bf8:	20000ae8 	.word	0x20000ae8
 8002bfc:	20000a00 	.word	0x20000a00

08002c00 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b08b      	sub	sp, #44	; 0x2c
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c10:	2300      	movs	r3, #0
 8002c12:	61bb      	str	r3, [r7, #24]
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	330a      	adds	r3, #10
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	330b      	adds	r3, #11
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	021b      	lsls	r3, r3, #8
 8002c30:	441a      	add	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	330c      	adds	r3, #12
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	441a      	add	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	330d      	adds	r3, #13
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	061b      	lsls	r3, r3, #24
 8002c44:	4413      	add	r3, r2
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3312      	adds	r3, #18
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3313      	adds	r3, #19
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	021b      	lsls	r3, r3, #8
 8002c58:	441a      	add	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3314      	adds	r3, #20
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	041b      	lsls	r3, r3, #16
 8002c62:	441a      	add	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3315      	adds	r3, #21
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	061b      	lsls	r3, r3, #24
 8002c6c:	4413      	add	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3316      	adds	r3, #22
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3317      	adds	r3, #23
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3318      	adds	r3, #24
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	441a      	add	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3319      	adds	r3, #25
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	4413      	add	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	331c      	adds	r3, #28
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	331d      	adds	r3, #29
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	4413      	add	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002cac:	4b2b      	ldr	r3, [pc, #172]	; (8002d5c <BSP_LCD_DrawBitmap+0x15c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2b      	ldr	r2, [pc, #172]	; (8002d60 <BSP_LCD_DrawBitmap+0x160>)
 8002cb2:	2134      	movs	r1, #52	; 0x34
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	335c      	adds	r3, #92	; 0x5c
 8002cbc:	681c      	ldr	r4, [r3, #0]
 8002cbe:	f7ff fd3f 	bl	8002740 <BSP_LCD_GetXSize>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	fb03 f202 	mul.w	r2, r3, r2
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4423      	add	r3, r4
 8002cd2:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	3b20      	subs	r3, #32
 8002cd8:	2b07      	cmp	r3, #7
 8002cda:	d802      	bhi.n	8002ce2 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
 8002ce0:	e008      	b.n	8002cf4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	3b10      	subs	r3, #16
 8002ce6:	2b07      	cmp	r3, #7
 8002ce8:	d802      	bhi.n	8002cf0 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002cea:	2302      	movs	r3, #2
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e001      	b.n	8002cf4 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	fb02 f303 	mul.w	r3, r2, r3
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	08d2      	lsrs	r2, r2, #3
 8002d02:	fb03 f202 	mul.w	r2, r3, r2
 8002d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d08:	4413      	add	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
 8002d14:	e018      	b.n	8002d48 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002d16:	6a39      	ldr	r1, [r7, #32]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fab3 	bl	8003288 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002d22:	f7ff fd0d 	bl	8002740 <BSP_LCD_GetXSize>
 8002d26:	4603      	mov	r3, r0
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	08db      	lsrs	r3, r3, #3
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	425b      	negs	r3, r3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4413      	add	r3, r2
 8002d40:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
 8002d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d3e2      	bcc.n	8002d16 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	372c      	adds	r7, #44	; 0x2c
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd90      	pop	{r4, r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000ae8 	.word	0x20000ae8
 8002d60:	20000a00 	.word	0x20000a00

08002d64 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d68:	b086      	sub	sp, #24
 8002d6a:	af02      	add	r7, sp, #8
 8002d6c:	4604      	mov	r4, r0
 8002d6e:	4608      	mov	r0, r1
 8002d70:	4611      	mov	r1, r2
 8002d72:	461a      	mov	r2, r3
 8002d74:	4623      	mov	r3, r4
 8002d76:	80fb      	strh	r3, [r7, #6]
 8002d78:	4603      	mov	r3, r0
 8002d7a:	80bb      	strh	r3, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
 8002d80:	4613      	mov	r3, r2
 8002d82:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002d88:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <BSP_LCD_FillRect+0xe8>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	4930      	ldr	r1, [pc, #192]	; (8002e50 <BSP_LCD_FillRect+0xec>)
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fd68 	bl	8002870 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002da0:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <BSP_LCD_FillRect+0xe8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <BSP_LCD_FillRect+0xf0>)
 8002da6:	2134      	movs	r1, #52	; 0x34
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3348      	adds	r3, #72	; 0x48
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d114      	bne.n	8002de0 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002db6:	4b25      	ldr	r3, [pc, #148]	; (8002e4c <BSP_LCD_FillRect+0xe8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <BSP_LCD_FillRect+0xf0>)
 8002dbc:	2134      	movs	r1, #52	; 0x34
 8002dbe:	fb01 f303 	mul.w	r3, r1, r3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	335c      	adds	r3, #92	; 0x5c
 8002dc6:	681c      	ldr	r4, [r3, #0]
 8002dc8:	f7ff fcba 	bl	8002740 <BSP_LCD_GetXSize>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	88bb      	ldrh	r3, [r7, #4]
 8002dd0:	fb03 f202 	mul.w	r2, r3, r2
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	4423      	add	r3, r4
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	e013      	b.n	8002e08 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <BSP_LCD_FillRect+0xe8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a1b      	ldr	r2, [pc, #108]	; (8002e54 <BSP_LCD_FillRect+0xf0>)
 8002de6:	2134      	movs	r1, #52	; 0x34
 8002de8:	fb01 f303 	mul.w	r3, r1, r3
 8002dec:	4413      	add	r3, r2
 8002dee:	335c      	adds	r3, #92	; 0x5c
 8002df0:	681c      	ldr	r4, [r3, #0]
 8002df2:	f7ff fca5 	bl	8002740 <BSP_LCD_GetXSize>
 8002df6:	4602      	mov	r2, r0
 8002df8:	88bb      	ldrh	r3, [r7, #4]
 8002dfa:	fb03 f202 	mul.w	r2, r3, r2
 8002dfe:	88fb      	ldrh	r3, [r7, #6]
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4423      	add	r3, r4
 8002e06:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <BSP_LCD_FillRect+0xe8>)
 8002e0a:	681c      	ldr	r4, [r3, #0]
 8002e0c:	68fd      	ldr	r5, [r7, #12]
 8002e0e:	887e      	ldrh	r6, [r7, #2]
 8002e10:	f8b7 8000 	ldrh.w	r8, [r7]
 8002e14:	f7ff fc94 	bl	8002740 <BSP_LCD_GetXSize>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	887b      	ldrh	r3, [r7, #2]
 8002e1c:	1ad1      	subs	r1, r2, r3
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <BSP_LCD_FillRect+0xe8>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	480b      	ldr	r0, [pc, #44]	; (8002e50 <BSP_LCD_FillRect+0xec>)
 8002e24:	4613      	mov	r3, r2
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4403      	add	r3, r0
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	9301      	str	r3, [sp, #4]
 8002e32:	9100      	str	r1, [sp, #0]
 8002e34:	4643      	mov	r3, r8
 8002e36:	4632      	mov	r2, r6
 8002e38:	4629      	mov	r1, r5
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 f9d8 	bl	80031f0 <LL_FillBuffer>
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000ae8 	.word	0x20000ae8
 8002e50:	20000aec 	.word	0x20000aec
 8002e54:	20000a00 	.word	0x20000a00

08002e58 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <BSP_LCD_DisplayOn+0x30>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <BSP_LCD_DisplayOn+0x30>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e72:	4806      	ldr	r0, [pc, #24]	; (8002e8c <BSP_LCD_DisplayOn+0x34>)
 8002e74:	f003 f9e2 	bl	800623c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2108      	movs	r1, #8
 8002e7c:	4804      	ldr	r0, [pc, #16]	; (8002e90 <BSP_LCD_DisplayOn+0x38>)
 8002e7e:	f003 f9dd 	bl	800623c <HAL_GPIO_WritePin>
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000a00 	.word	0x20000a00
 8002e8c:	40022000 	.word	0x40022000
 8002e90:	40022800 	.word	0x40022800

08002e94 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b090      	sub	sp, #64	; 0x40
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002e9e:	4b64      	ldr	r3, [pc, #400]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea2:	4a63      	ldr	r2, [pc, #396]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8002eaa:	4b61      	ldr	r3, [pc, #388]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002eb6:	4b5e      	ldr	r3, [pc, #376]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	4a5d      	ldr	r2, [pc, #372]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ebc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec2:	4b5b      	ldr	r3, [pc, #364]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ece:	4b58      	ldr	r3, [pc, #352]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a57      	ldr	r2, [pc, #348]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ed4:	f043 0310 	orr.w	r3, r3, #16
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b55      	ldr	r3, [pc, #340]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0310 	and.w	r3, r3, #16
 8002ee2:	623b      	str	r3, [r7, #32]
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	4a51      	ldr	r2, [pc, #324]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002efe:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a4b      	ldr	r2, [pc, #300]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b49      	ldr	r3, [pc, #292]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	61bb      	str	r3, [r7, #24]
 8002f14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f16:	4b46      	ldr	r3, [pc, #280]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	4a45      	ldr	r2, [pc, #276]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f2e:	4b40      	ldr	r3, [pc, #256]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	4a3f      	ldr	r2, [pc, #252]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f38:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3a:	4b3d      	ldr	r3, [pc, #244]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f42:	613b      	str	r3, [r7, #16]
 8002f44:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002f46:	4b3a      	ldr	r3, [pc, #232]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a39      	ldr	r2, [pc, #228]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b37      	ldr	r3, [pc, #220]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f62:	4a33      	ldr	r2, [pc, #204]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f68:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6a:	4b31      	ldr	r3, [pc, #196]	; (8003030 <BSP_LCD_MspInit+0x19c>)
 8002f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002f76:	2310      	movs	r3, #16
 8002f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f82:	2302      	movs	r3, #2
 8002f84:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002f86:	230e      	movs	r3, #14
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002f8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4828      	ldr	r0, [pc, #160]	; (8003034 <BSP_LCD_MspInit+0x1a0>)
 8002f92:	f002 fe83 	bl	8005c9c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002f96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002fa0:	2309      	movs	r3, #9
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002fa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4823      	ldr	r0, [pc, #140]	; (8003038 <BSP_LCD_MspInit+0x1a4>)
 8002fac:	f002 fe76 	bl	8005c9c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002fb0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fba:	230e      	movs	r3, #14
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002fbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	481d      	ldr	r0, [pc, #116]	; (800303c <BSP_LCD_MspInit+0x1a8>)
 8002fc6:	f002 fe69 	bl	8005c9c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002fca:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8002fce:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fd4:	230e      	movs	r3, #14
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4818      	ldr	r0, [pc, #96]	; (8003040 <BSP_LCD_MspInit+0x1ac>)
 8002fe0:	f002 fe5c 	bl	8005c9c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002fe4:	23f7      	movs	r3, #247	; 0xf7
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fe8:	2302      	movs	r3, #2
 8002fea:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002fec:	230e      	movs	r3, #14
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002ff0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4813      	ldr	r0, [pc, #76]	; (8003044 <BSP_LCD_MspInit+0x1b0>)
 8002ff8:	f002 fe50 	bl	8005c9c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003002:	2301      	movs	r3, #1
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003006:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800300a:	4619      	mov	r1, r3
 800300c:	480b      	ldr	r0, [pc, #44]	; (800303c <BSP_LCD_MspInit+0x1a8>)
 800300e:	f002 fe45 	bl	8005c9c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003012:	2308      	movs	r3, #8
 8003014:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003016:	2301      	movs	r3, #1
 8003018:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800301a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800301e:	4619      	mov	r1, r3
 8003020:	4808      	ldr	r0, [pc, #32]	; (8003044 <BSP_LCD_MspInit+0x1b0>)
 8003022:	f002 fe3b 	bl	8005c9c <HAL_GPIO_Init>
}
 8003026:	bf00      	nop
 8003028:	3740      	adds	r7, #64	; 0x40
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800
 8003034:	40021000 	.word	0x40021000
 8003038:	40021800 	.word	0x40021800
 800303c:	40022000 	.word	0x40022000
 8003040:	40022400 	.word	0x40022400
 8003044:	40022800 	.word	0x40022800

08003048 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <BSP_LCD_ClockConfig+0x34>)
 8003054:	2208      	movs	r2, #8
 8003056:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <BSP_LCD_ClockConfig+0x34>)
 800305a:	22c0      	movs	r2, #192	; 0xc0
 800305c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <BSP_LCD_ClockConfig+0x34>)
 8003060:	2205      	movs	r2, #5
 8003062:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003064:	4b05      	ldr	r3, [pc, #20]	; (800307c <BSP_LCD_ClockConfig+0x34>)
 8003066:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800306c:	4803      	ldr	r0, [pc, #12]	; (800307c <BSP_LCD_ClockConfig+0x34>)
 800306e:	f004 ffe5 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000b04 	.word	0x20000b04

08003080 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b088      	sub	sp, #32
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	603a      	str	r2, [r7, #0]
 800308a:	80fb      	strh	r3, [r7, #6]
 800308c:	460b      	mov	r3, r1
 800308e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003090:	2300      	movs	r3, #0
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	2300      	movs	r3, #0
 8003096:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <DrawChar+0x168>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4953      	ldr	r1, [pc, #332]	; (80031ec <DrawChar+0x16c>)
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3308      	adds	r3, #8
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	88db      	ldrh	r3, [r3, #6]
 80030ae:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80030b0:	4b4d      	ldr	r3, [pc, #308]	; (80031e8 <DrawChar+0x168>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	494d      	ldr	r1, [pc, #308]	; (80031ec <DrawChar+0x16c>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3308      	adds	r3, #8
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	889b      	ldrh	r3, [r3, #4]
 80030c6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80030c8:	8a3b      	ldrh	r3, [r7, #16]
 80030ca:	3307      	adds	r3, #7
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da00      	bge.n	80030d2 <DrawChar+0x52>
 80030d0:	3307      	adds	r3, #7
 80030d2:	10db      	asrs	r3, r3, #3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8a3b      	ldrh	r3, [r7, #16]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e076      	b.n	80031d6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80030e8:	8a3b      	ldrh	r3, [r7, #16]
 80030ea:	3307      	adds	r3, #7
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	da00      	bge.n	80030f2 <DrawChar+0x72>
 80030f0:	3307      	adds	r3, #7
 80030f2:	10db      	asrs	r3, r3, #3
 80030f4:	461a      	mov	r2, r3
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	fb02 f303 	mul.w	r3, r2, r3
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003102:	8a3b      	ldrh	r3, [r7, #16]
 8003104:	3307      	adds	r3, #7
 8003106:	2b00      	cmp	r3, #0
 8003108:	da00      	bge.n	800310c <DrawChar+0x8c>
 800310a:	3307      	adds	r3, #7
 800310c:	10db      	asrs	r3, r3, #3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d002      	beq.n	8003118 <DrawChar+0x98>
 8003112:	2b02      	cmp	r3, #2
 8003114:	d004      	beq.n	8003120 <DrawChar+0xa0>
 8003116:	e00c      	b.n	8003132 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	617b      	str	r3, [r7, #20]
      break;
 800311e:	e016      	b.n	800314e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	3201      	adds	r2, #1
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	617b      	str	r3, [r7, #20]
      break;
 8003130:	e00d      	b.n	800314e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	041a      	lsls	r2, r3, #16
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3301      	adds	r3, #1
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	4313      	orrs	r3, r2
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	3202      	adds	r2, #2
 8003146:	7812      	ldrb	r2, [r2, #0]
 8003148:	4313      	orrs	r3, r2
 800314a:	617b      	str	r3, [r7, #20]
      break;
 800314c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
 8003152:	e036      	b.n	80031c2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003154:	8a3a      	ldrh	r2, [r7, #16]
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	1ad2      	subs	r2, r2, r3
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	4413      	add	r3, r2
 800315e:	3b01      	subs	r3, #1
 8003160:	2201      	movs	r2, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	461a      	mov	r2, r3
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	4013      	ands	r3, r2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d012      	beq.n	8003196 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	b29a      	uxth	r2, r3
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	4413      	add	r3, r2
 8003178:	b298      	uxth	r0, r3
 800317a:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <DrawChar+0x168>)
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	491b      	ldr	r1, [pc, #108]	; (80031ec <DrawChar+0x16c>)
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	88bb      	ldrh	r3, [r7, #4]
 800318e:	4619      	mov	r1, r3
 8003190:	f7ff fcee 	bl	8002b70 <BSP_LCD_DrawPixel>
 8003194:	e012      	b.n	80031bc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	b29a      	uxth	r2, r3
 800319a:	88fb      	ldrh	r3, [r7, #6]
 800319c:	4413      	add	r3, r2
 800319e:	b298      	uxth	r0, r3
 80031a0:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <DrawChar+0x168>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	4911      	ldr	r1, [pc, #68]	; (80031ec <DrawChar+0x16c>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	3304      	adds	r3, #4
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	88bb      	ldrh	r3, [r7, #4]
 80031b6:	4619      	mov	r1, r3
 80031b8:	f7ff fcda 	bl	8002b70 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	3301      	adds	r3, #1
 80031c0:	61bb      	str	r3, [r7, #24]
 80031c2:	8a3b      	ldrh	r3, [r7, #16]
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d3c4      	bcc.n	8003154 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80031ca:	88bb      	ldrh	r3, [r7, #4]
 80031cc:	3301      	adds	r3, #1
 80031ce:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	3301      	adds	r3, #1
 80031d4:	61fb      	str	r3, [r7, #28]
 80031d6:	8a7b      	ldrh	r3, [r7, #18]
 80031d8:	69fa      	ldr	r2, [r7, #28]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d384      	bcc.n	80030e8 <DrawChar+0x68>
  }
}
 80031de:	bf00      	nop
 80031e0:	bf00      	nop
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	20000ae8 	.word	0x20000ae8
 80031ec:	20000aec 	.word	0x20000aec

080031f0 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <LL_FillBuffer+0x88>)
 8003200:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003204:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003206:	4b1d      	ldr	r3, [pc, #116]	; (800327c <LL_FillBuffer+0x8c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <LL_FillBuffer+0x90>)
 800320c:	2134      	movs	r1, #52	; 0x34
 800320e:	fb01 f303 	mul.w	r3, r1, r3
 8003212:	4413      	add	r3, r2
 8003214:	3348      	adds	r3, #72	; 0x48
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d103      	bne.n	8003224 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800321c:	4b16      	ldr	r3, [pc, #88]	; (8003278 <LL_FillBuffer+0x88>)
 800321e:	2202      	movs	r2, #2
 8003220:	609a      	str	r2, [r3, #8]
 8003222:	e002      	b.n	800322a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <LL_FillBuffer+0x88>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800322a:	4a13      	ldr	r2, [pc, #76]	; (8003278 <LL_FillBuffer+0x88>)
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <LL_FillBuffer+0x88>)
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <LL_FillBuffer+0x94>)
 8003234:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003236:	4810      	ldr	r0, [pc, #64]	; (8003278 <LL_FillBuffer+0x88>)
 8003238:	f002 f994 	bl	8005564 <HAL_DMA2D_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d115      	bne.n	800326e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003242:	68f9      	ldr	r1, [r7, #12]
 8003244:	480c      	ldr	r0, [pc, #48]	; (8003278 <LL_FillBuffer+0x88>)
 8003246:	f002 fbfb 	bl	8005a40 <HAL_DMA2D_ConfigLayer>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10e      	bne.n	800326e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69f9      	ldr	r1, [r7, #28]
 800325a:	4807      	ldr	r0, [pc, #28]	; (8003278 <LL_FillBuffer+0x88>)
 800325c:	f002 f9cc 	bl	80055f8 <HAL_DMA2D_Start>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003266:	210a      	movs	r1, #10
 8003268:	4803      	ldr	r0, [pc, #12]	; (8003278 <LL_FillBuffer+0x88>)
 800326a:	f002 f9f0 	bl	800564e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800326e:	bf00      	nop
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000aa8 	.word	0x20000aa8
 800327c:	20000ae8 	.word	0x20000ae8
 8003280:	20000a00 	.word	0x20000a00
 8003284:	4002b000 	.word	0x4002b000

08003288 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003296:	4b1c      	ldr	r3, [pc, #112]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 8003298:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800329c:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032b2:	22ff      	movs	r2, #255	; 0xff
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80032b6:	4a14      	ldr	r2, [pc, #80]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032be:	2200      	movs	r2, #0
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032c4:	4a11      	ldr	r2, [pc, #68]	; (800330c <LL_ConvertLineToARGB8888+0x84>)
 80032c6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80032c8:	480f      	ldr	r0, [pc, #60]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032ca:	f002 f94b 	bl	8005564 <HAL_DMA2D_Init>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d115      	bne.n	8003300 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80032d4:	2101      	movs	r1, #1
 80032d6:	480c      	ldr	r0, [pc, #48]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032d8:	f002 fbb2 	bl	8005a40 <HAL_DMA2D_ConfigLayer>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80032e2:	68f9      	ldr	r1, [r7, #12]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	2301      	movs	r3, #1
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4806      	ldr	r0, [pc, #24]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032ee:	f002 f983 	bl	80055f8 <HAL_DMA2D_Start>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d103      	bne.n	8003300 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80032f8:	210a      	movs	r1, #10
 80032fa:	4803      	ldr	r0, [pc, #12]	; (8003308 <LL_ConvertLineToARGB8888+0x80>)
 80032fc:	f002 f9a7 	bl	800564e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}
 8003308:	20000aa8 	.word	0x20000aa8
 800330c:	4002b000 	.word	0x4002b000

08003310 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003314:	4b29      	ldr	r3, [pc, #164]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003316:	4a2a      	ldr	r2, [pc, #168]	; (80033c0 <BSP_SDRAM_Init+0xb0>)
 8003318:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800331a:	4b2a      	ldr	r3, [pc, #168]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 800331c:	2202      	movs	r2, #2
 800331e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003320:	4b28      	ldr	r3, [pc, #160]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 8003322:	2207      	movs	r2, #7
 8003324:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003326:	4b27      	ldr	r3, [pc, #156]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 8003328:	2204      	movs	r2, #4
 800332a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800332c:	4b25      	ldr	r3, [pc, #148]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 800332e:	2207      	movs	r2, #7
 8003330:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003332:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 8003334:	2202      	movs	r2, #2
 8003336:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003338:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 800333a:	2202      	movs	r2, #2
 800333c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800333e:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 8003340:	2202      	movs	r2, #2
 8003342:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003344:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003346:	2200      	movs	r2, #0
 8003348:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <BSP_SDRAM_Init+0xac>)
 800334c:	2200      	movs	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003350:	4b1a      	ldr	r3, [pc, #104]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003352:	2204      	movs	r2, #4
 8003354:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003358:	2210      	movs	r2, #16
 800335a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800335c:	4b17      	ldr	r3, [pc, #92]	; (80033bc <BSP_SDRAM_Init+0xac>)
 800335e:	2240      	movs	r2, #64	; 0x40
 8003360:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003362:	4b16      	ldr	r3, [pc, #88]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003364:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003368:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <BSP_SDRAM_Init+0xac>)
 800336c:	2200      	movs	r2, #0
 800336e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003372:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003376:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003378:	4b10      	ldr	r3, [pc, #64]	; (80033bc <BSP_SDRAM_Init+0xac>)
 800337a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800337e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003382:	2200      	movs	r2, #0
 8003384:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003386:	2100      	movs	r1, #0
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <BSP_SDRAM_Init+0xac>)
 800338a:	f000 f87f 	bl	800348c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800338e:	490d      	ldr	r1, [pc, #52]	; (80033c4 <BSP_SDRAM_Init+0xb4>)
 8003390:	480a      	ldr	r0, [pc, #40]	; (80033bc <BSP_SDRAM_Init+0xac>)
 8003392:	f005 fe1b 	bl	8008fcc <HAL_SDRAM_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d003      	beq.n	80033a4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <BSP_SDRAM_Init+0xb8>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
 80033a2:	e002      	b.n	80033aa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80033a4:	4b08      	ldr	r3, [pc, #32]	; (80033c8 <BSP_SDRAM_Init+0xb8>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80033aa:	f240 6003 	movw	r0, #1539	; 0x603
 80033ae:	f000 f80d 	bl	80033cc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <BSP_SDRAM_Init+0xb8>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000b88 	.word	0x20000b88
 80033c0:	a0000140 	.word	0xa0000140
 80033c4:	20000bbc 	.word	0x20000bbc
 80033c8:	20000038 	.word	0x20000038

080033cc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033da:	2201      	movs	r2, #1
 80033dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80033de:	4b29      	ldr	r3, [pc, #164]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e0:	2210      	movs	r2, #16
 80033e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80033ea:	4b26      	ldr	r3, [pc, #152]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80033f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033f4:	4923      	ldr	r1, [pc, #140]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80033f6:	4824      	ldr	r0, [pc, #144]	; (8003488 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80033f8:	f005 fe1c 	bl	8009034 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80033fc:	2001      	movs	r0, #1
 80033fe:	f001 f881 	bl	8004504 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003404:	2202      	movs	r2, #2
 8003406:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800340a:	2210      	movs	r2, #16
 800340c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003410:	2201      	movs	r2, #1
 8003412:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800341a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800341e:	4919      	ldr	r1, [pc, #100]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003420:	4819      	ldr	r0, [pc, #100]	; (8003488 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003422:	f005 fe07 	bl	8009034 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003428:	2203      	movs	r2, #3
 800342a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800342e:	2210      	movs	r2, #16
 8003430:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003434:	2208      	movs	r2, #8
 8003436:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003438:	4b12      	ldr	r3, [pc, #72]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800343a:	2200      	movs	r2, #0
 800343c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800343e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003442:	4910      	ldr	r1, [pc, #64]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003444:	4810      	ldr	r0, [pc, #64]	; (8003488 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003446:	f005 fdf5 	bl	8009034 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800344a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800344e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003452:	2204      	movs	r2, #4
 8003454:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003458:	2210      	movs	r2, #16
 800345a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800345e:	2201      	movs	r2, #1
 8003460:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a07      	ldr	r2, [pc, #28]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003466:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800346c:	4905      	ldr	r1, [pc, #20]	; (8003484 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800346e:	4806      	ldr	r0, [pc, #24]	; (8003488 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003470:	f005 fde0 	bl	8009034 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	4804      	ldr	r0, [pc, #16]	; (8003488 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003478:	f005 fe11 	bl	800909e <HAL_SDRAM_ProgramRefreshRate>
}
 800347c:	bf00      	nop
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000bd8 	.word	0x20000bd8
 8003488:	20000b88 	.word	0x20000b88

0800348c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800348c:	b580      	push	{r7, lr}
 800348e:	b090      	sub	sp, #64	; 0x40
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003496:	4b70      	ldr	r3, [pc, #448]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349a:	4a6f      	ldr	r2, [pc, #444]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	6393      	str	r3, [r2, #56]	; 0x38
 80034a2:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80034ae:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b2:	4a69      	ldr	r2, [pc, #420]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034b8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ba:	4b67      	ldr	r3, [pc, #412]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034c6:	4b64      	ldr	r3, [pc, #400]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	4a63      	ldr	r2, [pc, #396]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6313      	str	r3, [r2, #48]	; 0x30
 80034d2:	4b61      	ldr	r3, [pc, #388]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80034de:	4b5e      	ldr	r3, [pc, #376]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e2:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034e4:	f043 0308 	orr.w	r3, r3, #8
 80034e8:	6313      	str	r3, [r2, #48]	; 0x30
 80034ea:	4b5b      	ldr	r3, [pc, #364]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80034f6:	4b58      	ldr	r3, [pc, #352]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fa:	4a57      	ldr	r2, [pc, #348]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 80034fc:	f043 0310 	orr.w	r3, r3, #16
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b55      	ldr	r3, [pc, #340]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	61bb      	str	r3, [r7, #24]
 800350c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800350e:	4b52      	ldr	r3, [pc, #328]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	4a51      	ldr	r2, [pc, #324]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003514:	f043 0320 	orr.w	r3, r3, #32
 8003518:	6313      	str	r3, [r2, #48]	; 0x30
 800351a:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003526:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352a:	4a4b      	ldr	r2, [pc, #300]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 800352c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003530:	6313      	str	r3, [r2, #48]	; 0x30
 8003532:	4b49      	ldr	r3, [pc, #292]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800353e:	4b46      	ldr	r3, [pc, #280]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a45      	ldr	r2, [pc, #276]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 8003544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b43      	ldr	r3, [pc, #268]	; (8003658 <BSP_SDRAM_MspInit+0x1cc>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003556:	2302      	movs	r3, #2
 8003558:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800355a:	2301      	movs	r3, #1
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800355e:	2302      	movs	r3, #2
 8003560:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003562:	230c      	movs	r3, #12
 8003564:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003566:	2308      	movs	r3, #8
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800356a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800356e:	4619      	mov	r1, r3
 8003570:	483a      	ldr	r0, [pc, #232]	; (800365c <BSP_SDRAM_MspInit+0x1d0>)
 8003572:	f002 fb93 	bl	8005c9c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003576:	f24c 7303 	movw	r3, #50947	; 0xc703
 800357a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800357c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003580:	4619      	mov	r1, r3
 8003582:	4837      	ldr	r0, [pc, #220]	; (8003660 <BSP_SDRAM_MspInit+0x1d4>)
 8003584:	f002 fb8a 	bl	8005c9c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003588:	f64f 7383 	movw	r3, #65411	; 0xff83
 800358c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800358e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003592:	4619      	mov	r1, r3
 8003594:	4833      	ldr	r0, [pc, #204]	; (8003664 <BSP_SDRAM_MspInit+0x1d8>)
 8003596:	f002 fb81 	bl	8005c9c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800359a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800359e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80035a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035a4:	4619      	mov	r1, r3
 80035a6:	4830      	ldr	r0, [pc, #192]	; (8003668 <BSP_SDRAM_MspInit+0x1dc>)
 80035a8:	f002 fb78 	bl	8005c9c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80035ac:	f248 1333 	movw	r3, #33075	; 0x8133
 80035b0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80035b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035b6:	4619      	mov	r1, r3
 80035b8:	482c      	ldr	r0, [pc, #176]	; (800366c <BSP_SDRAM_MspInit+0x1e0>)
 80035ba:	f002 fb6f 	bl	8005c9c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80035be:	2328      	movs	r3, #40	; 0x28
 80035c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80035c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c6:	4619      	mov	r1, r3
 80035c8:	4829      	ldr	r0, [pc, #164]	; (8003670 <BSP_SDRAM_MspInit+0x1e4>)
 80035ca:	f002 fb67 	bl	8005c9c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80035ce:	4b29      	ldr	r3, [pc, #164]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80035d4:	4b27      	ldr	r3, [pc, #156]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80035da:	4b26      	ldr	r3, [pc, #152]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 80035dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80035e2:	4b24      	ldr	r3, [pc, #144]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 80035e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035e8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035ea:	4b22      	ldr	r3, [pc, #136]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 80035ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035f0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80035f2:	4b20      	ldr	r3, [pc, #128]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 80035f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035f8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003600:	4b1c      	ldr	r3, [pc, #112]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 8003602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003606:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003608:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 800360a:	2200      	movs	r2, #0
 800360c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 8003610:	2203      	movs	r2, #3
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003614:	4b17      	ldr	r3, [pc, #92]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 8003616:	2200      	movs	r2, #0
 8003618:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800361a:	4b16      	ldr	r3, [pc, #88]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003620:	4b14      	ldr	r3, [pc, #80]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 8003622:	4a15      	ldr	r2, [pc, #84]	; (8003678 <BSP_SDRAM_MspInit+0x1ec>)
 8003624:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a12      	ldr	r2, [pc, #72]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
 800362c:	4a11      	ldr	r2, [pc, #68]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003632:	4810      	ldr	r0, [pc, #64]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 8003634:	f001 fdf4 	bl	8005220 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003638:	480e      	ldr	r0, [pc, #56]	; (8003674 <BSP_SDRAM_MspInit+0x1e8>)
 800363a:	f001 fd43 	bl	80050c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800363e:	2200      	movs	r2, #0
 8003640:	210f      	movs	r1, #15
 8003642:	2038      	movs	r0, #56	; 0x38
 8003644:	f001 fc34 	bl	8004eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003648:	2038      	movs	r0, #56	; 0x38
 800364a:	f001 fc4d 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
}
 800364e:	bf00      	nop
 8003650:	3740      	adds	r7, #64	; 0x40
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40020800 	.word	0x40020800
 8003660:	40020c00 	.word	0x40020c00
 8003664:	40021000 	.word	0x40021000
 8003668:	40021400 	.word	0x40021400
 800366c:	40021800 	.word	0x40021800
 8003670:	40021c00 	.word	0x40021c00
 8003674:	20000be8 	.word	0x20000be8
 8003678:	40026410 	.word	0x40026410

0800367c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	460a      	mov	r2, r1
 8003686:	80fb      	strh	r3, [r7, #6]
 8003688:	4613      	mov	r3, r2
 800368a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003690:	4a14      	ldr	r2, [pc, #80]	; (80036e4 <BSP_TS_Init+0x68>)
 8003692:	88fb      	ldrh	r3, [r7, #6]
 8003694:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003696:	4a14      	ldr	r2, [pc, #80]	; (80036e8 <BSP_TS_Init+0x6c>)
 8003698:	88bb      	ldrh	r3, [r7, #4]
 800369a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800369c:	4b13      	ldr	r3, [pc, #76]	; (80036ec <BSP_TS_Init+0x70>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2070      	movs	r0, #112	; 0x70
 80036a2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80036a4:	4b11      	ldr	r3, [pc, #68]	; (80036ec <BSP_TS_Init+0x70>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	2070      	movs	r0, #112	; 0x70
 80036aa:	4798      	blx	r3
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b51      	cmp	r3, #81	; 0x51
 80036b0:	d111      	bne.n	80036d6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80036b2:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <BSP_TS_Init+0x74>)
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <BSP_TS_Init+0x70>)
 80036b6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80036b8:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <BSP_TS_Init+0x78>)
 80036ba:	2270      	movs	r2, #112	; 0x70
 80036bc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <BSP_TS_Init+0x7c>)
 80036c0:	2208      	movs	r2, #8
 80036c2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <BSP_TS_Init+0x74>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	4a0a      	ldr	r2, [pc, #40]	; (80036f4 <BSP_TS_Init+0x78>)
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	b292      	uxth	r2, r2
 80036d0:	4610      	mov	r0, r2
 80036d2:	4798      	blx	r3
 80036d4:	e001      	b.n	80036da <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80036d6:	2303      	movs	r3, #3
 80036d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000c4c 	.word	0x20000c4c
 80036e8:	20000c4e 	.word	0x20000c4e
 80036ec:	20000000 	.word	0x20000000
 80036f0:	20000c48 	.word	0x20000c48
 80036f4:	20000c51 	.word	0x20000c51
 80036f8:	20000c50 	.word	0x20000c50

080036fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003702:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_MspInit+0x4c>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	4a10      	ldr	r2, [pc, #64]	; (8003748 <HAL_MspInit+0x4c>)
 8003708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370c:	6413      	str	r3, [r2, #64]	; 0x40
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <HAL_MspInit+0x4c>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003716:	607b      	str	r3, [r7, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371a:	4b0b      	ldr	r3, [pc, #44]	; (8003748 <HAL_MspInit+0x4c>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <HAL_MspInit+0x4c>)
 8003720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003724:	6453      	str	r3, [r2, #68]	; 0x44
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_MspInit+0x4c>)
 8003728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003732:	2200      	movs	r2, #0
 8003734:	210f      	movs	r1, #15
 8003736:	f06f 0001 	mvn.w	r0, #1
 800373a:	f001 fbb9 	bl	8004eb0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800373e:	bf00      	nop
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003754:	f107 031c 	add.w	r3, r7, #28
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <HAL_ADC_MspInit+0xc8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d124      	bne.n	80037b8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800376e:	4b2a      	ldr	r3, [pc, #168]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003778:	6453      	str	r3, [r2, #68]	; 0x44
 800377a:	4b27      	ldr	r3, [pc, #156]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	61bb      	str	r3, [r7, #24]
 8003784:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003786:	4b24      	ldr	r3, [pc, #144]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b21      	ldr	r3, [pc, #132]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800379e:	2301      	movs	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037a2:	2303      	movs	r3, #3
 80037a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	f107 031c 	add.w	r3, r7, #28
 80037ae:	4619      	mov	r1, r3
 80037b0:	481a      	ldr	r0, [pc, #104]	; (800381c <HAL_ADC_MspInit+0xd0>)
 80037b2:	f002 fa73 	bl	8005c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80037b6:	e029      	b.n	800380c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_ADC_MspInit+0xd4>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d124      	bne.n	800380c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	4a14      	ldr	r2, [pc, #80]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 80037c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037cc:	6453      	str	r3, [r2, #68]	; 0x44
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 80037d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d6:	613b      	str	r3, [r7, #16]
 80037d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a0e      	ldr	r2, [pc, #56]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 80037e0:	f043 0320 	orr.w	r3, r3, #32
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <HAL_ADC_MspInit+0xcc>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80037f2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80037f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f8:	2303      	movs	r3, #3
 80037fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	4619      	mov	r1, r3
 8003806:	4807      	ldr	r0, [pc, #28]	; (8003824 <HAL_ADC_MspInit+0xd8>)
 8003808:	f002 fa48 	bl	8005c9c <HAL_GPIO_Init>
}
 800380c:	bf00      	nop
 800380e:	3730      	adds	r7, #48	; 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40012000 	.word	0x40012000
 8003818:	40023800 	.word	0x40023800
 800381c:	40020000 	.word	0x40020000
 8003820:	40012200 	.word	0x40012200
 8003824:	40021400 	.word	0x40021400

08003828 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08a      	sub	sp, #40	; 0x28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003830:	f107 0314 	add.w	r3, r7, #20
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]
 800383e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_DAC_MspInit+0x84>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d12b      	bne.n	80038a2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <HAL_DAC_MspInit+0x88>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <HAL_DAC_MspInit+0x88>)
 8003850:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <HAL_DAC_MspInit+0x88>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800385e:	613b      	str	r3, [r7, #16]
 8003860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_DAC_MspInit+0x88>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	4a12      	ldr	r2, [pc, #72]	; (80038b0 <HAL_DAC_MspInit+0x88>)
 8003868:	f043 0301 	orr.w	r3, r3, #1
 800386c:	6313      	str	r3, [r2, #48]	; 0x30
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <HAL_DAC_MspInit+0x88>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800387a:	2310      	movs	r3, #16
 800387c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800387e:	2303      	movs	r3, #3
 8003880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003882:	2300      	movs	r3, #0
 8003884:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003886:	f107 0314 	add.w	r3, r7, #20
 800388a:	4619      	mov	r1, r3
 800388c:	4809      	ldr	r0, [pc, #36]	; (80038b4 <HAL_DAC_MspInit+0x8c>)
 800388e:	f002 fa05 	bl	8005c9c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8003892:	2200      	movs	r2, #0
 8003894:	210f      	movs	r1, #15
 8003896:	2036      	movs	r0, #54	; 0x36
 8003898:	f001 fb0a 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800389c:	2036      	movs	r0, #54	; 0x36
 800389e:	f001 fb23 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80038a2:	bf00      	nop
 80038a4:	3728      	adds	r7, #40	; 0x28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	40007400 	.word	0x40007400
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40020000 	.word	0x40020000

080038b8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0d      	ldr	r2, [pc, #52]	; (80038fc <HAL_DMA2D_MspInit+0x44>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d113      	bne.n	80038f2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_DMA2D_MspInit+0x48>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a0c      	ldr	r2, [pc, #48]	; (8003900 <HAL_DMA2D_MspInit+0x48>)
 80038d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <HAL_DMA2D_MspInit+0x48>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2105      	movs	r1, #5
 80038e6:	205a      	movs	r0, #90	; 0x5a
 80038e8:	f001 fae2 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80038ec:	205a      	movs	r0, #90	; 0x5a
 80038ee:	f001 fafb 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	4002b000 	.word	0x4002b000
 8003900:	40023800 	.word	0x40023800

08003904 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b0ac      	sub	sp, #176	; 0xb0
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
 800391a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800391c:	f107 0318 	add.w	r3, r7, #24
 8003920:	2284      	movs	r2, #132	; 0x84
 8003922:	2100      	movs	r1, #0
 8003924:	4618      	mov	r0, r3
 8003926:	f00a fa77 	bl	800de18 <memset>
  if(hi2c->Instance==I2C1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a44      	ldr	r2, [pc, #272]	; (8003a40 <HAL_I2C_MspInit+0x13c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d13d      	bne.n	80039b0 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003938:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800393a:	2300      	movs	r3, #0
 800393c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800393e:	f107 0318 	add.w	r3, r7, #24
 8003942:	4618      	mov	r0, r3
 8003944:	f004 fb7a 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800394e:	f7fe fcdd 	bl	800230c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003952:	4b3c      	ldr	r3, [pc, #240]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 8003954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003956:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	6313      	str	r3, [r2, #48]	; 0x30
 800395e:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800396a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800396e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003972:	2312      	movs	r3, #18
 8003974:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397e:	2303      	movs	r3, #3
 8003980:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003984:	2304      	movs	r3, #4
 8003986:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800398a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800398e:	4619      	mov	r1, r3
 8003990:	482d      	ldr	r0, [pc, #180]	; (8003a48 <HAL_I2C_MspInit+0x144>)
 8003992:	f002 f983 	bl	8005c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003996:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	4a2a      	ldr	r2, [pc, #168]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 800399c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039a0:	6413      	str	r3, [r2, #64]	; 0x40
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039aa:	613b      	str	r3, [r7, #16]
 80039ac:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80039ae:	e042      	b.n	8003a36 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <HAL_I2C_MspInit+0x148>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d13d      	bne.n	8003a36 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80039ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80039be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039c6:	f107 0318 	add.w	r3, r7, #24
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fb36 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80039d6:	f7fe fc99 	bl	800230c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 80039e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80039f2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80039f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039fa:	2312      	movs	r3, #18
 80039fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a06:	2303      	movs	r3, #3
 8003a08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a16:	4619      	mov	r1, r3
 8003a18:	480d      	ldr	r0, [pc, #52]	; (8003a50 <HAL_I2C_MspInit+0x14c>)
 8003a1a:	f002 f93f 	bl	8005c9c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a1e:	4b09      	ldr	r3, [pc, #36]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	4a08      	ldr	r2, [pc, #32]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 8003a24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a28:	6413      	str	r3, [r2, #64]	; 0x40
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_I2C_MspInit+0x140>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
}
 8003a36:	bf00      	nop
 8003a38:	37b0      	adds	r7, #176	; 0xb0
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40005400 	.word	0x40005400
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40020400 	.word	0x40020400
 8003a4c:	40005c00 	.word	0x40005c00
 8003a50:	40021c00 	.word	0x40021c00

08003a54 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a15      	ldr	r2, [pc, #84]	; (8003ab8 <HAL_I2C_MspDeInit+0x64>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d110      	bne.n	8003a88 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <HAL_I2C_MspDeInit+0x68>)
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	4a14      	ldr	r2, [pc, #80]	; (8003abc <HAL_I2C_MspDeInit+0x68>)
 8003a6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a70:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003a72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a76:	4812      	ldr	r0, [pc, #72]	; (8003ac0 <HAL_I2C_MspDeInit+0x6c>)
 8003a78:	f002 fabc 	bl	8005ff4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a80:	480f      	ldr	r0, [pc, #60]	; (8003ac0 <HAL_I2C_MspDeInit+0x6c>)
 8003a82:	f002 fab7 	bl	8005ff4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003a86:	e013      	b.n	8003ab0 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	; (8003ac4 <HAL_I2C_MspDeInit+0x70>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d10e      	bne.n	8003ab0 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <HAL_I2C_MspDeInit+0x68>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a09      	ldr	r2, [pc, #36]	; (8003abc <HAL_I2C_MspDeInit+0x68>)
 8003a98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	4809      	ldr	r0, [pc, #36]	; (8003ac8 <HAL_I2C_MspDeInit+0x74>)
 8003aa2:	f002 faa7 	bl	8005ff4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003aaa:	4807      	ldr	r0, [pc, #28]	; (8003ac8 <HAL_I2C_MspDeInit+0x74>)
 8003aac:	f002 faa2 	bl	8005ff4 <HAL_GPIO_DeInit>
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40005400 	.word	0x40005400
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40020400 	.word	0x40020400
 8003ac4:	40005c00 	.word	0x40005c00
 8003ac8:	40021c00 	.word	0x40021c00

08003acc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b0ae      	sub	sp, #184	; 0xb8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	605a      	str	r2, [r3, #4]
 8003ade:	609a      	str	r2, [r3, #8]
 8003ae0:	60da      	str	r2, [r3, #12]
 8003ae2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ae4:	f107 0320 	add.w	r3, r7, #32
 8003ae8:	2284      	movs	r2, #132	; 0x84
 8003aea:	2100      	movs	r1, #0
 8003aec:	4618      	mov	r0, r3
 8003aee:	f00a f993 	bl	800de18 <memset>
  if(hltdc->Instance==LTDC)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6f      	ldr	r2, [pc, #444]	; (8003cb4 <HAL_LTDC_MspInit+0x1e8>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	f040 80d6 	bne.w	8003caa <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003afe:	2308      	movs	r3, #8
 8003b00:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003b02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b06:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003b08:	2305      	movs	r3, #5
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003b10:	2303      	movs	r3, #3
 8003b12:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003b14:	2301      	movs	r3, #1
 8003b16:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b1e:	f107 0320 	add.w	r3, r7, #32
 8003b22:	4618      	mov	r0, r3
 8003b24:	f004 fa8a 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003b2e:	f7fe fbed 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003b32:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b36:	4a60      	ldr	r2, [pc, #384]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3e:	4b5e      	ldr	r3, [pc, #376]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b4a:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4a5a      	ldr	r2, [pc, #360]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b50:	f043 0310 	orr.w	r3, r3, #16
 8003b54:	6313      	str	r3, [r2, #48]	; 0x30
 8003b56:	4b58      	ldr	r3, [pc, #352]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003b62:	4b55      	ldr	r3, [pc, #340]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	4a54      	ldr	r2, [pc, #336]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6e:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003b7a:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b84:	6313      	str	r3, [r2, #48]	; 0x30
 8003b86:	4b4c      	ldr	r3, [pc, #304]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b92:	4b49      	ldr	r3, [pc, #292]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	4a48      	ldr	r2, [pc, #288]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003b98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9e:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba6:	60fb      	str	r3, [r7, #12]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003baa:	4b43      	ldr	r3, [pc, #268]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a42      	ldr	r2, [pc, #264]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <HAL_LTDC_MspInit+0x1ec>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003bc2:	2310      	movs	r3, #16
 8003bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bda:	230e      	movs	r3, #14
 8003bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003be0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003be4:	4619      	mov	r1, r3
 8003be6:	4835      	ldr	r0, [pc, #212]	; (8003cbc <HAL_LTDC_MspInit+0x1f0>)
 8003be8:	f002 f858 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003bec:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003bf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c06:	230e      	movs	r3, #14
 8003c08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c10:	4619      	mov	r1, r3
 8003c12:	482b      	ldr	r0, [pc, #172]	; (8003cc0 <HAL_LTDC_MspInit+0x1f4>)
 8003c14:	f002 f842 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003c18:	23f7      	movs	r3, #247	; 0xf7
 8003c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c1e:	2302      	movs	r3, #2
 8003c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c30:	230e      	movs	r3, #14
 8003c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003c36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4821      	ldr	r0, [pc, #132]	; (8003cc4 <HAL_LTDC_MspInit+0x1f8>)
 8003c3e:	f002 f82d 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003c5c:	2309      	movs	r3, #9
 8003c5e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003c62:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4817      	ldr	r0, [pc, #92]	; (8003cc8 <HAL_LTDC_MspInit+0x1fc>)
 8003c6a:	f002 f817 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003c6e:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c76:	2302      	movs	r3, #2
 8003c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c88:	230e      	movs	r3, #14
 8003c8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c8e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c92:	4619      	mov	r1, r3
 8003c94:	480d      	ldr	r0, [pc, #52]	; (8003ccc <HAL_LTDC_MspInit+0x200>)
 8003c96:	f002 f801 	bl	8005c9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	2105      	movs	r1, #5
 8003c9e:	2058      	movs	r0, #88	; 0x58
 8003ca0:	f001 f906 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003ca4:	2058      	movs	r0, #88	; 0x58
 8003ca6:	f001 f91f 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003caa:	bf00      	nop
 8003cac:	37b8      	adds	r7, #184	; 0xb8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40016800 	.word	0x40016800
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	40022400 	.word	0x40022400
 8003cc4:	40022800 	.word	0x40022800
 8003cc8:	40021800 	.word	0x40021800
 8003ccc:	40022000 	.word	0x40022000

08003cd0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b0a4      	sub	sp, #144	; 0x90
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	2284      	movs	r2, #132	; 0x84
 8003cde:	2100      	movs	r1, #0
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f00a f899 	bl	800de18 <memset>
  if(hrtc->Instance==RTC)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a0e      	ldr	r2, [pc, #56]	; (8003d24 <HAL_RTC_MspInit+0x54>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d114      	bne.n	8003d1a <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 f99c 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003d0a:	f7fe faff 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RTC_MspInit+0x58>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a05      	ldr	r2, [pc, #20]	; (8003d28 <HAL_RTC_MspInit+0x58>)
 8003d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d1a:	bf00      	nop
 8003d1c:	3790      	adds	r7, #144	; 0x90
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40002800 	.word	0x40002800
 8003d28:	40023800 	.word	0x40023800

08003d2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08a      	sub	sp, #40	; 0x28
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 0314 	add.w	r3, r7, #20
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a25      	ldr	r2, [pc, #148]	; (8003de0 <HAL_SPI_MspInit+0xb4>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d144      	bne.n	8003dd8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d4e:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	4a24      	ldr	r2, [pc, #144]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d58:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b1c      	ldr	r3, [pc, #112]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d7e:	4b19      	ldr	r3, [pc, #100]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d82:	4a18      	ldr	r2, [pc, #96]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d84:	f043 0302 	orr.w	r3, r3, #2
 8003d88:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8a:	4b16      	ldr	r3, [pc, #88]	; (8003de4 <HAL_SPI_MspInit+0xb8>)
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003d96:	2303      	movs	r3, #3
 8003d98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003da2:	2303      	movs	r3, #3
 8003da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003da6:	2305      	movs	r3, #5
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003daa:	f107 0314 	add.w	r3, r7, #20
 8003dae:	4619      	mov	r1, r3
 8003db0:	480d      	ldr	r0, [pc, #52]	; (8003de8 <HAL_SPI_MspInit+0xbc>)
 8003db2:	f001 ff73 	bl	8005c9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003db6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dc8:	2305      	movs	r3, #5
 8003dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dcc:	f107 0314 	add.w	r3, r7, #20
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4806      	ldr	r0, [pc, #24]	; (8003dec <HAL_SPI_MspInit+0xc0>)
 8003dd4:	f001 ff62 	bl	8005c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003dd8:	bf00      	nop
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40003800 	.word	0x40003800
 8003de4:	40023800 	.word	0x40023800
 8003de8:	40022000 	.word	0x40022000
 8003dec:	40020400 	.word	0x40020400

08003df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b08e      	sub	sp, #56	; 0x38
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	605a      	str	r2, [r3, #4]
 8003e02:	609a      	str	r2, [r3, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <HAL_TIM_Base_MspInit+0x10c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d10c      	bne.n	8003e2c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e12:	4b3b      	ldr	r3, [pc, #236]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e16:	4a3a      	ldr	r2, [pc, #232]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1e:	4b38      	ldr	r3, [pc, #224]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e2a:	e062      	b.n	8003ef2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e34:	d10c      	bne.n	8003e50 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e36:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	4a31      	ldr	r2, [pc, #196]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6413      	str	r3, [r2, #64]	; 0x40
 8003e42:	4b2f      	ldr	r3, [pc, #188]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
}
 8003e4e:	e050      	b.n	8003ef2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a2b      	ldr	r2, [pc, #172]	; (8003f04 <HAL_TIM_Base_MspInit+0x114>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d10c      	bne.n	8003e74 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e5a:	4b29      	ldr	r3, [pc, #164]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	4a28      	ldr	r2, [pc, #160]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e60:	f043 0302 	orr.w	r3, r3, #2
 8003e64:	6413      	str	r3, [r2, #64]	; 0x40
 8003e66:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	61bb      	str	r3, [r7, #24]
 8003e70:	69bb      	ldr	r3, [r7, #24]
}
 8003e72:	e03e      	b.n	8003ef2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a23      	ldr	r2, [pc, #140]	; (8003f08 <HAL_TIM_Base_MspInit+0x118>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d10c      	bne.n	8003e98 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003e7e:	4b20      	ldr	r3, [pc, #128]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	6413      	str	r3, [r2, #64]	; 0x40
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	697b      	ldr	r3, [r7, #20]
}
 8003e96:	e02c      	b.n	8003ef2 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a1b      	ldr	r2, [pc, #108]	; (8003f0c <HAL_TIM_Base_MspInit+0x11c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d127      	bne.n	8003ef2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ea2:	4b17      	ldr	r3, [pc, #92]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	4a16      	ldr	r2, [pc, #88]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	6453      	str	r3, [r2, #68]	; 0x44
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003eba:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	4a10      	ldr	r2, [pc, #64]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_TIM_Base_MspInit+0x110>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ed2:	2304      	movs	r3, #4
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eda:	2300      	movs	r3, #0
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eea:	4619      	mov	r1, r3
 8003eec:	4808      	ldr	r0, [pc, #32]	; (8003f10 <HAL_TIM_Base_MspInit+0x120>)
 8003eee:	f001 fed5 	bl	8005c9c <HAL_GPIO_Init>
}
 8003ef2:	bf00      	nop
 8003ef4:	3738      	adds	r7, #56	; 0x38
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40010000 	.word	0x40010000
 8003f00:	40023800 	.word	0x40023800
 8003f04:	40000400 	.word	0x40000400
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40010400 	.word	0x40010400
 8003f10:	40022000 	.word	0x40022000

08003f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b0b0      	sub	sp, #192	; 0xc0
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f1c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	60da      	str	r2, [r3, #12]
 8003f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f30:	2284      	movs	r2, #132	; 0x84
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f009 ff6f 	bl	800de18 <memset>
  if(huart->Instance==UART7)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a79      	ldr	r2, [pc, #484]	; (8004124 <HAL_UART_MspInit+0x210>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d145      	bne.n	8003fd0 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003f44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f54:	4618      	mov	r0, r3
 8003f56:	f004 f871 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003f60:	f7fe f9d4 	bl	800230c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003f64:	4b70      	ldr	r3, [pc, #448]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	4a6f      	ldr	r2, [pc, #444]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f6e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f70:	4b6d      	ldr	r3, [pc, #436]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f74:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f7c:	4b6a      	ldr	r3, [pc, #424]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f80:	4a69      	ldr	r2, [pc, #420]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003f82:	f043 0320 	orr.w	r3, r3, #32
 8003f86:	6313      	str	r3, [r2, #48]	; 0x30
 8003f88:	4b67      	ldr	r3, [pc, #412]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	623b      	str	r3, [r7, #32]
 8003f92:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003f94:	23c0      	movs	r3, #192	; 0xc0
 8003f96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003fac:	2308      	movs	r3, #8
 8003fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fb2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	485c      	ldr	r0, [pc, #368]	; (800412c <HAL_UART_MspInit+0x218>)
 8003fba:	f001 fe6f 	bl	8005c9c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	2105      	movs	r1, #5
 8003fc2:	2052      	movs	r0, #82	; 0x52
 8003fc4:	f000 ff74 	bl	8004eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003fc8:	2052      	movs	r0, #82	; 0x52
 8003fca:	f000 ff8d 	bl	8004ee8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003fce:	e0a4      	b.n	800411a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a56      	ldr	r2, [pc, #344]	; (8004130 <HAL_UART_MspInit+0x21c>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d15d      	bne.n	8004096 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003fda:	2340      	movs	r3, #64	; 0x40
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fe2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f004 f828 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8003ff2:	f7fe f98b 	bl	800230c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ff6:	4b4c      	ldr	r3, [pc, #304]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	4a4b      	ldr	r2, [pc, #300]	; (8004128 <HAL_UART_MspInit+0x214>)
 8003ffc:	f043 0310 	orr.w	r3, r3, #16
 8004000:	6453      	str	r3, [r2, #68]	; 0x44
 8004002:	4b49      	ldr	r3, [pc, #292]	; (8004128 <HAL_UART_MspInit+0x214>)
 8004004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004006:	f003 0310 	and.w	r3, r3, #16
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800400e:	4b46      	ldr	r3, [pc, #280]	; (8004128 <HAL_UART_MspInit+0x214>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	4a45      	ldr	r2, [pc, #276]	; (8004128 <HAL_UART_MspInit+0x214>)
 8004014:	f043 0302 	orr.w	r3, r3, #2
 8004018:	6313      	str	r3, [r2, #48]	; 0x30
 800401a:	4b43      	ldr	r3, [pc, #268]	; (8004128 <HAL_UART_MspInit+0x214>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004026:	4b40      	ldr	r3, [pc, #256]	; (8004128 <HAL_UART_MspInit+0x214>)
 8004028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402a:	4a3f      	ldr	r2, [pc, #252]	; (8004128 <HAL_UART_MspInit+0x214>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6313      	str	r3, [r2, #48]	; 0x30
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_UART_MspInit+0x214>)
 8004034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800403e:	2380      	movs	r3, #128	; 0x80
 8004040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004044:	2302      	movs	r3, #2
 8004046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800404a:	2300      	movs	r3, #0
 800404c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004050:	2300      	movs	r3, #0
 8004052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004056:	2307      	movs	r3, #7
 8004058:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800405c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004060:	4619      	mov	r1, r3
 8004062:	4834      	ldr	r0, [pc, #208]	; (8004134 <HAL_UART_MspInit+0x220>)
 8004064:	f001 fe1a 	bl	8005c9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800406c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004070:	2302      	movs	r3, #2
 8004072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004082:	2307      	movs	r3, #7
 8004084:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004088:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800408c:	4619      	mov	r1, r3
 800408e:	482a      	ldr	r0, [pc, #168]	; (8004138 <HAL_UART_MspInit+0x224>)
 8004090:	f001 fe04 	bl	8005c9c <HAL_GPIO_Init>
}
 8004094:	e041      	b.n	800411a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a28      	ldr	r2, [pc, #160]	; (800413c <HAL_UART_MspInit+0x228>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d13c      	bne.n	800411a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80040a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80040a6:	2300      	movs	r3, #0
 80040a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040b0:	4618      	mov	r0, r3
 80040b2:	f003 ffc3 	bl	800803c <HAL_RCCEx_PeriphCLKConfig>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80040bc:	f7fe f926 	bl	800230c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_UART_MspInit+0x214>)
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_UART_MspInit+0x214>)
 80040c6:	f043 0320 	orr.w	r3, r3, #32
 80040ca:	6453      	str	r3, [r2, #68]	; 0x44
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_UART_MspInit+0x214>)
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f003 0320 	and.w	r3, r3, #32
 80040d4:	613b      	str	r3, [r7, #16]
 80040d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040d8:	4b13      	ldr	r3, [pc, #76]	; (8004128 <HAL_UART_MspInit+0x214>)
 80040da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040dc:	4a12      	ldr	r2, [pc, #72]	; (8004128 <HAL_UART_MspInit+0x214>)
 80040de:	f043 0304 	orr.w	r3, r3, #4
 80040e2:	6313      	str	r3, [r2, #48]	; 0x30
 80040e4:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_UART_MspInit+0x214>)
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	60fb      	str	r3, [r7, #12]
 80040ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80040f0:	23c0      	movs	r3, #192	; 0xc0
 80040f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f6:	2302      	movs	r3, #2
 80040f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004102:	2303      	movs	r3, #3
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004108:	2308      	movs	r3, #8
 800410a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800410e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004112:	4619      	mov	r1, r3
 8004114:	480a      	ldr	r0, [pc, #40]	; (8004140 <HAL_UART_MspInit+0x22c>)
 8004116:	f001 fdc1 	bl	8005c9c <HAL_GPIO_Init>
}
 800411a:	bf00      	nop
 800411c:	37c0      	adds	r7, #192	; 0xc0
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40007800 	.word	0x40007800
 8004128:	40023800 	.word	0x40023800
 800412c:	40021400 	.word	0x40021400
 8004130:	40011000 	.word	0x40011000
 8004134:	40020400 	.word	0x40020400
 8004138:	40020000 	.word	0x40020000
 800413c:	40011400 	.word	0x40011400
 8004140:	40020800 	.word	0x40020800

08004144 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800414a:	1d3b      	adds	r3, r7, #4
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	60da      	str	r2, [r3, #12]
 8004156:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004158:	4b3a      	ldr	r3, [pc, #232]	; (8004244 <HAL_FMC_MspInit+0x100>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d16d      	bne.n	800423c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8004160:	4b38      	ldr	r3, [pc, #224]	; (8004244 <HAL_FMC_MspInit+0x100>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004166:	4b38      	ldr	r3, [pc, #224]	; (8004248 <HAL_FMC_MspInit+0x104>)
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	4a37      	ldr	r2, [pc, #220]	; (8004248 <HAL_FMC_MspInit+0x104>)
 800416c:	f043 0301 	orr.w	r3, r3, #1
 8004170:	6393      	str	r3, [r2, #56]	; 0x38
 8004172:	4b35      	ldr	r3, [pc, #212]	; (8004248 <HAL_FMC_MspInit+0x104>)
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 800417e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004182:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004184:	2302      	movs	r3, #2
 8004186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004188:	2300      	movs	r3, #0
 800418a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418c:	2303      	movs	r3, #3
 800418e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004190:	230c      	movs	r3, #12
 8004192:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004194:	1d3b      	adds	r3, r7, #4
 8004196:	4619      	mov	r1, r3
 8004198:	482c      	ldr	r0, [pc, #176]	; (800424c <HAL_FMC_MspInit+0x108>)
 800419a:	f001 fd7f 	bl	8005c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 800419e:	f248 1333 	movw	r3, #33075	; 0x8133
 80041a2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041a4:	2302      	movs	r3, #2
 80041a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ac:	2303      	movs	r3, #3
 80041ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041b0:	230c      	movs	r3, #12
 80041b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	4619      	mov	r1, r3
 80041b8:	4825      	ldr	r0, [pc, #148]	; (8004250 <HAL_FMC_MspInit+0x10c>)
 80041ba:	f001 fd6f 	bl	8005c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80041be:	f24c 7303 	movw	r3, #50947	; 0xc703
 80041c2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041c4:	2302      	movs	r3, #2
 80041c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041cc:	2303      	movs	r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041d0:	230c      	movs	r3, #12
 80041d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80041d4:	1d3b      	adds	r3, r7, #4
 80041d6:	4619      	mov	r1, r3
 80041d8:	481e      	ldr	r0, [pc, #120]	; (8004254 <HAL_FMC_MspInit+0x110>)
 80041da:	f001 fd5f 	bl	8005c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80041de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80041e2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041e4:	2302      	movs	r3, #2
 80041e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041ec:	2303      	movs	r3, #3
 80041ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041f0:	230c      	movs	r3, #12
 80041f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	4619      	mov	r1, r3
 80041f8:	4817      	ldr	r0, [pc, #92]	; (8004258 <HAL_FMC_MspInit+0x114>)
 80041fa:	f001 fd4f 	bl	8005c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80041fe:	2328      	movs	r3, #40	; 0x28
 8004200:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004202:	2302      	movs	r3, #2
 8004204:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004206:	2300      	movs	r3, #0
 8004208:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800420a:	2303      	movs	r3, #3
 800420c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800420e:	230c      	movs	r3, #12
 8004210:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004212:	1d3b      	adds	r3, r7, #4
 8004214:	4619      	mov	r1, r3
 8004216:	4811      	ldr	r0, [pc, #68]	; (800425c <HAL_FMC_MspInit+0x118>)
 8004218:	f001 fd40 	bl	8005c9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800421c:	2308      	movs	r3, #8
 800421e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004220:	2302      	movs	r3, #2
 8004222:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	2303      	movs	r3, #3
 800422a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800422c:	230c      	movs	r3, #12
 800422e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	4619      	mov	r1, r3
 8004234:	480a      	ldr	r0, [pc, #40]	; (8004260 <HAL_FMC_MspInit+0x11c>)
 8004236:	f001 fd31 	bl	8005c9c <HAL_GPIO_Init>
 800423a:	e000      	b.n	800423e <HAL_FMC_MspInit+0xfa>
    return;
 800423c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	20000c54 	.word	0x20000c54
 8004248:	40023800 	.word	0x40023800
 800424c:	40021000 	.word	0x40021000
 8004250:	40021800 	.word	0x40021800
 8004254:	40020c00 	.word	0x40020c00
 8004258:	40021400 	.word	0x40021400
 800425c:	40021c00 	.word	0x40021c00
 8004260:	40020800 	.word	0x40020800

08004264 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800426c:	f7ff ff6a 	bl	8004144 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004270:	bf00      	nop
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b08c      	sub	sp, #48	; 0x30
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004288:	2200      	movs	r2, #0
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	2036      	movs	r0, #54	; 0x36
 800428e:	f000 fe0f 	bl	8004eb0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004292:	2036      	movs	r0, #54	; 0x36
 8004294:	f000 fe28 	bl	8004ee8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004298:	4b1f      	ldr	r3, [pc, #124]	; (8004318 <HAL_InitTick+0xa0>)
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <HAL_InitTick+0xa0>)
 800429e:	f043 0310 	orr.w	r3, r3, #16
 80042a2:	6413      	str	r3, [r2, #64]	; 0x40
 80042a4:	4b1c      	ldr	r3, [pc, #112]	; (8004318 <HAL_InitTick+0xa0>)
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f003 0310 	and.w	r3, r3, #16
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80042b0:	f107 0210 	add.w	r2, r7, #16
 80042b4:	f107 0314 	add.w	r3, r7, #20
 80042b8:	4611      	mov	r1, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f003 fe8c 	bl	8007fd8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80042c0:	f003 fe62 	bl	8007f88 <HAL_RCC_GetPCLK1Freq>
 80042c4:	4603      	mov	r3, r0
 80042c6:	005b      	lsls	r3, r3, #1
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042cc:	4a13      	ldr	r2, [pc, #76]	; (800431c <HAL_InitTick+0xa4>)
 80042ce:	fba2 2303 	umull	r2, r3, r2, r3
 80042d2:	0c9b      	lsrs	r3, r3, #18
 80042d4:	3b01      	subs	r3, #1
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042d8:	4b11      	ldr	r3, [pc, #68]	; (8004320 <HAL_InitTick+0xa8>)
 80042da:	4a12      	ldr	r2, [pc, #72]	; (8004324 <HAL_InitTick+0xac>)
 80042dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042de:	4b10      	ldr	r3, [pc, #64]	; (8004320 <HAL_InitTick+0xa8>)
 80042e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042e4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042e6:	4a0e      	ldr	r2, [pc, #56]	; (8004320 <HAL_InitTick+0xa8>)
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042ec:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <HAL_InitTick+0xa8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042f2:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <HAL_InitTick+0xa8>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80042f8:	4809      	ldr	r0, [pc, #36]	; (8004320 <HAL_InitTick+0xa8>)
 80042fa:	f004 ffa3 	bl	8009244 <HAL_TIM_Base_Init>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004304:	4806      	ldr	r0, [pc, #24]	; (8004320 <HAL_InitTick+0xa8>)
 8004306:	f004 fff5 	bl	80092f4 <HAL_TIM_Base_Start_IT>
 800430a:	4603      	mov	r3, r0
 800430c:	e000      	b.n	8004310 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
}
 8004310:	4618      	mov	r0, r3
 8004312:	3730      	adds	r7, #48	; 0x30
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40023800 	.word	0x40023800
 800431c:	431bde83 	.word	0x431bde83
 8004320:	20000c58 	.word	0x20000c58
 8004324:	40001000 	.word	0x40001000

08004328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800432c:	e7fe      	b.n	800432c <NMI_Handler+0x4>

0800432e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800432e:	b480      	push	{r7}
 8004330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004332:	e7fe      	b.n	8004332 <HardFault_Handler+0x4>

08004334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004338:	e7fe      	b.n	8004338 <MemManage_Handler+0x4>

0800433a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800433a:	b480      	push	{r7}
 800433c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800433e:	e7fe      	b.n	800433e <BusFault_Handler+0x4>

08004340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004344:	e7fe      	b.n	8004344 <UsageFault_Handler+0x4>

08004346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004346:	b480      	push	{r7}
 8004348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800434a:	bf00      	nop
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004358:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800435c:	f001 ff88 	bl	8006270 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004360:	bf00      	nop
 8004362:	bd80      	pop	{r7, pc}

08004364 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004368:	4b06      	ldr	r3, [pc, #24]	; (8004384 <TIM6_DAC_IRQHandler+0x20>)
 800436a:	791b      	ldrb	r3, [r3, #4]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004372:	4804      	ldr	r0, [pc, #16]	; (8004384 <TIM6_DAC_IRQHandler+0x20>)
 8004374:	f000 fde8 	bl	8004f48 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004378:	4803      	ldr	r0, [pc, #12]	; (8004388 <TIM6_DAC_IRQHandler+0x24>)
 800437a:	f005 f833 	bl	80093e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20000418 	.word	0x20000418
 8004388:	20000c58 	.word	0x20000c58

0800438c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004390:	4802      	ldr	r0, [pc, #8]	; (800439c <UART7_IRQHandler+0x10>)
 8004392:	f005 fd29 	bl	8009de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004396:	bf00      	nop
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	200007ac 	.word	0x200007ac

080043a0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043a4:	4802      	ldr	r0, [pc, #8]	; (80043b0 <LTDC_IRQHandler+0x10>)
 80043a6:	f002 fe85 	bl	80070b4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000504 	.word	0x20000504

080043b4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80043b8:	4802      	ldr	r0, [pc, #8]	; (80043c4 <DMA2D_IRQHandler+0x10>)
 80043ba:	f001 fa31 	bl	8005820 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	2000042c 	.word	0x2000042c

080043c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043d0:	4a14      	ldr	r2, [pc, #80]	; (8004424 <_sbrk+0x5c>)
 80043d2:	4b15      	ldr	r3, [pc, #84]	; (8004428 <_sbrk+0x60>)
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043dc:	4b13      	ldr	r3, [pc, #76]	; (800442c <_sbrk+0x64>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d102      	bne.n	80043ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043e4:	4b11      	ldr	r3, [pc, #68]	; (800442c <_sbrk+0x64>)
 80043e6:	4a12      	ldr	r2, [pc, #72]	; (8004430 <_sbrk+0x68>)
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ea:	4b10      	ldr	r3, [pc, #64]	; (800442c <_sbrk+0x64>)
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	693a      	ldr	r2, [r7, #16]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d207      	bcs.n	8004408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043f8:	f009 fcd4 	bl	800dda4 <__errno>
 80043fc:	4603      	mov	r3, r0
 80043fe:	220c      	movs	r2, #12
 8004400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004402:	f04f 33ff 	mov.w	r3, #4294967295
 8004406:	e009      	b.n	800441c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004408:	4b08      	ldr	r3, [pc, #32]	; (800442c <_sbrk+0x64>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <_sbrk+0x64>)
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4413      	add	r3, r2
 8004416:	4a05      	ldr	r2, [pc, #20]	; (800442c <_sbrk+0x64>)
 8004418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800441a:	68fb      	ldr	r3, [r7, #12]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20050000 	.word	0x20050000
 8004428:	00000400 	.word	0x00000400
 800442c:	20000ca4 	.word	0x20000ca4
 8004430:	20004a08 	.word	0x20004a08

08004434 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004438:	4b06      	ldr	r3, [pc, #24]	; (8004454 <SystemInit+0x20>)
 800443a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443e:	4a05      	ldr	r2, [pc, #20]	; (8004454 <SystemInit+0x20>)
 8004440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	e000ed00 	.word	0xe000ed00

08004458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004490 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800445c:	480d      	ldr	r0, [pc, #52]	; (8004494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800445e:	490e      	ldr	r1, [pc, #56]	; (8004498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004460:	4a0e      	ldr	r2, [pc, #56]	; (800449c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004464:	e002      	b.n	800446c <LoopCopyDataInit>

08004466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800446a:	3304      	adds	r3, #4

0800446c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800446c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800446e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004470:	d3f9      	bcc.n	8004466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004472:	4a0b      	ldr	r2, [pc, #44]	; (80044a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004474:	4c0b      	ldr	r4, [pc, #44]	; (80044a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004478:	e001      	b.n	800447e <LoopFillZerobss>

0800447a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800447a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800447c:	3204      	adds	r2, #4

0800447e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800447e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004480:	d3fb      	bcc.n	800447a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004482:	f7ff ffd7 	bl	8004434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004486:	f009 fc93 	bl	800ddb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800448a:	f7fc fa89 	bl	80009a0 <main>
  bx  lr    
 800448e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004490:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004498:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 800449c:	080134bc 	.word	0x080134bc
  ldr r2, =_sbss
 80044a0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80044a4:	20004a08 	.word	0x20004a08

080044a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044a8:	e7fe      	b.n	80044a8 <ADC_IRQHandler>

080044aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044ae:	2003      	movs	r0, #3
 80044b0:	f000 fcf3 	bl	8004e9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044b4:	200f      	movs	r0, #15
 80044b6:	f7ff fedf 	bl	8004278 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044ba:	f7ff f91f 	bl	80036fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044c8:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <HAL_IncTick+0x20>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_IncTick+0x24>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4413      	add	r3, r2
 80044d4:	4a04      	ldr	r2, [pc, #16]	; (80044e8 <HAL_IncTick+0x24>)
 80044d6:	6013      	str	r3, [r2, #0]
}
 80044d8:	bf00      	nop
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	20000044 	.word	0x20000044
 80044e8:	20000ca8 	.word	0x20000ca8

080044ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	af00      	add	r7, sp, #0
  return uwTick;
 80044f0:	4b03      	ldr	r3, [pc, #12]	; (8004500 <HAL_GetTick+0x14>)
 80044f2:	681b      	ldr	r3, [r3, #0]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop
 8004500:	20000ca8 	.word	0x20000ca8

08004504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800450c:	f7ff ffee 	bl	80044ec <HAL_GetTick>
 8004510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451c:	d005      	beq.n	800452a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <HAL_Delay+0x44>)
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	4413      	add	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800452a:	bf00      	nop
 800452c:	f7ff ffde 	bl	80044ec <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	429a      	cmp	r2, r3
 800453a:	d8f7      	bhi.n	800452c <HAL_Delay+0x28>
  {
  }
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000044 	.word	0x20000044

0800454c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e031      	b.n	80045c6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff f8ee 	bl	800374c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004582:	f003 0310 	and.w	r3, r3, #16
 8004586:	2b00      	cmp	r3, #0
 8004588:	d116      	bne.n	80045b8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458e:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <HAL_ADC_Init+0x84>)
 8004590:	4013      	ands	r3, r2
 8004592:	f043 0202 	orr.w	r2, r3, #2
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 fad6 	bl	8004b4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045aa:	f023 0303 	bic.w	r3, r3, #3
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	641a      	str	r2, [r3, #64]	; 0x40
 80045b6:	e001      	b.n	80045bc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	ffffeefd 	.word	0xffffeefd

080045d4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d101      	bne.n	80045ee <HAL_ADC_Start+0x1a>
 80045ea:	2302      	movs	r3, #2
 80045ec:	e0ad      	b.n	800474a <HAL_ADC_Start+0x176>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d018      	beq.n	8004636 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0201 	orr.w	r2, r2, #1
 8004612:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004614:	4b50      	ldr	r3, [pc, #320]	; (8004758 <HAL_ADC_Start+0x184>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a50      	ldr	r2, [pc, #320]	; (800475c <HAL_ADC_Start+0x188>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	0c9a      	lsrs	r2, r3, #18
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004628:	e002      	b.n	8004630 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3b01      	subs	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f9      	bne.n	800462a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d175      	bne.n	8004730 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <HAL_ADC_Start+0x18c>)
 800464a:	4013      	ands	r3, r2
 800464c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800466a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	d106      	bne.n	800468e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004684:	f023 0206 	bic.w	r2, r3, #6
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	645a      	str	r2, [r3, #68]	; 0x44
 800468c:	e002      	b.n	8004694 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <HAL_ADC_Start+0x190>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f003 031f 	and.w	r3, r3, #31
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10f      	bne.n	80046d2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d143      	bne.n	8004748 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	e03a      	b.n	8004748 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a24      	ldr	r2, [pc, #144]	; (8004768 <HAL_ADC_Start+0x194>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d10e      	bne.n	80046fa <HAL_ADC_Start+0x126>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046f8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80046fa:	4b1a      	ldr	r3, [pc, #104]	; (8004764 <HAL_ADC_Start+0x190>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f003 0310 	and.w	r3, r3, #16
 8004702:	2b00      	cmp	r3, #0
 8004704:	d120      	bne.n	8004748 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a18      	ldr	r2, [pc, #96]	; (800476c <HAL_ADC_Start+0x198>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d11b      	bne.n	8004748 <HAL_ADC_Start+0x174>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d114      	bne.n	8004748 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800472c:	609a      	str	r2, [r3, #8]
 800472e:	e00b      	b.n	8004748 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	f043 0210 	orr.w	r2, r3, #16
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004740:	f043 0201 	orr.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	2000003c 	.word	0x2000003c
 800475c:	431bde83 	.word	0x431bde83
 8004760:	fffff8fe 	.word	0xfffff8fe
 8004764:	40012300 	.word	0x40012300
 8004768:	40012000 	.word	0x40012000
 800476c:	40012200 	.word	0x40012200

08004770 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478c:	d113      	bne.n	80047b6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800479c:	d10b      	bne.n	80047b6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0220 	orr.w	r2, r3, #32
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e063      	b.n	800487e <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80047b6:	f7ff fe99 	bl	80044ec <HAL_GetTick>
 80047ba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047bc:	e021      	b.n	8004802 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d01d      	beq.n	8004802 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d007      	beq.n	80047dc <HAL_ADC_PollForConversion+0x6c>
 80047cc:	f7ff fe8e 	bl	80044ec <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d212      	bcs.n	8004802 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d00b      	beq.n	8004802 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0204 	orr.w	r2, r3, #4
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e03d      	b.n	800487e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b02      	cmp	r3, #2
 800480e:	d1d6      	bne.n	80047be <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0212 	mvn.w	r2, #18
 8004818:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d123      	bne.n	800487c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004838:	2b00      	cmp	r3, #0
 800483a:	d11f      	bne.n	800487c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004854:	2b00      	cmp	r3, #0
 8004856:	d111      	bne.n	800487c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800486c:	2b00      	cmp	r3, #0
 800486e:	d105      	bne.n	800487c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	f043 0201 	orr.w	r2, r3, #1
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}

08004886 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x1c>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e136      	b.n	8004b2a <HAL_ADC_ConfigChannel+0x28a>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b09      	cmp	r3, #9
 80048ca:	d93a      	bls.n	8004942 <HAL_ADC_ConfigChannel+0xa2>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048d4:	d035      	beq.n	8004942 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68d9      	ldr	r1, [r3, #12]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	461a      	mov	r2, r3
 80048e4:	4613      	mov	r3, r2
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	4413      	add	r3, r2
 80048ea:	3b1e      	subs	r3, #30
 80048ec:	2207      	movs	r2, #7
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43da      	mvns	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	400a      	ands	r2, r1
 80048fa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a8d      	ldr	r2, [pc, #564]	; (8004b38 <HAL_ADC_ConfigChannel+0x298>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10a      	bne.n	800491c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68d9      	ldr	r1, [r3, #12]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	061a      	lsls	r2, r3, #24
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800491a:	e035      	b.n	8004988 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68d9      	ldr	r1, [r3, #12]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	4618      	mov	r0, r3
 800492e:	4603      	mov	r3, r0
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	4403      	add	r3, r0
 8004934:	3b1e      	subs	r3, #30
 8004936:	409a      	lsls	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004940:	e022      	b.n	8004988 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6919      	ldr	r1, [r3, #16]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	b29b      	uxth	r3, r3
 800494e:	461a      	mov	r2, r3
 8004950:	4613      	mov	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4413      	add	r3, r2
 8004956:	2207      	movs	r2, #7
 8004958:	fa02 f303 	lsl.w	r3, r2, r3
 800495c:	43da      	mvns	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	400a      	ands	r2, r1
 8004964:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6919      	ldr	r1, [r3, #16]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	b29b      	uxth	r3, r3
 8004976:	4618      	mov	r0, r3
 8004978:	4603      	mov	r3, r0
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	4403      	add	r3, r0
 800497e:	409a      	lsls	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b06      	cmp	r3, #6
 800498e:	d824      	bhi.n	80049da <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	4413      	add	r3, r2
 80049a0:	3b05      	subs	r3, #5
 80049a2:	221f      	movs	r2, #31
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	43da      	mvns	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	400a      	ands	r2, r1
 80049b0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	4618      	mov	r0, r3
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685a      	ldr	r2, [r3, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	3b05      	subs	r3, #5
 80049cc:	fa00 f203 	lsl.w	r2, r0, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	635a      	str	r2, [r3, #52]	; 0x34
 80049d8:	e04c      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b0c      	cmp	r3, #12
 80049e0:	d824      	bhi.n	8004a2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	3b23      	subs	r3, #35	; 0x23
 80049f4:	221f      	movs	r2, #31
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43da      	mvns	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	400a      	ands	r2, r1
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	4618      	mov	r0, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	3b23      	subs	r3, #35	; 0x23
 8004a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2a:	e023      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	3b41      	subs	r3, #65	; 0x41
 8004a3e:	221f      	movs	r2, #31
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43da      	mvns	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	400a      	ands	r2, r1
 8004a4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	3b41      	subs	r3, #65	; 0x41
 8004a68:	fa00 f203 	lsl.w	r2, r0, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a30      	ldr	r2, [pc, #192]	; (8004b3c <HAL_ADC_ConfigChannel+0x29c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d10a      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x1f4>
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a86:	d105      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004a88:	4b2d      	ldr	r3, [pc, #180]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	4a2c      	ldr	r2, [pc, #176]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004a92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a28      	ldr	r2, [pc, #160]	; (8004b3c <HAL_ADC_ConfigChannel+0x29c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10f      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x21e>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b12      	cmp	r3, #18
 8004aa4:	d10b      	bne.n	8004abe <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004aa6:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	4a25      	ldr	r2, [pc, #148]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004aac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004ab0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004ab2:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4a22      	ldr	r2, [pc, #136]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ab8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004abc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a1e      	ldr	r2, [pc, #120]	; (8004b3c <HAL_ADC_ConfigChannel+0x29c>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d12b      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x280>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1a      	ldr	r2, [pc, #104]	; (8004b38 <HAL_ADC_ConfigChannel+0x298>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d003      	beq.n	8004ada <HAL_ADC_ConfigChannel+0x23a>
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b11      	cmp	r3, #17
 8004ad8:	d122      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004ada:	4b19      	ldr	r3, [pc, #100]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ae0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004ae4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ae6:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <HAL_ADC_ConfigChannel+0x2a0>)
 8004aec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004af0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a10      	ldr	r2, [pc, #64]	; (8004b38 <HAL_ADC_ConfigChannel+0x298>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d111      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <HAL_ADC_ConfigChannel+0x2a4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	0c9a      	lsrs	r2, r3, #18
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b12:	e002      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1f9      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	10000012 	.word	0x10000012
 8004b3c:	40012000 	.word	0x40012000
 8004b40:	40012300 	.word	0x40012300
 8004b44:	2000003c 	.word	0x2000003c
 8004b48:	431bde83 	.word	0x431bde83

08004b4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004b54:	4b78      	ldr	r3, [pc, #480]	; (8004d38 <ADC_Init+0x1ec>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a77      	ldr	r2, [pc, #476]	; (8004d38 <ADC_Init+0x1ec>)
 8004b5a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004b5e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004b60:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <ADC_Init+0x1ec>)
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	4973      	ldr	r1, [pc, #460]	; (8004d38 <ADC_Init+0x1ec>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6859      	ldr	r1, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	021a      	lsls	r2, r3, #8
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	6859      	ldr	r1, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689a      	ldr	r2, [r3, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6899      	ldr	r1, [r3, #8]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	4a58      	ldr	r2, [pc, #352]	; (8004d3c <ADC_Init+0x1f0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d022      	beq.n	8004c26 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689a      	ldr	r2, [r3, #8]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6899      	ldr	r1, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	430a      	orrs	r2, r1
 8004c00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689a      	ldr	r2, [r3, #8]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6899      	ldr	r1, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	609a      	str	r2, [r3, #8]
 8004c24:	e00f      	b.n	8004c46 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689a      	ldr	r2, [r3, #8]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0202 	bic.w	r2, r2, #2
 8004c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6899      	ldr	r1, [r3, #8]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	005a      	lsls	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	035a      	lsls	r2, r3, #13
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	e007      	b.n	8004cbc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	69db      	ldr	r3, [r3, #28]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	051a      	lsls	r2, r3, #20
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	430a      	orrs	r2, r1
 8004ce0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	6899      	ldr	r1, [r3, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cfe:	025a      	lsls	r2, r3, #9
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6899      	ldr	r1, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695b      	ldr	r3, [r3, #20]
 8004d22:	029a      	lsls	r2, r3, #10
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	430a      	orrs	r2, r1
 8004d2a:	609a      	str	r2, [r3, #8]
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40012300 	.word	0x40012300
 8004d3c:	0f000001 	.word	0x0f000001

08004d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <__NVIC_SetPriorityGrouping+0x40>)
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004d68:	4b06      	ldr	r3, [pc, #24]	; (8004d84 <__NVIC_SetPriorityGrouping+0x44>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d6e:	4a04      	ldr	r2, [pc, #16]	; (8004d80 <__NVIC_SetPriorityGrouping+0x40>)
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	60d3      	str	r3, [r2, #12]
}
 8004d74:	bf00      	nop
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000ed00 	.word	0xe000ed00
 8004d84:	05fa0000 	.word	0x05fa0000

08004d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <__NVIC_GetPriorityGrouping+0x18>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f003 0307 	and.w	r3, r3, #7
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	e000ed00 	.word	0xe000ed00

08004da4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	4603      	mov	r3, r0
 8004dac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	db0b      	blt.n	8004dce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	f003 021f 	and.w	r2, r3, #31
 8004dbc:	4907      	ldr	r1, [pc, #28]	; (8004ddc <__NVIC_EnableIRQ+0x38>)
 8004dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc2:	095b      	lsrs	r3, r3, #5
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	fa00 f202 	lsl.w	r2, r0, r2
 8004dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004dce:	bf00      	nop
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000e100 	.word	0xe000e100

08004de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	6039      	str	r1, [r7, #0]
 8004dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	db0a      	blt.n	8004e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	490c      	ldr	r1, [pc, #48]	; (8004e2c <__NVIC_SetPriority+0x4c>)
 8004dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dfe:	0112      	lsls	r2, r2, #4
 8004e00:	b2d2      	uxtb	r2, r2
 8004e02:	440b      	add	r3, r1
 8004e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e08:	e00a      	b.n	8004e20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	4908      	ldr	r1, [pc, #32]	; (8004e30 <__NVIC_SetPriority+0x50>)
 8004e10:	79fb      	ldrb	r3, [r7, #7]
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	3b04      	subs	r3, #4
 8004e18:	0112      	lsls	r2, r2, #4
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	761a      	strb	r2, [r3, #24]
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	e000e100 	.word	0xe000e100
 8004e30:	e000ed00 	.word	0xe000ed00

08004e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b089      	sub	sp, #36	; 0x24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f1c3 0307 	rsb	r3, r3, #7
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf28      	it	cs
 8004e52:	2304      	movcs	r3, #4
 8004e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3304      	adds	r3, #4
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d902      	bls.n	8004e64 <NVIC_EncodePriority+0x30>
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	3b03      	subs	r3, #3
 8004e62:	e000      	b.n	8004e66 <NVIC_EncodePriority+0x32>
 8004e64:	2300      	movs	r3, #0
 8004e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e72:	43da      	mvns	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	401a      	ands	r2, r3
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	fa01 f303 	lsl.w	r3, r1, r3
 8004e86:	43d9      	mvns	r1, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e8c:	4313      	orrs	r3, r2
         );
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3724      	adds	r7, #36	; 0x24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b082      	sub	sp, #8
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7ff ff4c 	bl	8004d40 <__NVIC_SetPriorityGrouping>
}
 8004ea8:	bf00      	nop
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec2:	f7ff ff61 	bl	8004d88 <__NVIC_GetPriorityGrouping>
 8004ec6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	6978      	ldr	r0, [r7, #20]
 8004ece:	f7ff ffb1 	bl	8004e34 <NVIC_EncodePriority>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff ff80 	bl	8004de0 <__NVIC_SetPriority>
}
 8004ee0:	bf00      	nop
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	4603      	mov	r3, r0
 8004ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7ff ff54 	bl	8004da4 <__NVIC_EnableIRQ>
}
 8004efc:	bf00      	nop
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d101      	bne.n	8004f16 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e014      	b.n	8004f40 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	791b      	ldrb	r3, [r3, #4]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d105      	bne.n	8004f2c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fe fc7e 	bl	8003828 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f5e:	d120      	bne.n	8004fa2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6e:	d118      	bne.n	8004fa2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2204      	movs	r2, #4
 8004f74:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	f043 0201 	orr.w	r2, r3, #1
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f9a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f82d 	bl	8004ffc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb0:	d120      	bne.n	8004ff4 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fc0:	d118      	bne.n	8004ff4 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2204      	movs	r2, #4
 8004fc6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f043 0202 	orr.w	r2, r3, #2
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004fdc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004fec:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f85d 	bl	80050ae <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004ff4:	bf00      	nop
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr

08005010 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005010:	b480      	push	{r7}
 8005012:	b087      	sub	sp, #28
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	795b      	ldrb	r3, [r3, #5]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d101      	bne.n	8005028 <HAL_DAC_ConfigChannel+0x18>
 8005024:	2302      	movs	r3, #2
 8005026:	e03c      	b.n	80050a2 <HAL_DAC_ConfigChannel+0x92>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2201      	movs	r2, #1
 800502c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2202      	movs	r2, #2
 8005032:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4013      	ands	r3, r2
 8005050:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	fa02 f303 	lsl.w	r3, r2, r3
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	4313      	orrs	r3, r2
 800506e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6819      	ldr	r1, [r3, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	22c0      	movs	r2, #192	; 0xc0
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43da      	mvns	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	400a      	ands	r2, r1
 8005092:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2201      	movs	r2, #1
 8005098:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr

080050ae <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050ae:	b480      	push	{r7}
 80050b0:	b083      	sub	sp, #12
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
	...

080050c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80050d0:	f7ff fa0c 	bl	80044ec <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e099      	b.n	8005214 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 0201 	bic.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005100:	e00f      	b.n	8005122 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005102:	f7ff f9f3 	bl	80044ec <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b05      	cmp	r3, #5
 800510e:	d908      	bls.n	8005122 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2203      	movs	r2, #3
 800511a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e078      	b.n	8005214 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e8      	bne.n	8005102 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	4b38      	ldr	r3, [pc, #224]	; (800521c <HAL_DMA_Init+0x158>)
 800513c:	4013      	ands	r3, r2
 800513e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800514e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800515a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005178:	2b04      	cmp	r3, #4
 800517a:	d107      	bne.n	800518c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	4313      	orrs	r3, r2
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	4313      	orrs	r3, r2
 800518a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f023 0307 	bic.w	r3, r3, #7
 80051a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d117      	bne.n	80051e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00e      	beq.n	80051e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f94f 	bl	800546c <DMA_CheckFifoParam>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2240      	movs	r2, #64	; 0x40
 80051d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80051e2:	2301      	movs	r3, #1
 80051e4:	e016      	b.n	8005214 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f906 	bl	8005400 <DMA_CalcBaseAndBitshift>
 80051f4:	4603      	mov	r3, r0
 80051f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051fc:	223f      	movs	r2, #63	; 0x3f
 80051fe:	409a      	lsls	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	f010803f 	.word	0xf010803f

08005220 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b084      	sub	sp, #16
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e050      	b.n	80052d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b02      	cmp	r3, #2
 800523c:	d101      	bne.n	8005242 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800523e:	2302      	movs	r3, #2
 8005240:	e048      	b.n	80052d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f022 0201 	bic.w	r2, r2, #1
 8005250:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2200      	movs	r2, #0
 8005260:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2200      	movs	r2, #0
 8005268:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2200      	movs	r2, #0
 8005270:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2200      	movs	r2, #0
 8005278:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2221      	movs	r2, #33	; 0x21
 8005280:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 f8bc 	bl	8005400 <DMA_CalcBaseAndBitshift>
 8005288:	4603      	mov	r3, r0
 800528a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005290:	223f      	movs	r2, #63	; 0x3f
 8005292:	409a      	lsls	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3710      	adds	r7, #16
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80052ea:	f7ff f8ff 	bl	80044ec <HAL_GetTick>
 80052ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d008      	beq.n	800530e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2280      	movs	r2, #128	; 0x80
 8005300:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e052      	b.n	80053b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f022 0216 	bic.w	r2, r2, #22
 800531c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	695a      	ldr	r2, [r3, #20]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800532c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	2b00      	cmp	r3, #0
 8005334:	d103      	bne.n	800533e <HAL_DMA_Abort+0x62>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800533a:	2b00      	cmp	r3, #0
 800533c:	d007      	beq.n	800534e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0208 	bic.w	r2, r2, #8
 800534c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0201 	bic.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800535e:	e013      	b.n	8005388 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005360:	f7ff f8c4 	bl	80044ec <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	2b05      	cmp	r3, #5
 800536c:	d90c      	bls.n	8005388 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2220      	movs	r2, #32
 8005372:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2203      	movs	r2, #3
 8005378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e015      	b.n	80053b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e4      	bne.n	8005360 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539a:	223f      	movs	r2, #63	; 0x3f
 800539c:	409a      	lsls	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d004      	beq.n	80053da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2280      	movs	r2, #128	; 0x80
 80053d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e00c      	b.n	80053f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2205      	movs	r2, #5
 80053de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0201 	bic.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	370c      	adds	r7, #12
 80053f8:	46bd      	mov	sp, r7
 80053fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fe:	4770      	bx	lr

08005400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	b2db      	uxtb	r3, r3
 800540e:	3b10      	subs	r3, #16
 8005410:	4a13      	ldr	r2, [pc, #76]	; (8005460 <DMA_CalcBaseAndBitshift+0x60>)
 8005412:	fba2 2303 	umull	r2, r3, r2, r3
 8005416:	091b      	lsrs	r3, r3, #4
 8005418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800541a:	4a12      	ldr	r2, [pc, #72]	; (8005464 <DMA_CalcBaseAndBitshift+0x64>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4413      	add	r3, r2
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d908      	bls.n	8005440 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <DMA_CalcBaseAndBitshift+0x68>)
 8005436:	4013      	ands	r3, r2
 8005438:	1d1a      	adds	r2, r3, #4
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	659a      	str	r2, [r3, #88]	; 0x58
 800543e:	e006      	b.n	800544e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	4b08      	ldr	r3, [pc, #32]	; (8005468 <DMA_CalcBaseAndBitshift+0x68>)
 8005448:	4013      	ands	r3, r2
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	aaaaaaab 	.word	0xaaaaaaab
 8005464:	08013410 	.word	0x08013410
 8005468:	fffffc00 	.word	0xfffffc00

0800546c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d11f      	bne.n	80054c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2b03      	cmp	r3, #3
 800548a:	d856      	bhi.n	800553a <DMA_CheckFifoParam+0xce>
 800548c:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <DMA_CheckFifoParam+0x28>)
 800548e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005492:	bf00      	nop
 8005494:	080054a5 	.word	0x080054a5
 8005498:	080054b7 	.word	0x080054b7
 800549c:	080054a5 	.word	0x080054a5
 80054a0:	0800553b 	.word	0x0800553b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d046      	beq.n	800553e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054b4:	e043      	b.n	800553e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054be:	d140      	bne.n	8005542 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054c4:	e03d      	b.n	8005542 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ce:	d121      	bne.n	8005514 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d837      	bhi.n	8005546 <DMA_CheckFifoParam+0xda>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <DMA_CheckFifoParam+0x70>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	080054ed 	.word	0x080054ed
 80054e0:	080054f3 	.word	0x080054f3
 80054e4:	080054ed 	.word	0x080054ed
 80054e8:	08005505 	.word	0x08005505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	73fb      	strb	r3, [r7, #15]
      break;
 80054f0:	e030      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d025      	beq.n	800554a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005502:	e022      	b.n	800554a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005508:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800550c:	d11f      	bne.n	800554e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005512:	e01c      	b.n	800554e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d903      	bls.n	8005522 <DMA_CheckFifoParam+0xb6>
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b03      	cmp	r3, #3
 800551e:	d003      	beq.n	8005528 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005520:	e018      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	73fb      	strb	r3, [r7, #15]
      break;
 8005526:	e015      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00e      	beq.n	8005552 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	e00b      	b.n	8005552 <DMA_CheckFifoParam+0xe6>
      break;
 800553a:	bf00      	nop
 800553c:	e00a      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      break;
 800553e:	bf00      	nop
 8005540:	e008      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      break;
 8005542:	bf00      	nop
 8005544:	e006      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      break;
 8005546:	bf00      	nop
 8005548:	e004      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      break;
 800554a:	bf00      	nop
 800554c:	e002      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      break;   
 800554e:	bf00      	nop
 8005550:	e000      	b.n	8005554 <DMA_CheckFifoParam+0xe8>
      break;
 8005552:	bf00      	nop
    }
  } 
  
  return status; 
 8005554:	7bfb      	ldrb	r3, [r7, #15]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop

08005564 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e039      	b.n	80055ea <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d106      	bne.n	8005590 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7fe f994 	bl	80038b8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	430a      	orrs	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	f023 0107 	bic.w	r1, r3, #7
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ca:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <HAL_DMA2D_Init+0x90>)
 80055cc:	4013      	ands	r3, r2
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68d1      	ldr	r1, [r2, #12]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6812      	ldr	r2, [r2, #0]
 80055d6:	430b      	orrs	r3, r1
 80055d8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	ffffc000 	.word	0xffffc000

080055f8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
 8005604:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_DMA2D_Start+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e018      	b.n	8005646 <HAL_DMA2D_Start+0x4e>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2202      	movs	r2, #2
 8005620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	687a      	ldr	r2, [r7, #4]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f000 fa98 	bl	8005b64 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b086      	sub	sp, #24
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	2b00      	cmp	r3, #0
 8005668:	d056      	beq.n	8005718 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800566a:	f7fe ff3f 	bl	80044ec <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005670:	e04b      	b.n	800570a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005680:	2b00      	cmp	r3, #0
 8005682:	d023      	beq.n	80056cc <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	f043 0202 	orr.w	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d005      	beq.n	80056b0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2221      	movs	r2, #33	; 0x21
 80056b6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2204      	movs	r2, #4
 80056bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e0a5      	b.n	8005818 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d2:	d01a      	beq.n	800570a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056d4:	f7fe ff0a 	bl	80044ec <HAL_GetTick>
 80056d8:	4602      	mov	r2, r0
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	1ad3      	subs	r3, r2, r3
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d302      	bcc.n	80056ea <HAL_DMA2D_PollForTransfer+0x9c>
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10f      	bne.n	800570a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2203      	movs	r2, #3
 80056fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e086      	b.n	8005818 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0ac      	beq.n	8005672 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572a:	f003 0320 	and.w	r3, r3, #32
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d061      	beq.n	80057fe <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800573a:	f7fe fed7 	bl	80044ec <HAL_GetTick>
 800573e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005740:	e056      	b.n	80057f0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005750:	2b00      	cmp	r3, #0
 8005752:	d02e      	beq.n	80057b2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d005      	beq.n	800576a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005762:	f043 0204 	orr.w	r2, r3, #4
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f003 0320 	and.w	r3, r3, #32
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005778:	f043 0202 	orr.w	r2, r3, #2
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f003 0301 	and.w	r3, r3, #1
 8005786:	2b00      	cmp	r3, #0
 8005788:	d005      	beq.n	8005796 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578e:	f043 0201 	orr.w	r2, r3, #1
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2229      	movs	r2, #41	; 0x29
 800579c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2204      	movs	r2, #4
 80057a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e032      	b.n	8005818 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d01a      	beq.n	80057f0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057ba:	f7fe fe97 	bl	80044ec <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d302      	bcc.n	80057d0 <HAL_DMA2D_PollForTransfer+0x182>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10f      	bne.n	80057f0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	f043 0220 	orr.w	r2, r3, #32
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2203      	movs	r2, #3
 80057e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e013      	b.n	8005818 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f003 0310 	and.w	r3, r3, #16
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0a1      	beq.n	8005742 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	2212      	movs	r2, #18
 8005804:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3718      	adds	r7, #24
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d026      	beq.n	8005890 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005848:	2b00      	cmp	r3, #0
 800584a:	d021      	beq.n	8005890 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800585a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005860:	f043 0201 	orr.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2204      	movs	r2, #4
 8005874:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d026      	beq.n	80058e8 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d021      	beq.n	80058e8 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2220      	movs	r2, #32
 80058ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2204      	movs	r2, #4
 80058cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d003      	beq.n	80058e8 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0308 	and.w	r3, r3, #8
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d026      	beq.n	8005940 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d021      	beq.n	8005940 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2208      	movs	r2, #8
 8005912:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005918:	f043 0204 	orr.w	r2, r3, #4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d013      	beq.n	8005972 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00e      	beq.n	8005972 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005962:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2204      	movs	r2, #4
 800596a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f853 	bl	8005a18 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d024      	beq.n	80059c6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005982:	2b00      	cmp	r3, #0
 8005984:	d01f      	beq.n	80059c6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005994:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2202      	movs	r2, #2
 800599c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d01f      	beq.n	8005a10 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d01a      	beq.n	8005a10 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2210      	movs	r2, #16
 80059f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f80e 	bl	8005a2c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005a10:	bf00      	nop
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d101      	bne.n	8005a60 <HAL_DMA2D_ConfigLayer+0x20>
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	e079      	b.n	8005b54 <HAL_DMA2D_ConfigLayer+0x114>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	3318      	adds	r3, #24
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	4413      	add	r3, r2
 8005a7a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	041b      	lsls	r3, r3, #16
 8005a86:	4313      	orrs	r3, r2
 8005a88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005a8a:	4b35      	ldr	r3, [pc, #212]	; (8005b60 <HAL_DMA2D_ConfigLayer+0x120>)
 8005a8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2b0a      	cmp	r3, #10
 8005a94:	d003      	beq.n	8005a9e <HAL_DMA2D_ConfigLayer+0x5e>
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d107      	bne.n	8005aae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	617b      	str	r3, [r7, #20]
 8005aac:	e005      	b.n	8005aba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	061b      	lsls	r3, r3, #24
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d120      	bne.n	8005b02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	ea02 0103 	and.w	r1, r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	430a      	orrs	r2, r1
 8005ad6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	693a      	ldr	r2, [r7, #16]
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b0a      	cmp	r3, #10
 8005ae8:	d003      	beq.n	8005af2 <HAL_DMA2D_ConfigLayer+0xb2>
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b09      	cmp	r3, #9
 8005af0:	d127      	bne.n	8005b42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	68da      	ldr	r2, [r3, #12]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005afe:	629a      	str	r2, [r3, #40]	; 0x28
 8005b00:	e01f      	b.n	8005b42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69da      	ldr	r2, [r3, #28]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	43db      	mvns	r3, r3
 8005b0c:	ea02 0103 	and.w	r1, r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	2b0a      	cmp	r3, #10
 8005b2a:	d003      	beq.n	8005b34 <HAL_DMA2D_ConfigLayer+0xf4>
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	2b09      	cmp	r3, #9
 8005b32:	d106      	bne.n	8005b42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b40:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	371c      	adds	r7, #28
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	ff03000f 	.word	0xff03000f

08005b64 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b08b      	sub	sp, #44	; 0x2c
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b78:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	041a      	lsls	r2, r3, #16
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b9c:	d174      	bne.n	8005c88 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005ba4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005bb4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d108      	bne.n	8005bd6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005bc4:	69ba      	ldr	r2, [r7, #24]
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd4:	e053      	b.n	8005c7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d106      	bne.n	8005bec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005bde:	69ba      	ldr	r2, [r7, #24]
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bea:	e048      	b.n	8005c7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d111      	bne.n	8005c18 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	0cdb      	lsrs	r3, r3, #19
 8005bf8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	0a9b      	lsrs	r3, r3, #10
 8005bfe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	08db      	lsrs	r3, r3, #3
 8005c04:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	015a      	lsls	r2, r3, #5
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	02db      	lsls	r3, r3, #11
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	627b      	str	r3, [r7, #36]	; 0x24
 8005c16:	e032      	b.n	8005c7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d117      	bne.n	8005c50 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	0fdb      	lsrs	r3, r3, #31
 8005c24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	0cdb      	lsrs	r3, r3, #19
 8005c2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	0adb      	lsrs	r3, r3, #11
 8005c30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	029b      	lsls	r3, r3, #10
 8005c40:	431a      	orrs	r2, r3
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	03db      	lsls	r3, r3, #15
 8005c46:	4313      	orrs	r3, r2
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c4e:	e016      	b.n	8005c7e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	0f1b      	lsrs	r3, r3, #28
 8005c54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	0d1b      	lsrs	r3, r3, #20
 8005c5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	0b1b      	lsrs	r3, r3, #12
 8005c60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	091b      	lsrs	r3, r3, #4
 8005c66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	011a      	lsls	r2, r3, #4
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	021b      	lsls	r3, r3, #8
 8005c70:	431a      	orrs	r2, r3
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	031b      	lsls	r3, r3, #12
 8005c76:	4313      	orrs	r3, r2
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005c86:	e003      	b.n	8005c90 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	60da      	str	r2, [r3, #12]
}
 8005c90:	bf00      	nop
 8005c92:	372c      	adds	r7, #44	; 0x2c
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b089      	sub	sp, #36	; 0x24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005caa:	2300      	movs	r3, #0
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	61fb      	str	r3, [r7, #28]
 8005cba:	e175      	b.n	8005fa8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	f040 8164 	bne.w	8005fa2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d005      	beq.n	8005cf2 <HAL_GPIO_Init+0x56>
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d130      	bne.n	8005d54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	68da      	ldr	r2, [r3, #12]
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d28:	2201      	movs	r2, #1
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d30:	43db      	mvns	r3, r3
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	4013      	ands	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	f003 0201 	and.w	r2, r3, #1
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d017      	beq.n	8005d90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005d66:	69fb      	ldr	r3, [r7, #28]
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	fa02 f303 	lsl.w	r3, r2, r3
 8005d84:	69ba      	ldr	r2, [r7, #24]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f003 0303 	and.w	r3, r3, #3
 8005d98:	2b02      	cmp	r3, #2
 8005d9a:	d123      	bne.n	8005de4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	08da      	lsrs	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3208      	adds	r2, #8
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	220f      	movs	r2, #15
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	f003 0307 	and.w	r3, r3, #7
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	08da      	lsrs	r2, r3, #3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3208      	adds	r2, #8
 8005dde:	69b9      	ldr	r1, [r7, #24]
 8005de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	2203      	movs	r2, #3
 8005df0:	fa02 f303 	lsl.w	r3, r2, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f003 0203 	and.w	r2, r3, #3
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80be 	beq.w	8005fa2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e26:	4b66      	ldr	r3, [pc, #408]	; (8005fc0 <HAL_GPIO_Init+0x324>)
 8005e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2a:	4a65      	ldr	r2, [pc, #404]	; (8005fc0 <HAL_GPIO_Init+0x324>)
 8005e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e30:	6453      	str	r3, [r2, #68]	; 0x44
 8005e32:	4b63      	ldr	r3, [pc, #396]	; (8005fc0 <HAL_GPIO_Init+0x324>)
 8005e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005e3e:	4a61      	ldr	r2, [pc, #388]	; (8005fc4 <HAL_GPIO_Init+0x328>)
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	3302      	adds	r3, #2
 8005e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0303 	and.w	r3, r3, #3
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	220f      	movs	r2, #15
 8005e56:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5a:	43db      	mvns	r3, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4013      	ands	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a58      	ldr	r2, [pc, #352]	; (8005fc8 <HAL_GPIO_Init+0x32c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d037      	beq.n	8005eda <HAL_GPIO_Init+0x23e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a57      	ldr	r2, [pc, #348]	; (8005fcc <HAL_GPIO_Init+0x330>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d031      	beq.n	8005ed6 <HAL_GPIO_Init+0x23a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a56      	ldr	r2, [pc, #344]	; (8005fd0 <HAL_GPIO_Init+0x334>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d02b      	beq.n	8005ed2 <HAL_GPIO_Init+0x236>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a55      	ldr	r2, [pc, #340]	; (8005fd4 <HAL_GPIO_Init+0x338>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d025      	beq.n	8005ece <HAL_GPIO_Init+0x232>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a54      	ldr	r2, [pc, #336]	; (8005fd8 <HAL_GPIO_Init+0x33c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d01f      	beq.n	8005eca <HAL_GPIO_Init+0x22e>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a53      	ldr	r2, [pc, #332]	; (8005fdc <HAL_GPIO_Init+0x340>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d019      	beq.n	8005ec6 <HAL_GPIO_Init+0x22a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a52      	ldr	r2, [pc, #328]	; (8005fe0 <HAL_GPIO_Init+0x344>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d013      	beq.n	8005ec2 <HAL_GPIO_Init+0x226>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a51      	ldr	r2, [pc, #324]	; (8005fe4 <HAL_GPIO_Init+0x348>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d00d      	beq.n	8005ebe <HAL_GPIO_Init+0x222>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a50      	ldr	r2, [pc, #320]	; (8005fe8 <HAL_GPIO_Init+0x34c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d007      	beq.n	8005eba <HAL_GPIO_Init+0x21e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a4f      	ldr	r2, [pc, #316]	; (8005fec <HAL_GPIO_Init+0x350>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d101      	bne.n	8005eb6 <HAL_GPIO_Init+0x21a>
 8005eb2:	2309      	movs	r3, #9
 8005eb4:	e012      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005eb6:	230a      	movs	r3, #10
 8005eb8:	e010      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005eba:	2308      	movs	r3, #8
 8005ebc:	e00e      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005ebe:	2307      	movs	r3, #7
 8005ec0:	e00c      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005ec2:	2306      	movs	r3, #6
 8005ec4:	e00a      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005ec6:	2305      	movs	r3, #5
 8005ec8:	e008      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005eca:	2304      	movs	r3, #4
 8005ecc:	e006      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e004      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e002      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e000      	b.n	8005edc <HAL_GPIO_Init+0x240>
 8005eda:	2300      	movs	r3, #0
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	f002 0203 	and.w	r2, r2, #3
 8005ee2:	0092      	lsls	r2, r2, #2
 8005ee4:	4093      	lsls	r3, r2
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005eec:	4935      	ldr	r1, [pc, #212]	; (8005fc4 <HAL_GPIO_Init+0x328>)
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	3302      	adds	r3, #2
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005efa:	4b3d      	ldr	r3, [pc, #244]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	4013      	ands	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f1e:	4a34      	ldr	r2, [pc, #208]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f24:	4b32      	ldr	r3, [pc, #200]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	43db      	mvns	r3, r3
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	4013      	ands	r3, r2
 8005f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d003      	beq.n	8005f48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f48:	4a29      	ldr	r2, [pc, #164]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f4e:	4b28      	ldr	r3, [pc, #160]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	43db      	mvns	r3, r3
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005f78:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	69ba      	ldr	r2, [r7, #24]
 8005f84:	4013      	ands	r3, r2
 8005f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005f94:	69ba      	ldr	r2, [r7, #24]
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005f9c:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <HAL_GPIO_Init+0x354>)
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	61fb      	str	r3, [r7, #28]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b0f      	cmp	r3, #15
 8005fac:	f67f ae86 	bls.w	8005cbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005fb0:	bf00      	nop
 8005fb2:	bf00      	nop
 8005fb4:	3724      	adds	r7, #36	; 0x24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	40013800 	.word	0x40013800
 8005fc8:	40020000 	.word	0x40020000
 8005fcc:	40020400 	.word	0x40020400
 8005fd0:	40020800 	.word	0x40020800
 8005fd4:	40020c00 	.word	0x40020c00
 8005fd8:	40021000 	.word	0x40021000
 8005fdc:	40021400 	.word	0x40021400
 8005fe0:	40021800 	.word	0x40021800
 8005fe4:	40021c00 	.word	0x40021c00
 8005fe8:	40022000 	.word	0x40022000
 8005fec:	40022400 	.word	0x40022400
 8005ff0:	40013c00 	.word	0x40013c00

08005ff4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005ffe:	2300      	movs	r3, #0
 8006000:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006006:	2300      	movs	r3, #0
 8006008:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800600a:	2300      	movs	r3, #0
 800600c:	617b      	str	r3, [r7, #20]
 800600e:	e0d9      	b.n	80061c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006010:	2201      	movs	r2, #1
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4013      	ands	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	429a      	cmp	r2, r3
 8006028:	f040 80c9 	bne.w	80061be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800602c:	4a6b      	ldr	r2, [pc, #428]	; (80061dc <HAL_GPIO_DeInit+0x1e8>)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	089b      	lsrs	r3, r3, #2
 8006032:	3302      	adds	r3, #2
 8006034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006038:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	220f      	movs	r2, #15
 8006044:	fa02 f303 	lsl.w	r3, r2, r3
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	4013      	ands	r3, r2
 800604c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a63      	ldr	r2, [pc, #396]	; (80061e0 <HAL_GPIO_DeInit+0x1ec>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d037      	beq.n	80060c6 <HAL_GPIO_DeInit+0xd2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a62      	ldr	r2, [pc, #392]	; (80061e4 <HAL_GPIO_DeInit+0x1f0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d031      	beq.n	80060c2 <HAL_GPIO_DeInit+0xce>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a61      	ldr	r2, [pc, #388]	; (80061e8 <HAL_GPIO_DeInit+0x1f4>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d02b      	beq.n	80060be <HAL_GPIO_DeInit+0xca>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a60      	ldr	r2, [pc, #384]	; (80061ec <HAL_GPIO_DeInit+0x1f8>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d025      	beq.n	80060ba <HAL_GPIO_DeInit+0xc6>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a5f      	ldr	r2, [pc, #380]	; (80061f0 <HAL_GPIO_DeInit+0x1fc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01f      	beq.n	80060b6 <HAL_GPIO_DeInit+0xc2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a5e      	ldr	r2, [pc, #376]	; (80061f4 <HAL_GPIO_DeInit+0x200>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d019      	beq.n	80060b2 <HAL_GPIO_DeInit+0xbe>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a5d      	ldr	r2, [pc, #372]	; (80061f8 <HAL_GPIO_DeInit+0x204>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_GPIO_DeInit+0xba>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a5c      	ldr	r2, [pc, #368]	; (80061fc <HAL_GPIO_DeInit+0x208>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00d      	beq.n	80060aa <HAL_GPIO_DeInit+0xb6>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a5b      	ldr	r2, [pc, #364]	; (8006200 <HAL_GPIO_DeInit+0x20c>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d007      	beq.n	80060a6 <HAL_GPIO_DeInit+0xb2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a5a      	ldr	r2, [pc, #360]	; (8006204 <HAL_GPIO_DeInit+0x210>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d101      	bne.n	80060a2 <HAL_GPIO_DeInit+0xae>
 800609e:	2309      	movs	r3, #9
 80060a0:	e012      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060a2:	230a      	movs	r3, #10
 80060a4:	e010      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060a6:	2308      	movs	r3, #8
 80060a8:	e00e      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060aa:	2307      	movs	r3, #7
 80060ac:	e00c      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060ae:	2306      	movs	r3, #6
 80060b0:	e00a      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060b2:	2305      	movs	r3, #5
 80060b4:	e008      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060b6:	2304      	movs	r3, #4
 80060b8:	e006      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060ba:	2303      	movs	r3, #3
 80060bc:	e004      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060be:	2302      	movs	r3, #2
 80060c0:	e002      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <HAL_GPIO_DeInit+0xd4>
 80060c6:	2300      	movs	r3, #0
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	f002 0203 	and.w	r2, r2, #3
 80060ce:	0092      	lsls	r2, r2, #2
 80060d0:	4093      	lsls	r3, r2
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d132      	bne.n	800613e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80060d8:	4b4b      	ldr	r3, [pc, #300]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	43db      	mvns	r3, r3
 80060e0:	4949      	ldr	r1, [pc, #292]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 80060e2:	4013      	ands	r3, r2
 80060e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80060e6:	4b48      	ldr	r3, [pc, #288]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	4946      	ldr	r1, [pc, #280]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 80060f0:	4013      	ands	r3, r2
 80060f2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80060f4:	4b44      	ldr	r3, [pc, #272]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	43db      	mvns	r3, r3
 80060fc:	4942      	ldr	r1, [pc, #264]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 80060fe:	4013      	ands	r3, r2
 8006100:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006102:	4b41      	ldr	r3, [pc, #260]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 8006104:	689a      	ldr	r2, [r3, #8]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	43db      	mvns	r3, r3
 800610a:	493f      	ldr	r1, [pc, #252]	; (8006208 <HAL_GPIO_DeInit+0x214>)
 800610c:	4013      	ands	r3, r2
 800610e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	220f      	movs	r2, #15
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006120:	4a2e      	ldr	r2, [pc, #184]	; (80061dc <HAL_GPIO_DeInit+0x1e8>)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	089b      	lsrs	r3, r3, #2
 8006126:	3302      	adds	r3, #2
 8006128:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	43da      	mvns	r2, r3
 8006130:	482a      	ldr	r0, [pc, #168]	; (80061dc <HAL_GPIO_DeInit+0x1e8>)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	400a      	ands	r2, r1
 8006138:	3302      	adds	r3, #2
 800613a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	2103      	movs	r1, #3
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	43db      	mvns	r3, r3
 800614e:	401a      	ands	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	08da      	lsrs	r2, r3, #3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	3208      	adds	r2, #8
 800615c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f003 0307 	and.w	r3, r3, #7
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	220f      	movs	r2, #15
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	43db      	mvns	r3, r3
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	08d2      	lsrs	r2, r2, #3
 8006174:	4019      	ands	r1, r3
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	3208      	adds	r2, #8
 800617a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68da      	ldr	r2, [r3, #12]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	005b      	lsls	r3, r3, #1
 8006186:	2103      	movs	r1, #3
 8006188:	fa01 f303 	lsl.w	r3, r1, r3
 800618c:	43db      	mvns	r3, r3
 800618e:	401a      	ands	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	2101      	movs	r1, #1
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	43db      	mvns	r3, r3
 80061a2:	401a      	ands	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	2103      	movs	r1, #3
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	401a      	ands	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	3301      	adds	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b0f      	cmp	r3, #15
 80061c8:	f67f af22 	bls.w	8006010 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	371c      	adds	r7, #28
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40013800 	.word	0x40013800
 80061e0:	40020000 	.word	0x40020000
 80061e4:	40020400 	.word	0x40020400
 80061e8:	40020800 	.word	0x40020800
 80061ec:	40020c00 	.word	0x40020c00
 80061f0:	40021000 	.word	0x40021000
 80061f4:	40021400 	.word	0x40021400
 80061f8:	40021800 	.word	0x40021800
 80061fc:	40021c00 	.word	0x40021c00
 8006200:	40022000 	.word	0x40022000
 8006204:	40022400 	.word	0x40022400
 8006208:	40013c00 	.word	0x40013c00

0800620c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800620c:	b480      	push	{r7}
 800620e:	b085      	sub	sp, #20
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	460b      	mov	r3, r1
 8006216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691a      	ldr	r2, [r3, #16]
 800621c:	887b      	ldrh	r3, [r7, #2]
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d002      	beq.n	800622a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006224:	2301      	movs	r3, #1
 8006226:	73fb      	strb	r3, [r7, #15]
 8006228:	e001      	b.n	800622e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800622e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	807b      	strh	r3, [r7, #2]
 8006248:	4613      	mov	r3, r2
 800624a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800624c:	787b      	ldrb	r3, [r7, #1]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006252:	887a      	ldrh	r2, [r7, #2]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006258:	e003      	b.n	8006262 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800625a:	887b      	ldrh	r3, [r7, #2]
 800625c:	041a      	lsls	r2, r3, #16
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	619a      	str	r2, [r3, #24]
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr
	...

08006270 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	4603      	mov	r3, r0
 8006278:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800627a:	4b08      	ldr	r3, [pc, #32]	; (800629c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800627c:	695a      	ldr	r2, [r3, #20]
 800627e:	88fb      	ldrh	r3, [r7, #6]
 8006280:	4013      	ands	r3, r2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d006      	beq.n	8006294 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006286:	4a05      	ldr	r2, [pc, #20]	; (800629c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800628c:	88fb      	ldrh	r3, [r7, #6]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fb fd70 	bl	8001d74 <HAL_GPIO_EXTI_Callback>
  }
}
 8006294:	bf00      	nop
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	40013c00 	.word	0x40013c00

080062a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e07f      	b.n	80063b2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fd fb1c 	bl	8003904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2224      	movs	r2, #36	; 0x24
 80062d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0201 	bic.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062f0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689a      	ldr	r2, [r3, #8]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006300:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d107      	bne.n	800631a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	e006      	b.n	8006328 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006326:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d104      	bne.n	800633a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006338:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6859      	ldr	r1, [r3, #4]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	4b1d      	ldr	r3, [pc, #116]	; (80063bc <HAL_I2C_Init+0x11c>)
 8006346:	430b      	orrs	r3, r1
 8006348:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006358:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69d9      	ldr	r1, [r3, #28]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	02008000 	.word	0x02008000

080063c0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e021      	b.n	8006416 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2224      	movs	r2, #36	; 0x24
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f022 0201 	bic.w	r2, r2, #1
 80063e8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f7fd fb32 	bl	8003a54 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
	...

08006420 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b088      	sub	sp, #32
 8006424:	af02      	add	r7, sp, #8
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	461a      	mov	r2, r3
 800642e:	4603      	mov	r3, r0
 8006430:	817b      	strh	r3, [r7, #10]
 8006432:	460b      	mov	r3, r1
 8006434:	813b      	strh	r3, [r7, #8]
 8006436:	4613      	mov	r3, r2
 8006438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b20      	cmp	r3, #32
 8006444:	f040 80f9 	bne.w	800663a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <HAL_I2C_Mem_Write+0x34>
 800644e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800645a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0ed      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006466:	2b01      	cmp	r3, #1
 8006468:	d101      	bne.n	800646e <HAL_I2C_Mem_Write+0x4e>
 800646a:	2302      	movs	r3, #2
 800646c:	e0e6      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2201      	movs	r2, #1
 8006472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006476:	f7fe f839 	bl	80044ec <HAL_GetTick>
 800647a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	2319      	movs	r3, #25
 8006482:	2201      	movs	r2, #1
 8006484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006488:	68f8      	ldr	r0, [r7, #12]
 800648a:	f000 fad1 	bl	8006a30 <I2C_WaitOnFlagUntilTimeout>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	e0d1      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2221      	movs	r2, #33	; 0x21
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2240      	movs	r2, #64	; 0x40
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a3a      	ldr	r2, [r7, #32]
 80064b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80064c0:	88f8      	ldrh	r0, [r7, #6]
 80064c2:	893a      	ldrh	r2, [r7, #8]
 80064c4:	8979      	ldrh	r1, [r7, #10]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	4603      	mov	r3, r0
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 f9e1 	bl	8006898 <I2C_RequestMemoryWrite>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0a9      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2bff      	cmp	r3, #255	; 0xff
 80064f0:	d90e      	bls.n	8006510 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	22ff      	movs	r2, #255	; 0xff
 80064f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	8979      	ldrh	r1, [r7, #10]
 8006500:	2300      	movs	r3, #0
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 fc39 	bl	8006d80 <I2C_TransferConfig>
 800650e:	e00f      	b.n	8006530 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800651e:	b2da      	uxtb	r2, r3
 8006520:	8979      	ldrh	r1, [r7, #10]
 8006522:	2300      	movs	r3, #0
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f000 fc28 	bl	8006d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fabb 	bl	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e07b      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800655e:	b29b      	uxth	r3, r3
 8006560:	3b01      	subs	r3, #1
 8006562:	b29a      	uxth	r2, r3
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006578:	b29b      	uxth	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d034      	beq.n	80065e8 <HAL_I2C_Mem_Write+0x1c8>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d130      	bne.n	80065e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	9300      	str	r3, [sp, #0]
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	2200      	movs	r2, #0
 800658e:	2180      	movs	r1, #128	; 0x80
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fa4d 	bl	8006a30 <I2C_WaitOnFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e04d      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2bff      	cmp	r3, #255	; 0xff
 80065a8:	d90e      	bls.n	80065c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	22ff      	movs	r2, #255	; 0xff
 80065ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	8979      	ldrh	r1, [r7, #10]
 80065b8:	2300      	movs	r3, #0
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fbdd 	bl	8006d80 <I2C_TransferConfig>
 80065c6:	e00f      	b.n	80065e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	8979      	ldrh	r1, [r7, #10]
 80065da:	2300      	movs	r3, #0
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fbcc 	bl	8006d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d19e      	bne.n	8006530 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	f000 fa9a 	bl	8006b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d001      	beq.n	8006606 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e01a      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2220      	movs	r2, #32
 800660c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6859      	ldr	r1, [r3, #4]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <HAL_I2C_Mem_Write+0x224>)
 800661a:	400b      	ands	r3, r1
 800661c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2220      	movs	r2, #32
 8006622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	e000      	b.n	800663c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800663a:	2302      	movs	r3, #2
  }
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}
 8006644:	fe00e800 	.word	0xfe00e800

08006648 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b088      	sub	sp, #32
 800664c:	af02      	add	r7, sp, #8
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	4608      	mov	r0, r1
 8006652:	4611      	mov	r1, r2
 8006654:	461a      	mov	r2, r3
 8006656:	4603      	mov	r3, r0
 8006658:	817b      	strh	r3, [r7, #10]
 800665a:	460b      	mov	r3, r1
 800665c:	813b      	strh	r3, [r7, #8]
 800665e:	4613      	mov	r3, r2
 8006660:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b20      	cmp	r3, #32
 800666c:	f040 80fd 	bne.w	800686a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d002      	beq.n	800667c <HAL_I2C_Mem_Read+0x34>
 8006676:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006678:	2b00      	cmp	r3, #0
 800667a:	d105      	bne.n	8006688 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006682:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e0f1      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <HAL_I2C_Mem_Read+0x4e>
 8006692:	2302      	movs	r3, #2
 8006694:	e0ea      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800669e:	f7fd ff25 	bl	80044ec <HAL_GetTick>
 80066a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	2319      	movs	r3, #25
 80066aa:	2201      	movs	r2, #1
 80066ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 f9bd 	bl	8006a30 <I2C_WaitOnFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e0d5      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2222      	movs	r2, #34	; 0x22
 80066c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2240      	movs	r2, #64	; 0x40
 80066cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a3a      	ldr	r2, [r7, #32]
 80066da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80066e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80066e8:	88f8      	ldrh	r0, [r7, #6]
 80066ea:	893a      	ldrh	r2, [r7, #8]
 80066ec:	8979      	ldrh	r1, [r7, #10]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	4603      	mov	r3, r0
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f000 f921 	bl	8006940 <I2C_RequestMemoryRead>
 80066fe:	4603      	mov	r3, r0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d005      	beq.n	8006710 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0ad      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006714:	b29b      	uxth	r3, r3
 8006716:	2bff      	cmp	r3, #255	; 0xff
 8006718:	d90e      	bls.n	8006738 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	22ff      	movs	r2, #255	; 0xff
 800671e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006724:	b2da      	uxtb	r2, r3
 8006726:	8979      	ldrh	r1, [r7, #10]
 8006728:	4b52      	ldr	r3, [pc, #328]	; (8006874 <HAL_I2C_Mem_Read+0x22c>)
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fb25 	bl	8006d80 <I2C_TransferConfig>
 8006736:	e00f      	b.n	8006758 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006746:	b2da      	uxtb	r2, r3
 8006748:	8979      	ldrh	r1, [r7, #10]
 800674a:	4b4a      	ldr	r3, [pc, #296]	; (8006874 <HAL_I2C_Mem_Read+0x22c>)
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 fb14 	bl	8006d80 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	9300      	str	r3, [sp, #0]
 800675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675e:	2200      	movs	r2, #0
 8006760:	2104      	movs	r1, #4
 8006762:	68f8      	ldr	r0, [r7, #12]
 8006764:	f000 f964 	bl	8006a30 <I2C_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e07c      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	b2d2      	uxtb	r2, r2
 800677e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679a:	b29b      	uxth	r3, r3
 800679c:	3b01      	subs	r3, #1
 800679e:	b29a      	uxth	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d034      	beq.n	8006818 <HAL_I2C_Mem_Read+0x1d0>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d130      	bne.n	8006818 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	2200      	movs	r2, #0
 80067be:	2180      	movs	r1, #128	; 0x80
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f935 	bl	8006a30 <I2C_WaitOnFlagUntilTimeout>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d001      	beq.n	80067d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e04d      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d4:	b29b      	uxth	r3, r3
 80067d6:	2bff      	cmp	r3, #255	; 0xff
 80067d8:	d90e      	bls.n	80067f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	22ff      	movs	r2, #255	; 0xff
 80067de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067e4:	b2da      	uxtb	r2, r3
 80067e6:	8979      	ldrh	r1, [r7, #10]
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 fac5 	bl	8006d80 <I2C_TransferConfig>
 80067f6:	e00f      	b.n	8006818 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006806:	b2da      	uxtb	r2, r3
 8006808:	8979      	ldrh	r1, [r7, #10]
 800680a:	2300      	movs	r3, #0
 800680c:	9300      	str	r3, [sp, #0]
 800680e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fab4 	bl	8006d80 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681c:	b29b      	uxth	r3, r3
 800681e:	2b00      	cmp	r3, #0
 8006820:	d19a      	bne.n	8006758 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f000 f982 	bl	8006b30 <I2C_WaitOnSTOPFlagUntilTimeout>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e01a      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2220      	movs	r2, #32
 800683c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6859      	ldr	r1, [r3, #4]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <HAL_I2C_Mem_Read+0x230>)
 800684a:	400b      	ands	r3, r1
 800684c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2220      	movs	r2, #32
 8006852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	e000      	b.n	800686c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}
 8006874:	80002400 	.word	0x80002400
 8006878:	fe00e800 	.word	0xfe00e800

0800687c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800688a:	b2db      	uxtb	r3, r3
}
 800688c:	4618      	mov	r0, r3
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af02      	add	r7, sp, #8
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	461a      	mov	r2, r3
 80068a6:	4603      	mov	r3, r0
 80068a8:	817b      	strh	r3, [r7, #10]
 80068aa:	460b      	mov	r3, r1
 80068ac:	813b      	strh	r3, [r7, #8]
 80068ae:	4613      	mov	r3, r2
 80068b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	8979      	ldrh	r1, [r7, #10]
 80068b8:	4b20      	ldr	r3, [pc, #128]	; (800693c <I2C_RequestMemoryWrite+0xa4>)
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 fa5d 	bl	8006d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	69b9      	ldr	r1, [r7, #24]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f8f0 	bl	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e02c      	b.n	8006934 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d105      	bne.n	80068ec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80068e0:	893b      	ldrh	r3, [r7, #8]
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	629a      	str	r2, [r3, #40]	; 0x28
 80068ea:	e015      	b.n	8006918 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80068ec:	893b      	ldrh	r3, [r7, #8]
 80068ee:	0a1b      	lsrs	r3, r3, #8
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	69b9      	ldr	r1, [r7, #24]
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f8d6 	bl	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e012      	b.n	8006934 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800690e:	893b      	ldrh	r3, [r7, #8]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	2200      	movs	r2, #0
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 f884 	bl	8006a30 <I2C_WaitOnFlagUntilTimeout>
 8006928:	4603      	mov	r3, r0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3710      	adds	r7, #16
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}
 800693c:	80002000 	.word	0x80002000

08006940 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af02      	add	r7, sp, #8
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	4608      	mov	r0, r1
 800694a:	4611      	mov	r1, r2
 800694c:	461a      	mov	r2, r3
 800694e:	4603      	mov	r3, r0
 8006950:	817b      	strh	r3, [r7, #10]
 8006952:	460b      	mov	r3, r1
 8006954:	813b      	strh	r3, [r7, #8]
 8006956:	4613      	mov	r3, r2
 8006958:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800695a:	88fb      	ldrh	r3, [r7, #6]
 800695c:	b2da      	uxtb	r2, r3
 800695e:	8979      	ldrh	r1, [r7, #10]
 8006960:	4b20      	ldr	r3, [pc, #128]	; (80069e4 <I2C_RequestMemoryRead+0xa4>)
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fa0a 	bl	8006d80 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	69b9      	ldr	r1, [r7, #24]
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f000 f89d 	bl	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d001      	beq.n	8006980 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e02c      	b.n	80069da <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	2b01      	cmp	r3, #1
 8006984:	d105      	bne.n	8006992 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006986:	893b      	ldrh	r3, [r7, #8]
 8006988:	b2da      	uxtb	r2, r3
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	629a      	str	r2, [r3, #40]	; 0x28
 8006990:	e015      	b.n	80069be <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006992:	893b      	ldrh	r3, [r7, #8]
 8006994:	0a1b      	lsrs	r3, r3, #8
 8006996:	b29b      	uxth	r3, r3
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	69b9      	ldr	r1, [r7, #24]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 f883 	bl	8006ab0 <I2C_WaitOnTXISFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e012      	b.n	80069da <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069b4:	893b      	ldrh	r3, [r7, #8]
 80069b6:	b2da      	uxtb	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2140      	movs	r1, #64	; 0x40
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f831 	bl	8006a30 <I2C_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	80002000 	.word	0x80002000

080069e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d103      	bne.n	8006a06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2200      	movs	r2, #0
 8006a04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d007      	beq.n	8006a24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	619a      	str	r2, [r3, #24]
  }
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a40:	e022      	b.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d01e      	beq.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4a:	f7fd fd4f 	bl	80044ec <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d113      	bne.n	8006a88 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a64:	f043 0220 	orr.w	r2, r3, #32
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2220      	movs	r2, #32
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e00f      	b.n	8006aa8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	699a      	ldr	r2, [r3, #24]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	4013      	ands	r3, r2
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	bf0c      	ite	eq
 8006a98:	2301      	moveq	r3, #1
 8006a9a:	2300      	movne	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d0cd      	beq.n	8006a42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3710      	adds	r7, #16
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006abc:	e02c      	b.n	8006b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f870 	bl	8006ba8 <I2C_IsErrorOccurred>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e02a      	b.n	8006b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad8:	d01e      	beq.n	8006b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ada:	f7fd fd07 	bl	80044ec <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d302      	bcc.n	8006af0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d113      	bne.n	8006b18 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af4:	f043 0220 	orr.w	r2, r3, #32
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2220      	movs	r2, #32
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e007      	b.n	8006b28 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d1cb      	bne.n	8006abe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}

08006b30 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b3c:	e028      	b.n	8006b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	68b9      	ldr	r1, [r7, #8]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	f000 f830 	bl	8006ba8 <I2C_IsErrorOccurred>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d001      	beq.n	8006b52 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e026      	b.n	8006ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b52:	f7fd fccb 	bl	80044ec <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d302      	bcc.n	8006b68 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d113      	bne.n	8006b90 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6c:	f043 0220 	orr.w	r2, r3, #32
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e007      	b.n	8006ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	699b      	ldr	r3, [r3, #24]
 8006b96:	f003 0320 	and.w	r3, r3, #32
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	d1cf      	bne.n	8006b3e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	699b      	ldr	r3, [r3, #24]
 8006bc0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d075      	beq.n	8006cc0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2210      	movs	r2, #16
 8006bda:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006bdc:	e056      	b.n	8006c8c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be4:	d052      	beq.n	8006c8c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006be6:	f7fd fc81 	bl	80044ec <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <I2C_IsErrorOccurred+0x54>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d147      	bne.n	8006c8c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	699b      	ldr	r3, [r3, #24]
 8006c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1e:	d12e      	bne.n	8006c7e <I2C_IsErrorOccurred+0xd6>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c26:	d02a      	beq.n	8006c7e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006c28:	7cfb      	ldrb	r3, [r7, #19]
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d027      	beq.n	8006c7e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c3c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c3e:	f7fd fc55 	bl	80044ec <HAL_GetTick>
 8006c42:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c44:	e01b      	b.n	8006c7e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c46:	f7fd fc51 	bl	80044ec <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b19      	cmp	r3, #25
 8006c52:	d914      	bls.n	8006c7e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	f043 0220 	orr.w	r2, r3, #32
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	699b      	ldr	r3, [r3, #24]
 8006c84:	f003 0320 	and.w	r3, r3, #32
 8006c88:	2b20      	cmp	r3, #32
 8006c8a:	d1dc      	bne.n	8006c46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	699b      	ldr	r3, [r3, #24]
 8006c92:	f003 0320 	and.w	r3, r3, #32
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	d003      	beq.n	8006ca2 <I2C_IsErrorOccurred+0xfa>
 8006c9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d09d      	beq.n	8006bde <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d103      	bne.n	8006cb2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2220      	movs	r2, #32
 8006cb0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006cb2:	6a3b      	ldr	r3, [r7, #32]
 8006cb4:	f043 0304 	orr.w	r3, r3, #4
 8006cb8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699b      	ldr	r3, [r3, #24]
 8006cc6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00b      	beq.n	8006cea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f043 0301 	orr.w	r3, r3, #1
 8006cd8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ce2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006ce4:	2301      	movs	r3, #1
 8006ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d00b      	beq.n	8006d0c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	f043 0308 	orr.w	r3, r3, #8
 8006cfa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d04:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00b      	beq.n	8006d2e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	f043 0302 	orr.w	r3, r3, #2
 8006d1c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01c      	beq.n	8006d70 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff fe56 	bl	80069e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6859      	ldr	r1, [r3, #4]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	4b0d      	ldr	r3, [pc, #52]	; (8006d7c <I2C_IsErrorOccurred+0x1d4>)
 8006d48:	400b      	ands	r3, r1
 8006d4a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	431a      	orrs	r2, r3
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006d70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3728      	adds	r7, #40	; 0x28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	fe00e800 	.word	0xfe00e800

08006d80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	607b      	str	r3, [r7, #4]
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	817b      	strh	r3, [r7, #10]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006d92:	897b      	ldrh	r3, [r7, #10]
 8006d94:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006d98:	7a7b      	ldrb	r3, [r7, #9]
 8006d9a:	041b      	lsls	r3, r3, #16
 8006d9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006da0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dae:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	0d5b      	lsrs	r3, r3, #21
 8006dba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006dbe:	4b08      	ldr	r3, [pc, #32]	; (8006de0 <I2C_TransferConfig+0x60>)
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	43db      	mvns	r3, r3
 8006dc4:	ea02 0103 	and.w	r1, r2, r3
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006dd2:	bf00      	nop
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr
 8006dde:	bf00      	nop
 8006de0:	03ff63ff 	.word	0x03ff63ff

08006de4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	2b20      	cmp	r3, #32
 8006df8:	d138      	bne.n	8006e6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d101      	bne.n	8006e08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e04:	2302      	movs	r3, #2
 8006e06:	e032      	b.n	8006e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2224      	movs	r2, #36	; 0x24
 8006e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6819      	ldr	r1, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	430a      	orrs	r2, r1
 8006e46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0201 	orr.w	r2, r2, #1
 8006e56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
 8006e82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b20      	cmp	r3, #32
 8006e8e:	d139      	bne.n	8006f04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d101      	bne.n	8006e9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	e033      	b.n	8006f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2224      	movs	r2, #36	; 0x24
 8006eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f022 0201 	bic.w	r2, r2, #1
 8006ebc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006ecc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2220      	movs	r2, #32
 8006ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	e000      	b.n	8006f06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f04:	2302      	movs	r3, #2
  }
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e0bf      	b.n	80070a6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fc fdc6 	bl	8003acc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	699a      	ldr	r2, [r3, #24]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006f56:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6999      	ldr	r1, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f6c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6899      	ldr	r1, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b4a      	ldr	r3, [pc, #296]	; (80070b0 <HAL_LTDC_Init+0x19c>)
 8006f88:	400b      	ands	r3, r1
 8006f8a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	695b      	ldr	r3, [r3, #20]
 8006f90:	041b      	lsls	r3, r3, #16
 8006f92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6899      	ldr	r1, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68d9      	ldr	r1, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	4b3e      	ldr	r3, [pc, #248]	; (80070b0 <HAL_LTDC_Init+0x19c>)
 8006fb6:	400b      	ands	r3, r1
 8006fb8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68d9      	ldr	r1, [r3, #12]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6919      	ldr	r1, [r3, #16]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b33      	ldr	r3, [pc, #204]	; (80070b0 <HAL_LTDC_Init+0x19c>)
 8006fe4:	400b      	ands	r3, r1
 8006fe6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fec:	041b      	lsls	r3, r3, #16
 8006fee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	6919      	ldr	r1, [r3, #16]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	431a      	orrs	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6959      	ldr	r1, [r3, #20]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b27      	ldr	r3, [pc, #156]	; (80070b0 <HAL_LTDC_Init+0x19c>)
 8007012:	400b      	ands	r3, r1
 8007014:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	041b      	lsls	r3, r3, #16
 800701c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6959      	ldr	r1, [r3, #20]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	431a      	orrs	r2, r3
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	430a      	orrs	r2, r1
 8007032:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800703a:	021b      	lsls	r3, r3, #8
 800703c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	430a      	orrs	r2, r1
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f042 0206 	orr.w	r2, r2, #6
 8007082:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	699a      	ldr	r2, [r3, #24]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f042 0201 	orr.w	r2, r2, #1
 8007092:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	f000f800 	.word	0xf000f800

080070b4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ca:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d023      	beq.n	800711e <HAL_LTDC_IRQHandler+0x6a>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f003 0304 	and.w	r3, r3, #4
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01e      	beq.n	800711e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0204 	bic.w	r2, r2, #4
 80070ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	2204      	movs	r2, #4
 80070f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070fe:	f043 0201 	orr.w	r2, r3, #1
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2204      	movs	r2, #4
 800710c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2200      	movs	r2, #0
 8007114:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f86f 	bl	80071fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d023      	beq.n	8007170 <HAL_LTDC_IRQHandler+0xbc>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	f003 0302 	and.w	r3, r3, #2
 800712e:	2b00      	cmp	r3, #0
 8007130:	d01e      	beq.n	8007170 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f022 0202 	bic.w	r2, r2, #2
 8007140:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2202      	movs	r2, #2
 8007148:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007150:	f043 0202 	orr.w	r2, r3, #2
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2204      	movs	r2, #4
 800715e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f846 	bl	80071fc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d01b      	beq.n	80071b2 <HAL_LTDC_IRQHandler+0xfe>
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b00      	cmp	r3, #0
 8007182:	d016      	beq.n	80071b2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2201      	movs	r2, #1
 800719a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f82f 	bl	8007210 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d01b      	beq.n	80071f4 <HAL_LTDC_IRQHandler+0x140>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f003 0308 	and.w	r3, r3, #8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d016      	beq.n	80071f4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0208 	bic.w	r2, r2, #8
 80071d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2208      	movs	r2, #8
 80071dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2200      	movs	r2, #0
 80071ea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f818 	bl	8007224 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80071f4:	bf00      	nop
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007238:	b5b0      	push	{r4, r5, r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800724a:	2b01      	cmp	r3, #1
 800724c:	d101      	bne.n	8007252 <HAL_LTDC_ConfigLayer+0x1a>
 800724e:	2302      	movs	r3, #2
 8007250:	e02c      	b.n	80072ac <HAL_LTDC_ConfigLayer+0x74>
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2202      	movs	r2, #2
 800725e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2134      	movs	r1, #52	; 0x34
 8007268:	fb01 f303 	mul.w	r3, r1, r3
 800726c:	4413      	add	r3, r2
 800726e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4614      	mov	r4, r2
 8007276:	461d      	mov	r5, r3
 8007278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800727a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800727e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007284:	682b      	ldr	r3, [r5, #0]
 8007286:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	68b9      	ldr	r1, [r7, #8]
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 f81f 	bl	80072d0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2201      	movs	r2, #1
 8007298:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bdb0      	pop	{r4, r5, r7, pc}

080072b4 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80072c2:	b2db      	uxtb	r3, r3
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b089      	sub	sp, #36	; 0x24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	685a      	ldr	r2, [r3, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072ec:	4413      	add	r3, r2
 80072ee:	041b      	lsls	r3, r3, #16
 80072f0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	01db      	lsls	r3, r3, #7
 80072fc:	4413      	add	r3, r2
 80072fe:	3384      	adds	r3, #132	; 0x84
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	6812      	ldr	r2, [r2, #0]
 8007306:	4611      	mov	r1, r2
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	01d2      	lsls	r2, r2, #7
 800730c:	440a      	add	r2, r1
 800730e:	3284      	adds	r2, #132	; 0x84
 8007310:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007314:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	0c1b      	lsrs	r3, r3, #16
 8007322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007326:	4413      	add	r3, r2
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4619      	mov	r1, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	01db      	lsls	r3, r3, #7
 8007334:	440b      	add	r3, r1
 8007336:	3384      	adds	r3, #132	; 0x84
 8007338:	4619      	mov	r1, r3
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4313      	orrs	r3, r2
 800733e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800734e:	4413      	add	r3, r2
 8007350:	041b      	lsls	r3, r3, #16
 8007352:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	461a      	mov	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	01db      	lsls	r3, r3, #7
 800735e:	4413      	add	r3, r2
 8007360:	3384      	adds	r3, #132	; 0x84
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	4611      	mov	r1, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	01d2      	lsls	r2, r2, #7
 800736e:	440a      	add	r2, r1
 8007370:	3284      	adds	r2, #132	; 0x84
 8007372:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007376:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	689a      	ldr	r2, [r3, #8]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007386:	4413      	add	r3, r2
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4619      	mov	r1, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	01db      	lsls	r3, r3, #7
 8007394:	440b      	add	r3, r1
 8007396:	3384      	adds	r3, #132	; 0x84
 8007398:	4619      	mov	r1, r3
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	4313      	orrs	r3, r2
 800739e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	01db      	lsls	r3, r3, #7
 80073aa:	4413      	add	r3, r2
 80073ac:	3384      	adds	r3, #132	; 0x84
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	68fa      	ldr	r2, [r7, #12]
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	4611      	mov	r1, r2
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	01d2      	lsls	r2, r2, #7
 80073ba:	440a      	add	r2, r1
 80073bc:	3284      	adds	r2, #132	; 0x84
 80073be:	f023 0307 	bic.w	r3, r3, #7
 80073c2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	461a      	mov	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	01db      	lsls	r3, r3, #7
 80073ce:	4413      	add	r3, r2
 80073d0:	3384      	adds	r3, #132	; 0x84
 80073d2:	461a      	mov	r2, r3
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80073e0:	021b      	lsls	r3, r3, #8
 80073e2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	061b      	lsls	r3, r3, #24
 80073f4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	01db      	lsls	r3, r3, #7
 8007400:	4413      	add	r3, r2
 8007402:	3384      	adds	r3, #132	; 0x84
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	4413      	add	r3, r2
 8007412:	3384      	adds	r3, #132	; 0x84
 8007414:	461a      	mov	r2, r3
 8007416:	2300      	movs	r3, #0
 8007418:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007420:	461a      	mov	r2, r3
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	431a      	orrs	r2, r3
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	431a      	orrs	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4619      	mov	r1, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	01db      	lsls	r3, r3, #7
 8007434:	440b      	add	r3, r1
 8007436:	3384      	adds	r3, #132	; 0x84
 8007438:	4619      	mov	r1, r3
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	4313      	orrs	r3, r2
 800743e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	01db      	lsls	r3, r3, #7
 800744a:	4413      	add	r3, r2
 800744c:	3384      	adds	r3, #132	; 0x84
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	6812      	ldr	r2, [r2, #0]
 8007454:	4611      	mov	r1, r2
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	01d2      	lsls	r2, r2, #7
 800745a:	440a      	add	r2, r1
 800745c:	3284      	adds	r2, #132	; 0x84
 800745e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007462:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	461a      	mov	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	01db      	lsls	r3, r3, #7
 800746e:	4413      	add	r3, r2
 8007470:	3384      	adds	r3, #132	; 0x84
 8007472:	461a      	mov	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	461a      	mov	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	01db      	lsls	r3, r3, #7
 8007484:	4413      	add	r3, r2
 8007486:	3384      	adds	r3, #132	; 0x84
 8007488:	69da      	ldr	r2, [r3, #28]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4619      	mov	r1, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	01db      	lsls	r3, r3, #7
 8007494:	440b      	add	r3, r1
 8007496:	3384      	adds	r3, #132	; 0x84
 8007498:	4619      	mov	r1, r3
 800749a:	4b58      	ldr	r3, [pc, #352]	; (80075fc <LTDC_SetConfig+0x32c>)
 800749c:	4013      	ands	r3, r2
 800749e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	69da      	ldr	r2, [r3, #28]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	68f9      	ldr	r1, [r7, #12]
 80074aa:	6809      	ldr	r1, [r1, #0]
 80074ac:	4608      	mov	r0, r1
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	01c9      	lsls	r1, r1, #7
 80074b2:	4401      	add	r1, r0
 80074b4:	3184      	adds	r1, #132	; 0x84
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	01db      	lsls	r3, r3, #7
 80074c4:	4413      	add	r3, r2
 80074c6:	3384      	adds	r3, #132	; 0x84
 80074c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	01db      	lsls	r3, r3, #7
 80074d4:	4413      	add	r3, r2
 80074d6:	3384      	adds	r3, #132	; 0x84
 80074d8:	461a      	mov	r2, r3
 80074da:	2300      	movs	r3, #0
 80074dc:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	461a      	mov	r2, r3
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	01db      	lsls	r3, r3, #7
 80074e8:	4413      	add	r3, r2
 80074ea:	3384      	adds	r3, #132	; 0x84
 80074ec:	461a      	mov	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80074fc:	2304      	movs	r3, #4
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	e01b      	b.n	800753a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d102      	bne.n	8007510 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800750a:	2303      	movs	r3, #3
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	e014      	b.n	800753a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	2b04      	cmp	r3, #4
 8007516:	d00b      	beq.n	8007530 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800751c:	2b02      	cmp	r3, #2
 800751e:	d007      	beq.n	8007530 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007524:	2b03      	cmp	r3, #3
 8007526:	d003      	beq.n	8007530 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800752c:	2b07      	cmp	r3, #7
 800752e:	d102      	bne.n	8007536 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007530:	2302      	movs	r3, #2
 8007532:	61fb      	str	r3, [r7, #28]
 8007534:	e001      	b.n	800753a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007536:	2301      	movs	r3, #1
 8007538:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	461a      	mov	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	01db      	lsls	r3, r3, #7
 8007544:	4413      	add	r3, r2
 8007546:	3384      	adds	r3, #132	; 0x84
 8007548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	6812      	ldr	r2, [r2, #0]
 800754e:	4611      	mov	r1, r2
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	01d2      	lsls	r2, r2, #7
 8007554:	440a      	add	r2, r1
 8007556:	3284      	adds	r2, #132	; 0x84
 8007558:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800755c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	fb02 f303 	mul.w	r3, r2, r3
 8007568:	041a      	lsls	r2, r3, #16
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	6859      	ldr	r1, [r3, #4]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	1acb      	subs	r3, r1, r3
 8007574:	69f9      	ldr	r1, [r7, #28]
 8007576:	fb01 f303 	mul.w	r3, r1, r3
 800757a:	3303      	adds	r3, #3
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	6809      	ldr	r1, [r1, #0]
 8007580:	4608      	mov	r0, r1
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	01c9      	lsls	r1, r1, #7
 8007586:	4401      	add	r1, r0
 8007588:	3184      	adds	r1, #132	; 0x84
 800758a:	4313      	orrs	r3, r2
 800758c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	01db      	lsls	r3, r3, #7
 8007598:	4413      	add	r3, r2
 800759a:	3384      	adds	r3, #132	; 0x84
 800759c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	440b      	add	r3, r1
 80075aa:	3384      	adds	r3, #132	; 0x84
 80075ac:	4619      	mov	r1, r3
 80075ae:	4b14      	ldr	r3, [pc, #80]	; (8007600 <LTDC_SetConfig+0x330>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	01db      	lsls	r3, r3, #7
 80075be:	4413      	add	r3, r2
 80075c0:	3384      	adds	r3, #132	; 0x84
 80075c2:	461a      	mov	r2, r3
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	01db      	lsls	r3, r3, #7
 80075d4:	4413      	add	r3, r2
 80075d6:	3384      	adds	r3, #132	; 0x84
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	4611      	mov	r1, r2
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	01d2      	lsls	r2, r2, #7
 80075e4:	440a      	add	r2, r1
 80075e6:	3284      	adds	r2, #132	; 0x84
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	6013      	str	r3, [r2, #0]
}
 80075ee:	bf00      	nop
 80075f0:	3724      	adds	r7, #36	; 0x24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr
 80075fa:	bf00      	nop
 80075fc:	fffff8f8 	.word	0xfffff8f8
 8007600:	fffff800 	.word	0xfffff800

08007604 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007608:	4b05      	ldr	r3, [pc, #20]	; (8007620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a04      	ldr	r2, [pc, #16]	; (8007620 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800760e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007612:	6013      	str	r3, [r2, #0]
}
 8007614:	bf00      	nop
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	40007000 	.word	0x40007000

08007624 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800762e:	4b23      	ldr	r3, [pc, #140]	; (80076bc <HAL_PWREx_EnableOverDrive+0x98>)
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	4a22      	ldr	r2, [pc, #136]	; (80076bc <HAL_PWREx_EnableOverDrive+0x98>)
 8007634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007638:	6413      	str	r3, [r2, #64]	; 0x40
 800763a:	4b20      	ldr	r3, [pc, #128]	; (80076bc <HAL_PWREx_EnableOverDrive+0x98>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007646:	4b1e      	ldr	r3, [pc, #120]	; (80076c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1d      	ldr	r2, [pc, #116]	; (80076c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800764c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007650:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007652:	f7fc ff4b 	bl	80044ec <HAL_GetTick>
 8007656:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007658:	e009      	b.n	800766e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800765a:	f7fc ff47 	bl	80044ec <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007668:	d901      	bls.n	800766e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e022      	b.n	80076b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800766e:	4b14      	ldr	r3, [pc, #80]	; (80076c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800767a:	d1ee      	bne.n	800765a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800767c:	4b10      	ldr	r3, [pc, #64]	; (80076c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a0f      	ldr	r2, [pc, #60]	; (80076c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007686:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007688:	f7fc ff30 	bl	80044ec <HAL_GetTick>
 800768c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800768e:	e009      	b.n	80076a4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007690:	f7fc ff2c 	bl	80044ec <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800769e:	d901      	bls.n	80076a4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e007      	b.n	80076b4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076a4:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80076b0:	d1ee      	bne.n	8007690 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3708      	adds	r7, #8
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	40007000 	.word	0x40007000

080076c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80076cc:	2300      	movs	r3, #0
 80076ce:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e291      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	f000 8087 	beq.w	80077f6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80076e8:	4b96      	ldr	r3, [pc, #600]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 030c 	and.w	r3, r3, #12
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d00c      	beq.n	800770e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076f4:	4b93      	ldr	r3, [pc, #588]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 030c 	and.w	r3, r3, #12
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d112      	bne.n	8007726 <HAL_RCC_OscConfig+0x62>
 8007700:	4b90      	ldr	r3, [pc, #576]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007708:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800770c:	d10b      	bne.n	8007726 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800770e:	4b8d      	ldr	r3, [pc, #564]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d06c      	beq.n	80077f4 <HAL_RCC_OscConfig+0x130>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d168      	bne.n	80077f4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e26b      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	685b      	ldr	r3, [r3, #4]
 800772a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800772e:	d106      	bne.n	800773e <HAL_RCC_OscConfig+0x7a>
 8007730:	4b84      	ldr	r3, [pc, #528]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a83      	ldr	r2, [pc, #524]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	e02e      	b.n	800779c <HAL_RCC_OscConfig+0xd8>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10c      	bne.n	8007760 <HAL_RCC_OscConfig+0x9c>
 8007746:	4b7f      	ldr	r3, [pc, #508]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a7e      	ldr	r2, [pc, #504]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800774c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	4b7c      	ldr	r3, [pc, #496]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a7b      	ldr	r2, [pc, #492]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	e01d      	b.n	800779c <HAL_RCC_OscConfig+0xd8>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007768:	d10c      	bne.n	8007784 <HAL_RCC_OscConfig+0xc0>
 800776a:	4b76      	ldr	r3, [pc, #472]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a75      	ldr	r2, [pc, #468]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	4b73      	ldr	r3, [pc, #460]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a72      	ldr	r2, [pc, #456]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800777c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007780:	6013      	str	r3, [r2, #0]
 8007782:	e00b      	b.n	800779c <HAL_RCC_OscConfig+0xd8>
 8007784:	4b6f      	ldr	r3, [pc, #444]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a6e      	ldr	r2, [pc, #440]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800778a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800778e:	6013      	str	r3, [r2, #0]
 8007790:	4b6c      	ldr	r3, [pc, #432]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a6b      	ldr	r2, [pc, #428]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d013      	beq.n	80077cc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077a4:	f7fc fea2 	bl	80044ec <HAL_GetTick>
 80077a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077aa:	e008      	b.n	80077be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077ac:	f7fc fe9e 	bl	80044ec <HAL_GetTick>
 80077b0:	4602      	mov	r2, r0
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	1ad3      	subs	r3, r2, r3
 80077b6:	2b64      	cmp	r3, #100	; 0x64
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e21f      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077be:	4b61      	ldr	r3, [pc, #388]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f0      	beq.n	80077ac <HAL_RCC_OscConfig+0xe8>
 80077ca:	e014      	b.n	80077f6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077cc:	f7fc fe8e 	bl	80044ec <HAL_GetTick>
 80077d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077d2:	e008      	b.n	80077e6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077d4:	f7fc fe8a 	bl	80044ec <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b64      	cmp	r3, #100	; 0x64
 80077e0:	d901      	bls.n	80077e6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80077e2:	2303      	movs	r3, #3
 80077e4:	e20b      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077e6:	4b57      	ldr	r3, [pc, #348]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1f0      	bne.n	80077d4 <HAL_RCC_OscConfig+0x110>
 80077f2:	e000      	b.n	80077f6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d069      	beq.n	80078d6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007802:	4b50      	ldr	r3, [pc, #320]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f003 030c 	and.w	r3, r3, #12
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00b      	beq.n	8007826 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800780e:	4b4d      	ldr	r3, [pc, #308]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 030c 	and.w	r3, r3, #12
 8007816:	2b08      	cmp	r3, #8
 8007818:	d11c      	bne.n	8007854 <HAL_RCC_OscConfig+0x190>
 800781a:	4b4a      	ldr	r3, [pc, #296]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d116      	bne.n	8007854 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007826:	4b47      	ldr	r3, [pc, #284]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_RCC_OscConfig+0x17a>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d001      	beq.n	800783e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e1df      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800783e:	4b41      	ldr	r3, [pc, #260]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	00db      	lsls	r3, r3, #3
 800784c:	493d      	ldr	r1, [pc, #244]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800784e:	4313      	orrs	r3, r2
 8007850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007852:	e040      	b.n	80078d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d023      	beq.n	80078a4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800785c:	4b39      	ldr	r3, [pc, #228]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a38      	ldr	r2, [pc, #224]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007862:	f043 0301 	orr.w	r3, r3, #1
 8007866:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007868:	f7fc fe40 	bl	80044ec <HAL_GetTick>
 800786c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800786e:	e008      	b.n	8007882 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007870:	f7fc fe3c 	bl	80044ec <HAL_GetTick>
 8007874:	4602      	mov	r2, r0
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	1ad3      	subs	r3, r2, r3
 800787a:	2b02      	cmp	r3, #2
 800787c:	d901      	bls.n	8007882 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800787e:	2303      	movs	r3, #3
 8007880:	e1bd      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007882:	4b30      	ldr	r3, [pc, #192]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0f0      	beq.n	8007870 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800788e:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	4929      	ldr	r1, [pc, #164]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	600b      	str	r3, [r1, #0]
 80078a2:	e018      	b.n	80078d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078a4:	4b27      	ldr	r3, [pc, #156]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a26      	ldr	r2, [pc, #152]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80078aa:	f023 0301 	bic.w	r3, r3, #1
 80078ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b0:	f7fc fe1c 	bl	80044ec <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078b8:	f7fc fe18 	bl	80044ec <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e199      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ca:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f003 0302 	and.w	r3, r3, #2
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f0      	bne.n	80078b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d038      	beq.n	8007954 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d019      	beq.n	800791e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ea:	4b16      	ldr	r3, [pc, #88]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80078ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ee:	4a15      	ldr	r2, [pc, #84]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 80078f0:	f043 0301 	orr.w	r3, r3, #1
 80078f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f6:	f7fc fdf9 	bl	80044ec <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078fe:	f7fc fdf5 	bl	80044ec <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e176      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f0      	beq.n	80078fe <HAL_RCC_OscConfig+0x23a>
 800791c:	e01a      	b.n	8007954 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800791e:	4b09      	ldr	r3, [pc, #36]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007922:	4a08      	ldr	r2, [pc, #32]	; (8007944 <HAL_RCC_OscConfig+0x280>)
 8007924:	f023 0301 	bic.w	r3, r3, #1
 8007928:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800792a:	f7fc fddf 	bl	80044ec <HAL_GetTick>
 800792e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007930:	e00a      	b.n	8007948 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007932:	f7fc fddb 	bl	80044ec <HAL_GetTick>
 8007936:	4602      	mov	r2, r0
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	1ad3      	subs	r3, r2, r3
 800793c:	2b02      	cmp	r3, #2
 800793e:	d903      	bls.n	8007948 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007940:	2303      	movs	r3, #3
 8007942:	e15c      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
 8007944:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007948:	4b91      	ldr	r3, [pc, #580]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 800794a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1ee      	bne.n	8007932 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 80a4 	beq.w	8007aaa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007962:	4b8b      	ldr	r3, [pc, #556]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10d      	bne.n	800798a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800796e:	4b88      	ldr	r3, [pc, #544]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	4a87      	ldr	r2, [pc, #540]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007978:	6413      	str	r3, [r2, #64]	; 0x40
 800797a:	4b85      	ldr	r3, [pc, #532]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 800797c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007982:	60bb      	str	r3, [r7, #8]
 8007984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007986:	2301      	movs	r3, #1
 8007988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800798a:	4b82      	ldr	r3, [pc, #520]	; (8007b94 <HAL_RCC_OscConfig+0x4d0>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d118      	bne.n	80079c8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007996:	4b7f      	ldr	r3, [pc, #508]	; (8007b94 <HAL_RCC_OscConfig+0x4d0>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a7e      	ldr	r2, [pc, #504]	; (8007b94 <HAL_RCC_OscConfig+0x4d0>)
 800799c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079a2:	f7fc fda3 	bl	80044ec <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079a8:	e008      	b.n	80079bc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079aa:	f7fc fd9f 	bl	80044ec <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	2b64      	cmp	r3, #100	; 0x64
 80079b6:	d901      	bls.n	80079bc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80079b8:	2303      	movs	r3, #3
 80079ba:	e120      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079bc:	4b75      	ldr	r3, [pc, #468]	; (8007b94 <HAL_RCC_OscConfig+0x4d0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0f0      	beq.n	80079aa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d106      	bne.n	80079de <HAL_RCC_OscConfig+0x31a>
 80079d0:	4b6f      	ldr	r3, [pc, #444]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 80079d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d4:	4a6e      	ldr	r2, [pc, #440]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	6713      	str	r3, [r2, #112]	; 0x70
 80079dc:	e02d      	b.n	8007a3a <HAL_RCC_OscConfig+0x376>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10c      	bne.n	8007a00 <HAL_RCC_OscConfig+0x33c>
 80079e6:	4b6a      	ldr	r3, [pc, #424]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 80079e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ea:	4a69      	ldr	r2, [pc, #420]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 80079ec:	f023 0301 	bic.w	r3, r3, #1
 80079f0:	6713      	str	r3, [r2, #112]	; 0x70
 80079f2:	4b67      	ldr	r3, [pc, #412]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	4a66      	ldr	r2, [pc, #408]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 80079f8:	f023 0304 	bic.w	r3, r3, #4
 80079fc:	6713      	str	r3, [r2, #112]	; 0x70
 80079fe:	e01c      	b.n	8007a3a <HAL_RCC_OscConfig+0x376>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	2b05      	cmp	r3, #5
 8007a06:	d10c      	bne.n	8007a22 <HAL_RCC_OscConfig+0x35e>
 8007a08:	4b61      	ldr	r3, [pc, #388]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0c:	4a60      	ldr	r2, [pc, #384]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a0e:	f043 0304 	orr.w	r3, r3, #4
 8007a12:	6713      	str	r3, [r2, #112]	; 0x70
 8007a14:	4b5e      	ldr	r3, [pc, #376]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a18:	4a5d      	ldr	r2, [pc, #372]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a20:	e00b      	b.n	8007a3a <HAL_RCC_OscConfig+0x376>
 8007a22:	4b5b      	ldr	r3, [pc, #364]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a26:	4a5a      	ldr	r2, [pc, #360]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a28:	f023 0301 	bic.w	r3, r3, #1
 8007a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a2e:	4b58      	ldr	r3, [pc, #352]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a32:	4a57      	ldr	r2, [pc, #348]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a34:	f023 0304 	bic.w	r3, r3, #4
 8007a38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d015      	beq.n	8007a6e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a42:	f7fc fd53 	bl	80044ec <HAL_GetTick>
 8007a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a48:	e00a      	b.n	8007a60 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a4a:	f7fc fd4f 	bl	80044ec <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d901      	bls.n	8007a60 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e0ce      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a60:	4b4b      	ldr	r3, [pc, #300]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a64:	f003 0302 	and.w	r3, r3, #2
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d0ee      	beq.n	8007a4a <HAL_RCC_OscConfig+0x386>
 8007a6c:	e014      	b.n	8007a98 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6e:	f7fc fd3d 	bl	80044ec <HAL_GetTick>
 8007a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a74:	e00a      	b.n	8007a8c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a76:	f7fc fd39 	bl	80044ec <HAL_GetTick>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d901      	bls.n	8007a8c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007a88:	2303      	movs	r3, #3
 8007a8a:	e0b8      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a8c:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a90:	f003 0302 	and.w	r3, r3, #2
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d1ee      	bne.n	8007a76 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d105      	bne.n	8007aaa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a9e:	4b3c      	ldr	r3, [pc, #240]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	4a3b      	ldr	r2, [pc, #236]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007aa8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80a4 	beq.w	8007bfc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ab4:	4b36      	ldr	r3, [pc, #216]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 030c 	and.w	r3, r3, #12
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d06b      	beq.n	8007b98 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	699b      	ldr	r3, [r3, #24]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d149      	bne.n	8007b5c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ac8:	4b31      	ldr	r3, [pc, #196]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a30      	ldr	r2, [pc, #192]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007ace:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad4:	f7fc fd0a 	bl	80044ec <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007adc:	f7fc fd06 	bl	80044ec <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e087      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aee:	4b28      	ldr	r3, [pc, #160]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f0      	bne.n	8007adc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69da      	ldr	r2, [r3, #28]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a1b      	ldr	r3, [r3, #32]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b08:	019b      	lsls	r3, r3, #6
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b10:	085b      	lsrs	r3, r3, #1
 8007b12:	3b01      	subs	r3, #1
 8007b14:	041b      	lsls	r3, r3, #16
 8007b16:	431a      	orrs	r2, r3
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1c:	061b      	lsls	r3, r3, #24
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	4a1b      	ldr	r2, [pc, #108]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007b22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b26:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b28:	4b19      	ldr	r3, [pc, #100]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a18      	ldr	r2, [pc, #96]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b34:	f7fc fcda 	bl	80044ec <HAL_GetTick>
 8007b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b3a:	e008      	b.n	8007b4e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b3c:	f7fc fcd6 	bl	80044ec <HAL_GetTick>
 8007b40:	4602      	mov	r2, r0
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	2b02      	cmp	r3, #2
 8007b48:	d901      	bls.n	8007b4e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e057      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b4e:	4b10      	ldr	r3, [pc, #64]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0f0      	beq.n	8007b3c <HAL_RCC_OscConfig+0x478>
 8007b5a:	e04f      	b.n	8007bfc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a0b      	ldr	r2, [pc, #44]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007b62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7fc fcc0 	bl	80044ec <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b70:	f7fc fcbc 	bl	80044ec <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e03d      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b82:	4b03      	ldr	r3, [pc, #12]	; (8007b90 <HAL_RCC_OscConfig+0x4cc>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x4ac>
 8007b8e:	e035      	b.n	8007bfc <HAL_RCC_OscConfig+0x538>
 8007b90:	40023800 	.word	0x40023800
 8007b94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007b98:	4b1b      	ldr	r3, [pc, #108]	; (8007c08 <HAL_RCC_OscConfig+0x544>)
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d028      	beq.n	8007bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d121      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d11a      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bc8:	4013      	ands	r3, r2
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d111      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bde:	085b      	lsrs	r3, r3, #1
 8007be0:	3b01      	subs	r3, #1
 8007be2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d107      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d001      	beq.n	8007bfc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	40023800 	.word	0x40023800

08007c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e0d0      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c24:	4b6a      	ldr	r3, [pc, #424]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 030f 	and.w	r3, r3, #15
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d910      	bls.n	8007c54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c32:	4b67      	ldr	r3, [pc, #412]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f023 020f 	bic.w	r2, r3, #15
 8007c3a:	4965      	ldr	r1, [pc, #404]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c42:	4b63      	ldr	r3, [pc, #396]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 030f 	and.w	r3, r3, #15
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d001      	beq.n	8007c54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0b8      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d020      	beq.n	8007ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d005      	beq.n	8007c78 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c6c:	4b59      	ldr	r3, [pc, #356]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	4a58      	ldr	r2, [pc, #352]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f003 0308 	and.w	r3, r3, #8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c84:	4b53      	ldr	r3, [pc, #332]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	4a52      	ldr	r2, [pc, #328]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c90:	4b50      	ldr	r3, [pc, #320]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	494d      	ldr	r1, [pc, #308]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0301 	and.w	r3, r3, #1
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d040      	beq.n	8007d30 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d107      	bne.n	8007cc6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cb6:	4b47      	ldr	r3, [pc, #284]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d115      	bne.n	8007cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e07f      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d107      	bne.n	8007cde <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cce:	4b41      	ldr	r3, [pc, #260]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d109      	bne.n	8007cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e073      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cde:	4b3d      	ldr	r3, [pc, #244]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e06b      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cee:	4b39      	ldr	r3, [pc, #228]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f023 0203 	bic.w	r2, r3, #3
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	4936      	ldr	r1, [pc, #216]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d00:	f7fc fbf4 	bl	80044ec <HAL_GetTick>
 8007d04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d06:	e00a      	b.n	8007d1e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d08:	f7fc fbf0 	bl	80044ec <HAL_GetTick>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	1ad3      	subs	r3, r2, r3
 8007d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e053      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d1e:	4b2d      	ldr	r3, [pc, #180]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	f003 020c 	and.w	r2, r3, #12
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d1eb      	bne.n	8007d08 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d30:	4b27      	ldr	r3, [pc, #156]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 030f 	and.w	r3, r3, #15
 8007d38:	683a      	ldr	r2, [r7, #0]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d210      	bcs.n	8007d60 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d3e:	4b24      	ldr	r3, [pc, #144]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f023 020f 	bic.w	r2, r3, #15
 8007d46:	4922      	ldr	r1, [pc, #136]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d4e:	4b20      	ldr	r3, [pc, #128]	; (8007dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d001      	beq.n	8007d60 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e032      	b.n	8007dc6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d6c:	4b19      	ldr	r3, [pc, #100]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	68db      	ldr	r3, [r3, #12]
 8007d78:	4916      	ldr	r1, [pc, #88]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 0308 	and.w	r3, r3, #8
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d009      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d8a:	4b12      	ldr	r3, [pc, #72]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	00db      	lsls	r3, r3, #3
 8007d98:	490e      	ldr	r1, [pc, #56]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d9e:	f000 f821 	bl	8007de4 <HAL_RCC_GetSysClockFreq>
 8007da2:	4602      	mov	r2, r0
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	091b      	lsrs	r3, r3, #4
 8007daa:	f003 030f 	and.w	r3, r3, #15
 8007dae:	490a      	ldr	r1, [pc, #40]	; (8007dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8007db0:	5ccb      	ldrb	r3, [r1, r3]
 8007db2:	fa22 f303 	lsr.w	r3, r2, r3
 8007db6:	4a09      	ldr	r2, [pc, #36]	; (8007ddc <HAL_RCC_ClockConfig+0x1d0>)
 8007db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007dba:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <HAL_RCC_ClockConfig+0x1d4>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fc fa5a 	bl	8004278 <HAL_InitTick>

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3710      	adds	r7, #16
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	40023c00 	.word	0x40023c00
 8007dd4:	40023800 	.word	0x40023800
 8007dd8:	080133f8 	.word	0x080133f8
 8007ddc:	2000003c 	.word	0x2000003c
 8007de0:	20000040 	.word	0x20000040

08007de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007de8:	b090      	sub	sp, #64	; 0x40
 8007dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007dec:	2300      	movs	r3, #0
 8007dee:	637b      	str	r3, [r7, #52]	; 0x34
 8007df0:	2300      	movs	r3, #0
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	2300      	movs	r3, #0
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007dfc:	4b59      	ldr	r3, [pc, #356]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f003 030c 	and.w	r3, r3, #12
 8007e04:	2b08      	cmp	r3, #8
 8007e06:	d00d      	beq.n	8007e24 <HAL_RCC_GetSysClockFreq+0x40>
 8007e08:	2b08      	cmp	r3, #8
 8007e0a:	f200 80a1 	bhi.w	8007f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d002      	beq.n	8007e18 <HAL_RCC_GetSysClockFreq+0x34>
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d003      	beq.n	8007e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e16:	e09b      	b.n	8007f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e18:	4b53      	ldr	r3, [pc, #332]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e1c:	e09b      	b.n	8007f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e1e:	4b53      	ldr	r3, [pc, #332]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e22:	e098      	b.n	8007f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e24:	4b4f      	ldr	r3, [pc, #316]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e2c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007e2e:	4b4d      	ldr	r3, [pc, #308]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d028      	beq.n	8007e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e3a:	4b4a      	ldr	r3, [pc, #296]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	099b      	lsrs	r3, r3, #6
 8007e40:	2200      	movs	r2, #0
 8007e42:	623b      	str	r3, [r7, #32]
 8007e44:	627a      	str	r2, [r7, #36]	; 0x24
 8007e46:	6a3b      	ldr	r3, [r7, #32]
 8007e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4b47      	ldr	r3, [pc, #284]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e50:	fb03 f201 	mul.w	r2, r3, r1
 8007e54:	2300      	movs	r3, #0
 8007e56:	fb00 f303 	mul.w	r3, r0, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	4a43      	ldr	r2, [pc, #268]	; (8007f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8007e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e64:	460a      	mov	r2, r1
 8007e66:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e6a:	4413      	add	r3, r2
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e70:	2200      	movs	r2, #0
 8007e72:	61bb      	str	r3, [r7, #24]
 8007e74:	61fa      	str	r2, [r7, #28]
 8007e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e7e:	f7f8 fa17 	bl	80002b0 <__aeabi_uldivmod>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4613      	mov	r3, r2
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e8a:	e053      	b.n	8007f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e8c:	4b35      	ldr	r3, [pc, #212]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	099b      	lsrs	r3, r3, #6
 8007e92:	2200      	movs	r2, #0
 8007e94:	613b      	str	r3, [r7, #16]
 8007e96:	617a      	str	r2, [r7, #20]
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e9e:	f04f 0b00 	mov.w	fp, #0
 8007ea2:	4652      	mov	r2, sl
 8007ea4:	465b      	mov	r3, fp
 8007ea6:	f04f 0000 	mov.w	r0, #0
 8007eaa:	f04f 0100 	mov.w	r1, #0
 8007eae:	0159      	lsls	r1, r3, #5
 8007eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007eb4:	0150      	lsls	r0, r2, #5
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	ebb2 080a 	subs.w	r8, r2, sl
 8007ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8007ec2:	f04f 0200 	mov.w	r2, #0
 8007ec6:	f04f 0300 	mov.w	r3, #0
 8007eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8007eda:	eb63 0509 	sbc.w	r5, r3, r9
 8007ede:	f04f 0200 	mov.w	r2, #0
 8007ee2:	f04f 0300 	mov.w	r3, #0
 8007ee6:	00eb      	lsls	r3, r5, #3
 8007ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eec:	00e2      	lsls	r2, r4, #3
 8007eee:	4614      	mov	r4, r2
 8007ef0:	461d      	mov	r5, r3
 8007ef2:	eb14 030a 	adds.w	r3, r4, sl
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	eb45 030b 	adc.w	r3, r5, fp
 8007efc:	607b      	str	r3, [r7, #4]
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	028b      	lsls	r3, r1, #10
 8007f0e:	4621      	mov	r1, r4
 8007f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f14:	4621      	mov	r1, r4
 8007f16:	028a      	lsls	r2, r1, #10
 8007f18:	4610      	mov	r0, r2
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1e:	2200      	movs	r2, #0
 8007f20:	60bb      	str	r3, [r7, #8]
 8007f22:	60fa      	str	r2, [r7, #12]
 8007f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f28:	f7f8 f9c2 	bl	80002b0 <__aeabi_uldivmod>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4613      	mov	r3, r2
 8007f32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007f34:	4b0b      	ldr	r3, [pc, #44]	; (8007f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	0c1b      	lsrs	r3, r3, #16
 8007f3a:	f003 0303 	and.w	r3, r3, #3
 8007f3e:	3301      	adds	r3, #1
 8007f40:	005b      	lsls	r3, r3, #1
 8007f42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f4e:	e002      	b.n	8007f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f50:	4b05      	ldr	r3, [pc, #20]	; (8007f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3740      	adds	r7, #64	; 0x40
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f62:	bf00      	nop
 8007f64:	40023800 	.word	0x40023800
 8007f68:	00f42400 	.word	0x00f42400
 8007f6c:	017d7840 	.word	0x017d7840

08007f70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f74:	4b03      	ldr	r3, [pc, #12]	; (8007f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f76:	681b      	ldr	r3, [r3, #0]
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	2000003c 	.word	0x2000003c

08007f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f8c:	f7ff fff0 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007f90:	4602      	mov	r2, r0
 8007f92:	4b05      	ldr	r3, [pc, #20]	; (8007fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	0a9b      	lsrs	r3, r3, #10
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	4903      	ldr	r1, [pc, #12]	; (8007fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f9e:	5ccb      	ldrb	r3, [r1, r3]
 8007fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	40023800 	.word	0x40023800
 8007fac:	08013408 	.word	0x08013408

08007fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fb4:	f7ff ffdc 	bl	8007f70 <HAL_RCC_GetHCLKFreq>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	4b05      	ldr	r3, [pc, #20]	; (8007fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fbc:	689b      	ldr	r3, [r3, #8]
 8007fbe:	0b5b      	lsrs	r3, r3, #13
 8007fc0:	f003 0307 	and.w	r3, r3, #7
 8007fc4:	4903      	ldr	r1, [pc, #12]	; (8007fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fc6:	5ccb      	ldrb	r3, [r1, r3]
 8007fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40023800 	.word	0x40023800
 8007fd4:	08013408 	.word	0x08013408

08007fd8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	220f      	movs	r2, #15
 8007fe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fe8:	4b12      	ldr	r3, [pc, #72]	; (8008034 <HAL_RCC_GetClockConfig+0x5c>)
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 0203 	and.w	r2, r3, #3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <HAL_RCC_GetClockConfig+0x5c>)
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008000:	4b0c      	ldr	r3, [pc, #48]	; (8008034 <HAL_RCC_GetClockConfig+0x5c>)
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <HAL_RCC_GetClockConfig+0x5c>)
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	08db      	lsrs	r3, r3, #3
 8008012:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <HAL_RCC_GetClockConfig+0x60>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 020f 	and.w	r2, r3, #15
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	601a      	str	r2, [r3, #0]
}
 8008026:	bf00      	nop
 8008028:	370c      	adds	r7, #12
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40023800 	.word	0x40023800
 8008038:	40023c00 	.word	0x40023c00

0800803c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b088      	sub	sp, #32
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008048:	2300      	movs	r3, #0
 800804a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008050:	2300      	movs	r3, #0
 8008052:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008054:	2300      	movs	r3, #0
 8008056:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0301 	and.w	r3, r3, #1
 8008060:	2b00      	cmp	r3, #0
 8008062:	d012      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008064:	4b69      	ldr	r3, [pc, #420]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4a68      	ldr	r2, [pc, #416]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800806a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800806e:	6093      	str	r3, [r2, #8]
 8008070:	4b66      	ldr	r3, [pc, #408]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008078:	4964      	ldr	r1, [pc, #400]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800807a:	4313      	orrs	r3, r2
 800807c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008086:	2301      	movs	r3, #1
 8008088:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008092:	2b00      	cmp	r3, #0
 8008094:	d017      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008096:	4b5d      	ldr	r3, [pc, #372]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800809c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a4:	4959      	ldr	r1, [pc, #356]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080b4:	d101      	bne.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80080b6:	2301      	movs	r3, #1
 80080b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80080c2:	2301      	movs	r3, #1
 80080c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d017      	beq.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80080d2:	4b4e      	ldr	r3, [pc, #312]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	494a      	ldr	r1, [pc, #296]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e2:	4313      	orrs	r3, r2
 80080e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f0:	d101      	bne.n	80080f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80080f2:	2301      	movs	r3, #1
 80080f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80080fe:	2301      	movs	r3, #1
 8008100:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800810e:	2301      	movs	r3, #1
 8008110:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0320 	and.w	r3, r3, #32
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 808b 	beq.w	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008120:	4b3a      	ldr	r3, [pc, #232]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	4a39      	ldr	r2, [pc, #228]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800812a:	6413      	str	r3, [r2, #64]	; 0x40
 800812c:	4b37      	ldr	r3, [pc, #220]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008138:	4b35      	ldr	r3, [pc, #212]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a34      	ldr	r2, [pc, #208]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800813e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008142:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008144:	f7fc f9d2 	bl	80044ec <HAL_GetTick>
 8008148:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800814a:	e008      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800814c:	f7fc f9ce 	bl	80044ec <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b64      	cmp	r3, #100	; 0x64
 8008158:	d901      	bls.n	800815e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e357      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800815e:	4b2c      	ldr	r3, [pc, #176]	; (8008210 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008166:	2b00      	cmp	r3, #0
 8008168:	d0f0      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800816a:	4b28      	ldr	r3, [pc, #160]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800816c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800816e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008172:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d035      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	429a      	cmp	r2, r3
 8008186:	d02e      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008188:	4b20      	ldr	r3, [pc, #128]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800818a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800818c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008190:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008192:	4b1e      	ldr	r3, [pc, #120]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008196:	4a1d      	ldr	r2, [pc, #116]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800819c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800819e:	4b1b      	ldr	r3, [pc, #108]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081a2:	4a1a      	ldr	r2, [pc, #104]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80081aa:	4a18      	ldr	r2, [pc, #96]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80081b0:	4b16      	ldr	r3, [pc, #88]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081b4:	f003 0301 	and.w	r3, r3, #1
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d114      	bne.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081bc:	f7fc f996 	bl	80044ec <HAL_GetTick>
 80081c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081c2:	e00a      	b.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081c4:	f7fc f992 	bl	80044ec <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d901      	bls.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e319      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081da:	4b0c      	ldr	r3, [pc, #48]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0ee      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081f2:	d111      	bne.n	8008218 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80081f4:	4b05      	ldr	r3, [pc, #20]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008200:	4b04      	ldr	r3, [pc, #16]	; (8008214 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008202:	400b      	ands	r3, r1
 8008204:	4901      	ldr	r1, [pc, #4]	; (800820c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008206:	4313      	orrs	r3, r2
 8008208:	608b      	str	r3, [r1, #8]
 800820a:	e00b      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800820c:	40023800 	.word	0x40023800
 8008210:	40007000 	.word	0x40007000
 8008214:	0ffffcff 	.word	0x0ffffcff
 8008218:	4baa      	ldr	r3, [pc, #680]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	4aa9      	ldr	r2, [pc, #676]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008222:	6093      	str	r3, [r2, #8]
 8008224:	4ba7      	ldr	r3, [pc, #668]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008230:	49a4      	ldr	r1, [pc, #656]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008232:	4313      	orrs	r3, r2
 8008234:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f003 0310 	and.w	r3, r3, #16
 800823e:	2b00      	cmp	r3, #0
 8008240:	d010      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008242:	4ba0      	ldr	r3, [pc, #640]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008248:	4a9e      	ldr	r2, [pc, #632]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800824a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800824e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008252:	4b9c      	ldr	r3, [pc, #624]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008254:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825c:	4999      	ldr	r1, [pc, #612]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008270:	4b94      	ldr	r3, [pc, #592]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008276:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800827e:	4991      	ldr	r1, [pc, #580]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008292:	4b8c      	ldr	r3, [pc, #560]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008298:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082a0:	4988      	ldr	r1, [pc, #544]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80082b4:	4b83      	ldr	r3, [pc, #524]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082c2:	4980      	ldr	r1, [pc, #512]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c4:	4313      	orrs	r3, r2
 80082c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082d6:	4b7b      	ldr	r3, [pc, #492]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e4:	4977      	ldr	r1, [pc, #476]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e6:	4313      	orrs	r3, r2
 80082e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80082f8:	4b72      	ldr	r3, [pc, #456]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fe:	f023 0203 	bic.w	r2, r3, #3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008306:	496f      	ldr	r1, [pc, #444]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008308:	4313      	orrs	r3, r2
 800830a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800831a:	4b6a      	ldr	r3, [pc, #424]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800831c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008320:	f023 020c 	bic.w	r2, r3, #12
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008328:	4966      	ldr	r1, [pc, #408]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800832a:	4313      	orrs	r3, r2
 800832c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800833c:	4b61      	ldr	r3, [pc, #388]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008342:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800834a:	495e      	ldr	r1, [pc, #376]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834c:	4313      	orrs	r3, r2
 800834e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800835e:	4b59      	ldr	r3, [pc, #356]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008364:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836c:	4955      	ldr	r1, [pc, #340]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008380:	4b50      	ldr	r3, [pc, #320]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800838e:	494d      	ldr	r1, [pc, #308]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008390:	4313      	orrs	r3, r2
 8008392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80083a2:	4b48      	ldr	r3, [pc, #288]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b0:	4944      	ldr	r1, [pc, #272]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083b2:	4313      	orrs	r3, r2
 80083b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d00a      	beq.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80083c4:	4b3f      	ldr	r3, [pc, #252]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d2:	493c      	ldr	r1, [pc, #240]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00a      	beq.n	80083fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80083e6:	4b37      	ldr	r3, [pc, #220]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f4:	4933      	ldr	r1, [pc, #204]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00a      	beq.n	800841e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008408:	4b2e      	ldr	r3, [pc, #184]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800840a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800840e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008416:	492b      	ldr	r1, [pc, #172]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008418:	4313      	orrs	r3, r2
 800841a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d011      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800842a:	4b26      	ldr	r3, [pc, #152]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800842c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008430:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008438:	4922      	ldr	r1, [pc, #136]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008448:	d101      	bne.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800844a:	2301      	movs	r3, #1
 800844c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 0308 	and.w	r3, r3, #8
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800845a:	2301      	movs	r3, #1
 800845c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00a      	beq.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800846a:	4b16      	ldr	r3, [pc, #88]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008470:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008478:	4912      	ldr	r1, [pc, #72]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800847a:	4313      	orrs	r3, r2
 800847c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00b      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008492:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800849c:	4909      	ldr	r1, [pc, #36]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d006      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f000 80d9 	beq.w	800866a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a01      	ldr	r2, [pc, #4]	; (80084c4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084c2:	e001      	b.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80084c4:	40023800 	.word	0x40023800
 80084c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ca:	f7fc f80f 	bl	80044ec <HAL_GetTick>
 80084ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084d0:	e008      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084d2:	f7fc f80b 	bl	80044ec <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	2b64      	cmp	r3, #100	; 0x64
 80084de:	d901      	bls.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084e0:	2303      	movs	r3, #3
 80084e2:	e194      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084e4:	4b6c      	ldr	r3, [pc, #432]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f0      	bne.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d021      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11d      	bne.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008504:	4b64      	ldr	r3, [pc, #400]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800850a:	0c1b      	lsrs	r3, r3, #16
 800850c:	f003 0303 	and.w	r3, r3, #3
 8008510:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008512:	4b61      	ldr	r3, [pc, #388]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008518:	0e1b      	lsrs	r3, r3, #24
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	019a      	lsls	r2, r3, #6
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	041b      	lsls	r3, r3, #16
 800852a:	431a      	orrs	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	061b      	lsls	r3, r3, #24
 8008530:	431a      	orrs	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	071b      	lsls	r3, r3, #28
 8008538:	4957      	ldr	r1, [pc, #348]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d004      	beq.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008554:	d00a      	beq.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800855e:	2b00      	cmp	r3, #0
 8008560:	d02e      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800856a:	d129      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800856c:	4b4a      	ldr	r3, [pc, #296]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800856e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008572:	0c1b      	lsrs	r3, r3, #16
 8008574:	f003 0303 	and.w	r3, r3, #3
 8008578:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800857a:	4b47      	ldr	r3, [pc, #284]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800857c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008580:	0f1b      	lsrs	r3, r3, #28
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	019a      	lsls	r2, r3, #6
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	041b      	lsls	r3, r3, #16
 8008592:	431a      	orrs	r2, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	061b      	lsls	r3, r3, #24
 800859a:	431a      	orrs	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	071b      	lsls	r3, r3, #28
 80085a0:	493d      	ldr	r1, [pc, #244]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80085a8:	4b3b      	ldr	r3, [pc, #236]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ae:	f023 021f 	bic.w	r2, r3, #31
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	3b01      	subs	r3, #1
 80085b8:	4937      	ldr	r1, [pc, #220]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01d      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80085cc:	4b32      	ldr	r3, [pc, #200]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d2:	0e1b      	lsrs	r3, r3, #24
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085da:	4b2f      	ldr	r3, [pc, #188]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085e0:	0f1b      	lsrs	r3, r3, #28
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	019a      	lsls	r2, r3, #6
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	041b      	lsls	r3, r3, #16
 80085f4:	431a      	orrs	r2, r3
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	061b      	lsls	r3, r3, #24
 80085fa:	431a      	orrs	r2, r3
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	071b      	lsls	r3, r3, #28
 8008600:	4925      	ldr	r1, [pc, #148]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d011      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	019a      	lsls	r2, r3, #6
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	691b      	ldr	r3, [r3, #16]
 800861e:	041b      	lsls	r3, r3, #16
 8008620:	431a      	orrs	r2, r3
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	061b      	lsls	r3, r3, #24
 8008628:	431a      	orrs	r2, r3
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	071b      	lsls	r3, r3, #28
 8008630:	4919      	ldr	r1, [pc, #100]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008632:	4313      	orrs	r3, r2
 8008634:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008638:	4b17      	ldr	r3, [pc, #92]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a16      	ldr	r2, [pc, #88]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800863e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008642:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008644:	f7fb ff52 	bl	80044ec <HAL_GetTick>
 8008648:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800864a:	e008      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800864c:	f7fb ff4e 	bl	80044ec <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b64      	cmp	r3, #100	; 0x64
 8008658:	d901      	bls.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e0d7      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800865e:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d0f0      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800866a:	69bb      	ldr	r3, [r7, #24]
 800866c:	2b01      	cmp	r3, #1
 800866e:	f040 80cd 	bne.w	800880c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008672:	4b09      	ldr	r3, [pc, #36]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a08      	ldr	r2, [pc, #32]	; (8008698 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800867c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800867e:	f7fb ff35 	bl	80044ec <HAL_GetTick>
 8008682:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008684:	e00a      	b.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008686:	f7fb ff31 	bl	80044ec <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b64      	cmp	r3, #100	; 0x64
 8008692:	d903      	bls.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e0ba      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008698:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800869c:	4b5e      	ldr	r3, [pc, #376]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a8:	d0ed      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x682>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d009      	beq.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d02e      	beq.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d12a      	bne.n	8008728 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80086d2:	4b51      	ldr	r3, [pc, #324]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d8:	0c1b      	lsrs	r3, r3, #16
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086e0:	4b4d      	ldr	r3, [pc, #308]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e6:	0f1b      	lsrs	r3, r3, #28
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	019a      	lsls	r2, r3, #6
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	431a      	orrs	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	061b      	lsls	r3, r3, #24
 8008700:	431a      	orrs	r2, r3
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	071b      	lsls	r3, r3, #28
 8008706:	4944      	ldr	r1, [pc, #272]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008708:	4313      	orrs	r3, r2
 800870a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800870e:	4b42      	ldr	r3, [pc, #264]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008714:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	3b01      	subs	r3, #1
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	493d      	ldr	r1, [pc, #244]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008722:	4313      	orrs	r3, r2
 8008724:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d022      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008738:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800873c:	d11d      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800873e:	4b36      	ldr	r3, [pc, #216]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008744:	0e1b      	lsrs	r3, r3, #24
 8008746:	f003 030f 	and.w	r3, r3, #15
 800874a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800874c:	4b32      	ldr	r3, [pc, #200]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800874e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008752:	0f1b      	lsrs	r3, r3, #28
 8008754:	f003 0307 	and.w	r3, r3, #7
 8008758:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	695b      	ldr	r3, [r3, #20]
 800875e:	019a      	lsls	r2, r3, #6
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	041b      	lsls	r3, r3, #16
 8008766:	431a      	orrs	r2, r3
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	061b      	lsls	r3, r3, #24
 800876c:	431a      	orrs	r2, r3
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	071b      	lsls	r3, r3, #28
 8008772:	4929      	ldr	r1, [pc, #164]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008774:	4313      	orrs	r3, r2
 8008776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b00      	cmp	r3, #0
 8008784:	d028      	beq.n	80087d8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008786:	4b24      	ldr	r3, [pc, #144]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878c:	0e1b      	lsrs	r3, r3, #24
 800878e:	f003 030f 	and.w	r3, r3, #15
 8008792:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008794:	4b20      	ldr	r3, [pc, #128]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800879a:	0c1b      	lsrs	r3, r3, #16
 800879c:	f003 0303 	and.w	r3, r3, #3
 80087a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	019a      	lsls	r2, r3, #6
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	041b      	lsls	r3, r3, #16
 80087ac:	431a      	orrs	r2, r3
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	061b      	lsls	r3, r3, #24
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	69db      	ldr	r3, [r3, #28]
 80087b8:	071b      	lsls	r3, r3, #28
 80087ba:	4917      	ldr	r1, [pc, #92]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	4911      	ldr	r1, [pc, #68]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087d2:	4313      	orrs	r3, r2
 80087d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80087d8:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a0e      	ldr	r2, [pc, #56]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e4:	f7fb fe82 	bl	80044ec <HAL_GetTick>
 80087e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087ea:	e008      	b.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087ec:	f7fb fe7e 	bl	80044ec <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b64      	cmp	r3, #100	; 0x64
 80087f8:	d901      	bls.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e007      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80087fe:	4b06      	ldr	r3, [pc, #24]	; (8008818 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008806:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800880a:	d1ef      	bne.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3720      	adds	r7, #32
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	40023800 	.word	0x40023800

0800881c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d101      	bne.n	800882e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	e081      	b.n	8008932 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7f5b      	ldrb	r3, [r3, #29]
 8008832:	b2db      	uxtb	r3, r3
 8008834:	2b00      	cmp	r3, #0
 8008836:	d105      	bne.n	8008844 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7fb fa46 	bl	8003cd0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2202      	movs	r2, #2
 8008848:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	22ca      	movs	r2, #202	; 0xca
 8008850:	625a      	str	r2, [r3, #36]	; 0x24
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2253      	movs	r2, #83	; 0x53
 8008858:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fb16 	bl	8008e8c <RTC_EnterInitMode>
 8008860:	4603      	mov	r3, r0
 8008862:	2b00      	cmp	r3, #0
 8008864:	d008      	beq.n	8008878 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	22ff      	movs	r2, #255	; 0xff
 800886c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2204      	movs	r2, #4
 8008872:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	e05c      	b.n	8008932 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	6899      	ldr	r1, [r3, #8]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	4b2e      	ldr	r3, [pc, #184]	; (800893c <HAL_RTC_Init+0x120>)
 8008884:	400b      	ands	r3, r1
 8008886:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	6899      	ldr	r1, [r3, #8]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	685a      	ldr	r2, [r3, #4]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	691b      	ldr	r3, [r3, #16]
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	431a      	orrs	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	430a      	orrs	r2, r1
 80088a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	68d2      	ldr	r2, [r2, #12]
 80088ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	6919      	ldr	r1, [r3, #16]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	041a      	lsls	r2, r3, #16
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	430a      	orrs	r2, r1
 80088c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68da      	ldr	r2, [r3, #12]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d2:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d10e      	bne.n	8008900 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 faaa 	bl	8008e3c <HAL_RTC_WaitForSynchro>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d008      	beq.n	8008900 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	22ff      	movs	r2, #255	; 0xff
 80088f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2204      	movs	r2, #4
 80088fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80088fc:	2301      	movs	r3, #1
 80088fe:	e018      	b.n	8008932 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0208 	bic.w	r2, r2, #8
 800890e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	22ff      	movs	r2, #255	; 0xff
 8008928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008930:	2300      	movs	r3, #0
  }
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	ff8fffbf 	.word	0xff8fffbf

08008940 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008940:	b590      	push	{r4, r7, lr}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800894c:	2300      	movs	r3, #0
 800894e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	7f1b      	ldrb	r3, [r3, #28]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <HAL_RTC_SetTime+0x1c>
 8008958:	2302      	movs	r3, #2
 800895a:	e0a8      	b.n	8008aae <HAL_RTC_SetTime+0x16e>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2202      	movs	r2, #2
 8008966:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d126      	bne.n	80089bc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2200      	movs	r2, #0
 8008980:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 faac 	bl	8008ee4 <RTC_ByteToBcd2>
 800898c:	4603      	mov	r3, r0
 800898e:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	785b      	ldrb	r3, [r3, #1]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 faa5 	bl	8008ee4 <RTC_ByteToBcd2>
 800899a:	4603      	mov	r3, r0
 800899c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800899e:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	789b      	ldrb	r3, [r3, #2]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 fa9d 	bl	8008ee4 <RTC_ByteToBcd2>
 80089aa:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80089ac:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	7b1b      	ldrb	r3, [r3, #12]
 80089b4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
 80089ba:	e018      	b.n	80089ee <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d102      	bne.n	80089d0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2200      	movs	r2, #0
 80089ce:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80089dc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80089e2:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	7b1b      	ldrb	r3, [r3, #12]
 80089e8:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80089ea:	4313      	orrs	r3, r2
 80089ec:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	22ca      	movs	r2, #202	; 0xca
 80089f4:	625a      	str	r2, [r3, #36]	; 0x24
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	2253      	movs	r2, #83	; 0x53
 80089fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089fe:	68f8      	ldr	r0, [r7, #12]
 8008a00:	f000 fa44 	bl	8008e8c <RTC_EnterInitMode>
 8008a04:	4603      	mov	r3, r0
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00b      	beq.n	8008a22 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	22ff      	movs	r2, #255	; 0xff
 8008a10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2204      	movs	r2, #4
 8008a16:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e045      	b.n	8008aae <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	6979      	ldr	r1, [r7, #20]
 8008a28:	4b23      	ldr	r3, [pc, #140]	; (8008ab8 <HAL_RTC_SetTime+0x178>)
 8008a2a:	400b      	ands	r3, r1
 8008a2c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	689a      	ldr	r2, [r3, #8]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a3c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6899      	ldr	r1, [r3, #8]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	691a      	ldr	r2, [r3, #16]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	431a      	orrs	r2, r3
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	68da      	ldr	r2, [r3, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a64:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f003 0320 	and.w	r3, r3, #32
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d111      	bne.n	8008a98 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 f9e1 	bl	8008e3c <HAL_RTC_WaitForSynchro>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00b      	beq.n	8008a98 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	22ff      	movs	r2, #255	; 0xff
 8008a86:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2204      	movs	r2, #4
 8008a8c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e00a      	b.n	8008aae <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	22ff      	movs	r2, #255	; 0xff
 8008a9e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008aac:	2300      	movs	r3, #0
  }
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	371c      	adds	r7, #28
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd90      	pop	{r4, r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	007f7f7f 	.word	0x007f7f7f

08008abc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008abc:	b590      	push	{r4, r7, lr}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	60f8      	str	r0, [r7, #12]
 8008ac4:	60b9      	str	r1, [r7, #8]
 8008ac6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	7f1b      	ldrb	r3, [r3, #28]
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_RTC_SetDate+0x1c>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e092      	b.n	8008bfe <HAL_RTC_SetDate+0x142>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2201      	movs	r2, #1
 8008adc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2202      	movs	r2, #2
 8008ae2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10e      	bne.n	8008b08 <HAL_RTC_SetDate+0x4c>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	785b      	ldrb	r3, [r3, #1]
 8008aee:	f003 0310 	and.w	r3, r3, #16
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d008      	beq.n	8008b08 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	785b      	ldrb	r3, [r3, #1]
 8008afa:	f023 0310 	bic.w	r3, r3, #16
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	330a      	adds	r3, #10
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d11c      	bne.n	8008b48 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	78db      	ldrb	r3, [r3, #3]
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 f9e6 	bl	8008ee4 <RTC_ByteToBcd2>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	785b      	ldrb	r3, [r3, #1]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f9df 	bl	8008ee4 <RTC_ByteToBcd2>
 8008b26:	4603      	mov	r3, r0
 8008b28:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b2a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	789b      	ldrb	r3, [r3, #2]
 8008b30:	4618      	mov	r0, r3
 8008b32:	f000 f9d7 	bl	8008ee4 <RTC_ByteToBcd2>
 8008b36:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008b38:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	781b      	ldrb	r3, [r3, #0]
 8008b40:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]
 8008b46:	e00e      	b.n	8008b66 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	78db      	ldrb	r3, [r3, #3]
 8008b4c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008b54:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008b56:	68ba      	ldr	r2, [r7, #8]
 8008b58:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008b5a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008b62:	4313      	orrs	r3, r2
 8008b64:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	22ca      	movs	r2, #202	; 0xca
 8008b6c:	625a      	str	r2, [r3, #36]	; 0x24
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2253      	movs	r2, #83	; 0x53
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f988 	bl	8008e8c <RTC_EnterInitMode>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00b      	beq.n	8008b9a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	22ff      	movs	r2, #255	; 0xff
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e031      	b.n	8008bfe <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	6979      	ldr	r1, [r7, #20]
 8008ba0:	4b19      	ldr	r3, [pc, #100]	; (8008c08 <HAL_RTC_SetDate+0x14c>)
 8008ba2:	400b      	ands	r3, r1
 8008ba4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	68da      	ldr	r2, [r3, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008bb4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	f003 0320 	and.w	r3, r3, #32
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d111      	bne.n	8008be8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bc4:	68f8      	ldr	r0, [r7, #12]
 8008bc6:	f000 f939 	bl	8008e3c <HAL_RTC_WaitForSynchro>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00b      	beq.n	8008be8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	22ff      	movs	r2, #255	; 0xff
 8008bd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2204      	movs	r2, #4
 8008bdc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2200      	movs	r2, #0
 8008be2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	e00a      	b.n	8008bfe <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	22ff      	movs	r2, #255	; 0xff
 8008bee:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2201      	movs	r2, #1
 8008bf4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
  }
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	371c      	adds	r7, #28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd90      	pop	{r4, r7, pc}
 8008c06:	bf00      	nop
 8008c08:	00ffff3f 	.word	0x00ffff3f

08008c0c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c0c:	b590      	push	{r4, r7, lr}
 8008c0e:	b089      	sub	sp, #36	; 0x24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	61fb      	str	r3, [r7, #28]
 8008c20:	2300      	movs	r3, #0
 8008c22:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	7f1b      	ldrb	r3, [r3, #28]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d101      	bne.n	8008c30 <HAL_RTC_SetAlarm+0x24>
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	e101      	b.n	8008e34 <HAL_RTC_SetAlarm+0x228>
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2201      	movs	r2, #1
 8008c34:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2202      	movs	r2, #2
 8008c3a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d137      	bne.n	8008cb2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d102      	bne.n	8008c56 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2200      	movs	r2, #0
 8008c54:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f000 f942 	bl	8008ee4 <RTC_ByteToBcd2>
 8008c60:	4603      	mov	r3, r0
 8008c62:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	785b      	ldrb	r3, [r3, #1]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 f93b 	bl	8008ee4 <RTC_ByteToBcd2>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008c72:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	789b      	ldrb	r3, [r3, #2]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 f933 	bl	8008ee4 <RTC_ByteToBcd2>
 8008c7e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008c80:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	7b1b      	ldrb	r3, [r3, #12]
 8008c88:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008c8a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c94:	4618      	mov	r0, r3
 8008c96:	f000 f925 	bl	8008ee4 <RTC_ByteToBcd2>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008c9e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ca6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008cac:	4313      	orrs	r3, r2
 8008cae:	61fb      	str	r3, [r7, #28]
 8008cb0:	e023      	b.n	8008cfa <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d102      	bne.n	8008cc6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	785b      	ldrb	r3, [r3, #1]
 8008cd0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008cd2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008cd8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	7b1b      	ldrb	r3, [r3, #12]
 8008cde:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008ce0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ce8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008cea:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008cf0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	685a      	ldr	r2, [r3, #4]
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	22ca      	movs	r2, #202	; 0xca
 8008d0c:	625a      	str	r2, [r3, #36]	; 0x24
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	2253      	movs	r2, #83	; 0x53
 8008d14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d1e:	d13f      	bne.n	8008da0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d2e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d3e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d40:	f7fb fbd4 	bl	80044ec <HAL_GetTick>
 8008d44:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008d46:	e013      	b.n	8008d70 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d48:	f7fb fbd0 	bl	80044ec <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d56:	d90b      	bls.n	8008d70 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	22ff      	movs	r2, #255	; 0xff
 8008d5e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2203      	movs	r2, #3
 8008d64:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	e061      	b.n	8008e34 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f003 0301 	and.w	r3, r3, #1
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d0e4      	beq.n	8008d48 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69fa      	ldr	r2, [r7, #28]
 8008d84:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689a      	ldr	r2, [r3, #8]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d9c:	609a      	str	r2, [r3, #8]
 8008d9e:	e03e      	b.n	8008e1e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008dae:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689a      	ldr	r2, [r3, #8]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dbe:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008dc0:	f7fb fb94 	bl	80044ec <HAL_GetTick>
 8008dc4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008dc6:	e013      	b.n	8008df0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008dc8:	f7fb fb90 	bl	80044ec <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	69bb      	ldr	r3, [r7, #24]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dd6:	d90b      	bls.n	8008df0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	22ff      	movs	r2, #255	; 0xff
 8008dde:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2203      	movs	r2, #3
 8008de4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e021      	b.n	8008e34 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0e4      	beq.n	8008dc8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	689a      	ldr	r2, [r3, #8]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e1c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	22ff      	movs	r2, #255	; 0xff
 8008e24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3724      	adds	r7, #36	; 0x24
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd90      	pop	{r4, r7, pc}

08008e3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e56:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e58:	f7fb fb48 	bl	80044ec <HAL_GetTick>
 8008e5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e5e:	e009      	b.n	8008e74 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e60:	f7fb fb44 	bl	80044ec <HAL_GetTick>
 8008e64:	4602      	mov	r2, r0
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	1ad3      	subs	r3, r2, r3
 8008e6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e6e:	d901      	bls.n	8008e74 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e007      	b.n	8008e84 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	f003 0320 	and.w	r3, r3, #32
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d0ee      	beq.n	8008e60 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d119      	bne.n	8008eda <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008eb0:	f7fb fb1c 	bl	80044ec <HAL_GetTick>
 8008eb4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008eb6:	e009      	b.n	8008ecc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008eb8:	f7fb fb18 	bl	80044ec <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ec6:	d901      	bls.n	8008ecc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008ec8:	2303      	movs	r3, #3
 8008eca:	e007      	b.n	8008edc <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0ee      	beq.n	8008eb8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3710      	adds	r7, #16
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b085      	sub	sp, #20
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	4603      	mov	r3, r0
 8008eec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008ef2:	e005      	b.n	8008f00 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008efa:	79fb      	ldrb	r3, [r7, #7]
 8008efc:	3b0a      	subs	r3, #10
 8008efe:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b09      	cmp	r3, #9
 8008f04:	d8f6      	bhi.n	8008ef4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	011b      	lsls	r3, r3, #4
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	79fb      	ldrb	r3, [r7, #7]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	b2db      	uxtb	r3, r3
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7f1b      	ldrb	r3, [r3, #28]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e03e      	b.n	8008fba <HAL_RTCEx_SetTimeStamp+0x9a>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2202      	movs	r2, #2
 8008f46:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b1e      	ldr	r3, [pc, #120]	; (8008fc8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	22ca      	movs	r2, #202	; 0xca
 8008f62:	625a      	str	r2, [r3, #36]	; 0x24
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2253      	movs	r2, #83	; 0x53
 8008f6a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0206 	bic.w	r2, r2, #6
 8008f7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	430a      	orrs	r2, r1
 8008f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	689a      	ldr	r2, [r3, #8]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fa2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	22ff      	movs	r2, #255	; 0xff
 8008faa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	371c      	adds	r7, #28
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	fffff7f7 	.word	0xfffff7f7

08008fcc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e025      	b.n	800902c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d106      	bne.n	8008ffa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7fb f935 	bl	8004264 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3304      	adds	r3, #4
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f002 f957 	bl	800b2c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	461a      	mov	r2, r3
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	f002 f9ab 	bl	800b378 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	3708      	adds	r7, #8
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009046:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009048:	7dfb      	ldrb	r3, [r7, #23]
 800904a:	2b02      	cmp	r3, #2
 800904c:	d101      	bne.n	8009052 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800904e:	2302      	movs	r3, #2
 8009050:	e021      	b.n	8009096 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	2b01      	cmp	r3, #1
 8009056:	d002      	beq.n	800905e <HAL_SDRAM_SendCommand+0x2a>
 8009058:	7dfb      	ldrb	r3, [r7, #23]
 800905a:	2b05      	cmp	r3, #5
 800905c:	d118      	bne.n	8009090 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2202      	movs	r2, #2
 8009062:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	68b9      	ldr	r1, [r7, #8]
 800906e:	4618      	mov	r0, r3
 8009070:	f002 f9ec 	bl	800b44c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d104      	bne.n	8009086 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2205      	movs	r2, #5
 8009080:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009084:	e006      	b.n	8009094 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2201      	movs	r2, #1
 800908a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800908e:	e001      	b.n	8009094 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e000      	b.n	8009096 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3718      	adds	r7, #24
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}

0800909e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b082      	sub	sp, #8
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d101      	bne.n	80090b8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80090b4:	2302      	movs	r3, #2
 80090b6:	e016      	b.n	80090e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090be:	b2db      	uxtb	r3, r3
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d10f      	bne.n	80090e4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2202      	movs	r2, #2
 80090c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6839      	ldr	r1, [r7, #0]
 80090d2:	4618      	mov	r0, r3
 80090d4:	f002 f9de 	bl	800b494 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
 80090e2:	e000      	b.n	80090e6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80090e4:	2301      	movs	r3, #1
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d101      	bne.n	8009100 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e09d      	b.n	800923c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	2b00      	cmp	r3, #0
 8009106:	d108      	bne.n	800911a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009110:	d009      	beq.n	8009126 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	61da      	str	r2, [r3, #28]
 8009118:	e005      	b.n	8009126 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009132:	b2db      	uxtb	r3, r3
 8009134:	2b00      	cmp	r3, #0
 8009136:	d106      	bne.n	8009146 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7fa fdf3 	bl	8003d2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2202      	movs	r2, #2
 800914a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800915c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	68db      	ldr	r3, [r3, #12]
 8009162:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009166:	d902      	bls.n	800916e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009168:	2300      	movs	r3, #0
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	e002      	b.n	8009174 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800916e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009172:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800917c:	d007      	beq.n	800918e <HAL_SPI_Init+0xa0>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009186:	d002      	beq.n	800918e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	699b      	ldr	r3, [r3, #24]
 80091b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091c6:	431a      	orrs	r2, r3
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a1b      	ldr	r3, [r3, #32]
 80091cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d0:	ea42 0103 	orr.w	r1, r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	0c1b      	lsrs	r3, r3, #16
 80091ea:	f003 0204 	and.w	r2, r3, #4
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	431a      	orrs	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800920a:	ea42 0103 	orr.w	r1, r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	430a      	orrs	r2, r1
 800921a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	69da      	ldr	r2, [r3, #28]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800922a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800923a:	2300      	movs	r3, #0
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	bd80      	pop	{r7, pc}

08009244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d101      	bne.n	8009256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e049      	b.n	80092ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d106      	bne.n	8009270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f7fa fdc0 	bl	8003df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2202      	movs	r2, #2
 8009274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681a      	ldr	r2, [r3, #0]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	3304      	adds	r3, #4
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f000 fac0 	bl	8009808 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2201      	movs	r2, #1
 800928c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2201      	movs	r2, #1
 8009294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2201      	movs	r2, #1
 80092b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80092e8:	2300      	movs	r3, #0
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3708      	adds	r7, #8
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
	...

080092f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80092f4:	b480      	push	{r7}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009302:	b2db      	uxtb	r3, r3
 8009304:	2b01      	cmp	r3, #1
 8009306:	d001      	beq.n	800930c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009308:	2301      	movs	r3, #1
 800930a:	e054      	b.n	80093b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0201 	orr.w	r2, r2, #1
 8009322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a26      	ldr	r2, [pc, #152]	; (80093c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d022      	beq.n	8009374 <HAL_TIM_Base_Start_IT+0x80>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009336:	d01d      	beq.n	8009374 <HAL_TIM_Base_Start_IT+0x80>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a22      	ldr	r2, [pc, #136]	; (80093c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d018      	beq.n	8009374 <HAL_TIM_Base_Start_IT+0x80>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a21      	ldr	r2, [pc, #132]	; (80093cc <HAL_TIM_Base_Start_IT+0xd8>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d013      	beq.n	8009374 <HAL_TIM_Base_Start_IT+0x80>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a1f      	ldr	r2, [pc, #124]	; (80093d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d00e      	beq.n	8009374 <HAL_TIM_Base_Start_IT+0x80>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a1e      	ldr	r2, [pc, #120]	; (80093d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d009      	beq.n	8009374 <HAL_TIM_Base_Start_IT+0x80>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a1c      	ldr	r2, [pc, #112]	; (80093d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d004      	beq.n	8009374 <HAL_TIM_Base_Start_IT+0x80>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1b      	ldr	r2, [pc, #108]	; (80093dc <HAL_TIM_Base_Start_IT+0xe8>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d115      	bne.n	80093a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	4b19      	ldr	r3, [pc, #100]	; (80093e0 <HAL_TIM_Base_Start_IT+0xec>)
 800937c:	4013      	ands	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2b06      	cmp	r3, #6
 8009384:	d015      	beq.n	80093b2 <HAL_TIM_Base_Start_IT+0xbe>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800938c:	d011      	beq.n	80093b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f042 0201 	orr.w	r2, r2, #1
 800939c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800939e:	e008      	b.n	80093b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0201 	orr.w	r2, r2, #1
 80093ae:	601a      	str	r2, [r3, #0]
 80093b0:	e000      	b.n	80093b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40000400 	.word	0x40000400
 80093cc:	40000800 	.word	0x40000800
 80093d0:	40000c00 	.word	0x40000c00
 80093d4:	40010400 	.word	0x40010400
 80093d8:	40014000 	.word	0x40014000
 80093dc:	40001800 	.word	0x40001800
 80093e0:	00010007 	.word	0x00010007

080093e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	d122      	bne.n	8009440 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f003 0302 	and.w	r3, r3, #2
 8009404:	2b02      	cmp	r3, #2
 8009406:	d11b      	bne.n	8009440 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f06f 0202 	mvn.w	r2, #2
 8009410:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	f003 0303 	and.w	r3, r3, #3
 8009422:	2b00      	cmp	r3, #0
 8009424:	d003      	beq.n	800942e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f9d0 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 800942c:	e005      	b.n	800943a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 f9c2 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 f9d3 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2200      	movs	r2, #0
 800943e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	f003 0304 	and.w	r3, r3, #4
 800944a:	2b04      	cmp	r3, #4
 800944c:	d122      	bne.n	8009494 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b04      	cmp	r3, #4
 800945a:	d11b      	bne.n	8009494 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f06f 0204 	mvn.w	r2, #4
 8009464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2202      	movs	r2, #2
 800946a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009476:	2b00      	cmp	r3, #0
 8009478:	d003      	beq.n	8009482 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f9a6 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 8009480:	e005      	b.n	800948e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f998 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f9a9 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	f003 0308 	and.w	r3, r3, #8
 800949e:	2b08      	cmp	r3, #8
 80094a0:	d122      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68db      	ldr	r3, [r3, #12]
 80094a8:	f003 0308 	and.w	r3, r3, #8
 80094ac:	2b08      	cmp	r3, #8
 80094ae:	d11b      	bne.n	80094e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f06f 0208 	mvn.w	r2, #8
 80094b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2204      	movs	r2, #4
 80094be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f003 0303 	and.w	r3, r3, #3
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f97c 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 80094d4:	e005      	b.n	80094e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f96e 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f97f 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0310 	and.w	r3, r3, #16
 80094f2:	2b10      	cmp	r3, #16
 80094f4:	d122      	bne.n	800953c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f003 0310 	and.w	r3, r3, #16
 8009500:	2b10      	cmp	r3, #16
 8009502:	d11b      	bne.n	800953c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f06f 0210 	mvn.w	r2, #16
 800950c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2208      	movs	r2, #8
 8009512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f952 	bl	80097cc <HAL_TIM_IC_CaptureCallback>
 8009528:	e005      	b.n	8009536 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 f944 	bl	80097b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f955 	bl	80097e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b01      	cmp	r3, #1
 8009548:	d10e      	bne.n	8009568 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	f003 0301 	and.w	r3, r3, #1
 8009554:	2b01      	cmp	r3, #1
 8009556:	d107      	bne.n	8009568 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f06f 0201 	mvn.w	r2, #1
 8009560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7f8 fec0 	bl	80022e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009572:	2b80      	cmp	r3, #128	; 0x80
 8009574:	d10e      	bne.n	8009594 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	68db      	ldr	r3, [r3, #12]
 800957c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009580:	2b80      	cmp	r3, #128	; 0x80
 8009582:	d107      	bne.n	8009594 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800958c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 fb0c 	bl	8009bac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095a2:	d10e      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ae:	2b80      	cmp	r3, #128	; 0x80
 80095b0:	d107      	bne.n	80095c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80095ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f000 faff 	bl	8009bc0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691b      	ldr	r3, [r3, #16]
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b40      	cmp	r3, #64	; 0x40
 80095ce:	d10e      	bne.n	80095ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095da:	2b40      	cmp	r3, #64	; 0x40
 80095dc:	d107      	bne.n	80095ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80095e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f903 	bl	80097f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b20      	cmp	r3, #32
 80095fa:	d10e      	bne.n	800961a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f003 0320 	and.w	r3, r3, #32
 8009606:	2b20      	cmp	r3, #32
 8009608:	d107      	bne.n	800961a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f06f 0220 	mvn.w	r2, #32
 8009612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f000 fabf 	bl	8009b98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_TIM_ConfigClockSource+0x1c>
 800963c:	2302      	movs	r3, #2
 800963e:	e0b4      	b.n	80097aa <HAL_TIM_ConfigClockSource+0x186>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2202      	movs	r2, #2
 800964c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	4b56      	ldr	r3, [pc, #344]	; (80097b4 <HAL_TIM_ConfigClockSource+0x190>)
 800965c:	4013      	ands	r3, r2
 800965e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009678:	d03e      	beq.n	80096f8 <HAL_TIM_ConfigClockSource+0xd4>
 800967a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800967e:	f200 8087 	bhi.w	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 8009682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009686:	f000 8086 	beq.w	8009796 <HAL_TIM_ConfigClockSource+0x172>
 800968a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800968e:	d87f      	bhi.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 8009690:	2b70      	cmp	r3, #112	; 0x70
 8009692:	d01a      	beq.n	80096ca <HAL_TIM_ConfigClockSource+0xa6>
 8009694:	2b70      	cmp	r3, #112	; 0x70
 8009696:	d87b      	bhi.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 8009698:	2b60      	cmp	r3, #96	; 0x60
 800969a:	d050      	beq.n	800973e <HAL_TIM_ConfigClockSource+0x11a>
 800969c:	2b60      	cmp	r3, #96	; 0x60
 800969e:	d877      	bhi.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 80096a0:	2b50      	cmp	r3, #80	; 0x50
 80096a2:	d03c      	beq.n	800971e <HAL_TIM_ConfigClockSource+0xfa>
 80096a4:	2b50      	cmp	r3, #80	; 0x50
 80096a6:	d873      	bhi.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 80096a8:	2b40      	cmp	r3, #64	; 0x40
 80096aa:	d058      	beq.n	800975e <HAL_TIM_ConfigClockSource+0x13a>
 80096ac:	2b40      	cmp	r3, #64	; 0x40
 80096ae:	d86f      	bhi.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 80096b0:	2b30      	cmp	r3, #48	; 0x30
 80096b2:	d064      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x15a>
 80096b4:	2b30      	cmp	r3, #48	; 0x30
 80096b6:	d86b      	bhi.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 80096b8:	2b20      	cmp	r3, #32
 80096ba:	d060      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x15a>
 80096bc:	2b20      	cmp	r3, #32
 80096be:	d867      	bhi.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d05c      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x15a>
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d05a      	beq.n	800977e <HAL_TIM_ConfigClockSource+0x15a>
 80096c8:	e062      	b.n	8009790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6818      	ldr	r0, [r3, #0]
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	6899      	ldr	r1, [r3, #8]
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	f000 f9af 	bl	8009a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80096ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	609a      	str	r2, [r3, #8]
      break;
 80096f6:	e04f      	b.n	8009798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6818      	ldr	r0, [r3, #0]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	6899      	ldr	r1, [r3, #8]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	685a      	ldr	r2, [r3, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	f000 f998 	bl	8009a3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	689a      	ldr	r2, [r3, #8]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800971a:	609a      	str	r2, [r3, #8]
      break;
 800971c:	e03c      	b.n	8009798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	6859      	ldr	r1, [r3, #4]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	461a      	mov	r2, r3
 800972c:	f000 f90c 	bl	8009948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	2150      	movs	r1, #80	; 0x50
 8009736:	4618      	mov	r0, r3
 8009738:	f000 f965 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 800973c:	e02c      	b.n	8009798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	6859      	ldr	r1, [r3, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	461a      	mov	r2, r3
 800974c:	f000 f92b 	bl	80099a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2160      	movs	r1, #96	; 0x60
 8009756:	4618      	mov	r0, r3
 8009758:	f000 f955 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 800975c:	e01c      	b.n	8009798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	6859      	ldr	r1, [r3, #4]
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	461a      	mov	r2, r3
 800976c:	f000 f8ec 	bl	8009948 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2140      	movs	r1, #64	; 0x40
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f945 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 800977c:	e00c      	b.n	8009798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4619      	mov	r1, r3
 8009788:	4610      	mov	r0, r2
 800978a:	f000 f93c 	bl	8009a06 <TIM_ITRx_SetConfig>
      break;
 800978e:	e003      	b.n	8009798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009790:	2301      	movs	r3, #1
 8009792:	73fb      	strb	r3, [r7, #15]
      break;
 8009794:	e000      	b.n	8009798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	fffeff88 	.word	0xfffeff88

080097b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
 8009810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a40      	ldr	r2, [pc, #256]	; (800991c <TIM_Base_SetConfig+0x114>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d013      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009826:	d00f      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a3d      	ldr	r2, [pc, #244]	; (8009920 <TIM_Base_SetConfig+0x118>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00b      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a3c      	ldr	r2, [pc, #240]	; (8009924 <TIM_Base_SetConfig+0x11c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d007      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a3b      	ldr	r2, [pc, #236]	; (8009928 <TIM_Base_SetConfig+0x120>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d003      	beq.n	8009848 <TIM_Base_SetConfig+0x40>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a3a      	ldr	r2, [pc, #232]	; (800992c <TIM_Base_SetConfig+0x124>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d108      	bne.n	800985a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800984e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a2f      	ldr	r2, [pc, #188]	; (800991c <TIM_Base_SetConfig+0x114>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d02b      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009868:	d027      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a2c      	ldr	r2, [pc, #176]	; (8009920 <TIM_Base_SetConfig+0x118>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d023      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	4a2b      	ldr	r2, [pc, #172]	; (8009924 <TIM_Base_SetConfig+0x11c>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d01f      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	4a2a      	ldr	r2, [pc, #168]	; (8009928 <TIM_Base_SetConfig+0x120>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d01b      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a29      	ldr	r2, [pc, #164]	; (800992c <TIM_Base_SetConfig+0x124>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d017      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a28      	ldr	r2, [pc, #160]	; (8009930 <TIM_Base_SetConfig+0x128>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d013      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a27      	ldr	r2, [pc, #156]	; (8009934 <TIM_Base_SetConfig+0x12c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d00f      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a26      	ldr	r2, [pc, #152]	; (8009938 <TIM_Base_SetConfig+0x130>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d00b      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a25      	ldr	r2, [pc, #148]	; (800993c <TIM_Base_SetConfig+0x134>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d007      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a24      	ldr	r2, [pc, #144]	; (8009940 <TIM_Base_SetConfig+0x138>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d003      	beq.n	80098ba <TIM_Base_SetConfig+0xb2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a23      	ldr	r2, [pc, #140]	; (8009944 <TIM_Base_SetConfig+0x13c>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d108      	bne.n	80098cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	4313      	orrs	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68fa      	ldr	r2, [r7, #12]
 80098de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	689a      	ldr	r2, [r3, #8]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a0a      	ldr	r2, [pc, #40]	; (800991c <TIM_Base_SetConfig+0x114>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d003      	beq.n	8009900 <TIM_Base_SetConfig+0xf8>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a0c      	ldr	r2, [pc, #48]	; (800992c <TIM_Base_SetConfig+0x124>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d103      	bne.n	8009908 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	691a      	ldr	r2, [r3, #16]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	615a      	str	r2, [r3, #20]
}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	40010000 	.word	0x40010000
 8009920:	40000400 	.word	0x40000400
 8009924:	40000800 	.word	0x40000800
 8009928:	40000c00 	.word	0x40000c00
 800992c:	40010400 	.word	0x40010400
 8009930:	40014000 	.word	0x40014000
 8009934:	40014400 	.word	0x40014400
 8009938:	40014800 	.word	0x40014800
 800993c:	40001800 	.word	0x40001800
 8009940:	40001c00 	.word	0x40001c00
 8009944:	40002000 	.word	0x40002000

08009948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009948:	b480      	push	{r7}
 800994a:	b087      	sub	sp, #28
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	6a1b      	ldr	r3, [r3, #32]
 800995e:	f023 0201 	bic.w	r2, r3, #1
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	699b      	ldr	r3, [r3, #24]
 800996a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	693a      	ldr	r2, [r7, #16]
 800997a:	4313      	orrs	r3, r2
 800997c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f023 030a 	bic.w	r3, r3, #10
 8009984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	4313      	orrs	r3, r2
 800998c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	693a      	ldr	r2, [r7, #16]
 8009992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	621a      	str	r2, [r3, #32]
}
 800999a:	bf00      	nop
 800999c:	371c      	adds	r7, #28
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr

080099a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099a6:	b480      	push	{r7}
 80099a8:	b087      	sub	sp, #28
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	f023 0210 	bic.w	r2, r3, #16
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6a1b      	ldr	r3, [r3, #32]
 80099c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	031b      	lsls	r3, r3, #12
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	4313      	orrs	r3, r2
 80099da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80099e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	011b      	lsls	r3, r3, #4
 80099e8:	693a      	ldr	r2, [r7, #16]
 80099ea:	4313      	orrs	r3, r2
 80099ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	697a      	ldr	r2, [r7, #20]
 80099f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	621a      	str	r2, [r3, #32]
}
 80099fa:	bf00      	nop
 80099fc:	371c      	adds	r7, #28
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b085      	sub	sp, #20
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
 8009a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a1e:	683a      	ldr	r2, [r7, #0]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	f043 0307 	orr.w	r3, r3, #7
 8009a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	609a      	str	r2, [r3, #8]
}
 8009a30:	bf00      	nop
 8009a32:	3714      	adds	r7, #20
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b087      	sub	sp, #28
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
 8009a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	021a      	lsls	r2, r3, #8
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	4313      	orrs	r3, r2
 8009a64:	697a      	ldr	r2, [r7, #20]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	697a      	ldr	r2, [r7, #20]
 8009a6e:	609a      	str	r2, [r3, #8]
}
 8009a70:	bf00      	nop
 8009a72:	371c      	adds	r7, #28
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d101      	bne.n	8009a94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a90:	2302      	movs	r3, #2
 8009a92:	e06d      	b.n	8009b70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2202      	movs	r2, #2
 8009aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a30      	ldr	r2, [pc, #192]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d004      	beq.n	8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a2f      	ldr	r2, [pc, #188]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d108      	bne.n	8009ada <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ace:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a20      	ldr	r2, [pc, #128]	; (8009b7c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d022      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b06:	d01d      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a1d      	ldr	r2, [pc, #116]	; (8009b84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d018      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	4a1c      	ldr	r2, [pc, #112]	; (8009b88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d013      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a1a      	ldr	r2, [pc, #104]	; (8009b8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d00e      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a15      	ldr	r2, [pc, #84]	; (8009b80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d009      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a16      	ldr	r2, [pc, #88]	; (8009b90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d004      	beq.n	8009b44 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a15      	ldr	r2, [pc, #84]	; (8009b94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d10c      	bne.n	8009b5e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	68ba      	ldr	r2, [r7, #8]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	68ba      	ldr	r2, [r7, #8]
 8009b5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2201      	movs	r2, #1
 8009b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr
 8009b7c:	40010000 	.word	0x40010000
 8009b80:	40010400 	.word	0x40010400
 8009b84:	40000400 	.word	0x40000400
 8009b88:	40000800 	.word	0x40000800
 8009b8c:	40000c00 	.word	0x40000c00
 8009b90:	40014000 	.word	0x40014000
 8009b94:	40001800 	.word	0x40001800

08009b98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e040      	b.n	8009c68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d106      	bne.n	8009bfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7fa f98c 	bl	8003f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2224      	movs	r2, #36	; 0x24
 8009c00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0201 	bic.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 fbd2 	bl	800a3bc <UART_SetConfig>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e022      	b.n	8009c68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fe2a 	bl	800a884 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	685a      	ldr	r2, [r3, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f042 0201 	orr.w	r2, r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 feb1 	bl	800a9c8 <UART_CheckIdleState>
 8009c66:	4603      	mov	r3, r0
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b08b      	sub	sp, #44	; 0x2c
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	60f8      	str	r0, [r7, #12]
 8009c78:	60b9      	str	r1, [r7, #8]
 8009c7a:	4613      	mov	r3, r2
 8009c7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c82:	2b20      	cmp	r3, #32
 8009c84:	d156      	bne.n	8009d34 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d002      	beq.n	8009c92 <HAL_UART_Transmit_IT+0x22>
 8009c8c:	88fb      	ldrh	r3, [r7, #6]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d101      	bne.n	8009c96 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e04f      	b.n	8009d36 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d101      	bne.n	8009ca4 <HAL_UART_Transmit_IT+0x34>
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	e048      	b.n	8009d36 <HAL_UART_Transmit_IT+0xc6>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	68ba      	ldr	r2, [r7, #8]
 8009cb0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	88fa      	ldrh	r2, [r7, #6]
 8009cb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	88fa      	ldrh	r2, [r7, #6]
 8009cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2221      	movs	r2, #33	; 0x21
 8009cd4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cde:	d107      	bne.n	8009cf0 <HAL_UART_Transmit_IT+0x80>
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d103      	bne.n	8009cf0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4a16      	ldr	r2, [pc, #88]	; (8009d44 <HAL_UART_Transmit_IT+0xd4>)
 8009cec:	669a      	str	r2, [r3, #104]	; 0x68
 8009cee:	e002      	b.n	8009cf6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <HAL_UART_Transmit_IT+0xd8>)
 8009cf4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	e853 3f00 	ldrex	r3, [r3]
 8009d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	461a      	mov	r2, r3
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	623b      	str	r3, [r7, #32]
 8009d1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d20:	69f9      	ldr	r1, [r7, #28]
 8009d22:	6a3a      	ldr	r2, [r7, #32]
 8009d24:	e841 2300 	strex	r3, r2, [r1]
 8009d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1e6      	bne.n	8009cfe <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	e000      	b.n	8009d36 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8009d34:	2302      	movs	r3, #2
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	372c      	adds	r7, #44	; 0x2c
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	0800aef5 	.word	0x0800aef5
 8009d48:	0800ae3f 	.word	0x0800ae3f

08009d4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08a      	sub	sp, #40	; 0x28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	4613      	mov	r3, r2
 8009d58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009d5e:	2b20      	cmp	r3, #32
 8009d60:	d13d      	bne.n	8009dde <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <HAL_UART_Receive_IT+0x22>
 8009d68:	88fb      	ldrh	r3, [r7, #6]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e036      	b.n	8009de0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_UART_Receive_IT+0x34>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e02f      	b.n	8009de0 <HAL_UART_Receive_IT+0x94>
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d018      	beq.n	8009dce <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	e853 3f00 	ldrex	r3, [r3]
 8009da8:	613b      	str	r3, [r7, #16]
   return(result);
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dba:	623b      	str	r3, [r7, #32]
 8009dbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dbe:	69f9      	ldr	r1, [r7, #28]
 8009dc0:	6a3a      	ldr	r2, [r7, #32]
 8009dc2:	e841 2300 	strex	r3, r2, [r1]
 8009dc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d1e6      	bne.n	8009d9c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009dce:	88fb      	ldrh	r3, [r7, #6]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	68b9      	ldr	r1, [r7, #8]
 8009dd4:	68f8      	ldr	r0, [r7, #12]
 8009dd6:	f000 feef 	bl	800abb8 <UART_Start_Receive_IT>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	e000      	b.n	8009de0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009dde:	2302      	movs	r3, #2
  }
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3728      	adds	r7, #40	; 0x28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b0ba      	sub	sp, #232	; 0xe8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e12:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e16:	4013      	ands	r3, r2
 8009e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d115      	bne.n	8009e50 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e28:	f003 0320 	and.w	r3, r3, #32
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00f      	beq.n	8009e50 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e34:	f003 0320 	and.w	r3, r3, #32
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d009      	beq.n	8009e50 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 828f 	beq.w	800a364 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	4798      	blx	r3
      }
      return;
 8009e4e:	e289      	b.n	800a364 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8117 	beq.w	800a088 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009e66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009e6a:	4b85      	ldr	r3, [pc, #532]	; (800a080 <HAL_UART_IRQHandler+0x298>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	f000 810a 	beq.w	800a088 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d011      	beq.n	8009ea4 <HAL_UART_IRQHandler+0xbc>
 8009e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00b      	beq.n	8009ea4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	2201      	movs	r2, #1
 8009e92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009e9a:	f043 0201 	orr.w	r2, r3, #1
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ea8:	f003 0302 	and.w	r3, r3, #2
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d011      	beq.n	8009ed4 <HAL_UART_IRQHandler+0xec>
 8009eb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00b      	beq.n	8009ed4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eca:	f043 0204 	orr.w	r2, r3, #4
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ed8:	f003 0304 	and.w	r3, r3, #4
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <HAL_UART_IRQHandler+0x11c>
 8009ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ee4:	f003 0301 	and.w	r3, r3, #1
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d00b      	beq.n	8009f04 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2204      	movs	r2, #4
 8009ef2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009efa:	f043 0202 	orr.w	r2, r3, #2
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d017      	beq.n	8009f40 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f14:	f003 0320 	and.w	r3, r3, #32
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d105      	bne.n	8009f28 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009f1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f20:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d00b      	beq.n	8009f40 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f36:	f043 0208 	orr.w	r2, r3, #8
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d012      	beq.n	8009f72 <HAL_UART_IRQHandler+0x18a>
 8009f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00c      	beq.n	8009f72 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f68:	f043 0220 	orr.w	r2, r3, #32
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f000 81f5 	beq.w	800a368 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f82:	f003 0320 	and.w	r3, r3, #32
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d00d      	beq.n	8009fa6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f8e:	f003 0320 	and.w	r3, r3, #32
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d007      	beq.n	8009fa6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fba:	2b40      	cmp	r3, #64	; 0x40
 8009fbc:	d005      	beq.n	8009fca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009fbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009fc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d04f      	beq.n	800a06a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 febe 	bl	800ad4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b40      	cmp	r3, #64	; 0x40
 8009fdc:	d141      	bne.n	800a062 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3308      	adds	r3, #8
 800a006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a00a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a00e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a01a:	e841 2300 	strex	r3, r2, [r1]
 800a01e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1d9      	bne.n	8009fde <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d013      	beq.n	800a05a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a036:	4a13      	ldr	r2, [pc, #76]	; (800a084 <HAL_UART_IRQHandler+0x29c>)
 800a038:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fb f9bc 	bl	80053bc <HAL_DMA_Abort_IT>
 800a044:	4603      	mov	r3, r0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d017      	beq.n	800a07a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a04e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a050:	687a      	ldr	r2, [r7, #4]
 800a052:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a054:	4610      	mov	r0, r2
 800a056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a058:	e00f      	b.n	800a07a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f000 f998 	bl	800a390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a060:	e00b      	b.n	800a07a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f994 	bl	800a390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a068:	e007      	b.n	800a07a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f990 	bl	800a390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a078:	e176      	b.n	800a368 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a07a:	bf00      	nop
    return;
 800a07c:	e174      	b.n	800a368 <HAL_UART_IRQHandler+0x580>
 800a07e:	bf00      	nop
 800a080:	04000120 	.word	0x04000120
 800a084:	0800ae13 	.word	0x0800ae13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	f040 8144 	bne.w	800a31a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a096:	f003 0310 	and.w	r3, r3, #16
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	f000 813d 	beq.w	800a31a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0a4:	f003 0310 	and.w	r3, r3, #16
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f000 8136 	beq.w	800a31a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2210      	movs	r2, #16
 800a0b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c0:	2b40      	cmp	r3, #64	; 0x40
 800a0c2:	f040 80b2 	bne.w	800a22a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a0d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 8148 	beq.w	800a36c <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a0e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	f080 8140 	bcs.w	800a36c <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a0f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fa:	69db      	ldr	r3, [r3, #28]
 800a0fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a100:	f000 8085 	beq.w	800a20e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a10c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a110:	e853 3f00 	ldrex	r3, [r3]
 800a114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a11c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	461a      	mov	r2, r3
 800a12a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a12e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a132:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a13a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a13e:	e841 2300 	strex	r3, r2, [r1]
 800a142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1da      	bne.n	800a104 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	3308      	adds	r3, #8
 800a154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a15e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a160:	f023 0301 	bic.w	r3, r3, #1
 800a164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3308      	adds	r3, #8
 800a16e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a17a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a17e:	e841 2300 	strex	r3, r2, [r1]
 800a182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1e1      	bne.n	800a14e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	3308      	adds	r3, #8
 800a190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a194:	e853 3f00 	ldrex	r3, [r3]
 800a198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a19a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a19c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a1ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a1b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a1b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a1b6:	e841 2300 	strex	r3, r2, [r1]
 800a1ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a1bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1e3      	bne.n	800a18a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2220      	movs	r2, #32
 800a1c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d6:	e853 3f00 	ldrex	r3, [r3]
 800a1da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a1dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1de:	f023 0310 	bic.w	r3, r3, #16
 800a1e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1f0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a1f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a1f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a1f8:	e841 2300 	strex	r3, r2, [r1]
 800a1fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1e4      	bne.n	800a1ce <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fb f867 	bl	80052dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	b29b      	uxth	r3, r3
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f8be 	bl	800a3a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a228:	e0a0      	b.n	800a36c <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a236:	b29b      	uxth	r3, r3
 800a238:	1ad3      	subs	r3, r2, r3
 800a23a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a244:	b29b      	uxth	r3, r3
 800a246:	2b00      	cmp	r3, #0
 800a248:	f000 8092 	beq.w	800a370 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800a24c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a250:	2b00      	cmp	r3, #0
 800a252:	f000 808d 	beq.w	800a370 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a25e:	e853 3f00 	ldrex	r3, [r3]
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a26a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	461a      	mov	r2, r3
 800a274:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a278:	647b      	str	r3, [r7, #68]	; 0x44
 800a27a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a27e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a280:	e841 2300 	strex	r3, r2, [r1]
 800a284:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1e4      	bne.n	800a256 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	3308      	adds	r3, #8
 800a292:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	e853 3f00 	ldrex	r3, [r3]
 800a29a:	623b      	str	r3, [r7, #32]
   return(result);
 800a29c:	6a3b      	ldr	r3, [r7, #32]
 800a29e:	f023 0301 	bic.w	r3, r3, #1
 800a2a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a2b0:	633a      	str	r2, [r7, #48]	; 0x30
 800a2b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a2b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2b8:	e841 2300 	strex	r3, r2, [r1]
 800a2bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d1e3      	bne.n	800a28c <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	e853 3f00 	ldrex	r3, [r3]
 800a2e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f023 0310 	bic.w	r3, r3, #16
 800a2ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	461a      	mov	r2, r3
 800a2f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a2f8:	61fb      	str	r3, [r7, #28]
 800a2fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	69b9      	ldr	r1, [r7, #24]
 800a2fe:	69fa      	ldr	r2, [r7, #28]
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	617b      	str	r3, [r7, #20]
   return(result);
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e4      	bne.n	800a2d6 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a30c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a310:	4619      	mov	r1, r3
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f846 	bl	800a3a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a318:	e02a      	b.n	800a370 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00e      	beq.n	800a344 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a32a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d008      	beq.n	800a344 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a336:	2b00      	cmp	r3, #0
 800a338:	d01c      	beq.n	800a374 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	4798      	blx	r3
    }
    return;
 800a342:	e017      	b.n	800a374 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d012      	beq.n	800a376 <HAL_UART_IRQHandler+0x58e>
 800a350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d00c      	beq.n	800a376 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 fe29 	bl	800afb4 <UART_EndTransmit_IT>
    return;
 800a362:	e008      	b.n	800a376 <HAL_UART_IRQHandler+0x58e>
      return;
 800a364:	bf00      	nop
 800a366:	e006      	b.n	800a376 <HAL_UART_IRQHandler+0x58e>
    return;
 800a368:	bf00      	nop
 800a36a:	e004      	b.n	800a376 <HAL_UART_IRQHandler+0x58e>
      return;
 800a36c:	bf00      	nop
 800a36e:	e002      	b.n	800a376 <HAL_UART_IRQHandler+0x58e>
      return;
 800a370:	bf00      	nop
 800a372:	e000      	b.n	800a376 <HAL_UART_IRQHandler+0x58e>
    return;
 800a374:	bf00      	nop
  }

}
 800a376:	37e8      	adds	r7, #232	; 0xe8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b088      	sub	sp, #32
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689a      	ldr	r2, [r3, #8]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	431a      	orrs	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	431a      	orrs	r2, r3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	69db      	ldr	r3, [r3, #28]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	681a      	ldr	r2, [r3, #0]
 800a3e6:	4ba6      	ldr	r3, [pc, #664]	; (800a680 <UART_SetConfig+0x2c4>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	6979      	ldr	r1, [r7, #20]
 800a3f0:	430b      	orrs	r3, r1
 800a3f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68da      	ldr	r2, [r3, #12]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	430a      	orrs	r2, r1
 800a408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	4313      	orrs	r3, r2
 800a418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	697a      	ldr	r2, [r7, #20]
 800a42a:	430a      	orrs	r2, r1
 800a42c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a94      	ldr	r2, [pc, #592]	; (800a684 <UART_SetConfig+0x2c8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d120      	bne.n	800a47a <UART_SetConfig+0xbe>
 800a438:	4b93      	ldr	r3, [pc, #588]	; (800a688 <UART_SetConfig+0x2cc>)
 800a43a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	2b03      	cmp	r3, #3
 800a444:	d816      	bhi.n	800a474 <UART_SetConfig+0xb8>
 800a446:	a201      	add	r2, pc, #4	; (adr r2, 800a44c <UART_SetConfig+0x90>)
 800a448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44c:	0800a45d 	.word	0x0800a45d
 800a450:	0800a469 	.word	0x0800a469
 800a454:	0800a463 	.word	0x0800a463
 800a458:	0800a46f 	.word	0x0800a46f
 800a45c:	2301      	movs	r3, #1
 800a45e:	77fb      	strb	r3, [r7, #31]
 800a460:	e150      	b.n	800a704 <UART_SetConfig+0x348>
 800a462:	2302      	movs	r3, #2
 800a464:	77fb      	strb	r3, [r7, #31]
 800a466:	e14d      	b.n	800a704 <UART_SetConfig+0x348>
 800a468:	2304      	movs	r3, #4
 800a46a:	77fb      	strb	r3, [r7, #31]
 800a46c:	e14a      	b.n	800a704 <UART_SetConfig+0x348>
 800a46e:	2308      	movs	r3, #8
 800a470:	77fb      	strb	r3, [r7, #31]
 800a472:	e147      	b.n	800a704 <UART_SetConfig+0x348>
 800a474:	2310      	movs	r3, #16
 800a476:	77fb      	strb	r3, [r7, #31]
 800a478:	e144      	b.n	800a704 <UART_SetConfig+0x348>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a83      	ldr	r2, [pc, #524]	; (800a68c <UART_SetConfig+0x2d0>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d132      	bne.n	800a4ea <UART_SetConfig+0x12e>
 800a484:	4b80      	ldr	r3, [pc, #512]	; (800a688 <UART_SetConfig+0x2cc>)
 800a486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48a:	f003 030c 	and.w	r3, r3, #12
 800a48e:	2b0c      	cmp	r3, #12
 800a490:	d828      	bhi.n	800a4e4 <UART_SetConfig+0x128>
 800a492:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <UART_SetConfig+0xdc>)
 800a494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a498:	0800a4cd 	.word	0x0800a4cd
 800a49c:	0800a4e5 	.word	0x0800a4e5
 800a4a0:	0800a4e5 	.word	0x0800a4e5
 800a4a4:	0800a4e5 	.word	0x0800a4e5
 800a4a8:	0800a4d9 	.word	0x0800a4d9
 800a4ac:	0800a4e5 	.word	0x0800a4e5
 800a4b0:	0800a4e5 	.word	0x0800a4e5
 800a4b4:	0800a4e5 	.word	0x0800a4e5
 800a4b8:	0800a4d3 	.word	0x0800a4d3
 800a4bc:	0800a4e5 	.word	0x0800a4e5
 800a4c0:	0800a4e5 	.word	0x0800a4e5
 800a4c4:	0800a4e5 	.word	0x0800a4e5
 800a4c8:	0800a4df 	.word	0x0800a4df
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	77fb      	strb	r3, [r7, #31]
 800a4d0:	e118      	b.n	800a704 <UART_SetConfig+0x348>
 800a4d2:	2302      	movs	r3, #2
 800a4d4:	77fb      	strb	r3, [r7, #31]
 800a4d6:	e115      	b.n	800a704 <UART_SetConfig+0x348>
 800a4d8:	2304      	movs	r3, #4
 800a4da:	77fb      	strb	r3, [r7, #31]
 800a4dc:	e112      	b.n	800a704 <UART_SetConfig+0x348>
 800a4de:	2308      	movs	r3, #8
 800a4e0:	77fb      	strb	r3, [r7, #31]
 800a4e2:	e10f      	b.n	800a704 <UART_SetConfig+0x348>
 800a4e4:	2310      	movs	r3, #16
 800a4e6:	77fb      	strb	r3, [r7, #31]
 800a4e8:	e10c      	b.n	800a704 <UART_SetConfig+0x348>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a68      	ldr	r2, [pc, #416]	; (800a690 <UART_SetConfig+0x2d4>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d120      	bne.n	800a536 <UART_SetConfig+0x17a>
 800a4f4:	4b64      	ldr	r3, [pc, #400]	; (800a688 <UART_SetConfig+0x2cc>)
 800a4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a4fe:	2b30      	cmp	r3, #48	; 0x30
 800a500:	d013      	beq.n	800a52a <UART_SetConfig+0x16e>
 800a502:	2b30      	cmp	r3, #48	; 0x30
 800a504:	d814      	bhi.n	800a530 <UART_SetConfig+0x174>
 800a506:	2b20      	cmp	r3, #32
 800a508:	d009      	beq.n	800a51e <UART_SetConfig+0x162>
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d810      	bhi.n	800a530 <UART_SetConfig+0x174>
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d002      	beq.n	800a518 <UART_SetConfig+0x15c>
 800a512:	2b10      	cmp	r3, #16
 800a514:	d006      	beq.n	800a524 <UART_SetConfig+0x168>
 800a516:	e00b      	b.n	800a530 <UART_SetConfig+0x174>
 800a518:	2300      	movs	r3, #0
 800a51a:	77fb      	strb	r3, [r7, #31]
 800a51c:	e0f2      	b.n	800a704 <UART_SetConfig+0x348>
 800a51e:	2302      	movs	r3, #2
 800a520:	77fb      	strb	r3, [r7, #31]
 800a522:	e0ef      	b.n	800a704 <UART_SetConfig+0x348>
 800a524:	2304      	movs	r3, #4
 800a526:	77fb      	strb	r3, [r7, #31]
 800a528:	e0ec      	b.n	800a704 <UART_SetConfig+0x348>
 800a52a:	2308      	movs	r3, #8
 800a52c:	77fb      	strb	r3, [r7, #31]
 800a52e:	e0e9      	b.n	800a704 <UART_SetConfig+0x348>
 800a530:	2310      	movs	r3, #16
 800a532:	77fb      	strb	r3, [r7, #31]
 800a534:	e0e6      	b.n	800a704 <UART_SetConfig+0x348>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a56      	ldr	r2, [pc, #344]	; (800a694 <UART_SetConfig+0x2d8>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d120      	bne.n	800a582 <UART_SetConfig+0x1c6>
 800a540:	4b51      	ldr	r3, [pc, #324]	; (800a688 <UART_SetConfig+0x2cc>)
 800a542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a54a:	2bc0      	cmp	r3, #192	; 0xc0
 800a54c:	d013      	beq.n	800a576 <UART_SetConfig+0x1ba>
 800a54e:	2bc0      	cmp	r3, #192	; 0xc0
 800a550:	d814      	bhi.n	800a57c <UART_SetConfig+0x1c0>
 800a552:	2b80      	cmp	r3, #128	; 0x80
 800a554:	d009      	beq.n	800a56a <UART_SetConfig+0x1ae>
 800a556:	2b80      	cmp	r3, #128	; 0x80
 800a558:	d810      	bhi.n	800a57c <UART_SetConfig+0x1c0>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d002      	beq.n	800a564 <UART_SetConfig+0x1a8>
 800a55e:	2b40      	cmp	r3, #64	; 0x40
 800a560:	d006      	beq.n	800a570 <UART_SetConfig+0x1b4>
 800a562:	e00b      	b.n	800a57c <UART_SetConfig+0x1c0>
 800a564:	2300      	movs	r3, #0
 800a566:	77fb      	strb	r3, [r7, #31]
 800a568:	e0cc      	b.n	800a704 <UART_SetConfig+0x348>
 800a56a:	2302      	movs	r3, #2
 800a56c:	77fb      	strb	r3, [r7, #31]
 800a56e:	e0c9      	b.n	800a704 <UART_SetConfig+0x348>
 800a570:	2304      	movs	r3, #4
 800a572:	77fb      	strb	r3, [r7, #31]
 800a574:	e0c6      	b.n	800a704 <UART_SetConfig+0x348>
 800a576:	2308      	movs	r3, #8
 800a578:	77fb      	strb	r3, [r7, #31]
 800a57a:	e0c3      	b.n	800a704 <UART_SetConfig+0x348>
 800a57c:	2310      	movs	r3, #16
 800a57e:	77fb      	strb	r3, [r7, #31]
 800a580:	e0c0      	b.n	800a704 <UART_SetConfig+0x348>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	4a44      	ldr	r2, [pc, #272]	; (800a698 <UART_SetConfig+0x2dc>)
 800a588:	4293      	cmp	r3, r2
 800a58a:	d125      	bne.n	800a5d8 <UART_SetConfig+0x21c>
 800a58c:	4b3e      	ldr	r3, [pc, #248]	; (800a688 <UART_SetConfig+0x2cc>)
 800a58e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a59a:	d017      	beq.n	800a5cc <UART_SetConfig+0x210>
 800a59c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5a0:	d817      	bhi.n	800a5d2 <UART_SetConfig+0x216>
 800a5a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5a6:	d00b      	beq.n	800a5c0 <UART_SetConfig+0x204>
 800a5a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5ac:	d811      	bhi.n	800a5d2 <UART_SetConfig+0x216>
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <UART_SetConfig+0x1fe>
 800a5b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5b6:	d006      	beq.n	800a5c6 <UART_SetConfig+0x20a>
 800a5b8:	e00b      	b.n	800a5d2 <UART_SetConfig+0x216>
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	77fb      	strb	r3, [r7, #31]
 800a5be:	e0a1      	b.n	800a704 <UART_SetConfig+0x348>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e09e      	b.n	800a704 <UART_SetConfig+0x348>
 800a5c6:	2304      	movs	r3, #4
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e09b      	b.n	800a704 <UART_SetConfig+0x348>
 800a5cc:	2308      	movs	r3, #8
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e098      	b.n	800a704 <UART_SetConfig+0x348>
 800a5d2:	2310      	movs	r3, #16
 800a5d4:	77fb      	strb	r3, [r7, #31]
 800a5d6:	e095      	b.n	800a704 <UART_SetConfig+0x348>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a2f      	ldr	r2, [pc, #188]	; (800a69c <UART_SetConfig+0x2e0>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d125      	bne.n	800a62e <UART_SetConfig+0x272>
 800a5e2:	4b29      	ldr	r3, [pc, #164]	; (800a688 <UART_SetConfig+0x2cc>)
 800a5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f0:	d017      	beq.n	800a622 <UART_SetConfig+0x266>
 800a5f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5f6:	d817      	bhi.n	800a628 <UART_SetConfig+0x26c>
 800a5f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5fc:	d00b      	beq.n	800a616 <UART_SetConfig+0x25a>
 800a5fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a602:	d811      	bhi.n	800a628 <UART_SetConfig+0x26c>
 800a604:	2b00      	cmp	r3, #0
 800a606:	d003      	beq.n	800a610 <UART_SetConfig+0x254>
 800a608:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a60c:	d006      	beq.n	800a61c <UART_SetConfig+0x260>
 800a60e:	e00b      	b.n	800a628 <UART_SetConfig+0x26c>
 800a610:	2301      	movs	r3, #1
 800a612:	77fb      	strb	r3, [r7, #31]
 800a614:	e076      	b.n	800a704 <UART_SetConfig+0x348>
 800a616:	2302      	movs	r3, #2
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e073      	b.n	800a704 <UART_SetConfig+0x348>
 800a61c:	2304      	movs	r3, #4
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e070      	b.n	800a704 <UART_SetConfig+0x348>
 800a622:	2308      	movs	r3, #8
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e06d      	b.n	800a704 <UART_SetConfig+0x348>
 800a628:	2310      	movs	r3, #16
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e06a      	b.n	800a704 <UART_SetConfig+0x348>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	4a1b      	ldr	r2, [pc, #108]	; (800a6a0 <UART_SetConfig+0x2e4>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d138      	bne.n	800a6aa <UART_SetConfig+0x2ee>
 800a638:	4b13      	ldr	r3, [pc, #76]	; (800a688 <UART_SetConfig+0x2cc>)
 800a63a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a63e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a646:	d017      	beq.n	800a678 <UART_SetConfig+0x2bc>
 800a648:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a64c:	d82a      	bhi.n	800a6a4 <UART_SetConfig+0x2e8>
 800a64e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a652:	d00b      	beq.n	800a66c <UART_SetConfig+0x2b0>
 800a654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a658:	d824      	bhi.n	800a6a4 <UART_SetConfig+0x2e8>
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <UART_SetConfig+0x2aa>
 800a65e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a662:	d006      	beq.n	800a672 <UART_SetConfig+0x2b6>
 800a664:	e01e      	b.n	800a6a4 <UART_SetConfig+0x2e8>
 800a666:	2300      	movs	r3, #0
 800a668:	77fb      	strb	r3, [r7, #31]
 800a66a:	e04b      	b.n	800a704 <UART_SetConfig+0x348>
 800a66c:	2302      	movs	r3, #2
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	e048      	b.n	800a704 <UART_SetConfig+0x348>
 800a672:	2304      	movs	r3, #4
 800a674:	77fb      	strb	r3, [r7, #31]
 800a676:	e045      	b.n	800a704 <UART_SetConfig+0x348>
 800a678:	2308      	movs	r3, #8
 800a67a:	77fb      	strb	r3, [r7, #31]
 800a67c:	e042      	b.n	800a704 <UART_SetConfig+0x348>
 800a67e:	bf00      	nop
 800a680:	efff69f3 	.word	0xefff69f3
 800a684:	40011000 	.word	0x40011000
 800a688:	40023800 	.word	0x40023800
 800a68c:	40004400 	.word	0x40004400
 800a690:	40004800 	.word	0x40004800
 800a694:	40004c00 	.word	0x40004c00
 800a698:	40005000 	.word	0x40005000
 800a69c:	40011400 	.word	0x40011400
 800a6a0:	40007800 	.word	0x40007800
 800a6a4:	2310      	movs	r3, #16
 800a6a6:	77fb      	strb	r3, [r7, #31]
 800a6a8:	e02c      	b.n	800a704 <UART_SetConfig+0x348>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a72      	ldr	r2, [pc, #456]	; (800a878 <UART_SetConfig+0x4bc>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d125      	bne.n	800a700 <UART_SetConfig+0x344>
 800a6b4:	4b71      	ldr	r3, [pc, #452]	; (800a87c <UART_SetConfig+0x4c0>)
 800a6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a6be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6c2:	d017      	beq.n	800a6f4 <UART_SetConfig+0x338>
 800a6c4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a6c8:	d817      	bhi.n	800a6fa <UART_SetConfig+0x33e>
 800a6ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6ce:	d00b      	beq.n	800a6e8 <UART_SetConfig+0x32c>
 800a6d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6d4:	d811      	bhi.n	800a6fa <UART_SetConfig+0x33e>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d003      	beq.n	800a6e2 <UART_SetConfig+0x326>
 800a6da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6de:	d006      	beq.n	800a6ee <UART_SetConfig+0x332>
 800a6e0:	e00b      	b.n	800a6fa <UART_SetConfig+0x33e>
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	77fb      	strb	r3, [r7, #31]
 800a6e6:	e00d      	b.n	800a704 <UART_SetConfig+0x348>
 800a6e8:	2302      	movs	r3, #2
 800a6ea:	77fb      	strb	r3, [r7, #31]
 800a6ec:	e00a      	b.n	800a704 <UART_SetConfig+0x348>
 800a6ee:	2304      	movs	r3, #4
 800a6f0:	77fb      	strb	r3, [r7, #31]
 800a6f2:	e007      	b.n	800a704 <UART_SetConfig+0x348>
 800a6f4:	2308      	movs	r3, #8
 800a6f6:	77fb      	strb	r3, [r7, #31]
 800a6f8:	e004      	b.n	800a704 <UART_SetConfig+0x348>
 800a6fa:	2310      	movs	r3, #16
 800a6fc:	77fb      	strb	r3, [r7, #31]
 800a6fe:	e001      	b.n	800a704 <UART_SetConfig+0x348>
 800a700:	2310      	movs	r3, #16
 800a702:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	69db      	ldr	r3, [r3, #28]
 800a708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a70c:	d15b      	bne.n	800a7c6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a70e:	7ffb      	ldrb	r3, [r7, #31]
 800a710:	2b08      	cmp	r3, #8
 800a712:	d828      	bhi.n	800a766 <UART_SetConfig+0x3aa>
 800a714:	a201      	add	r2, pc, #4	; (adr r2, 800a71c <UART_SetConfig+0x360>)
 800a716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a71a:	bf00      	nop
 800a71c:	0800a741 	.word	0x0800a741
 800a720:	0800a749 	.word	0x0800a749
 800a724:	0800a751 	.word	0x0800a751
 800a728:	0800a767 	.word	0x0800a767
 800a72c:	0800a757 	.word	0x0800a757
 800a730:	0800a767 	.word	0x0800a767
 800a734:	0800a767 	.word	0x0800a767
 800a738:	0800a767 	.word	0x0800a767
 800a73c:	0800a75f 	.word	0x0800a75f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a740:	f7fd fc22 	bl	8007f88 <HAL_RCC_GetPCLK1Freq>
 800a744:	61b8      	str	r0, [r7, #24]
        break;
 800a746:	e013      	b.n	800a770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a748:	f7fd fc32 	bl	8007fb0 <HAL_RCC_GetPCLK2Freq>
 800a74c:	61b8      	str	r0, [r7, #24]
        break;
 800a74e:	e00f      	b.n	800a770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a750:	4b4b      	ldr	r3, [pc, #300]	; (800a880 <UART_SetConfig+0x4c4>)
 800a752:	61bb      	str	r3, [r7, #24]
        break;
 800a754:	e00c      	b.n	800a770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a756:	f7fd fb45 	bl	8007de4 <HAL_RCC_GetSysClockFreq>
 800a75a:	61b8      	str	r0, [r7, #24]
        break;
 800a75c:	e008      	b.n	800a770 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a75e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a762:	61bb      	str	r3, [r7, #24]
        break;
 800a764:	e004      	b.n	800a770 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a766:	2300      	movs	r3, #0
 800a768:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a76a:	2301      	movs	r3, #1
 800a76c:	77bb      	strb	r3, [r7, #30]
        break;
 800a76e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d074      	beq.n	800a860 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	005a      	lsls	r2, r3, #1
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	085b      	lsrs	r3, r3, #1
 800a780:	441a      	add	r2, r3
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	fbb2 f3f3 	udiv	r3, r2, r3
 800a78a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	2b0f      	cmp	r3, #15
 800a790:	d916      	bls.n	800a7c0 <UART_SetConfig+0x404>
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a798:	d212      	bcs.n	800a7c0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	f023 030f 	bic.w	r3, r3, #15
 800a7a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	f003 0307 	and.w	r3, r3, #7
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	89fb      	ldrh	r3, [r7, #14]
 800a7b2:	4313      	orrs	r3, r2
 800a7b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	89fa      	ldrh	r2, [r7, #14]
 800a7bc:	60da      	str	r2, [r3, #12]
 800a7be:	e04f      	b.n	800a860 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	77bb      	strb	r3, [r7, #30]
 800a7c4:	e04c      	b.n	800a860 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7c6:	7ffb      	ldrb	r3, [r7, #31]
 800a7c8:	2b08      	cmp	r3, #8
 800a7ca:	d828      	bhi.n	800a81e <UART_SetConfig+0x462>
 800a7cc:	a201      	add	r2, pc, #4	; (adr r2, 800a7d4 <UART_SetConfig+0x418>)
 800a7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d2:	bf00      	nop
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a801 	.word	0x0800a801
 800a7dc:	0800a809 	.word	0x0800a809
 800a7e0:	0800a81f 	.word	0x0800a81f
 800a7e4:	0800a80f 	.word	0x0800a80f
 800a7e8:	0800a81f 	.word	0x0800a81f
 800a7ec:	0800a81f 	.word	0x0800a81f
 800a7f0:	0800a81f 	.word	0x0800a81f
 800a7f4:	0800a817 	.word	0x0800a817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7f8:	f7fd fbc6 	bl	8007f88 <HAL_RCC_GetPCLK1Freq>
 800a7fc:	61b8      	str	r0, [r7, #24]
        break;
 800a7fe:	e013      	b.n	800a828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a800:	f7fd fbd6 	bl	8007fb0 <HAL_RCC_GetPCLK2Freq>
 800a804:	61b8      	str	r0, [r7, #24]
        break;
 800a806:	e00f      	b.n	800a828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a808:	4b1d      	ldr	r3, [pc, #116]	; (800a880 <UART_SetConfig+0x4c4>)
 800a80a:	61bb      	str	r3, [r7, #24]
        break;
 800a80c:	e00c      	b.n	800a828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a80e:	f7fd fae9 	bl	8007de4 <HAL_RCC_GetSysClockFreq>
 800a812:	61b8      	str	r0, [r7, #24]
        break;
 800a814:	e008      	b.n	800a828 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a81a:	61bb      	str	r3, [r7, #24]
        break;
 800a81c:	e004      	b.n	800a828 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	77bb      	strb	r3, [r7, #30]
        break;
 800a826:	bf00      	nop
    }

    if (pclk != 0U)
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d018      	beq.n	800a860 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	085a      	lsrs	r2, r3, #1
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	441a      	add	r2, r3
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a840:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	2b0f      	cmp	r3, #15
 800a846:	d909      	bls.n	800a85c <UART_SetConfig+0x4a0>
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a84e:	d205      	bcs.n	800a85c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	b29a      	uxth	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	60da      	str	r2, [r3, #12]
 800a85a:	e001      	b.n	800a860 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a86c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3720      	adds	r7, #32
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}
 800a876:	bf00      	nop
 800a878:	40007c00 	.word	0x40007c00
 800a87c:	40023800 	.word	0x40023800
 800a880:	00f42400 	.word	0x00f42400

0800a884 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00a      	beq.n	800a8ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d4:	f003 0304 	and.w	r3, r3, #4
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d00a      	beq.n	800a8f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	430a      	orrs	r2, r1
 800a8f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8f6:	f003 0308 	and.w	r3, r3, #8
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00a      	beq.n	800a914 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	430a      	orrs	r2, r1
 800a912:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	f003 0310 	and.w	r3, r3, #16
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	689b      	ldr	r3, [r3, #8]
 800a926:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	430a      	orrs	r2, r1
 800a934:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	f003 0320 	and.w	r3, r3, #32
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01a      	beq.n	800a99a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a982:	d10a      	bne.n	800a99a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	430a      	orrs	r2, r1
 800a998:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	430a      	orrs	r2, r1
 800a9ba:	605a      	str	r2, [r3, #4]
  }
}
 800a9bc:	bf00      	nop
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b086      	sub	sp, #24
 800a9cc:	af02      	add	r7, sp, #8
 800a9ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a9d8:	f7f9 fd88 	bl	80044ec <HAL_GetTick>
 800a9dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f003 0308 	and.w	r3, r3, #8
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d10e      	bne.n	800aa0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f817 	bl	800aa2e <UART_WaitOnFlagUntilTimeout>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa06:	2303      	movs	r3, #3
 800aa08:	e00d      	b.n	800aa26 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2220      	movs	r2, #32
 800aa14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3710      	adds	r7, #16
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}

0800aa2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b09c      	sub	sp, #112	; 0x70
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	603b      	str	r3, [r7, #0]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa3e:	e0a5      	b.n	800ab8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa46:	f000 80a1 	beq.w	800ab8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa4a:	f7f9 fd4f 	bl	80044ec <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d302      	bcc.n	800aa60 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d13e      	bne.n	800aade <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa74:	667b      	str	r3, [r7, #100]	; 0x64
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e6      	bne.n	800aa60 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	3308      	adds	r3, #8
 800aa98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa9c:	e853 3f00 	ldrex	r3, [r3]
 800aaa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	f023 0301 	bic.w	r3, r3, #1
 800aaa8:	663b      	str	r3, [r7, #96]	; 0x60
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	3308      	adds	r3, #8
 800aab0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aab2:	64ba      	str	r2, [r7, #72]	; 0x48
 800aab4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aab8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaba:	e841 2300 	strex	r3, r2, [r1]
 800aabe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1e5      	bne.n	800aa92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2220      	movs	r2, #32
 800aaca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2220      	movs	r2, #32
 800aad0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e067      	b.n	800abae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d04f      	beq.n	800ab8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	69db      	ldr	r3, [r3, #28]
 800aaf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aaf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aafa:	d147      	bne.n	800ab8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	e853 3f00 	ldrex	r3, [r3]
 800ab12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	461a      	mov	r2, r3
 800ab22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab24:	637b      	str	r3, [r7, #52]	; 0x34
 800ab26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab2c:	e841 2300 	strex	r3, r2, [r1]
 800ab30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d1e6      	bne.n	800ab06 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	e853 3f00 	ldrex	r3, [r3]
 800ab46:	613b      	str	r3, [r7, #16]
   return(result);
 800ab48:	693b      	ldr	r3, [r7, #16]
 800ab4a:	f023 0301 	bic.w	r3, r3, #1
 800ab4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	3308      	adds	r3, #8
 800ab56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab58:	623a      	str	r2, [r7, #32]
 800ab5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5c:	69f9      	ldr	r1, [r7, #28]
 800ab5e:	6a3a      	ldr	r2, [r7, #32]
 800ab60:	e841 2300 	strex	r3, r2, [r1]
 800ab64:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab66:	69bb      	ldr	r3, [r7, #24]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1e5      	bne.n	800ab38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2220      	movs	r2, #32
 800ab70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2220      	movs	r2, #32
 800ab76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2220      	movs	r2, #32
 800ab7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ab88:	2303      	movs	r3, #3
 800ab8a:	e010      	b.n	800abae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	69da      	ldr	r2, [r3, #28]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	4013      	ands	r3, r2
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	bf0c      	ite	eq
 800ab9c:	2301      	moveq	r3, #1
 800ab9e:	2300      	movne	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	79fb      	ldrb	r3, [r7, #7]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	f43f af4a 	beq.w	800aa40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abac:	2300      	movs	r3, #0
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3770      	adds	r7, #112	; 0x70
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
	...

0800abb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abb8:	b480      	push	{r7}
 800abba:	b097      	sub	sp, #92	; 0x5c
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	68ba      	ldr	r2, [r7, #8]
 800abca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	88fa      	ldrh	r2, [r7, #6]
 800abd0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	88fa      	ldrh	r2, [r7, #6]
 800abd8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abea:	d10e      	bne.n	800ac0a <UART_Start_Receive_IT+0x52>
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	691b      	ldr	r3, [r3, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d105      	bne.n	800ac00 <UART_Start_Receive_IT+0x48>
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800abfa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800abfe:	e02d      	b.n	800ac5c <UART_Start_Receive_IT+0xa4>
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	22ff      	movs	r2, #255	; 0xff
 800ac04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac08:	e028      	b.n	800ac5c <UART_Start_Receive_IT+0xa4>
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	689b      	ldr	r3, [r3, #8]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d10d      	bne.n	800ac2e <UART_Start_Receive_IT+0x76>
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d104      	bne.n	800ac24 <UART_Start_Receive_IT+0x6c>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	22ff      	movs	r2, #255	; 0xff
 800ac1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac22:	e01b      	b.n	800ac5c <UART_Start_Receive_IT+0xa4>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	227f      	movs	r2, #127	; 0x7f
 800ac28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac2c:	e016      	b.n	800ac5c <UART_Start_Receive_IT+0xa4>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac36:	d10d      	bne.n	800ac54 <UART_Start_Receive_IT+0x9c>
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d104      	bne.n	800ac4a <UART_Start_Receive_IT+0x92>
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	227f      	movs	r2, #127	; 0x7f
 800ac44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac48:	e008      	b.n	800ac5c <UART_Start_Receive_IT+0xa4>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	223f      	movs	r2, #63	; 0x3f
 800ac4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac52:	e003      	b.n	800ac5c <UART_Start_Receive_IT+0xa4>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2222      	movs	r2, #34	; 0x22
 800ac68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	3308      	adds	r3, #8
 800ac70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac74:	e853 3f00 	ldrex	r3, [r3]
 800ac78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7c:	f043 0301 	orr.w	r3, r3, #1
 800ac80:	657b      	str	r3, [r7, #84]	; 0x54
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac8a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac92:	e841 2300 	strex	r3, r2, [r1]
 800ac96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d1e5      	bne.n	800ac6a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aca6:	d107      	bne.n	800acb8 <UART_Start_Receive_IT+0x100>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d103      	bne.n	800acb8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	4a24      	ldr	r2, [pc, #144]	; (800ad44 <UART_Start_Receive_IT+0x18c>)
 800acb4:	665a      	str	r2, [r3, #100]	; 0x64
 800acb6:	e002      	b.n	800acbe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4a23      	ldr	r2, [pc, #140]	; (800ad48 <UART_Start_Receive_IT+0x190>)
 800acbc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d019      	beq.n	800ad02 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acd6:	e853 3f00 	ldrex	r3, [r3]
 800acda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ace2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	461a      	mov	r2, r3
 800acea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acec:	637b      	str	r3, [r7, #52]	; 0x34
 800acee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acf4:	e841 2300 	strex	r3, r2, [r1]
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d1e6      	bne.n	800acce <UART_Start_Receive_IT+0x116>
 800ad00:	e018      	b.n	800ad34 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	e853 3f00 	ldrex	r3, [r3]
 800ad0e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	f043 0320 	orr.w	r3, r3, #32
 800ad16:	653b      	str	r3, [r7, #80]	; 0x50
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad20:	623b      	str	r3, [r7, #32]
 800ad22:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad24:	69f9      	ldr	r1, [r7, #28]
 800ad26:	6a3a      	ldr	r2, [r7, #32]
 800ad28:	e841 2300 	strex	r3, r2, [r1]
 800ad2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad2e:	69bb      	ldr	r3, [r7, #24]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1e6      	bne.n	800ad02 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800ad34:	2300      	movs	r3, #0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	375c      	adds	r7, #92	; 0x5c
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	0800b165 	.word	0x0800b165
 800ad48:	0800b009 	.word	0x0800b009

0800ad4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b095      	sub	sp, #84	; 0x54
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad68:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad72:	643b      	str	r3, [r7, #64]	; 0x40
 800ad74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e6      	bne.n	800ad54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3308      	adds	r3, #8
 800ad8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	6a3b      	ldr	r3, [r7, #32]
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	f023 0301 	bic.w	r3, r3, #1
 800ad9c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3308      	adds	r3, #8
 800ada4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ada6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ada8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adae:	e841 2300 	strex	r3, r2, [r1]
 800adb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e5      	bne.n	800ad86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d118      	bne.n	800adf4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	e853 3f00 	ldrex	r3, [r3]
 800adce:	60bb      	str	r3, [r7, #8]
   return(result);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	f023 0310 	bic.w	r3, r3, #16
 800add6:	647b      	str	r3, [r7, #68]	; 0x44
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	461a      	mov	r2, r3
 800adde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ade0:	61bb      	str	r3, [r7, #24]
 800ade2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade4:	6979      	ldr	r1, [r7, #20]
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	e841 2300 	strex	r3, r2, [r1]
 800adec:	613b      	str	r3, [r7, #16]
   return(result);
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d1e6      	bne.n	800adc2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2220      	movs	r2, #32
 800adf8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2200      	movs	r2, #0
 800ae04:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ae06:	bf00      	nop
 800ae08:	3754      	adds	r7, #84	; 0x54
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b084      	sub	sp, #16
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f7ff faad 	bl	800a390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae36:	bf00      	nop
 800ae38:	3710      	adds	r7, #16
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bd80      	pop	{r7, pc}

0800ae3e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae3e:	b480      	push	{r7}
 800ae40:	b08f      	sub	sp, #60	; 0x3c
 800ae42:	af00      	add	r7, sp, #0
 800ae44:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae4a:	2b21      	cmp	r3, #33	; 0x21
 800ae4c:	d14c      	bne.n	800aee8 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d132      	bne.n	800aec0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	e853 3f00 	ldrex	r3, [r3]
 800ae66:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae6e:	637b      	str	r3, [r7, #52]	; 0x34
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae7a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae80:	e841 2300 	strex	r3, r2, [r1]
 800ae84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d1e6      	bne.n	800ae5a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	e853 3f00 	ldrex	r3, [r3]
 800ae98:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea0:	633b      	str	r3, [r7, #48]	; 0x30
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	61bb      	str	r3, [r7, #24]
 800aeac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeae:	6979      	ldr	r1, [r7, #20]
 800aeb0:	69ba      	ldr	r2, [r7, #24]
 800aeb2:	e841 2300 	strex	r3, r2, [r1]
 800aeb6:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1e6      	bne.n	800ae8c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800aebe:	e013      	b.n	800aee8 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aec4:	781a      	ldrb	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aed0:	1c5a      	adds	r2, r3, #1
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aedc:	b29b      	uxth	r3, r3
 800aede:	3b01      	subs	r3, #1
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800aee8:	bf00      	nop
 800aeea:	373c      	adds	r7, #60	; 0x3c
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b091      	sub	sp, #68	; 0x44
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af00:	2b21      	cmp	r3, #33	; 0x21
 800af02:	d151      	bne.n	800afa8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af0a:	b29b      	uxth	r3, r3
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d132      	bne.n	800af76 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	623b      	str	r3, [r7, #32]
   return(result);
 800af1e:	6a3b      	ldr	r3, [r7, #32]
 800af20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af24:	63bb      	str	r3, [r7, #56]	; 0x38
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	461a      	mov	r2, r3
 800af2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2e:	633b      	str	r3, [r7, #48]	; 0x30
 800af30:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af36:	e841 2300 	strex	r3, r2, [r1]
 800af3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d1e6      	bne.n	800af10 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	e853 3f00 	ldrex	r3, [r3]
 800af4e:	60fb      	str	r3, [r7, #12]
   return(result);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af56:	637b      	str	r3, [r7, #52]	; 0x34
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	461a      	mov	r2, r3
 800af5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af60:	61fb      	str	r3, [r7, #28]
 800af62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af64:	69b9      	ldr	r1, [r7, #24]
 800af66:	69fa      	ldr	r2, [r7, #28]
 800af68:	e841 2300 	strex	r3, r2, [r1]
 800af6c:	617b      	str	r3, [r7, #20]
   return(result);
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1e6      	bne.n	800af42 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800af74:	e018      	b.n	800afa8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800af7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7e:	881b      	ldrh	r3, [r3, #0]
 800af80:	461a      	mov	r2, r3
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800af8a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af90:	1c9a      	adds	r2, r3, #2
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af9c:	b29b      	uxth	r3, r3
 800af9e:	3b01      	subs	r3, #1
 800afa0:	b29a      	uxth	r2, r3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800afa8:	bf00      	nop
 800afaa:	3744      	adds	r7, #68	; 0x44
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b088      	sub	sp, #32
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	e853 3f00 	ldrex	r3, [r3]
 800afc8:	60bb      	str	r3, [r7, #8]
   return(result);
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd0:	61fb      	str	r3, [r7, #28]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	61bb      	str	r3, [r7, #24]
 800afdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afde:	6979      	ldr	r1, [r7, #20]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	e841 2300 	strex	r3, r2, [r1]
 800afe6:	613b      	str	r3, [r7, #16]
   return(result);
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d1e6      	bne.n	800afbc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2220      	movs	r2, #32
 800aff2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2200      	movs	r2, #0
 800aff8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f7ff f9be 	bl	800a37c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b000:	bf00      	nop
 800b002:	3720      	adds	r7, #32
 800b004:	46bd      	mov	sp, r7
 800b006:	bd80      	pop	{r7, pc}

0800b008 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b096      	sub	sp, #88	; 0x58
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b016:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b01e:	2b22      	cmp	r3, #34	; 0x22
 800b020:	f040 8094 	bne.w	800b14c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b02e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b032:	b2d9      	uxtb	r1, r3
 800b034:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03e:	400a      	ands	r2, r1
 800b040:	b2d2      	uxtb	r2, r2
 800b042:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b048:	1c5a      	adds	r2, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b054:	b29b      	uxth	r3, r3
 800b056:	3b01      	subs	r3, #1
 800b058:	b29a      	uxth	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b066:	b29b      	uxth	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d177      	bne.n	800b15c <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b07c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b080:	653b      	str	r3, [r7, #80]	; 0x50
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b08a:	647b      	str	r3, [r7, #68]	; 0x44
 800b08c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b090:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b092:	e841 2300 	strex	r3, r2, [r1]
 800b096:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e6      	bne.n	800b06c <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a8:	e853 3f00 	ldrex	r3, [r3]
 800b0ac:	623b      	str	r3, [r7, #32]
   return(result);
 800b0ae:	6a3b      	ldr	r3, [r7, #32]
 800b0b0:	f023 0301 	bic.w	r3, r3, #1
 800b0b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	3308      	adds	r3, #8
 800b0bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0be:	633a      	str	r2, [r7, #48]	; 0x30
 800b0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b0c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0c6:	e841 2300 	strex	r3, r2, [r1]
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d1e5      	bne.n	800b09e <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2220      	movs	r2, #32
 800b0d6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d12e      	bne.n	800b144 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f2:	693b      	ldr	r3, [r7, #16]
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f023 0310 	bic.w	r3, r3, #16
 800b100:	64bb      	str	r3, [r7, #72]	; 0x48
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	461a      	mov	r2, r3
 800b108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b10a:	61fb      	str	r3, [r7, #28]
 800b10c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10e:	69b9      	ldr	r1, [r7, #24]
 800b110:	69fa      	ldr	r2, [r7, #28]
 800b112:	e841 2300 	strex	r3, r2, [r1]
 800b116:	617b      	str	r3, [r7, #20]
   return(result);
 800b118:	697b      	ldr	r3, [r7, #20]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d1e6      	bne.n	800b0ec <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	69db      	ldr	r3, [r3, #28]
 800b124:	f003 0310 	and.w	r3, r3, #16
 800b128:	2b10      	cmp	r3, #16
 800b12a:	d103      	bne.n	800b134 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2210      	movs	r2, #16
 800b132:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b13a:	4619      	mov	r1, r3
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f7ff f931 	bl	800a3a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b142:	e00b      	b.n	800b15c <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f7f6 fe21 	bl	8001d8c <HAL_UART_RxCpltCallback>
}
 800b14a:	e007      	b.n	800b15c <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	699a      	ldr	r2, [r3, #24]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0208 	orr.w	r2, r2, #8
 800b15a:	619a      	str	r2, [r3, #24]
}
 800b15c:	bf00      	nop
 800b15e:	3758      	adds	r7, #88	; 0x58
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b096      	sub	sp, #88	; 0x58
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b172:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b17a:	2b22      	cmp	r3, #34	; 0x22
 800b17c:	f040 8094 	bne.w	800b2a8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b186:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b18e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b190:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b194:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b198:	4013      	ands	r3, r2
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b19e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a4:	1c9a      	adds	r2, r3, #2
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d177      	bne.n	800b2b8 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d0:	e853 3f00 	ldrex	r3, [r3]
 800b1d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1e6:	643b      	str	r3, [r7, #64]	; 0x40
 800b1e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1e6      	bne.n	800b1c8 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	3308      	adds	r3, #8
 800b200:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b202:	6a3b      	ldr	r3, [r7, #32]
 800b204:	e853 3f00 	ldrex	r3, [r3]
 800b208:	61fb      	str	r3, [r7, #28]
   return(result);
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	f023 0301 	bic.w	r3, r3, #1
 800b210:	64bb      	str	r3, [r7, #72]	; 0x48
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3308      	adds	r3, #8
 800b218:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b21a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b21c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b21e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b222:	e841 2300 	strex	r3, r2, [r1]
 800b226:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d1e5      	bne.n	800b1fa <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2220      	movs	r2, #32
 800b232:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2200      	movs	r2, #0
 800b238:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b23e:	2b01      	cmp	r3, #1
 800b240:	d12e      	bne.n	800b2a0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	e853 3f00 	ldrex	r3, [r3]
 800b254:	60bb      	str	r3, [r7, #8]
   return(result);
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f023 0310 	bic.w	r3, r3, #16
 800b25c:	647b      	str	r3, [r7, #68]	; 0x44
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b266:	61bb      	str	r3, [r7, #24]
 800b268:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	6979      	ldr	r1, [r7, #20]
 800b26c:	69ba      	ldr	r2, [r7, #24]
 800b26e:	e841 2300 	strex	r3, r2, [r1]
 800b272:	613b      	str	r3, [r7, #16]
   return(result);
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1e6      	bne.n	800b248 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	69db      	ldr	r3, [r3, #28]
 800b280:	f003 0310 	and.w	r3, r3, #16
 800b284:	2b10      	cmp	r3, #16
 800b286:	d103      	bne.n	800b290 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2210      	movs	r2, #16
 800b28e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b296:	4619      	mov	r1, r3
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f7ff f883 	bl	800a3a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b29e:	e00b      	b.n	800b2b8 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f7f6 fd73 	bl	8001d8c <HAL_UART_RxCpltCallback>
}
 800b2a6:	e007      	b.n	800b2b8 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	699a      	ldr	r2, [r3, #24]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0208 	orr.w	r2, r2, #8
 800b2b6:	619a      	str	r2, [r3, #24]
}
 800b2b8:	bf00      	nop
 800b2ba:	3758      	adds	r7, #88	; 0x58
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d121      	bne.n	800b316 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4b27      	ldr	r3, [pc, #156]	; (800b374 <FMC_SDRAM_Init+0xb4>)
 800b2d8:	4013      	ands	r3, r2
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	6851      	ldr	r1, [r2, #4]
 800b2de:	683a      	ldr	r2, [r7, #0]
 800b2e0:	6892      	ldr	r2, [r2, #8]
 800b2e2:	4311      	orrs	r1, r2
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	68d2      	ldr	r2, [r2, #12]
 800b2e8:	4311      	orrs	r1, r2
 800b2ea:	683a      	ldr	r2, [r7, #0]
 800b2ec:	6912      	ldr	r2, [r2, #16]
 800b2ee:	4311      	orrs	r1, r2
 800b2f0:	683a      	ldr	r2, [r7, #0]
 800b2f2:	6952      	ldr	r2, [r2, #20]
 800b2f4:	4311      	orrs	r1, r2
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	6992      	ldr	r2, [r2, #24]
 800b2fa:	4311      	orrs	r1, r2
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	69d2      	ldr	r2, [r2, #28]
 800b300:	4311      	orrs	r1, r2
 800b302:	683a      	ldr	r2, [r7, #0]
 800b304:	6a12      	ldr	r2, [r2, #32]
 800b306:	4311      	orrs	r1, r2
 800b308:	683a      	ldr	r2, [r7, #0]
 800b30a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b30c:	430a      	orrs	r2, r1
 800b30e:	431a      	orrs	r2, r3
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	601a      	str	r2, [r3, #0]
 800b314:	e026      	b.n	800b364 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	69d9      	ldr	r1, [r3, #28]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	4319      	orrs	r1, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32c:	430b      	orrs	r3, r1
 800b32e:	431a      	orrs	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	685a      	ldr	r2, [r3, #4]
 800b338:	4b0e      	ldr	r3, [pc, #56]	; (800b374 <FMC_SDRAM_Init+0xb4>)
 800b33a:	4013      	ands	r3, r2
 800b33c:	683a      	ldr	r2, [r7, #0]
 800b33e:	6851      	ldr	r1, [r2, #4]
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	6892      	ldr	r2, [r2, #8]
 800b344:	4311      	orrs	r1, r2
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	68d2      	ldr	r2, [r2, #12]
 800b34a:	4311      	orrs	r1, r2
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	6912      	ldr	r2, [r2, #16]
 800b350:	4311      	orrs	r1, r2
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	6952      	ldr	r2, [r2, #20]
 800b356:	4311      	orrs	r1, r2
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	6992      	ldr	r2, [r2, #24]
 800b35c:	430a      	orrs	r2, r1
 800b35e:	431a      	orrs	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b364:	2300      	movs	r3, #0
}
 800b366:	4618      	mov	r0, r3
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	ffff8000 	.word	0xffff8000

0800b378 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d128      	bne.n	800b3dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	689b      	ldr	r3, [r3, #8]
 800b38e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	1e59      	subs	r1, r3, #1
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	3b01      	subs	r3, #1
 800b39e:	011b      	lsls	r3, r3, #4
 800b3a0:	4319      	orrs	r1, r3
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	021b      	lsls	r3, r3, #8
 800b3aa:	4319      	orrs	r1, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	3b01      	subs	r3, #1
 800b3b2:	031b      	lsls	r3, r3, #12
 800b3b4:	4319      	orrs	r1, r3
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	4319      	orrs	r1, r3
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	051b      	lsls	r3, r3, #20
 800b3c8:	4319      	orrs	r1, r3
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	061b      	lsls	r3, r3, #24
 800b3d2:	430b      	orrs	r3, r1
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	609a      	str	r2, [r3, #8]
 800b3da:	e02d      	b.n	800b438 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	4b19      	ldr	r3, [pc, #100]	; (800b448 <FMC_SDRAM_Timing_Init+0xd0>)
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	68ba      	ldr	r2, [r7, #8]
 800b3e6:	68d2      	ldr	r2, [r2, #12]
 800b3e8:	3a01      	subs	r2, #1
 800b3ea:	0311      	lsls	r1, r2, #12
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	6952      	ldr	r2, [r2, #20]
 800b3f0:	3a01      	subs	r2, #1
 800b3f2:	0512      	lsls	r2, r2, #20
 800b3f4:	430a      	orrs	r2, r1
 800b3f6:	431a      	orrs	r2, r3
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	1e59      	subs	r1, r3, #1
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	3b01      	subs	r3, #1
 800b410:	011b      	lsls	r3, r3, #4
 800b412:	4319      	orrs	r1, r3
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	3b01      	subs	r3, #1
 800b41a:	021b      	lsls	r3, r3, #8
 800b41c:	4319      	orrs	r1, r3
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	691b      	ldr	r3, [r3, #16]
 800b422:	3b01      	subs	r3, #1
 800b424:	041b      	lsls	r3, r3, #16
 800b426:	4319      	orrs	r1, r3
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	699b      	ldr	r3, [r3, #24]
 800b42c:	3b01      	subs	r3, #1
 800b42e:	061b      	lsls	r3, r3, #24
 800b430:	430b      	orrs	r3, r1
 800b432:	431a      	orrs	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b438:	2300      	movs	r3, #0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3714      	adds	r7, #20
 800b43e:	46bd      	mov	sp, r7
 800b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b444:	4770      	bx	lr
 800b446:	bf00      	nop
 800b448:	ff0f0fff 	.word	0xff0f0fff

0800b44c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	60f8      	str	r0, [r7, #12]
 800b454:	60b9      	str	r1, [r7, #8]
 800b456:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	691a      	ldr	r2, [r3, #16]
 800b45c:	4b0c      	ldr	r3, [pc, #48]	; (800b490 <FMC_SDRAM_SendCommand+0x44>)
 800b45e:	4013      	ands	r3, r2
 800b460:	68ba      	ldr	r2, [r7, #8]
 800b462:	6811      	ldr	r1, [r2, #0]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	6852      	ldr	r2, [r2, #4]
 800b468:	4311      	orrs	r1, r2
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	6892      	ldr	r2, [r2, #8]
 800b46e:	3a01      	subs	r2, #1
 800b470:	0152      	lsls	r2, r2, #5
 800b472:	4311      	orrs	r1, r2
 800b474:	68ba      	ldr	r2, [r7, #8]
 800b476:	68d2      	ldr	r2, [r2, #12]
 800b478:	0252      	lsls	r2, r2, #9
 800b47a:	430a      	orrs	r2, r1
 800b47c:	431a      	orrs	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b482:	2300      	movs	r3, #0
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr
 800b490:	ffc00000 	.word	0xffc00000

0800b494 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b494:	b480      	push	{r7}
 800b496:	b083      	sub	sp, #12
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	695a      	ldr	r2, [r3, #20]
 800b4a2:	4b07      	ldr	r3, [pc, #28]	; (800b4c0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	683a      	ldr	r2, [r7, #0]
 800b4a8:	0052      	lsls	r2, r2, #1
 800b4aa:	431a      	orrs	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b4b0:	2300      	movs	r3, #0
}
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	370c      	adds	r7, #12
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	ffffc001 	.word	0xffffc001

0800b4c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b4d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4d6:	2b84      	cmp	r3, #132	; 0x84
 800b4d8:	d005      	beq.n	800b4e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b4da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	3303      	adds	r3, #3
 800b4e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b4f8:	f001 fa18 	bl	800c92c <vTaskStartScheduler>
  
  return osOK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	bd80      	pop	{r7, pc}

0800b502 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b502:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b504:	b089      	sub	sp, #36	; 0x24
 800b506:	af04      	add	r7, sp, #16
 800b508:	6078      	str	r0, [r7, #4]
 800b50a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	695b      	ldr	r3, [r3, #20]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d020      	beq.n	800b556 <osThreadCreate+0x54>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	699b      	ldr	r3, [r3, #24]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d01c      	beq.n	800b556 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	685c      	ldr	r4, [r3, #4]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681d      	ldr	r5, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	691e      	ldr	r6, [r3, #16]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b52e:	4618      	mov	r0, r3
 800b530:	f7ff ffc8 	bl	800b4c4 <makeFreeRtosPriority>
 800b534:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	695b      	ldr	r3, [r3, #20]
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b53e:	9202      	str	r2, [sp, #8]
 800b540:	9301      	str	r3, [sp, #4]
 800b542:	9100      	str	r1, [sp, #0]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	4632      	mov	r2, r6
 800b548:	4629      	mov	r1, r5
 800b54a:	4620      	mov	r0, r4
 800b54c:	f000 fef0 	bl	800c330 <xTaskCreateStatic>
 800b550:	4603      	mov	r3, r0
 800b552:	60fb      	str	r3, [r7, #12]
 800b554:	e01c      	b.n	800b590 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	685c      	ldr	r4, [r3, #4]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b562:	b29e      	uxth	r6, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7ff ffaa 	bl	800b4c4 <makeFreeRtosPriority>
 800b570:	4602      	mov	r2, r0
 800b572:	f107 030c 	add.w	r3, r7, #12
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	9200      	str	r2, [sp, #0]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	4632      	mov	r2, r6
 800b57e:	4629      	mov	r1, r5
 800b580:	4620      	mov	r0, r4
 800b582:	f000 ff38 	bl	800c3f6 <xTaskCreate>
 800b586:	4603      	mov	r3, r0
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d001      	beq.n	800b590 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b58c:	2300      	movs	r3, #0
 800b58e:	e000      	b.n	800b592 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b590:	68fb      	ldr	r3, [r7, #12]
}
 800b592:	4618      	mov	r0, r3
 800b594:	3714      	adds	r7, #20
 800b596:	46bd      	mov	sp, r7
 800b598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b59a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d001      	beq.n	800b5b0 <osDelay+0x16>
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	e000      	b.n	800b5b2 <osDelay+0x18>
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 f984 	bl	800c8c0 <vTaskDelay>
  
  return osOK;
 800b5b8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d007      	beq.n	800b5e2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	2001      	movs	r0, #1
 800b5da:	f000 fa66 	bl	800baaa <xQueueCreateMutexStatic>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	e003      	b.n	800b5ea <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b5e2:	2001      	movs	r0, #1
 800b5e4:	f000 fa49 	bl	800ba7a <xQueueCreateMutex>
 800b5e8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3708      	adds	r7, #8
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b5f2:	b590      	push	{r4, r7, lr}
 800b5f4:	b085      	sub	sp, #20
 800b5f6:	af02      	add	r7, sp, #8
 800b5f8:	6078      	str	r0, [r7, #4]
 800b5fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	689b      	ldr	r3, [r3, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d011      	beq.n	800b628 <osMessageCreate+0x36>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	68db      	ldr	r3, [r3, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00d      	beq.n	800b628 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6818      	ldr	r0, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6859      	ldr	r1, [r3, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	689a      	ldr	r2, [r3, #8]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	2400      	movs	r4, #0
 800b61e:	9400      	str	r4, [sp, #0]
 800b620:	f000 f92e 	bl	800b880 <xQueueGenericCreateStatic>
 800b624:	4603      	mov	r3, r0
 800b626:	e008      	b.n	800b63a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	6818      	ldr	r0, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	685b      	ldr	r3, [r3, #4]
 800b630:	2200      	movs	r2, #0
 800b632:	4619      	mov	r1, r3
 800b634:	f000 f9a6 	bl	800b984 <xQueueGenericCreate>
 800b638:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd90      	pop	{r4, r7, pc}

0800b642 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b642:	b480      	push	{r7}
 800b644:	b083      	sub	sp, #12
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f103 0208 	add.w	r2, r3, #8
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f04f 32ff 	mov.w	r2, #4294967295
 800b65a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f103 0208 	add.w	r2, r3, #8
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f103 0208 	add.w	r2, r3, #8
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b682:	b480      	push	{r7}
 800b684:	b083      	sub	sp, #12
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2200      	movs	r2, #0
 800b68e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b690:	bf00      	nop
 800b692:	370c      	adds	r7, #12
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr

0800b69c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
 800b6a4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	689a      	ldr	r2, [r3, #8]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	1c5a      	adds	r2, r3, #1
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	601a      	str	r2, [r3, #0]
}
 800b6d8:	bf00      	nop
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6fa:	d103      	bne.n	800b704 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	691b      	ldr	r3, [r3, #16]
 800b700:	60fb      	str	r3, [r7, #12]
 800b702:	e00c      	b.n	800b71e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	3308      	adds	r3, #8
 800b708:	60fb      	str	r3, [r7, #12]
 800b70a:	e002      	b.n	800b712 <vListInsert+0x2e>
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68ba      	ldr	r2, [r7, #8]
 800b71a:	429a      	cmp	r2, r3
 800b71c:	d2f6      	bcs.n	800b70c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	685a      	ldr	r2, [r3, #4]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	68fa      	ldr	r2, [r7, #12]
 800b732:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	1c5a      	adds	r2, r3, #1
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	601a      	str	r2, [r3, #0]
}
 800b74a:	bf00      	nop
 800b74c:	3714      	adds	r7, #20
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	6892      	ldr	r2, [r2, #8]
 800b76c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	6852      	ldr	r2, [r2, #4]
 800b776:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d103      	bne.n	800b78a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	689a      	ldr	r2, [r3, #8]
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2200      	movs	r2, #0
 800b78e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	1e5a      	subs	r2, r3, #1
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3714      	adds	r7, #20
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a8:	4770      	bx	lr
	...

0800b7ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d10c      	bne.n	800b7da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c4:	b672      	cpsid	i
 800b7c6:	f383 8811 	msr	BASEPRI, r3
 800b7ca:	f3bf 8f6f 	isb	sy
 800b7ce:	f3bf 8f4f 	dsb	sy
 800b7d2:	b662      	cpsie	i
 800b7d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b7d6:	bf00      	nop
 800b7d8:	e7fe      	b.n	800b7d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b7da:	f002 f817 	bl	800d80c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7e6:	68f9      	ldr	r1, [r7, #12]
 800b7e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b7ea:	fb01 f303 	mul.w	r3, r1, r3
 800b7ee:	441a      	add	r2, r3
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681a      	ldr	r2, [r3, #0]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b80a:	3b01      	subs	r3, #1
 800b80c:	68f9      	ldr	r1, [r7, #12]
 800b80e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b810:	fb01 f303 	mul.w	r3, r1, r3
 800b814:	441a      	add	r2, r3
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	22ff      	movs	r2, #255	; 0xff
 800b81e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	22ff      	movs	r2, #255	; 0xff
 800b826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d114      	bne.n	800b85a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	691b      	ldr	r3, [r3, #16]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d01a      	beq.n	800b86e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	3310      	adds	r3, #16
 800b83c:	4618      	mov	r0, r3
 800b83e:	f001 fad3 	bl	800cde8 <xTaskRemoveFromEventList>
 800b842:	4603      	mov	r3, r0
 800b844:	2b00      	cmp	r3, #0
 800b846:	d012      	beq.n	800b86e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b848:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <xQueueGenericReset+0xd0>)
 800b84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b84e:	601a      	str	r2, [r3, #0]
 800b850:	f3bf 8f4f 	dsb	sy
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	e009      	b.n	800b86e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3310      	adds	r3, #16
 800b85e:	4618      	mov	r0, r3
 800b860:	f7ff feef 	bl	800b642 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	3324      	adds	r3, #36	; 0x24
 800b868:	4618      	mov	r0, r3
 800b86a:	f7ff feea 	bl	800b642 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b86e:	f002 f801 	bl	800d874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b872:	2301      	movs	r3, #1
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	e000ed04 	.word	0xe000ed04

0800b880 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b880:	b580      	push	{r7, lr}
 800b882:	b08e      	sub	sp, #56	; 0x38
 800b884:	af02      	add	r7, sp, #8
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
 800b88c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d10c      	bne.n	800b8ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b898:	b672      	cpsid	i
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	b662      	cpsie	i
 800b8a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8aa:	bf00      	nop
 800b8ac:	e7fe      	b.n	800b8ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d10c      	bne.n	800b8ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	b672      	cpsid	i
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	b662      	cpsie	i
 800b8c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b8ca:	bf00      	nop
 800b8cc:	e7fe      	b.n	800b8cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d002      	beq.n	800b8da <xQueueGenericCreateStatic+0x5a>
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <xQueueGenericCreateStatic+0x5e>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e000      	b.n	800b8e0 <xQueueGenericCreateStatic+0x60>
 800b8de:	2300      	movs	r3, #0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10c      	bne.n	800b8fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	b672      	cpsid	i
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	b662      	cpsie	i
 800b8f8:	623b      	str	r3, [r7, #32]
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d102      	bne.n	800b90a <xQueueGenericCreateStatic+0x8a>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d101      	bne.n	800b90e <xQueueGenericCreateStatic+0x8e>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e000      	b.n	800b910 <xQueueGenericCreateStatic+0x90>
 800b90e:	2300      	movs	r3, #0
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10c      	bne.n	800b92e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	b672      	cpsid	i
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	b662      	cpsie	i
 800b928:	61fb      	str	r3, [r7, #28]
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b92e:	2348      	movs	r3, #72	; 0x48
 800b930:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b48      	cmp	r3, #72	; 0x48
 800b936:	d00c      	beq.n	800b952 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	b672      	cpsid	i
 800b93e:	f383 8811 	msr	BASEPRI, r3
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	f3bf 8f4f 	dsb	sy
 800b94a:	b662      	cpsie	i
 800b94c:	61bb      	str	r3, [r7, #24]
}
 800b94e:	bf00      	nop
 800b950:	e7fe      	b.n	800b950 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b952:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00d      	beq.n	800b97a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	2201      	movs	r2, #1
 800b962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b966:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b96a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b96c:	9300      	str	r3, [sp, #0]
 800b96e:	4613      	mov	r3, r2
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	68b9      	ldr	r1, [r7, #8]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f847 	bl	800ba08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3730      	adds	r7, #48	; 0x30
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b984:	b580      	push	{r7, lr}
 800b986:	b08a      	sub	sp, #40	; 0x28
 800b988:	af02      	add	r7, sp, #8
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	4613      	mov	r3, r2
 800b990:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d10c      	bne.n	800b9b2 <xQueueGenericCreate+0x2e>
	__asm volatile
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	b672      	cpsid	i
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	b662      	cpsie	i
 800b9ac:	613b      	str	r3, [r7, #16]
}
 800b9ae:	bf00      	nop
 800b9b0:	e7fe      	b.n	800b9b0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d102      	bne.n	800b9be <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	61fb      	str	r3, [r7, #28]
 800b9bc:	e004      	b.n	800b9c8 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	68ba      	ldr	r2, [r7, #8]
 800b9c2:	fb02 f303 	mul.w	r3, r2, r3
 800b9c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b9c8:	69fb      	ldr	r3, [r7, #28]
 800b9ca:	3348      	adds	r3, #72	; 0x48
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f002 f805 	bl	800d9dc <pvPortMalloc>
 800b9d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d011      	beq.n	800b9fe <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	3348      	adds	r3, #72	; 0x48
 800b9e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b9e4:	69bb      	ldr	r3, [r7, #24]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9ec:	79fa      	ldrb	r2, [r7, #7]
 800b9ee:	69bb      	ldr	r3, [r7, #24]
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	68b9      	ldr	r1, [r7, #8]
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 f805 	bl	800ba08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9fe:	69bb      	ldr	r3, [r7, #24]
	}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3720      	adds	r7, #32
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d103      	bne.n	800ba24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	69ba      	ldr	r2, [r7, #24]
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	e002      	b.n	800ba2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	68ba      	ldr	r2, [r7, #8]
 800ba34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba36:	2101      	movs	r1, #1
 800ba38:	69b8      	ldr	r0, [r7, #24]
 800ba3a:	f7ff feb7 	bl	800b7ac <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba3e:	bf00      	nop
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b082      	sub	sp, #8
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00e      	beq.n	800ba72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2200      	movs	r2, #0
 800ba58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2200      	movs	r2, #0
 800ba64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ba66:	2300      	movs	r3, #0
 800ba68:	2200      	movs	r2, #0
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 f837 	bl	800bae0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ba72:	bf00      	nop
 800ba74:	3708      	adds	r7, #8
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ba7a:	b580      	push	{r7, lr}
 800ba7c:	b086      	sub	sp, #24
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	4603      	mov	r3, r0
 800ba82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ba84:	2301      	movs	r3, #1
 800ba86:	617b      	str	r3, [r7, #20]
 800ba88:	2300      	movs	r3, #0
 800ba8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ba8c:	79fb      	ldrb	r3, [r7, #7]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6939      	ldr	r1, [r7, #16]
 800ba92:	6978      	ldr	r0, [r7, #20]
 800ba94:	f7ff ff76 	bl	800b984 <xQueueGenericCreate>
 800ba98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ba9a:	68f8      	ldr	r0, [r7, #12]
 800ba9c:	f7ff ffd3 	bl	800ba46 <prvInitialiseMutex>

		return xNewQueue;
 800baa0:	68fb      	ldr	r3, [r7, #12]
	}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}

0800baaa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800baaa:	b580      	push	{r7, lr}
 800baac:	b088      	sub	sp, #32
 800baae:	af02      	add	r7, sp, #8
 800bab0:	4603      	mov	r3, r0
 800bab2:	6039      	str	r1, [r7, #0]
 800bab4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bab6:	2301      	movs	r3, #1
 800bab8:	617b      	str	r3, [r7, #20]
 800baba:	2300      	movs	r3, #0
 800babc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800babe:	79fb      	ldrb	r3, [r7, #7]
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2200      	movs	r2, #0
 800bac6:	6939      	ldr	r1, [r7, #16]
 800bac8:	6978      	ldr	r0, [r7, #20]
 800baca:	f7ff fed9 	bl	800b880 <xQueueGenericCreateStatic>
 800bace:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bad0:	68f8      	ldr	r0, [r7, #12]
 800bad2:	f7ff ffb8 	bl	800ba46 <prvInitialiseMutex>

		return xNewQueue;
 800bad6:	68fb      	ldr	r3, [r7, #12]
	}
 800bad8:	4618      	mov	r0, r3
 800bada:	3718      	adds	r7, #24
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b08e      	sub	sp, #56	; 0x38
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800baee:	2300      	movs	r3, #0
 800baf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d10c      	bne.n	800bb16 <xQueueGenericSend+0x36>
	__asm volatile
 800bafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb00:	b672      	cpsid	i
 800bb02:	f383 8811 	msr	BASEPRI, r3
 800bb06:	f3bf 8f6f 	isb	sy
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	b662      	cpsie	i
 800bb10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb12:	bf00      	nop
 800bb14:	e7fe      	b.n	800bb14 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d103      	bne.n	800bb24 <xQueueGenericSend+0x44>
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <xQueueGenericSend+0x48>
 800bb24:	2301      	movs	r3, #1
 800bb26:	e000      	b.n	800bb2a <xQueueGenericSend+0x4a>
 800bb28:	2300      	movs	r3, #0
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10c      	bne.n	800bb48 <xQueueGenericSend+0x68>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	b672      	cpsid	i
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	b662      	cpsie	i
 800bb42:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb44:	bf00      	nop
 800bb46:	e7fe      	b.n	800bb46 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	2b02      	cmp	r3, #2
 800bb4c:	d103      	bne.n	800bb56 <xQueueGenericSend+0x76>
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb52:	2b01      	cmp	r3, #1
 800bb54:	d101      	bne.n	800bb5a <xQueueGenericSend+0x7a>
 800bb56:	2301      	movs	r3, #1
 800bb58:	e000      	b.n	800bb5c <xQueueGenericSend+0x7c>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10c      	bne.n	800bb7a <xQueueGenericSend+0x9a>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	b672      	cpsid	i
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	b662      	cpsie	i
 800bb74:	623b      	str	r3, [r7, #32]
}
 800bb76:	bf00      	nop
 800bb78:	e7fe      	b.n	800bb78 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bb7a:	f001 fafd 	bl	800d178 <xTaskGetSchedulerState>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d102      	bne.n	800bb8a <xQueueGenericSend+0xaa>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d101      	bne.n	800bb8e <xQueueGenericSend+0xae>
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e000      	b.n	800bb90 <xQueueGenericSend+0xb0>
 800bb8e:	2300      	movs	r3, #0
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10c      	bne.n	800bbae <xQueueGenericSend+0xce>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb98:	b672      	cpsid	i
 800bb9a:	f383 8811 	msr	BASEPRI, r3
 800bb9e:	f3bf 8f6f 	isb	sy
 800bba2:	f3bf 8f4f 	dsb	sy
 800bba6:	b662      	cpsie	i
 800bba8:	61fb      	str	r3, [r7, #28]
}
 800bbaa:	bf00      	nop
 800bbac:	e7fe      	b.n	800bbac <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbae:	f001 fe2d 	bl	800d80c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d302      	bcc.n	800bbc4 <xQueueGenericSend+0xe4>
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d129      	bne.n	800bc18 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	68b9      	ldr	r1, [r7, #8]
 800bbc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbca:	f000 faa1 	bl	800c110 <prvCopyDataToQueue>
 800bbce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d010      	beq.n	800bbfa <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbda:	3324      	adds	r3, #36	; 0x24
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f001 f903 	bl	800cde8 <xTaskRemoveFromEventList>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d013      	beq.n	800bc10 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bbe8:	4b3f      	ldr	r3, [pc, #252]	; (800bce8 <xQueueGenericSend+0x208>)
 800bbea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	e00a      	b.n	800bc10 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d007      	beq.n	800bc10 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc00:	4b39      	ldr	r3, [pc, #228]	; (800bce8 <xQueueGenericSend+0x208>)
 800bc02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc10:	f001 fe30 	bl	800d874 <vPortExitCritical>
				return pdPASS;
 800bc14:	2301      	movs	r3, #1
 800bc16:	e063      	b.n	800bce0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d103      	bne.n	800bc26 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc1e:	f001 fe29 	bl	800d874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	e05c      	b.n	800bce0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc2c:	f107 0314 	add.w	r3, r7, #20
 800bc30:	4618      	mov	r0, r3
 800bc32:	f001 f93d 	bl	800ceb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc36:	2301      	movs	r3, #1
 800bc38:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc3a:	f001 fe1b 	bl	800d874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc3e:	f000 fee3 	bl	800ca08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc42:	f001 fde3 	bl	800d80c <vPortEnterCritical>
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc4c:	b25b      	sxtb	r3, r3
 800bc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc52:	d103      	bne.n	800bc5c <xQueueGenericSend+0x17c>
 800bc54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc56:	2200      	movs	r2, #0
 800bc58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc62:	b25b      	sxtb	r3, r3
 800bc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc68:	d103      	bne.n	800bc72 <xQueueGenericSend+0x192>
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc72:	f001 fdff 	bl	800d874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bc76:	1d3a      	adds	r2, r7, #4
 800bc78:	f107 0314 	add.w	r3, r7, #20
 800bc7c:	4611      	mov	r1, r2
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f001 f92c 	bl	800cedc <xTaskCheckForTimeOut>
 800bc84:	4603      	mov	r3, r0
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d124      	bne.n	800bcd4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bc8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc8c:	f000 fb38 	bl	800c300 <prvIsQueueFull>
 800bc90:	4603      	mov	r3, r0
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d018      	beq.n	800bcc8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	3310      	adds	r3, #16
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4611      	mov	r1, r2
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f001 f87c 	bl	800cd9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bca4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bca6:	f000 fac3 	bl	800c230 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bcaa:	f000 febb 	bl	800ca24 <xTaskResumeAll>
 800bcae:	4603      	mov	r3, r0
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	f47f af7c 	bne.w	800bbae <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	; (800bce8 <xQueueGenericSend+0x208>)
 800bcb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	e772      	b.n	800bbae <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bcc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcca:	f000 fab1 	bl	800c230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bcce:	f000 fea9 	bl	800ca24 <xTaskResumeAll>
 800bcd2:	e76c      	b.n	800bbae <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bcd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcd6:	f000 faab 	bl	800c230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bcda:	f000 fea3 	bl	800ca24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bcde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3738      	adds	r7, #56	; 0x38
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	e000ed04 	.word	0xe000ed04

0800bcec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b08c      	sub	sp, #48	; 0x30
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	60b9      	str	r1, [r7, #8]
 800bcf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10c      	bne.n	800bd20 <xQueueReceive+0x34>
	__asm volatile
 800bd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0a:	b672      	cpsid	i
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	b662      	cpsie	i
 800bd1a:	623b      	str	r3, [r7, #32]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d103      	bne.n	800bd2e <xQueueReceive+0x42>
 800bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d101      	bne.n	800bd32 <xQueueReceive+0x46>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e000      	b.n	800bd34 <xQueueReceive+0x48>
 800bd32:	2300      	movs	r3, #0
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d10c      	bne.n	800bd52 <xQueueReceive+0x66>
	__asm volatile
 800bd38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3c:	b672      	cpsid	i
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	b662      	cpsie	i
 800bd4c:	61fb      	str	r3, [r7, #28]
}
 800bd4e:	bf00      	nop
 800bd50:	e7fe      	b.n	800bd50 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bd52:	f001 fa11 	bl	800d178 <xTaskGetSchedulerState>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d102      	bne.n	800bd62 <xQueueReceive+0x76>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d101      	bne.n	800bd66 <xQueueReceive+0x7a>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e000      	b.n	800bd68 <xQueueReceive+0x7c>
 800bd66:	2300      	movs	r3, #0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d10c      	bne.n	800bd86 <xQueueReceive+0x9a>
	__asm volatile
 800bd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd70:	b672      	cpsid	i
 800bd72:	f383 8811 	msr	BASEPRI, r3
 800bd76:	f3bf 8f6f 	isb	sy
 800bd7a:	f3bf 8f4f 	dsb	sy
 800bd7e:	b662      	cpsie	i
 800bd80:	61bb      	str	r3, [r7, #24]
}
 800bd82:	bf00      	nop
 800bd84:	e7fe      	b.n	800bd84 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd86:	f001 fd41 	bl	800d80c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d01f      	beq.n	800bdd6 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bd96:	68b9      	ldr	r1, [r7, #8]
 800bd98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd9a:	f000 fa23 	bl	800c1e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bda0:	1e5a      	subs	r2, r3, #1
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00f      	beq.n	800bdce <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb0:	3310      	adds	r3, #16
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 f818 	bl	800cde8 <xTaskRemoveFromEventList>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d007      	beq.n	800bdce <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bdbe:	4b3d      	ldr	r3, [pc, #244]	; (800beb4 <xQueueReceive+0x1c8>)
 800bdc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc4:	601a      	str	r2, [r3, #0]
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bdce:	f001 fd51 	bl	800d874 <vPortExitCritical>
				return pdPASS;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e069      	b.n	800beaa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d103      	bne.n	800bde4 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bddc:	f001 fd4a 	bl	800d874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bde0:	2300      	movs	r3, #0
 800bde2:	e062      	b.n	800beaa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d106      	bne.n	800bdf8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bdea:	f107 0310 	add.w	r3, r7, #16
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f001 f85e 	bl	800ceb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bdf8:	f001 fd3c 	bl	800d874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bdfc:	f000 fe04 	bl	800ca08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be00:	f001 fd04 	bl	800d80c <vPortEnterCritical>
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be0a:	b25b      	sxtb	r3, r3
 800be0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be10:	d103      	bne.n	800be1a <xQueueReceive+0x12e>
 800be12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be20:	b25b      	sxtb	r3, r3
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be26:	d103      	bne.n	800be30 <xQueueReceive+0x144>
 800be28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2a:	2200      	movs	r2, #0
 800be2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be30:	f001 fd20 	bl	800d874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be34:	1d3a      	adds	r2, r7, #4
 800be36:	f107 0310 	add.w	r3, r7, #16
 800be3a:	4611      	mov	r1, r2
 800be3c:	4618      	mov	r0, r3
 800be3e:	f001 f84d 	bl	800cedc <xTaskCheckForTimeOut>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d123      	bne.n	800be90 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be4a:	f000 fa43 	bl	800c2d4 <prvIsQueueEmpty>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d017      	beq.n	800be84 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	3324      	adds	r3, #36	; 0x24
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	4611      	mov	r1, r2
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 ff9d 	bl	800cd9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800be62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be64:	f000 f9e4 	bl	800c230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800be68:	f000 fddc 	bl	800ca24 <xTaskResumeAll>
 800be6c:	4603      	mov	r3, r0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d189      	bne.n	800bd86 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800be72:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <xQueueReceive+0x1c8>)
 800be74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	f3bf 8f4f 	dsb	sy
 800be7e:	f3bf 8f6f 	isb	sy
 800be82:	e780      	b.n	800bd86 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800be84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be86:	f000 f9d3 	bl	800c230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be8a:	f000 fdcb 	bl	800ca24 <xTaskResumeAll>
 800be8e:	e77a      	b.n	800bd86 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800be90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be92:	f000 f9cd 	bl	800c230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be96:	f000 fdc5 	bl	800ca24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be9c:	f000 fa1a 	bl	800c2d4 <prvIsQueueEmpty>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	f43f af6f 	beq.w	800bd86 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bea8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3730      	adds	r7, #48	; 0x30
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	e000ed04 	.word	0xe000ed04

0800beb8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08e      	sub	sp, #56	; 0x38
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bec2:	2300      	movs	r3, #0
 800bec4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800beca:	2300      	movs	r3, #0
 800becc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10c      	bne.n	800beee <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	b672      	cpsid	i
 800beda:	f383 8811 	msr	BASEPRI, r3
 800bede:	f3bf 8f6f 	isb	sy
 800bee2:	f3bf 8f4f 	dsb	sy
 800bee6:	b662      	cpsie	i
 800bee8:	623b      	str	r3, [r7, #32]
}
 800beea:	bf00      	nop
 800beec:	e7fe      	b.n	800beec <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800beee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00c      	beq.n	800bf10 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800befa:	b672      	cpsid	i
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	b662      	cpsie	i
 800bf0a:	61fb      	str	r3, [r7, #28]
}
 800bf0c:	bf00      	nop
 800bf0e:	e7fe      	b.n	800bf0e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf10:	f001 f932 	bl	800d178 <xTaskGetSchedulerState>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d102      	bne.n	800bf20 <xQueueSemaphoreTake+0x68>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d101      	bne.n	800bf24 <xQueueSemaphoreTake+0x6c>
 800bf20:	2301      	movs	r3, #1
 800bf22:	e000      	b.n	800bf26 <xQueueSemaphoreTake+0x6e>
 800bf24:	2300      	movs	r3, #0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10c      	bne.n	800bf44 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2e:	b672      	cpsid	i
 800bf30:	f383 8811 	msr	BASEPRI, r3
 800bf34:	f3bf 8f6f 	isb	sy
 800bf38:	f3bf 8f4f 	dsb	sy
 800bf3c:	b662      	cpsie	i
 800bf3e:	61bb      	str	r3, [r7, #24]
}
 800bf40:	bf00      	nop
 800bf42:	e7fe      	b.n	800bf42 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf44:	f001 fc62 	bl	800d80c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf4c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d024      	beq.n	800bf9e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	1e5a      	subs	r2, r3, #1
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d104      	bne.n	800bf6e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bf64:	f001 face 	bl	800d504 <pvTaskIncrementMutexHeldCount>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf6c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00f      	beq.n	800bf96 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf78:	3310      	adds	r3, #16
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f000 ff34 	bl	800cde8 <xTaskRemoveFromEventList>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d007      	beq.n	800bf96 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bf86:	4b55      	ldr	r3, [pc, #340]	; (800c0dc <xQueueSemaphoreTake+0x224>)
 800bf88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf8c:	601a      	str	r2, [r3, #0]
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bf96:	f001 fc6d 	bl	800d874 <vPortExitCritical>
				return pdPASS;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	e099      	b.n	800c0d2 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d113      	bne.n	800bfcc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00c      	beq.n	800bfc4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	b672      	cpsid	i
 800bfb0:	f383 8811 	msr	BASEPRI, r3
 800bfb4:	f3bf 8f6f 	isb	sy
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	b662      	cpsie	i
 800bfbe:	617b      	str	r3, [r7, #20]
}
 800bfc0:	bf00      	nop
 800bfc2:	e7fe      	b.n	800bfc2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bfc4:	f001 fc56 	bl	800d874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	e082      	b.n	800c0d2 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d106      	bne.n	800bfe0 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfd2:	f107 030c 	add.w	r3, r7, #12
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 ff6a 	bl	800ceb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bfe0:	f001 fc48 	bl	800d874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bfe4:	f000 fd10 	bl	800ca08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfe8:	f001 fc10 	bl	800d80c <vPortEnterCritical>
 800bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bff2:	b25b      	sxtb	r3, r3
 800bff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bff8:	d103      	bne.n	800c002 <xQueueSemaphoreTake+0x14a>
 800bffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c008:	b25b      	sxtb	r3, r3
 800c00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00e:	d103      	bne.n	800c018 <xQueueSemaphoreTake+0x160>
 800c010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c012:	2200      	movs	r2, #0
 800c014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c018:	f001 fc2c 	bl	800d874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c01c:	463a      	mov	r2, r7
 800c01e:	f107 030c 	add.w	r3, r7, #12
 800c022:	4611      	mov	r1, r2
 800c024:	4618      	mov	r0, r3
 800c026:	f000 ff59 	bl	800cedc <xTaskCheckForTimeOut>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d132      	bne.n	800c096 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c032:	f000 f94f 	bl	800c2d4 <prvIsQueueEmpty>
 800c036:	4603      	mov	r3, r0
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d026      	beq.n	800c08a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d109      	bne.n	800c058 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c044:	f001 fbe2 	bl	800d80c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f001 f8b1 	bl	800d1b4 <xTaskPriorityInherit>
 800c052:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c054:	f001 fc0e 	bl	800d874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05a:	3324      	adds	r3, #36	; 0x24
 800c05c:	683a      	ldr	r2, [r7, #0]
 800c05e:	4611      	mov	r1, r2
 800c060:	4618      	mov	r0, r3
 800c062:	f000 fe9b 	bl	800cd9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c066:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c068:	f000 f8e2 	bl	800c230 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c06c:	f000 fcda 	bl	800ca24 <xTaskResumeAll>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	f47f af66 	bne.w	800bf44 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c078:	4b18      	ldr	r3, [pc, #96]	; (800c0dc <xQueueSemaphoreTake+0x224>)
 800c07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c07e:	601a      	str	r2, [r3, #0]
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	e75c      	b.n	800bf44 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c08a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c08c:	f000 f8d0 	bl	800c230 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c090:	f000 fcc8 	bl	800ca24 <xTaskResumeAll>
 800c094:	e756      	b.n	800bf44 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c096:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c098:	f000 f8ca 	bl	800c230 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c09c:	f000 fcc2 	bl	800ca24 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0a2:	f000 f917 	bl	800c2d4 <prvIsQueueEmpty>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f43f af4b 	beq.w	800bf44 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d00d      	beq.n	800c0d0 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c0b4:	f001 fbaa 	bl	800d80c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c0b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0ba:	f000 f811 	bl	800c0e0 <prvGetDisinheritPriorityAfterTimeout>
 800c0be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c0c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f001 f97e 	bl	800d3c8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c0cc:	f001 fbd2 	bl	800d874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c0d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3738      	adds	r7, #56	; 0x38
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	e000ed04 	.word	0xe000ed04

0800c0e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d006      	beq.n	800c0fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f1c3 0307 	rsb	r3, r3, #7
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	e001      	b.n	800c102 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c0fe:	2300      	movs	r3, #0
 800c100:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c102:	68fb      	ldr	r3, [r7, #12]
	}
 800c104:	4618      	mov	r0, r3
 800c106:	3714      	adds	r7, #20
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c11c:	2300      	movs	r3, #0
 800c11e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c124:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d10d      	bne.n	800c14a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d14d      	bne.n	800c1d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f001 f8ba 	bl	800d2b4 <xTaskPriorityDisinherit>
 800c140:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2200      	movs	r2, #0
 800c146:	609a      	str	r2, [r3, #8]
 800c148:	e043      	b.n	800c1d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d119      	bne.n	800c184 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	6858      	ldr	r0, [r3, #4]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c158:	461a      	mov	r2, r3
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	f001 fe4e 	bl	800ddfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c168:	441a      	add	r2, r3
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	689b      	ldr	r3, [r3, #8]
 800c176:	429a      	cmp	r2, r3
 800c178:	d32b      	bcc.n	800c1d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	605a      	str	r2, [r3, #4]
 800c182:	e026      	b.n	800c1d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	68d8      	ldr	r0, [r3, #12]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c18c:	461a      	mov	r2, r3
 800c18e:	68b9      	ldr	r1, [r7, #8]
 800c190:	f001 fe34 	bl	800ddfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	68da      	ldr	r2, [r3, #12]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19c:	425b      	negs	r3, r3
 800c19e:	441a      	add	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	68da      	ldr	r2, [r3, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d207      	bcs.n	800c1c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	689a      	ldr	r2, [r3, #8]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b8:	425b      	negs	r3, r3
 800c1ba:	441a      	add	r2, r3
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d105      	bne.n	800c1d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d002      	beq.n	800c1d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	1c5a      	adds	r2, r3, #1
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c1da:	697b      	ldr	r3, [r7, #20]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}

0800c1e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d018      	beq.n	800c228 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1fe:	441a      	add	r2, r3
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d303      	bcc.n	800c218 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681a      	ldr	r2, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68d9      	ldr	r1, [r3, #12]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c220:	461a      	mov	r2, r3
 800c222:	6838      	ldr	r0, [r7, #0]
 800c224:	f001 fdea 	bl	800ddfc <memcpy>
	}
}
 800c228:	bf00      	nop
 800c22a:	3708      	adds	r7, #8
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c238:	f001 fae8 	bl	800d80c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c242:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c244:	e011      	b.n	800c26a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d012      	beq.n	800c274 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	3324      	adds	r3, #36	; 0x24
 800c252:	4618      	mov	r0, r3
 800c254:	f000 fdc8 	bl	800cde8 <xTaskRemoveFromEventList>
 800c258:	4603      	mov	r3, r0
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d001      	beq.n	800c262 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c25e:	f000 fea3 	bl	800cfa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c262:	7bfb      	ldrb	r3, [r7, #15]
 800c264:	3b01      	subs	r3, #1
 800c266:	b2db      	uxtb	r3, r3
 800c268:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c26a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	dce9      	bgt.n	800c246 <prvUnlockQueue+0x16>
 800c272:	e000      	b.n	800c276 <prvUnlockQueue+0x46>
					break;
 800c274:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	22ff      	movs	r2, #255	; 0xff
 800c27a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c27e:	f001 faf9 	bl	800d874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c282:	f001 fac3 	bl	800d80c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c28c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c28e:	e011      	b.n	800c2b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	691b      	ldr	r3, [r3, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d012      	beq.n	800c2be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3310      	adds	r3, #16
 800c29c:	4618      	mov	r0, r3
 800c29e:	f000 fda3 	bl	800cde8 <xTaskRemoveFromEventList>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2a8:	f000 fe7e 	bl	800cfa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	3b01      	subs	r3, #1
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	dce9      	bgt.n	800c290 <prvUnlockQueue+0x60>
 800c2bc:	e000      	b.n	800c2c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c2be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	22ff      	movs	r2, #255	; 0xff
 800c2c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c2c8:	f001 fad4 	bl	800d874 <vPortExitCritical>
}
 800c2cc:	bf00      	nop
 800c2ce:	3710      	adds	r7, #16
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2dc:	f001 fa96 	bl	800d80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d102      	bne.n	800c2ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c2e8:	2301      	movs	r3, #1
 800c2ea:	60fb      	str	r3, [r7, #12]
 800c2ec:	e001      	b.n	800c2f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c2f2:	f001 fabf 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c308:	f001 fa80 	bl	800d80c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c314:	429a      	cmp	r2, r3
 800c316:	d102      	bne.n	800c31e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c318:	2301      	movs	r3, #1
 800c31a:	60fb      	str	r3, [r7, #12]
 800c31c:	e001      	b.n	800c322 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c31e:	2300      	movs	r3, #0
 800c320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c322:	f001 faa7 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800c326:	68fb      	ldr	r3, [r7, #12]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3710      	adds	r7, #16
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c330:	b580      	push	{r7, lr}
 800c332:	b08e      	sub	sp, #56	; 0x38
 800c334:	af04      	add	r7, sp, #16
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c33e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c340:	2b00      	cmp	r3, #0
 800c342:	d10c      	bne.n	800c35e <xTaskCreateStatic+0x2e>
	__asm volatile
 800c344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c348:	b672      	cpsid	i
 800c34a:	f383 8811 	msr	BASEPRI, r3
 800c34e:	f3bf 8f6f 	isb	sy
 800c352:	f3bf 8f4f 	dsb	sy
 800c356:	b662      	cpsie	i
 800c358:	623b      	str	r3, [r7, #32]
}
 800c35a:	bf00      	nop
 800c35c:	e7fe      	b.n	800c35c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c360:	2b00      	cmp	r3, #0
 800c362:	d10c      	bne.n	800c37e <xTaskCreateStatic+0x4e>
	__asm volatile
 800c364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c368:	b672      	cpsid	i
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	b662      	cpsie	i
 800c378:	61fb      	str	r3, [r7, #28]
}
 800c37a:	bf00      	nop
 800c37c:	e7fe      	b.n	800c37c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c37e:	23b4      	movs	r3, #180	; 0xb4
 800c380:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c382:	693b      	ldr	r3, [r7, #16]
 800c384:	2bb4      	cmp	r3, #180	; 0xb4
 800c386:	d00c      	beq.n	800c3a2 <xTaskCreateStatic+0x72>
	__asm volatile
 800c388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c38c:	b672      	cpsid	i
 800c38e:	f383 8811 	msr	BASEPRI, r3
 800c392:	f3bf 8f6f 	isb	sy
 800c396:	f3bf 8f4f 	dsb	sy
 800c39a:	b662      	cpsie	i
 800c39c:	61bb      	str	r3, [r7, #24]
}
 800c39e:	bf00      	nop
 800c3a0:	e7fe      	b.n	800c3a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d01e      	beq.n	800c3e8 <xTaskCreateStatic+0xb8>
 800c3aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d01b      	beq.n	800c3e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3bc:	2202      	movs	r2, #2
 800c3be:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9303      	str	r3, [sp, #12]
 800c3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c8:	9302      	str	r3, [sp, #8]
 800c3ca:	f107 0314 	add.w	r3, r7, #20
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	68b9      	ldr	r1, [r7, #8]
 800c3da:	68f8      	ldr	r0, [r7, #12]
 800c3dc:	f000 f850 	bl	800c480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3e2:	f000 f8ed 	bl	800c5c0 <prvAddNewTaskToReadyList>
 800c3e6:	e001      	b.n	800c3ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3ec:	697b      	ldr	r3, [r7, #20]
	}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3728      	adds	r7, #40	; 0x28
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}

0800c3f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c3f6:	b580      	push	{r7, lr}
 800c3f8:	b08c      	sub	sp, #48	; 0x30
 800c3fa:	af04      	add	r7, sp, #16
 800c3fc:	60f8      	str	r0, [r7, #12]
 800c3fe:	60b9      	str	r1, [r7, #8]
 800c400:	603b      	str	r3, [r7, #0]
 800c402:	4613      	mov	r3, r2
 800c404:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c406:	88fb      	ldrh	r3, [r7, #6]
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f001 fae6 	bl	800d9dc <pvPortMalloc>
 800c410:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00e      	beq.n	800c436 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c418:	20b4      	movs	r0, #180	; 0xb4
 800c41a:	f001 fadf 	bl	800d9dc <pvPortMalloc>
 800c41e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	697a      	ldr	r2, [r7, #20]
 800c42a:	631a      	str	r2, [r3, #48]	; 0x30
 800c42c:	e005      	b.n	800c43a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c42e:	6978      	ldr	r0, [r7, #20]
 800c430:	f001 fb9e 	bl	800db70 <vPortFree>
 800c434:	e001      	b.n	800c43a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c436:	2300      	movs	r3, #0
 800c438:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c43a:	69fb      	ldr	r3, [r7, #28]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d017      	beq.n	800c470 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c440:	69fb      	ldr	r3, [r7, #28]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c448:	88fa      	ldrh	r2, [r7, #6]
 800c44a:	2300      	movs	r3, #0
 800c44c:	9303      	str	r3, [sp, #12]
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	9302      	str	r3, [sp, #8]
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	9301      	str	r3, [sp, #4]
 800c456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c458:	9300      	str	r3, [sp, #0]
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	68b9      	ldr	r1, [r7, #8]
 800c45e:	68f8      	ldr	r0, [r7, #12]
 800c460:	f000 f80e 	bl	800c480 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c464:	69f8      	ldr	r0, [r7, #28]
 800c466:	f000 f8ab 	bl	800c5c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c46a:	2301      	movs	r3, #1
 800c46c:	61bb      	str	r3, [r7, #24]
 800c46e:	e002      	b.n	800c476 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c470:	f04f 33ff 	mov.w	r3, #4294967295
 800c474:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c476:	69bb      	ldr	r3, [r7, #24]
	}
 800c478:	4618      	mov	r0, r3
 800c47a:	3720      	adds	r7, #32
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}

0800c480 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b088      	sub	sp, #32
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c490:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c492:	6879      	ldr	r1, [r7, #4]
 800c494:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c498:	440b      	add	r3, r1
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c4a0:	69bb      	ldr	r3, [r7, #24]
 800c4a2:	f023 0307 	bic.w	r3, r3, #7
 800c4a6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	f003 0307 	and.w	r3, r3, #7
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00c      	beq.n	800c4cc <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	b672      	cpsid	i
 800c4b8:	f383 8811 	msr	BASEPRI, r3
 800c4bc:	f3bf 8f6f 	isb	sy
 800c4c0:	f3bf 8f4f 	dsb	sy
 800c4c4:	b662      	cpsie	i
 800c4c6:	617b      	str	r3, [r7, #20]
}
 800c4c8:	bf00      	nop
 800c4ca:	e7fe      	b.n	800c4ca <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d01f      	beq.n	800c512 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	61fb      	str	r3, [r7, #28]
 800c4d6:	e012      	b.n	800c4fe <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	69fb      	ldr	r3, [r7, #28]
 800c4dc:	4413      	add	r3, r2
 800c4de:	7819      	ldrb	r1, [r3, #0]
 800c4e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	3334      	adds	r3, #52	; 0x34
 800c4e8:	460a      	mov	r2, r1
 800c4ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4ec:	68ba      	ldr	r2, [r7, #8]
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	61fb      	str	r3, [r7, #28]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	2b0f      	cmp	r3, #15
 800c502:	d9e9      	bls.n	800c4d8 <prvInitialiseNewTask+0x58>
 800c504:	e000      	b.n	800c508 <prvInitialiseNewTask+0x88>
			{
				break;
 800c506:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c510:	e003      	b.n	800c51a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	2200      	movs	r2, #0
 800c516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51c:	2b06      	cmp	r3, #6
 800c51e:	d901      	bls.n	800c524 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c520:	2306      	movs	r3, #6
 800c522:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c526:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c528:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c52e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	2200      	movs	r2, #0
 800c534:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	3304      	adds	r3, #4
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7ff f8a1 	bl	800b682 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c542:	3318      	adds	r3, #24
 800c544:	4618      	mov	r0, r3
 800c546:	f7ff f89c 	bl	800b682 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c54a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c54e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	f1c3 0207 	rsb	r2, r3, #7
 800c556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c558:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c55e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	2200      	movs	r2, #0
 800c564:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c56a:	2200      	movs	r2, #0
 800c56c:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c572:	334c      	adds	r3, #76	; 0x4c
 800c574:	2260      	movs	r2, #96	; 0x60
 800c576:	2100      	movs	r1, #0
 800c578:	4618      	mov	r0, r3
 800c57a:	f001 fc4d 	bl	800de18 <memset>
 800c57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c580:	4a0c      	ldr	r2, [pc, #48]	; (800c5b4 <prvInitialiseNewTask+0x134>)
 800c582:	651a      	str	r2, [r3, #80]	; 0x50
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	4a0c      	ldr	r2, [pc, #48]	; (800c5b8 <prvInitialiseNewTask+0x138>)
 800c588:	655a      	str	r2, [r3, #84]	; 0x54
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	4a0b      	ldr	r2, [pc, #44]	; (800c5bc <prvInitialiseNewTask+0x13c>)
 800c58e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	68f9      	ldr	r1, [r7, #12]
 800c594:	69b8      	ldr	r0, [r7, #24]
 800c596:	f001 f82f 	bl	800d5f8 <pxPortInitialiseStack>
 800c59a:	4602      	mov	r2, r0
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c5a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d002      	beq.n	800c5ac <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5ac:	bf00      	nop
 800c5ae:	3720      	adds	r7, #32
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	08013438 	.word	0x08013438
 800c5b8:	08013458 	.word	0x08013458
 800c5bc:	08013418 	.word	0x08013418

0800c5c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b082      	sub	sp, #8
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5c8:	f001 f920 	bl	800d80c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5cc:	4b2a      	ldr	r3, [pc, #168]	; (800c678 <prvAddNewTaskToReadyList+0xb8>)
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	4a29      	ldr	r2, [pc, #164]	; (800c678 <prvAddNewTaskToReadyList+0xb8>)
 800c5d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5d6:	4b29      	ldr	r3, [pc, #164]	; (800c67c <prvAddNewTaskToReadyList+0xbc>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d109      	bne.n	800c5f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5de:	4a27      	ldr	r2, [pc, #156]	; (800c67c <prvAddNewTaskToReadyList+0xbc>)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5e4:	4b24      	ldr	r3, [pc, #144]	; (800c678 <prvAddNewTaskToReadyList+0xb8>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d110      	bne.n	800c60e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5ec:	f000 fd00 	bl	800cff0 <prvInitialiseTaskLists>
 800c5f0:	e00d      	b.n	800c60e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c5f2:	4b23      	ldr	r3, [pc, #140]	; (800c680 <prvAddNewTaskToReadyList+0xc0>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d109      	bne.n	800c60e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c5fa:	4b20      	ldr	r3, [pc, #128]	; (800c67c <prvAddNewTaskToReadyList+0xbc>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c604:	429a      	cmp	r2, r3
 800c606:	d802      	bhi.n	800c60e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c608:	4a1c      	ldr	r2, [pc, #112]	; (800c67c <prvAddNewTaskToReadyList+0xbc>)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c60e:	4b1d      	ldr	r3, [pc, #116]	; (800c684 <prvAddNewTaskToReadyList+0xc4>)
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	3301      	adds	r3, #1
 800c614:	4a1b      	ldr	r2, [pc, #108]	; (800c684 <prvAddNewTaskToReadyList+0xc4>)
 800c616:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61c:	2201      	movs	r2, #1
 800c61e:	409a      	lsls	r2, r3
 800c620:	4b19      	ldr	r3, [pc, #100]	; (800c688 <prvAddNewTaskToReadyList+0xc8>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	4313      	orrs	r3, r2
 800c626:	4a18      	ldr	r2, [pc, #96]	; (800c688 <prvAddNewTaskToReadyList+0xc8>)
 800c628:	6013      	str	r3, [r2, #0]
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62e:	4613      	mov	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4413      	add	r3, r2
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4a15      	ldr	r2, [pc, #84]	; (800c68c <prvAddNewTaskToReadyList+0xcc>)
 800c638:	441a      	add	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	3304      	adds	r3, #4
 800c63e:	4619      	mov	r1, r3
 800c640:	4610      	mov	r0, r2
 800c642:	f7ff f82b 	bl	800b69c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c646:	f001 f915 	bl	800d874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c64a:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <prvAddNewTaskToReadyList+0xc0>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00e      	beq.n	800c670 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c652:	4b0a      	ldr	r3, [pc, #40]	; (800c67c <prvAddNewTaskToReadyList+0xbc>)
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d207      	bcs.n	800c670 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c660:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <prvAddNewTaskToReadyList+0xd0>)
 800c662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c666:	601a      	str	r2, [r3, #0]
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}
 800c678:	20000dac 	.word	0x20000dac
 800c67c:	20000cac 	.word	0x20000cac
 800c680:	20000db8 	.word	0x20000db8
 800c684:	20000dc8 	.word	0x20000dc8
 800c688:	20000db4 	.word	0x20000db4
 800c68c:	20000cb0 	.word	0x20000cb0
 800c690:	e000ed04 	.word	0xe000ed04

0800c694 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c69c:	f001 f8b6 	bl	800d80c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d102      	bne.n	800c6ac <vTaskDelete+0x18>
 800c6a6:	4b3a      	ldr	r3, [pc, #232]	; (800c790 <vTaskDelete+0xfc>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	e000      	b.n	800c6ae <vTaskDelete+0x1a>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7ff f84e 	bl	800b756 <uxListRemove>
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d115      	bne.n	800c6ec <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c4:	4933      	ldr	r1, [pc, #204]	; (800c794 <vTaskDelete+0x100>)
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	440b      	add	r3, r1
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d10a      	bne.n	800c6ec <vTaskDelete+0x58>
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6da:	2201      	movs	r2, #1
 800c6dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c6e0:	43da      	mvns	r2, r3
 800c6e2:	4b2d      	ldr	r3, [pc, #180]	; (800c798 <vTaskDelete+0x104>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	4a2b      	ldr	r2, [pc, #172]	; (800c798 <vTaskDelete+0x104>)
 800c6ea:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d004      	beq.n	800c6fe <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	3318      	adds	r3, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f7ff f82c 	bl	800b756 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c6fe:	4b27      	ldr	r3, [pc, #156]	; (800c79c <vTaskDelete+0x108>)
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	3301      	adds	r3, #1
 800c704:	4a25      	ldr	r2, [pc, #148]	; (800c79c <vTaskDelete+0x108>)
 800c706:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c708:	4b21      	ldr	r3, [pc, #132]	; (800c790 <vTaskDelete+0xfc>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	68fa      	ldr	r2, [r7, #12]
 800c70e:	429a      	cmp	r2, r3
 800c710:	d10b      	bne.n	800c72a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3304      	adds	r3, #4
 800c716:	4619      	mov	r1, r3
 800c718:	4821      	ldr	r0, [pc, #132]	; (800c7a0 <vTaskDelete+0x10c>)
 800c71a:	f7fe ffbf 	bl	800b69c <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c71e:	4b21      	ldr	r3, [pc, #132]	; (800c7a4 <vTaskDelete+0x110>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	3301      	adds	r3, #1
 800c724:	4a1f      	ldr	r2, [pc, #124]	; (800c7a4 <vTaskDelete+0x110>)
 800c726:	6013      	str	r3, [r2, #0]
 800c728:	e009      	b.n	800c73e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c72a:	4b1f      	ldr	r3, [pc, #124]	; (800c7a8 <vTaskDelete+0x114>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	3b01      	subs	r3, #1
 800c730:	4a1d      	ldr	r2, [pc, #116]	; (800c7a8 <vTaskDelete+0x114>)
 800c732:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f000 fcc9 	bl	800d0cc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c73a:	f000 fcfd 	bl	800d138 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c73e:	f001 f899 	bl	800d874 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c742:	4b1a      	ldr	r3, [pc, #104]	; (800c7ac <vTaskDelete+0x118>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d01d      	beq.n	800c786 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800c74a:	4b11      	ldr	r3, [pc, #68]	; (800c790 <vTaskDelete+0xfc>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	429a      	cmp	r2, r3
 800c752:	d118      	bne.n	800c786 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c754:	4b16      	ldr	r3, [pc, #88]	; (800c7b0 <vTaskDelete+0x11c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00c      	beq.n	800c776 <vTaskDelete+0xe2>
	__asm volatile
 800c75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c760:	b672      	cpsid	i
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	b662      	cpsie	i
 800c770:	60bb      	str	r3, [r7, #8]
}
 800c772:	bf00      	nop
 800c774:	e7fe      	b.n	800c774 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c776:	4b0f      	ldr	r3, [pc, #60]	; (800c7b4 <vTaskDelete+0x120>)
 800c778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c77c:	601a      	str	r2, [r3, #0]
 800c77e:	f3bf 8f4f 	dsb	sy
 800c782:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c786:	bf00      	nop
 800c788:	3710      	adds	r7, #16
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}
 800c78e:	bf00      	nop
 800c790:	20000cac 	.word	0x20000cac
 800c794:	20000cb0 	.word	0x20000cb0
 800c798:	20000db4 	.word	0x20000db4
 800c79c:	20000dc8 	.word	0x20000dc8
 800c7a0:	20000d80 	.word	0x20000d80
 800c7a4:	20000d94 	.word	0x20000d94
 800c7a8:	20000dac 	.word	0x20000dac
 800c7ac:	20000db8 	.word	0x20000db8
 800c7b0:	20000dd4 	.word	0x20000dd4
 800c7b4:	e000ed04 	.word	0xe000ed04

0800c7b8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b08a      	sub	sp, #40	; 0x28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10c      	bne.n	800c7e6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c7cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d0:	b672      	cpsid	i
 800c7d2:	f383 8811 	msr	BASEPRI, r3
 800c7d6:	f3bf 8f6f 	isb	sy
 800c7da:	f3bf 8f4f 	dsb	sy
 800c7de:	b662      	cpsie	i
 800c7e0:	617b      	str	r3, [r7, #20]
}
 800c7e2:	bf00      	nop
 800c7e4:	e7fe      	b.n	800c7e4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d10c      	bne.n	800c806 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	b672      	cpsid	i
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	b662      	cpsie	i
 800c800:	613b      	str	r3, [r7, #16]
}
 800c802:	bf00      	nop
 800c804:	e7fe      	b.n	800c804 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c806:	4b2b      	ldr	r3, [pc, #172]	; (800c8b4 <vTaskDelayUntil+0xfc>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d00c      	beq.n	800c828 <vTaskDelayUntil+0x70>
	__asm volatile
 800c80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c812:	b672      	cpsid	i
 800c814:	f383 8811 	msr	BASEPRI, r3
 800c818:	f3bf 8f6f 	isb	sy
 800c81c:	f3bf 8f4f 	dsb	sy
 800c820:	b662      	cpsie	i
 800c822:	60fb      	str	r3, [r7, #12]
}
 800c824:	bf00      	nop
 800c826:	e7fe      	b.n	800c826 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c828:	f000 f8ee 	bl	800ca08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c82c:	4b22      	ldr	r3, [pc, #136]	; (800c8b8 <vTaskDelayUntil+0x100>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	683a      	ldr	r2, [r7, #0]
 800c838:	4413      	add	r3, r2
 800c83a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	6a3a      	ldr	r2, [r7, #32]
 800c842:	429a      	cmp	r2, r3
 800c844:	d20b      	bcs.n	800c85e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	69fa      	ldr	r2, [r7, #28]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d211      	bcs.n	800c874 <vTaskDelayUntil+0xbc>
 800c850:	69fa      	ldr	r2, [r7, #28]
 800c852:	6a3b      	ldr	r3, [r7, #32]
 800c854:	429a      	cmp	r2, r3
 800c856:	d90d      	bls.n	800c874 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c858:	2301      	movs	r3, #1
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
 800c85c:	e00a      	b.n	800c874 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	69fa      	ldr	r2, [r7, #28]
 800c864:	429a      	cmp	r2, r3
 800c866:	d303      	bcc.n	800c870 <vTaskDelayUntil+0xb8>
 800c868:	69fa      	ldr	r2, [r7, #28]
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d901      	bls.n	800c874 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c870:	2301      	movs	r3, #1
 800c872:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	69fa      	ldr	r2, [r7, #28]
 800c878:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d006      	beq.n	800c88e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c880:	69fa      	ldr	r2, [r7, #28]
 800c882:	6a3b      	ldr	r3, [r7, #32]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2100      	movs	r1, #0
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 fe4f 	bl	800d52c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c88e:	f000 f8c9 	bl	800ca24 <xTaskResumeAll>
 800c892:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c894:	69bb      	ldr	r3, [r7, #24]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d107      	bne.n	800c8aa <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c89a:	4b08      	ldr	r3, [pc, #32]	; (800c8bc <vTaskDelayUntil+0x104>)
 800c89c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8a0:	601a      	str	r2, [r3, #0]
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8aa:	bf00      	nop
 800c8ac:	3728      	adds	r7, #40	; 0x28
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20000dd4 	.word	0x20000dd4
 800c8b8:	20000db0 	.word	0x20000db0
 800c8bc:	e000ed04 	.word	0xe000ed04

0800c8c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d019      	beq.n	800c906 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8d2:	4b14      	ldr	r3, [pc, #80]	; (800c924 <vTaskDelay+0x64>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00c      	beq.n	800c8f4 <vTaskDelay+0x34>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	b672      	cpsid	i
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	b662      	cpsie	i
 800c8ee:	60bb      	str	r3, [r7, #8]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c8f4:	f000 f888 	bl	800ca08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f000 fe16 	bl	800d52c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c900:	f000 f890 	bl	800ca24 <xTaskResumeAll>
 800c904:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d107      	bne.n	800c91c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c90c:	4b06      	ldr	r3, [pc, #24]	; (800c928 <vTaskDelay+0x68>)
 800c90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c912:	601a      	str	r2, [r3, #0]
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c91c:	bf00      	nop
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20000dd4 	.word	0x20000dd4
 800c928:	e000ed04 	.word	0xe000ed04

0800c92c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b08a      	sub	sp, #40	; 0x28
 800c930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c932:	2300      	movs	r3, #0
 800c934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c93a:	463a      	mov	r2, r7
 800c93c:	1d39      	adds	r1, r7, #4
 800c93e:	f107 0308 	add.w	r3, r7, #8
 800c942:	4618      	mov	r0, r3
 800c944:	f7f3 fe36 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c948:	6839      	ldr	r1, [r7, #0]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	9202      	str	r2, [sp, #8]
 800c950:	9301      	str	r3, [sp, #4]
 800c952:	2300      	movs	r3, #0
 800c954:	9300      	str	r3, [sp, #0]
 800c956:	2300      	movs	r3, #0
 800c958:	460a      	mov	r2, r1
 800c95a:	4923      	ldr	r1, [pc, #140]	; (800c9e8 <vTaskStartScheduler+0xbc>)
 800c95c:	4823      	ldr	r0, [pc, #140]	; (800c9ec <vTaskStartScheduler+0xc0>)
 800c95e:	f7ff fce7 	bl	800c330 <xTaskCreateStatic>
 800c962:	4603      	mov	r3, r0
 800c964:	4a22      	ldr	r2, [pc, #136]	; (800c9f0 <vTaskStartScheduler+0xc4>)
 800c966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c968:	4b21      	ldr	r3, [pc, #132]	; (800c9f0 <vTaskStartScheduler+0xc4>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c970:	2301      	movs	r3, #1
 800c972:	617b      	str	r3, [r7, #20]
 800c974:	e001      	b.n	800c97a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c976:	2300      	movs	r3, #0
 800c978:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d11d      	bne.n	800c9bc <vTaskStartScheduler+0x90>
	__asm volatile
 800c980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c984:	b672      	cpsid	i
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	b662      	cpsie	i
 800c994:	613b      	str	r3, [r7, #16]
}
 800c996:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c998:	4b16      	ldr	r3, [pc, #88]	; (800c9f4 <vTaskStartScheduler+0xc8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	334c      	adds	r3, #76	; 0x4c
 800c99e:	4a16      	ldr	r2, [pc, #88]	; (800c9f8 <vTaskStartScheduler+0xcc>)
 800c9a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9a2:	4b16      	ldr	r3, [pc, #88]	; (800c9fc <vTaskStartScheduler+0xd0>)
 800c9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9aa:	4b15      	ldr	r3, [pc, #84]	; (800ca00 <vTaskStartScheduler+0xd4>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9b0:	4b14      	ldr	r3, [pc, #80]	; (800ca04 <vTaskStartScheduler+0xd8>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9b6:	f000 feab 	bl	800d710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9ba:	e010      	b.n	800c9de <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c2:	d10c      	bne.n	800c9de <vTaskStartScheduler+0xb2>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	b672      	cpsid	i
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	b662      	cpsie	i
 800c9d8:	60fb      	str	r3, [r7, #12]
}
 800c9da:	bf00      	nop
 800c9dc:	e7fe      	b.n	800c9dc <vTaskStartScheduler+0xb0>
}
 800c9de:	bf00      	nop
 800c9e0:	3718      	adds	r7, #24
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}
 800c9e6:	bf00      	nop
 800c9e8:	0800e8fc 	.word	0x0800e8fc
 800c9ec:	0800cfc1 	.word	0x0800cfc1
 800c9f0:	20000dd0 	.word	0x20000dd0
 800c9f4:	20000cac 	.word	0x20000cac
 800c9f8:	2000004c 	.word	0x2000004c
 800c9fc:	20000dcc 	.word	0x20000dcc
 800ca00:	20000db8 	.word	0x20000db8
 800ca04:	20000db0 	.word	0x20000db0

0800ca08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca08:	b480      	push	{r7}
 800ca0a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ca0c:	4b04      	ldr	r3, [pc, #16]	; (800ca20 <vTaskSuspendAll+0x18>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	3301      	adds	r3, #1
 800ca12:	4a03      	ldr	r2, [pc, #12]	; (800ca20 <vTaskSuspendAll+0x18>)
 800ca14:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca16:	bf00      	nop
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr
 800ca20:	20000dd4 	.word	0x20000dd4

0800ca24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca32:	4b42      	ldr	r3, [pc, #264]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d10c      	bne.n	800ca54 <xTaskResumeAll+0x30>
	__asm volatile
 800ca3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3e:	b672      	cpsid	i
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	b662      	cpsie	i
 800ca4e:	603b      	str	r3, [r7, #0]
}
 800ca50:	bf00      	nop
 800ca52:	e7fe      	b.n	800ca52 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca54:	f000 feda 	bl	800d80c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca58:	4b38      	ldr	r3, [pc, #224]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	3b01      	subs	r3, #1
 800ca5e:	4a37      	ldr	r2, [pc, #220]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca62:	4b36      	ldr	r3, [pc, #216]	; (800cb3c <xTaskResumeAll+0x118>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d161      	bne.n	800cb2e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca6a:	4b35      	ldr	r3, [pc, #212]	; (800cb40 <xTaskResumeAll+0x11c>)
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d05d      	beq.n	800cb2e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca72:	e02e      	b.n	800cad2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca74:	4b33      	ldr	r3, [pc, #204]	; (800cb44 <xTaskResumeAll+0x120>)
 800ca76:	68db      	ldr	r3, [r3, #12]
 800ca78:	68db      	ldr	r3, [r3, #12]
 800ca7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	3318      	adds	r3, #24
 800ca80:	4618      	mov	r0, r3
 800ca82:	f7fe fe68 	bl	800b756 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	3304      	adds	r3, #4
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fe63 	bl	800b756 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca94:	2201      	movs	r2, #1
 800ca96:	409a      	lsls	r2, r3
 800ca98:	4b2b      	ldr	r3, [pc, #172]	; (800cb48 <xTaskResumeAll+0x124>)
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4313      	orrs	r3, r2
 800ca9e:	4a2a      	ldr	r2, [pc, #168]	; (800cb48 <xTaskResumeAll+0x124>)
 800caa0:	6013      	str	r3, [r2, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caa6:	4613      	mov	r3, r2
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	009b      	lsls	r3, r3, #2
 800caae:	4a27      	ldr	r2, [pc, #156]	; (800cb4c <xTaskResumeAll+0x128>)
 800cab0:	441a      	add	r2, r3
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	3304      	adds	r3, #4
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7fe fdef 	bl	800b69c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cac2:	4b23      	ldr	r3, [pc, #140]	; (800cb50 <xTaskResumeAll+0x12c>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac8:	429a      	cmp	r2, r3
 800caca:	d302      	bcc.n	800cad2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cacc:	4b21      	ldr	r3, [pc, #132]	; (800cb54 <xTaskResumeAll+0x130>)
 800cace:	2201      	movs	r2, #1
 800cad0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cad2:	4b1c      	ldr	r3, [pc, #112]	; (800cb44 <xTaskResumeAll+0x120>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1cc      	bne.n	800ca74 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cae0:	f000 fb2a 	bl	800d138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cae4:	4b1c      	ldr	r3, [pc, #112]	; (800cb58 <xTaskResumeAll+0x134>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d010      	beq.n	800cb12 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800caf0:	f000 f836 	bl	800cb60 <xTaskIncrementTick>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d002      	beq.n	800cb00 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cafa:	4b16      	ldr	r3, [pc, #88]	; (800cb54 <xTaskResumeAll+0x130>)
 800cafc:	2201      	movs	r2, #1
 800cafe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	3b01      	subs	r3, #1
 800cb04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1f1      	bne.n	800caf0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800cb0c:	4b12      	ldr	r3, [pc, #72]	; (800cb58 <xTaskResumeAll+0x134>)
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb12:	4b10      	ldr	r3, [pc, #64]	; (800cb54 <xTaskResumeAll+0x130>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d009      	beq.n	800cb2e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb1e:	4b0f      	ldr	r3, [pc, #60]	; (800cb5c <xTaskResumeAll+0x138>)
 800cb20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	f3bf 8f4f 	dsb	sy
 800cb2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb2e:	f000 fea1 	bl	800d874 <vPortExitCritical>

	return xAlreadyYielded;
 800cb32:	68bb      	ldr	r3, [r7, #8]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}
 800cb3c:	20000dd4 	.word	0x20000dd4
 800cb40:	20000dac 	.word	0x20000dac
 800cb44:	20000d6c 	.word	0x20000d6c
 800cb48:	20000db4 	.word	0x20000db4
 800cb4c:	20000cb0 	.word	0x20000cb0
 800cb50:	20000cac 	.word	0x20000cac
 800cb54:	20000dc0 	.word	0x20000dc0
 800cb58:	20000dbc 	.word	0x20000dbc
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b086      	sub	sp, #24
 800cb64:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb66:	2300      	movs	r3, #0
 800cb68:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb6a:	4b4f      	ldr	r3, [pc, #316]	; (800cca8 <xTaskIncrementTick+0x148>)
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f040 808a 	bne.w	800cc88 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb74:	4b4d      	ldr	r3, [pc, #308]	; (800ccac <xTaskIncrementTick+0x14c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb7c:	4a4b      	ldr	r2, [pc, #300]	; (800ccac <xTaskIncrementTick+0x14c>)
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d122      	bne.n	800cbce <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb88:	4b49      	ldr	r3, [pc, #292]	; (800ccb0 <xTaskIncrementTick+0x150>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00c      	beq.n	800cbac <xTaskIncrementTick+0x4c>
	__asm volatile
 800cb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb96:	b672      	cpsid	i
 800cb98:	f383 8811 	msr	BASEPRI, r3
 800cb9c:	f3bf 8f6f 	isb	sy
 800cba0:	f3bf 8f4f 	dsb	sy
 800cba4:	b662      	cpsie	i
 800cba6:	603b      	str	r3, [r7, #0]
}
 800cba8:	bf00      	nop
 800cbaa:	e7fe      	b.n	800cbaa <xTaskIncrementTick+0x4a>
 800cbac:	4b40      	ldr	r3, [pc, #256]	; (800ccb0 <xTaskIncrementTick+0x150>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	60fb      	str	r3, [r7, #12]
 800cbb2:	4b40      	ldr	r3, [pc, #256]	; (800ccb4 <xTaskIncrementTick+0x154>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	4a3e      	ldr	r2, [pc, #248]	; (800ccb0 <xTaskIncrementTick+0x150>)
 800cbb8:	6013      	str	r3, [r2, #0]
 800cbba:	4a3e      	ldr	r2, [pc, #248]	; (800ccb4 <xTaskIncrementTick+0x154>)
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	6013      	str	r3, [r2, #0]
 800cbc0:	4b3d      	ldr	r3, [pc, #244]	; (800ccb8 <xTaskIncrementTick+0x158>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	4a3c      	ldr	r2, [pc, #240]	; (800ccb8 <xTaskIncrementTick+0x158>)
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	f000 fab5 	bl	800d138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbce:	4b3b      	ldr	r3, [pc, #236]	; (800ccbc <xTaskIncrementTick+0x15c>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	693a      	ldr	r2, [r7, #16]
 800cbd4:	429a      	cmp	r2, r3
 800cbd6:	d348      	bcc.n	800cc6a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbd8:	4b35      	ldr	r3, [pc, #212]	; (800ccb0 <xTaskIncrementTick+0x150>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d104      	bne.n	800cbec <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbe2:	4b36      	ldr	r3, [pc, #216]	; (800ccbc <xTaskIncrementTick+0x15c>)
 800cbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe8:	601a      	str	r2, [r3, #0]
					break;
 800cbea:	e03e      	b.n	800cc6a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbec:	4b30      	ldr	r3, [pc, #192]	; (800ccb0 <xTaskIncrementTick+0x150>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d203      	bcs.n	800cc0c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc04:	4a2d      	ldr	r2, [pc, #180]	; (800ccbc <xTaskIncrementTick+0x15c>)
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc0a:	e02e      	b.n	800cc6a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc0c:	68bb      	ldr	r3, [r7, #8]
 800cc0e:	3304      	adds	r3, #4
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7fe fda0 	bl	800b756 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d004      	beq.n	800cc28 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	3318      	adds	r3, #24
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7fe fd97 	bl	800b756 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc2c:	2201      	movs	r2, #1
 800cc2e:	409a      	lsls	r2, r3
 800cc30:	4b23      	ldr	r3, [pc, #140]	; (800ccc0 <xTaskIncrementTick+0x160>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	4a22      	ldr	r2, [pc, #136]	; (800ccc0 <xTaskIncrementTick+0x160>)
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc3e:	4613      	mov	r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4413      	add	r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	4a1f      	ldr	r2, [pc, #124]	; (800ccc4 <xTaskIncrementTick+0x164>)
 800cc48:	441a      	add	r2, r3
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4610      	mov	r0, r2
 800cc52:	f7fe fd23 	bl	800b69c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc56:	68bb      	ldr	r3, [r7, #8]
 800cc58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc5a:	4b1b      	ldr	r3, [pc, #108]	; (800ccc8 <xTaskIncrementTick+0x168>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d3b9      	bcc.n	800cbd8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800cc64:	2301      	movs	r3, #1
 800cc66:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc68:	e7b6      	b.n	800cbd8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc6a:	4b17      	ldr	r3, [pc, #92]	; (800ccc8 <xTaskIncrementTick+0x168>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc70:	4914      	ldr	r1, [pc, #80]	; (800ccc4 <xTaskIncrementTick+0x164>)
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	440b      	add	r3, r1
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b01      	cmp	r3, #1
 800cc80:	d907      	bls.n	800cc92 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800cc82:	2301      	movs	r3, #1
 800cc84:	617b      	str	r3, [r7, #20]
 800cc86:	e004      	b.n	800cc92 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cc88:	4b10      	ldr	r3, [pc, #64]	; (800cccc <xTaskIncrementTick+0x16c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	4a0f      	ldr	r2, [pc, #60]	; (800cccc <xTaskIncrementTick+0x16c>)
 800cc90:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cc92:	4b0f      	ldr	r3, [pc, #60]	; (800ccd0 <xTaskIncrementTick+0x170>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cc9e:	697b      	ldr	r3, [r7, #20]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3718      	adds	r7, #24
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	20000dd4 	.word	0x20000dd4
 800ccac:	20000db0 	.word	0x20000db0
 800ccb0:	20000d64 	.word	0x20000d64
 800ccb4:	20000d68 	.word	0x20000d68
 800ccb8:	20000dc4 	.word	0x20000dc4
 800ccbc:	20000dcc 	.word	0x20000dcc
 800ccc0:	20000db4 	.word	0x20000db4
 800ccc4:	20000cb0 	.word	0x20000cb0
 800ccc8:	20000cac 	.word	0x20000cac
 800cccc:	20000dbc 	.word	0x20000dbc
 800ccd0:	20000dc0 	.word	0x20000dc0

0800ccd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b087      	sub	sp, #28
 800ccd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccda:	4b2a      	ldr	r3, [pc, #168]	; (800cd84 <vTaskSwitchContext+0xb0>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d003      	beq.n	800ccea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cce2:	4b29      	ldr	r3, [pc, #164]	; (800cd88 <vTaskSwitchContext+0xb4>)
 800cce4:	2201      	movs	r2, #1
 800cce6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cce8:	e046      	b.n	800cd78 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800ccea:	4b27      	ldr	r3, [pc, #156]	; (800cd88 <vTaskSwitchContext+0xb4>)
 800ccec:	2200      	movs	r2, #0
 800ccee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccf0:	4b26      	ldr	r3, [pc, #152]	; (800cd8c <vTaskSwitchContext+0xb8>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	fab3 f383 	clz	r3, r3
 800ccfc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ccfe:	7afb      	ldrb	r3, [r7, #11]
 800cd00:	f1c3 031f 	rsb	r3, r3, #31
 800cd04:	617b      	str	r3, [r7, #20]
 800cd06:	4922      	ldr	r1, [pc, #136]	; (800cd90 <vTaskSwitchContext+0xbc>)
 800cd08:	697a      	ldr	r2, [r7, #20]
 800cd0a:	4613      	mov	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	4413      	add	r3, r2
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	440b      	add	r3, r1
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10c      	bne.n	800cd34 <vTaskSwitchContext+0x60>
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd1e:	b672      	cpsid	i
 800cd20:	f383 8811 	msr	BASEPRI, r3
 800cd24:	f3bf 8f6f 	isb	sy
 800cd28:	f3bf 8f4f 	dsb	sy
 800cd2c:	b662      	cpsie	i
 800cd2e:	607b      	str	r3, [r7, #4]
}
 800cd30:	bf00      	nop
 800cd32:	e7fe      	b.n	800cd32 <vTaskSwitchContext+0x5e>
 800cd34:	697a      	ldr	r2, [r7, #20]
 800cd36:	4613      	mov	r3, r2
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4a14      	ldr	r2, [pc, #80]	; (800cd90 <vTaskSwitchContext+0xbc>)
 800cd40:	4413      	add	r3, r2
 800cd42:	613b      	str	r3, [r7, #16]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	685b      	ldr	r3, [r3, #4]
 800cd48:	685a      	ldr	r2, [r3, #4]
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	605a      	str	r2, [r3, #4]
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	685a      	ldr	r2, [r3, #4]
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	3308      	adds	r3, #8
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d104      	bne.n	800cd64 <vTaskSwitchContext+0x90>
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	685a      	ldr	r2, [r3, #4]
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	605a      	str	r2, [r3, #4]
 800cd64:	693b      	ldr	r3, [r7, #16]
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	4a0a      	ldr	r2, [pc, #40]	; (800cd94 <vTaskSwitchContext+0xc0>)
 800cd6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd6e:	4b09      	ldr	r3, [pc, #36]	; (800cd94 <vTaskSwitchContext+0xc0>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	334c      	adds	r3, #76	; 0x4c
 800cd74:	4a08      	ldr	r2, [pc, #32]	; (800cd98 <vTaskSwitchContext+0xc4>)
 800cd76:	6013      	str	r3, [r2, #0]
}
 800cd78:	bf00      	nop
 800cd7a:	371c      	adds	r7, #28
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr
 800cd84:	20000dd4 	.word	0x20000dd4
 800cd88:	20000dc0 	.word	0x20000dc0
 800cd8c:	20000db4 	.word	0x20000db4
 800cd90:	20000cb0 	.word	0x20000cb0
 800cd94:	20000cac 	.word	0x20000cac
 800cd98:	2000004c 	.word	0x2000004c

0800cd9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10c      	bne.n	800cdc6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb0:	b672      	cpsid	i
 800cdb2:	f383 8811 	msr	BASEPRI, r3
 800cdb6:	f3bf 8f6f 	isb	sy
 800cdba:	f3bf 8f4f 	dsb	sy
 800cdbe:	b662      	cpsie	i
 800cdc0:	60fb      	str	r3, [r7, #12]
}
 800cdc2:	bf00      	nop
 800cdc4:	e7fe      	b.n	800cdc4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdc6:	4b07      	ldr	r3, [pc, #28]	; (800cde4 <vTaskPlaceOnEventList+0x48>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	3318      	adds	r3, #24
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7fe fc88 	bl	800b6e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdd4:	2101      	movs	r1, #1
 800cdd6:	6838      	ldr	r0, [r7, #0]
 800cdd8:	f000 fba8 	bl	800d52c <prvAddCurrentTaskToDelayedList>
}
 800cddc:	bf00      	nop
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	20000cac 	.word	0x20000cac

0800cde8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10c      	bne.n	800ce18 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	b672      	cpsid	i
 800ce04:	f383 8811 	msr	BASEPRI, r3
 800ce08:	f3bf 8f6f 	isb	sy
 800ce0c:	f3bf 8f4f 	dsb	sy
 800ce10:	b662      	cpsie	i
 800ce12:	60fb      	str	r3, [r7, #12]
}
 800ce14:	bf00      	nop
 800ce16:	e7fe      	b.n	800ce16 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce18:	693b      	ldr	r3, [r7, #16]
 800ce1a:	3318      	adds	r3, #24
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7fe fc9a 	bl	800b756 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce22:	4b1d      	ldr	r3, [pc, #116]	; (800ce98 <xTaskRemoveFromEventList+0xb0>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d11c      	bne.n	800ce64 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	3304      	adds	r3, #4
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fe fc91 	bl	800b756 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce34:	693b      	ldr	r3, [r7, #16]
 800ce36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce38:	2201      	movs	r2, #1
 800ce3a:	409a      	lsls	r2, r3
 800ce3c:	4b17      	ldr	r3, [pc, #92]	; (800ce9c <xTaskRemoveFromEventList+0xb4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4313      	orrs	r3, r2
 800ce42:	4a16      	ldr	r2, [pc, #88]	; (800ce9c <xTaskRemoveFromEventList+0xb4>)
 800ce44:	6013      	str	r3, [r2, #0]
 800ce46:	693b      	ldr	r3, [r7, #16]
 800ce48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	4a13      	ldr	r2, [pc, #76]	; (800cea0 <xTaskRemoveFromEventList+0xb8>)
 800ce54:	441a      	add	r2, r3
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	3304      	adds	r3, #4
 800ce5a:	4619      	mov	r1, r3
 800ce5c:	4610      	mov	r0, r2
 800ce5e:	f7fe fc1d 	bl	800b69c <vListInsertEnd>
 800ce62:	e005      	b.n	800ce70 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce64:	693b      	ldr	r3, [r7, #16]
 800ce66:	3318      	adds	r3, #24
 800ce68:	4619      	mov	r1, r3
 800ce6a:	480e      	ldr	r0, [pc, #56]	; (800cea4 <xTaskRemoveFromEventList+0xbc>)
 800ce6c:	f7fe fc16 	bl	800b69c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce74:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <xTaskRemoveFromEventList+0xc0>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7a:	429a      	cmp	r2, r3
 800ce7c:	d905      	bls.n	800ce8a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce7e:	2301      	movs	r3, #1
 800ce80:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce82:	4b0a      	ldr	r3, [pc, #40]	; (800ceac <xTaskRemoveFromEventList+0xc4>)
 800ce84:	2201      	movs	r2, #1
 800ce86:	601a      	str	r2, [r3, #0]
 800ce88:	e001      	b.n	800ce8e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce8e:	697b      	ldr	r3, [r7, #20]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3718      	adds	r7, #24
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20000dd4 	.word	0x20000dd4
 800ce9c:	20000db4 	.word	0x20000db4
 800cea0:	20000cb0 	.word	0x20000cb0
 800cea4:	20000d6c 	.word	0x20000d6c
 800cea8:	20000cac 	.word	0x20000cac
 800ceac:	20000dc0 	.word	0x20000dc0

0800ceb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	b083      	sub	sp, #12
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ceb8:	4b06      	ldr	r3, [pc, #24]	; (800ced4 <vTaskInternalSetTimeOutState+0x24>)
 800ceba:	681a      	ldr	r2, [r3, #0]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cec0:	4b05      	ldr	r3, [pc, #20]	; (800ced8 <vTaskInternalSetTimeOutState+0x28>)
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	605a      	str	r2, [r3, #4]
}
 800cec8:	bf00      	nop
 800ceca:	370c      	adds	r7, #12
 800cecc:	46bd      	mov	sp, r7
 800cece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced2:	4770      	bx	lr
 800ced4:	20000dc4 	.word	0x20000dc4
 800ced8:	20000db0 	.word	0x20000db0

0800cedc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b088      	sub	sp, #32
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d10c      	bne.n	800cf06 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ceec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef0:	b672      	cpsid	i
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	b662      	cpsie	i
 800cf00:	613b      	str	r3, [r7, #16]
}
 800cf02:	bf00      	nop
 800cf04:	e7fe      	b.n	800cf04 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d10c      	bne.n	800cf26 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cf0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf10:	b672      	cpsid	i
 800cf12:	f383 8811 	msr	BASEPRI, r3
 800cf16:	f3bf 8f6f 	isb	sy
 800cf1a:	f3bf 8f4f 	dsb	sy
 800cf1e:	b662      	cpsie	i
 800cf20:	60fb      	str	r3, [r7, #12]
}
 800cf22:	bf00      	nop
 800cf24:	e7fe      	b.n	800cf24 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cf26:	f000 fc71 	bl	800d80c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf2a:	4b1d      	ldr	r3, [pc, #116]	; (800cfa0 <xTaskCheckForTimeOut+0xc4>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	685b      	ldr	r3, [r3, #4]
 800cf34:	69ba      	ldr	r2, [r7, #24]
 800cf36:	1ad3      	subs	r3, r2, r3
 800cf38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf42:	d102      	bne.n	800cf4a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf44:	2300      	movs	r3, #0
 800cf46:	61fb      	str	r3, [r7, #28]
 800cf48:	e023      	b.n	800cf92 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	4b15      	ldr	r3, [pc, #84]	; (800cfa4 <xTaskCheckForTimeOut+0xc8>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d007      	beq.n	800cf66 <xTaskCheckForTimeOut+0x8a>
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	685b      	ldr	r3, [r3, #4]
 800cf5a:	69ba      	ldr	r2, [r7, #24]
 800cf5c:	429a      	cmp	r2, r3
 800cf5e:	d302      	bcc.n	800cf66 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf60:	2301      	movs	r3, #1
 800cf62:	61fb      	str	r3, [r7, #28]
 800cf64:	e015      	b.n	800cf92 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	697a      	ldr	r2, [r7, #20]
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d20b      	bcs.n	800cf88 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	1ad2      	subs	r2, r2, r3
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff ff97 	bl	800ceb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf82:	2300      	movs	r3, #0
 800cf84:	61fb      	str	r3, [r7, #28]
 800cf86:	e004      	b.n	800cf92 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf92:	f000 fc6f 	bl	800d874 <vPortExitCritical>

	return xReturn;
 800cf96:	69fb      	ldr	r3, [r7, #28]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3720      	adds	r7, #32
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	20000db0 	.word	0x20000db0
 800cfa4:	20000dc4 	.word	0x20000dc4

0800cfa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cfac:	4b03      	ldr	r3, [pc, #12]	; (800cfbc <vTaskMissedYield+0x14>)
 800cfae:	2201      	movs	r2, #1
 800cfb0:	601a      	str	r2, [r3, #0]
}
 800cfb2:	bf00      	nop
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr
 800cfbc:	20000dc0 	.word	0x20000dc0

0800cfc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cfc0:	b580      	push	{r7, lr}
 800cfc2:	b082      	sub	sp, #8
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cfc8:	f000 f852 	bl	800d070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfcc:	4b06      	ldr	r3, [pc, #24]	; (800cfe8 <prvIdleTask+0x28>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d9f9      	bls.n	800cfc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <prvIdleTask+0x2c>)
 800cfd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfda:	601a      	str	r2, [r3, #0]
 800cfdc:	f3bf 8f4f 	dsb	sy
 800cfe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfe4:	e7f0      	b.n	800cfc8 <prvIdleTask+0x8>
 800cfe6:	bf00      	nop
 800cfe8:	20000cb0 	.word	0x20000cb0
 800cfec:	e000ed04 	.word	0xe000ed04

0800cff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b082      	sub	sp, #8
 800cff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cff6:	2300      	movs	r3, #0
 800cff8:	607b      	str	r3, [r7, #4]
 800cffa:	e00c      	b.n	800d016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	4613      	mov	r3, r2
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4413      	add	r3, r2
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4a12      	ldr	r2, [pc, #72]	; (800d050 <prvInitialiseTaskLists+0x60>)
 800d008:	4413      	add	r3, r2
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7fe fb19 	bl	800b642 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	3301      	adds	r3, #1
 800d014:	607b      	str	r3, [r7, #4]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b06      	cmp	r3, #6
 800d01a:	d9ef      	bls.n	800cffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d01c:	480d      	ldr	r0, [pc, #52]	; (800d054 <prvInitialiseTaskLists+0x64>)
 800d01e:	f7fe fb10 	bl	800b642 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d022:	480d      	ldr	r0, [pc, #52]	; (800d058 <prvInitialiseTaskLists+0x68>)
 800d024:	f7fe fb0d 	bl	800b642 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d028:	480c      	ldr	r0, [pc, #48]	; (800d05c <prvInitialiseTaskLists+0x6c>)
 800d02a:	f7fe fb0a 	bl	800b642 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d02e:	480c      	ldr	r0, [pc, #48]	; (800d060 <prvInitialiseTaskLists+0x70>)
 800d030:	f7fe fb07 	bl	800b642 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d034:	480b      	ldr	r0, [pc, #44]	; (800d064 <prvInitialiseTaskLists+0x74>)
 800d036:	f7fe fb04 	bl	800b642 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d03a:	4b0b      	ldr	r3, [pc, #44]	; (800d068 <prvInitialiseTaskLists+0x78>)
 800d03c:	4a05      	ldr	r2, [pc, #20]	; (800d054 <prvInitialiseTaskLists+0x64>)
 800d03e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d040:	4b0a      	ldr	r3, [pc, #40]	; (800d06c <prvInitialiseTaskLists+0x7c>)
 800d042:	4a05      	ldr	r2, [pc, #20]	; (800d058 <prvInitialiseTaskLists+0x68>)
 800d044:	601a      	str	r2, [r3, #0]
}
 800d046:	bf00      	nop
 800d048:	3708      	adds	r7, #8
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}
 800d04e:	bf00      	nop
 800d050:	20000cb0 	.word	0x20000cb0
 800d054:	20000d3c 	.word	0x20000d3c
 800d058:	20000d50 	.word	0x20000d50
 800d05c:	20000d6c 	.word	0x20000d6c
 800d060:	20000d80 	.word	0x20000d80
 800d064:	20000d98 	.word	0x20000d98
 800d068:	20000d64 	.word	0x20000d64
 800d06c:	20000d68 	.word	0x20000d68

0800d070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d076:	e019      	b.n	800d0ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d078:	f000 fbc8 	bl	800d80c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d07c:	4b10      	ldr	r3, [pc, #64]	; (800d0c0 <prvCheckTasksWaitingTermination+0x50>)
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	3304      	adds	r3, #4
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fe fb64 	bl	800b756 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d08e:	4b0d      	ldr	r3, [pc, #52]	; (800d0c4 <prvCheckTasksWaitingTermination+0x54>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	3b01      	subs	r3, #1
 800d094:	4a0b      	ldr	r2, [pc, #44]	; (800d0c4 <prvCheckTasksWaitingTermination+0x54>)
 800d096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d098:	4b0b      	ldr	r3, [pc, #44]	; (800d0c8 <prvCheckTasksWaitingTermination+0x58>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3b01      	subs	r3, #1
 800d09e:	4a0a      	ldr	r2, [pc, #40]	; (800d0c8 <prvCheckTasksWaitingTermination+0x58>)
 800d0a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0a2:	f000 fbe7 	bl	800d874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f810 	bl	800d0cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0ac:	4b06      	ldr	r3, [pc, #24]	; (800d0c8 <prvCheckTasksWaitingTermination+0x58>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1e1      	bne.n	800d078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d0b4:	bf00      	nop
 800d0b6:	bf00      	nop
 800d0b8:	3708      	adds	r7, #8
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20000d80 	.word	0x20000d80
 800d0c4:	20000dac 	.word	0x20000dac
 800d0c8:	20000d94 	.word	0x20000d94

0800d0cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	334c      	adds	r3, #76	; 0x4c
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f000 ff47 	bl	800df6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d108      	bne.n	800d0fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f000 fd3f 	bl	800db70 <vPortFree>
				vPortFree( pxTCB );
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fd3c 	bl	800db70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0f8:	e01a      	b.n	800d130 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d100:	2b01      	cmp	r3, #1
 800d102:	d103      	bne.n	800d10c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 fd33 	bl	800db70 <vPortFree>
	}
 800d10a:	e011      	b.n	800d130 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d112:	2b02      	cmp	r3, #2
 800d114:	d00c      	beq.n	800d130 <prvDeleteTCB+0x64>
	__asm volatile
 800d116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d11a:	b672      	cpsid	i
 800d11c:	f383 8811 	msr	BASEPRI, r3
 800d120:	f3bf 8f6f 	isb	sy
 800d124:	f3bf 8f4f 	dsb	sy
 800d128:	b662      	cpsie	i
 800d12a:	60fb      	str	r3, [r7, #12]
}
 800d12c:	bf00      	nop
 800d12e:	e7fe      	b.n	800d12e <prvDeleteTCB+0x62>
	}
 800d130:	bf00      	nop
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d13e:	4b0c      	ldr	r3, [pc, #48]	; (800d170 <prvResetNextTaskUnblockTime+0x38>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d104      	bne.n	800d152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d148:	4b0a      	ldr	r3, [pc, #40]	; (800d174 <prvResetNextTaskUnblockTime+0x3c>)
 800d14a:	f04f 32ff 	mov.w	r2, #4294967295
 800d14e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d150:	e008      	b.n	800d164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d152:	4b07      	ldr	r3, [pc, #28]	; (800d170 <prvResetNextTaskUnblockTime+0x38>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	68db      	ldr	r3, [r3, #12]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	4a04      	ldr	r2, [pc, #16]	; (800d174 <prvResetNextTaskUnblockTime+0x3c>)
 800d162:	6013      	str	r3, [r2, #0]
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr
 800d170:	20000d64 	.word	0x20000d64
 800d174:	20000dcc 	.word	0x20000dcc

0800d178 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d178:	b480      	push	{r7}
 800d17a:	b083      	sub	sp, #12
 800d17c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d17e:	4b0b      	ldr	r3, [pc, #44]	; (800d1ac <xTaskGetSchedulerState+0x34>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d102      	bne.n	800d18c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d186:	2301      	movs	r3, #1
 800d188:	607b      	str	r3, [r7, #4]
 800d18a:	e008      	b.n	800d19e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d18c:	4b08      	ldr	r3, [pc, #32]	; (800d1b0 <xTaskGetSchedulerState+0x38>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d102      	bne.n	800d19a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d194:	2302      	movs	r3, #2
 800d196:	607b      	str	r3, [r7, #4]
 800d198:	e001      	b.n	800d19e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d19a:	2300      	movs	r3, #0
 800d19c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d19e:	687b      	ldr	r3, [r7, #4]
	}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	370c      	adds	r7, #12
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr
 800d1ac:	20000db8 	.word	0x20000db8
 800d1b0:	20000dd4 	.word	0x20000dd4

0800d1b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d069      	beq.n	800d29e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ce:	4b36      	ldr	r3, [pc, #216]	; (800d2a8 <xTaskPriorityInherit+0xf4>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d259      	bcs.n	800d28c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	699b      	ldr	r3, [r3, #24]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	db06      	blt.n	800d1ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1e0:	4b31      	ldr	r3, [pc, #196]	; (800d2a8 <xTaskPriorityInherit+0xf4>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e6:	f1c3 0207 	rsb	r2, r3, #7
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	6959      	ldr	r1, [r3, #20]
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4a2b      	ldr	r2, [pc, #172]	; (800d2ac <xTaskPriorityInherit+0xf8>)
 800d200:	4413      	add	r3, r2
 800d202:	4299      	cmp	r1, r3
 800d204:	d13a      	bne.n	800d27c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	3304      	adds	r3, #4
 800d20a:	4618      	mov	r0, r3
 800d20c:	f7fe faa3 	bl	800b756 <uxListRemove>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d115      	bne.n	800d242 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21a:	4924      	ldr	r1, [pc, #144]	; (800d2ac <xTaskPriorityInherit+0xf8>)
 800d21c:	4613      	mov	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	440b      	add	r3, r1
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d10a      	bne.n	800d242 <xTaskPriorityInherit+0x8e>
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d230:	2201      	movs	r2, #1
 800d232:	fa02 f303 	lsl.w	r3, r2, r3
 800d236:	43da      	mvns	r2, r3
 800d238:	4b1d      	ldr	r3, [pc, #116]	; (800d2b0 <xTaskPriorityInherit+0xfc>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4013      	ands	r3, r2
 800d23e:	4a1c      	ldr	r2, [pc, #112]	; (800d2b0 <xTaskPriorityInherit+0xfc>)
 800d240:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d242:	4b19      	ldr	r3, [pc, #100]	; (800d2a8 <xTaskPriorityInherit+0xf4>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d24c:	68bb      	ldr	r3, [r7, #8]
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	2201      	movs	r2, #1
 800d252:	409a      	lsls	r2, r3
 800d254:	4b16      	ldr	r3, [pc, #88]	; (800d2b0 <xTaskPriorityInherit+0xfc>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4313      	orrs	r3, r2
 800d25a:	4a15      	ldr	r2, [pc, #84]	; (800d2b0 <xTaskPriorityInherit+0xfc>)
 800d25c:	6013      	str	r3, [r2, #0]
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d262:	4613      	mov	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	4413      	add	r3, r2
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4a10      	ldr	r2, [pc, #64]	; (800d2ac <xTaskPriorityInherit+0xf8>)
 800d26c:	441a      	add	r2, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	3304      	adds	r3, #4
 800d272:	4619      	mov	r1, r3
 800d274:	4610      	mov	r0, r2
 800d276:	f7fe fa11 	bl	800b69c <vListInsertEnd>
 800d27a:	e004      	b.n	800d286 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d27c:	4b0a      	ldr	r3, [pc, #40]	; (800d2a8 <xTaskPriorityInherit+0xf4>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d286:	2301      	movs	r3, #1
 800d288:	60fb      	str	r3, [r7, #12]
 800d28a:	e008      	b.n	800d29e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d290:	4b05      	ldr	r3, [pc, #20]	; (800d2a8 <xTaskPriorityInherit+0xf4>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d296:	429a      	cmp	r2, r3
 800d298:	d201      	bcs.n	800d29e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d29a:	2301      	movs	r3, #1
 800d29c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d29e:	68fb      	ldr	r3, [r7, #12]
	}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3710      	adds	r7, #16
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20000cac 	.word	0x20000cac
 800d2ac:	20000cb0 	.word	0x20000cb0
 800d2b0:	20000db4 	.word	0x20000db4

0800d2b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b086      	sub	sp, #24
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d072      	beq.n	800d3b0 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2ca:	4b3c      	ldr	r3, [pc, #240]	; (800d3bc <xTaskPriorityDisinherit+0x108>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d00c      	beq.n	800d2ee <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d8:	b672      	cpsid	i
 800d2da:	f383 8811 	msr	BASEPRI, r3
 800d2de:	f3bf 8f6f 	isb	sy
 800d2e2:	f3bf 8f4f 	dsb	sy
 800d2e6:	b662      	cpsie	i
 800d2e8:	60fb      	str	r3, [r7, #12]
}
 800d2ea:	bf00      	nop
 800d2ec:	e7fe      	b.n	800d2ec <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d10c      	bne.n	800d310 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2fa:	b672      	cpsid	i
 800d2fc:	f383 8811 	msr	BASEPRI, r3
 800d300:	f3bf 8f6f 	isb	sy
 800d304:	f3bf 8f4f 	dsb	sy
 800d308:	b662      	cpsie	i
 800d30a:	60bb      	str	r3, [r7, #8]
}
 800d30c:	bf00      	nop
 800d30e:	e7fe      	b.n	800d30e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d314:	1e5a      	subs	r2, r3, #1
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d322:	429a      	cmp	r2, r3
 800d324:	d044      	beq.n	800d3b0 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d140      	bne.n	800d3b0 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	3304      	adds	r3, #4
 800d332:	4618      	mov	r0, r3
 800d334:	f7fe fa0f 	bl	800b756 <uxListRemove>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d115      	bne.n	800d36a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d342:	491f      	ldr	r1, [pc, #124]	; (800d3c0 <xTaskPriorityDisinherit+0x10c>)
 800d344:	4613      	mov	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d10a      	bne.n	800d36a <xTaskPriorityDisinherit+0xb6>
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	2201      	movs	r2, #1
 800d35a:	fa02 f303 	lsl.w	r3, r2, r3
 800d35e:	43da      	mvns	r2, r3
 800d360:	4b18      	ldr	r3, [pc, #96]	; (800d3c4 <xTaskPriorityDisinherit+0x110>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4013      	ands	r3, r2
 800d366:	4a17      	ldr	r2, [pc, #92]	; (800d3c4 <xTaskPriorityDisinherit+0x110>)
 800d368:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d372:	693b      	ldr	r3, [r7, #16]
 800d374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d376:	f1c3 0207 	rsb	r2, r3, #7
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d382:	2201      	movs	r2, #1
 800d384:	409a      	lsls	r2, r3
 800d386:	4b0f      	ldr	r3, [pc, #60]	; (800d3c4 <xTaskPriorityDisinherit+0x110>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	4313      	orrs	r3, r2
 800d38c:	4a0d      	ldr	r2, [pc, #52]	; (800d3c4 <xTaskPriorityDisinherit+0x110>)
 800d38e:	6013      	str	r3, [r2, #0]
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	4a08      	ldr	r2, [pc, #32]	; (800d3c0 <xTaskPriorityDisinherit+0x10c>)
 800d39e:	441a      	add	r2, r3
 800d3a0:	693b      	ldr	r3, [r7, #16]
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	4610      	mov	r0, r2
 800d3a8:	f7fe f978 	bl	800b69c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3ac:	2301      	movs	r3, #1
 800d3ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d3b0:	697b      	ldr	r3, [r7, #20]
	}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3718      	adds	r7, #24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	20000cac 	.word	0x20000cac
 800d3c0:	20000cb0 	.word	0x20000cb0
 800d3c4:	20000db4 	.word	0x20000db4

0800d3c8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b088      	sub	sp, #32
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 8087 	beq.w	800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10c      	bne.n	800d404 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ee:	b672      	cpsid	i
 800d3f0:	f383 8811 	msr	BASEPRI, r3
 800d3f4:	f3bf 8f6f 	isb	sy
 800d3f8:	f3bf 8f4f 	dsb	sy
 800d3fc:	b662      	cpsie	i
 800d3fe:	60fb      	str	r3, [r7, #12]
}
 800d400:	bf00      	nop
 800d402:	e7fe      	b.n	800d402 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d408:	683a      	ldr	r2, [r7, #0]
 800d40a:	429a      	cmp	r2, r3
 800d40c:	d902      	bls.n	800d414 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d40e:	683b      	ldr	r3, [r7, #0]
 800d410:	61fb      	str	r3, [r7, #28]
 800d412:	e002      	b.n	800d41a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d418:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41e:	69fa      	ldr	r2, [r7, #28]
 800d420:	429a      	cmp	r2, r3
 800d422:	d065      	beq.n	800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d424:	69bb      	ldr	r3, [r7, #24]
 800d426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d428:	697a      	ldr	r2, [r7, #20]
 800d42a:	429a      	cmp	r2, r3
 800d42c:	d160      	bne.n	800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d42e:	4b32      	ldr	r3, [pc, #200]	; (800d4f8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	69ba      	ldr	r2, [r7, #24]
 800d434:	429a      	cmp	r2, r3
 800d436:	d10c      	bne.n	800d452 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43c:	b672      	cpsid	i
 800d43e:	f383 8811 	msr	BASEPRI, r3
 800d442:	f3bf 8f6f 	isb	sy
 800d446:	f3bf 8f4f 	dsb	sy
 800d44a:	b662      	cpsie	i
 800d44c:	60bb      	str	r3, [r7, #8]
}
 800d44e:	bf00      	nop
 800d450:	e7fe      	b.n	800d450 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d456:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d45e:	69bb      	ldr	r3, [r7, #24]
 800d460:	699b      	ldr	r3, [r3, #24]
 800d462:	2b00      	cmp	r3, #0
 800d464:	db04      	blt.n	800d470 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	f1c3 0207 	rsb	r2, r3, #7
 800d46c:	69bb      	ldr	r3, [r7, #24]
 800d46e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	6959      	ldr	r1, [r3, #20]
 800d474:	693a      	ldr	r2, [r7, #16]
 800d476:	4613      	mov	r3, r2
 800d478:	009b      	lsls	r3, r3, #2
 800d47a:	4413      	add	r3, r2
 800d47c:	009b      	lsls	r3, r3, #2
 800d47e:	4a1f      	ldr	r2, [pc, #124]	; (800d4fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d480:	4413      	add	r3, r2
 800d482:	4299      	cmp	r1, r3
 800d484:	d134      	bne.n	800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	3304      	adds	r3, #4
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe f963 	bl	800b756 <uxListRemove>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d115      	bne.n	800d4c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d49a:	4918      	ldr	r1, [pc, #96]	; (800d4fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d49c:	4613      	mov	r3, r2
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	4413      	add	r3, r2
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	440b      	add	r3, r1
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d4ac:	69bb      	ldr	r3, [r7, #24]
 800d4ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d4b6:	43da      	mvns	r2, r3
 800d4b8:	4b11      	ldr	r3, [pc, #68]	; (800d500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	4013      	ands	r3, r2
 800d4be:	4a10      	ldr	r2, [pc, #64]	; (800d500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d4c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	409a      	lsls	r2, r3
 800d4ca:	4b0d      	ldr	r3, [pc, #52]	; (800d500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	4a0b      	ldr	r2, [pc, #44]	; (800d500 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d4d2:	6013      	str	r3, [r2, #0]
 800d4d4:	69bb      	ldr	r3, [r7, #24]
 800d4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d8:	4613      	mov	r3, r2
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	4413      	add	r3, r2
 800d4de:	009b      	lsls	r3, r3, #2
 800d4e0:	4a06      	ldr	r2, [pc, #24]	; (800d4fc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d4e2:	441a      	add	r2, r3
 800d4e4:	69bb      	ldr	r3, [r7, #24]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	4610      	mov	r0, r2
 800d4ec:	f7fe f8d6 	bl	800b69c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d4f0:	bf00      	nop
 800d4f2:	3720      	adds	r7, #32
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	20000cac 	.word	0x20000cac
 800d4fc:	20000cb0 	.word	0x20000cb0
 800d500:	20000db4 	.word	0x20000db4

0800d504 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d504:	b480      	push	{r7}
 800d506:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d508:	4b07      	ldr	r3, [pc, #28]	; (800d528 <pvTaskIncrementMutexHeldCount+0x24>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d004      	beq.n	800d51a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d510:	4b05      	ldr	r3, [pc, #20]	; (800d528 <pvTaskIncrementMutexHeldCount+0x24>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d516:	3201      	adds	r2, #1
 800d518:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d51a:	4b03      	ldr	r3, [pc, #12]	; (800d528 <pvTaskIncrementMutexHeldCount+0x24>)
 800d51c:	681b      	ldr	r3, [r3, #0]
	}
 800d51e:	4618      	mov	r0, r3
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr
 800d528:	20000cac 	.word	0x20000cac

0800d52c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d536:	4b29      	ldr	r3, [pc, #164]	; (800d5dc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d53c:	4b28      	ldr	r3, [pc, #160]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	3304      	adds	r3, #4
 800d542:	4618      	mov	r0, r3
 800d544:	f7fe f907 	bl	800b756 <uxListRemove>
 800d548:	4603      	mov	r3, r0
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d10b      	bne.n	800d566 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d54e:	4b24      	ldr	r3, [pc, #144]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d554:	2201      	movs	r2, #1
 800d556:	fa02 f303 	lsl.w	r3, r2, r3
 800d55a:	43da      	mvns	r2, r3
 800d55c:	4b21      	ldr	r3, [pc, #132]	; (800d5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	4013      	ands	r3, r2
 800d562:	4a20      	ldr	r2, [pc, #128]	; (800d5e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d564:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d56c:	d10a      	bne.n	800d584 <prvAddCurrentTaskToDelayedList+0x58>
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	2b00      	cmp	r3, #0
 800d572:	d007      	beq.n	800d584 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d574:	4b1a      	ldr	r3, [pc, #104]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	3304      	adds	r3, #4
 800d57a:	4619      	mov	r1, r3
 800d57c:	481a      	ldr	r0, [pc, #104]	; (800d5e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d57e:	f7fe f88d 	bl	800b69c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d582:	e026      	b.n	800d5d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d584:	68fa      	ldr	r2, [r7, #12]
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	4413      	add	r3, r2
 800d58a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d58c:	4b14      	ldr	r3, [pc, #80]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68ba      	ldr	r2, [r7, #8]
 800d592:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d594:	68ba      	ldr	r2, [r7, #8]
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	429a      	cmp	r2, r3
 800d59a:	d209      	bcs.n	800d5b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d59c:	4b13      	ldr	r3, [pc, #76]	; (800d5ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800d59e:	681a      	ldr	r2, [r3, #0]
 800d5a0:	4b0f      	ldr	r3, [pc, #60]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	f7fe f89b 	bl	800b6e4 <vListInsert>
}
 800d5ae:	e010      	b.n	800d5d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5b0:	4b0f      	ldr	r3, [pc, #60]	; (800d5f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d5b2:	681a      	ldr	r2, [r3, #0]
 800d5b4:	4b0a      	ldr	r3, [pc, #40]	; (800d5e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	3304      	adds	r3, #4
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4610      	mov	r0, r2
 800d5be:	f7fe f891 	bl	800b6e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d5c2:	4b0c      	ldr	r3, [pc, #48]	; (800d5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d202      	bcs.n	800d5d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d5cc:	4a09      	ldr	r2, [pc, #36]	; (800d5f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	6013      	str	r3, [r2, #0]
}
 800d5d2:	bf00      	nop
 800d5d4:	3710      	adds	r7, #16
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}
 800d5da:	bf00      	nop
 800d5dc:	20000db0 	.word	0x20000db0
 800d5e0:	20000cac 	.word	0x20000cac
 800d5e4:	20000db4 	.word	0x20000db4
 800d5e8:	20000d98 	.word	0x20000d98
 800d5ec:	20000d68 	.word	0x20000d68
 800d5f0:	20000d64 	.word	0x20000d64
 800d5f4:	20000dcc 	.word	0x20000dcc

0800d5f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	b085      	sub	sp, #20
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	60f8      	str	r0, [r7, #12]
 800d600:	60b9      	str	r1, [r7, #8]
 800d602:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	3b04      	subs	r3, #4
 800d608:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	3b04      	subs	r3, #4
 800d616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d618:	68bb      	ldr	r3, [r7, #8]
 800d61a:	f023 0201 	bic.w	r2, r3, #1
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3b04      	subs	r3, #4
 800d626:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d628:	4a0c      	ldr	r2, [pc, #48]	; (800d65c <pxPortInitialiseStack+0x64>)
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	3b14      	subs	r3, #20
 800d632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	3b04      	subs	r3, #4
 800d63e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	f06f 0202 	mvn.w	r2, #2
 800d646:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	3b20      	subs	r3, #32
 800d64c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d64e:	68fb      	ldr	r3, [r7, #12]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3714      	adds	r7, #20
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr
 800d65c:	0800d661 	.word	0x0800d661

0800d660 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d666:	2300      	movs	r3, #0
 800d668:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d66a:	4b14      	ldr	r3, [pc, #80]	; (800d6bc <prvTaskExitError+0x5c>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d672:	d00c      	beq.n	800d68e <prvTaskExitError+0x2e>
	__asm volatile
 800d674:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d678:	b672      	cpsid	i
 800d67a:	f383 8811 	msr	BASEPRI, r3
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f3bf 8f4f 	dsb	sy
 800d686:	b662      	cpsie	i
 800d688:	60fb      	str	r3, [r7, #12]
}
 800d68a:	bf00      	nop
 800d68c:	e7fe      	b.n	800d68c <prvTaskExitError+0x2c>
	__asm volatile
 800d68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d692:	b672      	cpsid	i
 800d694:	f383 8811 	msr	BASEPRI, r3
 800d698:	f3bf 8f6f 	isb	sy
 800d69c:	f3bf 8f4f 	dsb	sy
 800d6a0:	b662      	cpsie	i
 800d6a2:	60bb      	str	r3, [r7, #8]
}
 800d6a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6a6:	bf00      	nop
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d0fc      	beq.n	800d6a8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6ae:	bf00      	nop
 800d6b0:	bf00      	nop
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	20000048 	.word	0x20000048

0800d6c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d6c0:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <pxCurrentTCBConst2>)
 800d6c2:	6819      	ldr	r1, [r3, #0]
 800d6c4:	6808      	ldr	r0, [r1, #0]
 800d6c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6ca:	f380 8809 	msr	PSP, r0
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f04f 0000 	mov.w	r0, #0
 800d6d6:	f380 8811 	msr	BASEPRI, r0
 800d6da:	4770      	bx	lr
 800d6dc:	f3af 8000 	nop.w

0800d6e0 <pxCurrentTCBConst2>:
 800d6e0:	20000cac 	.word	0x20000cac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop

0800d6e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d6e8:	4808      	ldr	r0, [pc, #32]	; (800d70c <prvPortStartFirstTask+0x24>)
 800d6ea:	6800      	ldr	r0, [r0, #0]
 800d6ec:	6800      	ldr	r0, [r0, #0]
 800d6ee:	f380 8808 	msr	MSP, r0
 800d6f2:	f04f 0000 	mov.w	r0, #0
 800d6f6:	f380 8814 	msr	CONTROL, r0
 800d6fa:	b662      	cpsie	i
 800d6fc:	b661      	cpsie	f
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	f3bf 8f6f 	isb	sy
 800d706:	df00      	svc	0
 800d708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d70a:	bf00      	nop
 800d70c:	e000ed08 	.word	0xe000ed08

0800d710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b084      	sub	sp, #16
 800d714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d716:	4b37      	ldr	r3, [pc, #220]	; (800d7f4 <xPortStartScheduler+0xe4>)
 800d718:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	b2db      	uxtb	r3, r3
 800d720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	22ff      	movs	r2, #255	; 0xff
 800d726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	4b2f      	ldr	r3, [pc, #188]	; (800d7f8 <xPortStartScheduler+0xe8>)
 800d73c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d73e:	4b2f      	ldr	r3, [pc, #188]	; (800d7fc <xPortStartScheduler+0xec>)
 800d740:	2207      	movs	r2, #7
 800d742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d744:	e009      	b.n	800d75a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d746:	4b2d      	ldr	r3, [pc, #180]	; (800d7fc <xPortStartScheduler+0xec>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	3b01      	subs	r3, #1
 800d74c:	4a2b      	ldr	r2, [pc, #172]	; (800d7fc <xPortStartScheduler+0xec>)
 800d74e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d750:	78fb      	ldrb	r3, [r7, #3]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	b2db      	uxtb	r3, r3
 800d758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d75a:	78fb      	ldrb	r3, [r7, #3]
 800d75c:	b2db      	uxtb	r3, r3
 800d75e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d762:	2b80      	cmp	r3, #128	; 0x80
 800d764:	d0ef      	beq.n	800d746 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d766:	4b25      	ldr	r3, [pc, #148]	; (800d7fc <xPortStartScheduler+0xec>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f1c3 0307 	rsb	r3, r3, #7
 800d76e:	2b04      	cmp	r3, #4
 800d770:	d00c      	beq.n	800d78c <xPortStartScheduler+0x7c>
	__asm volatile
 800d772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d776:	b672      	cpsid	i
 800d778:	f383 8811 	msr	BASEPRI, r3
 800d77c:	f3bf 8f6f 	isb	sy
 800d780:	f3bf 8f4f 	dsb	sy
 800d784:	b662      	cpsie	i
 800d786:	60bb      	str	r3, [r7, #8]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d78c:	4b1b      	ldr	r3, [pc, #108]	; (800d7fc <xPortStartScheduler+0xec>)
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	021b      	lsls	r3, r3, #8
 800d792:	4a1a      	ldr	r2, [pc, #104]	; (800d7fc <xPortStartScheduler+0xec>)
 800d794:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d796:	4b19      	ldr	r3, [pc, #100]	; (800d7fc <xPortStartScheduler+0xec>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d79e:	4a17      	ldr	r2, [pc, #92]	; (800d7fc <xPortStartScheduler+0xec>)
 800d7a0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7aa:	4b15      	ldr	r3, [pc, #84]	; (800d800 <xPortStartScheduler+0xf0>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a14      	ldr	r2, [pc, #80]	; (800d800 <xPortStartScheduler+0xf0>)
 800d7b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d7b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7b6:	4b12      	ldr	r3, [pc, #72]	; (800d800 <xPortStartScheduler+0xf0>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4a11      	ldr	r2, [pc, #68]	; (800d800 <xPortStartScheduler+0xf0>)
 800d7bc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d7c0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7c2:	f000 f8dd 	bl	800d980 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7c6:	4b0f      	ldr	r3, [pc, #60]	; (800d804 <xPortStartScheduler+0xf4>)
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7cc:	f000 f8fc 	bl	800d9c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7d0:	4b0d      	ldr	r3, [pc, #52]	; (800d808 <xPortStartScheduler+0xf8>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a0c      	ldr	r2, [pc, #48]	; (800d808 <xPortStartScheduler+0xf8>)
 800d7d6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7da:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7dc:	f7ff ff84 	bl	800d6e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7e0:	f7ff fa78 	bl	800ccd4 <vTaskSwitchContext>
	prvTaskExitError();
 800d7e4:	f7ff ff3c 	bl	800d660 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}
 800d7f2:	bf00      	nop
 800d7f4:	e000e400 	.word	0xe000e400
 800d7f8:	20000dd8 	.word	0x20000dd8
 800d7fc:	20000ddc 	.word	0x20000ddc
 800d800:	e000ed20 	.word	0xe000ed20
 800d804:	20000048 	.word	0x20000048
 800d808:	e000ef34 	.word	0xe000ef34

0800d80c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d80c:	b480      	push	{r7}
 800d80e:	b083      	sub	sp, #12
 800d810:	af00      	add	r7, sp, #0
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	b672      	cpsid	i
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	b662      	cpsie	i
 800d826:	607b      	str	r3, [r7, #4]
}
 800d828:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <vPortEnterCritical+0x60>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3301      	adds	r3, #1
 800d830:	4a0e      	ldr	r2, [pc, #56]	; (800d86c <vPortEnterCritical+0x60>)
 800d832:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d834:	4b0d      	ldr	r3, [pc, #52]	; (800d86c <vPortEnterCritical+0x60>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d111      	bne.n	800d860 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d83c:	4b0c      	ldr	r3, [pc, #48]	; (800d870 <vPortEnterCritical+0x64>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	b2db      	uxtb	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	d00c      	beq.n	800d860 <vPortEnterCritical+0x54>
	__asm volatile
 800d846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d84a:	b672      	cpsid	i
 800d84c:	f383 8811 	msr	BASEPRI, r3
 800d850:	f3bf 8f6f 	isb	sy
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	b662      	cpsie	i
 800d85a:	603b      	str	r3, [r7, #0]
}
 800d85c:	bf00      	nop
 800d85e:	e7fe      	b.n	800d85e <vPortEnterCritical+0x52>
	}
}
 800d860:	bf00      	nop
 800d862:	370c      	adds	r7, #12
 800d864:	46bd      	mov	sp, r7
 800d866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86a:	4770      	bx	lr
 800d86c:	20000048 	.word	0x20000048
 800d870:	e000ed04 	.word	0xe000ed04

0800d874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d874:	b480      	push	{r7}
 800d876:	b083      	sub	sp, #12
 800d878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d87a:	4b13      	ldr	r3, [pc, #76]	; (800d8c8 <vPortExitCritical+0x54>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d10c      	bne.n	800d89c <vPortExitCritical+0x28>
	__asm volatile
 800d882:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d886:	b672      	cpsid	i
 800d888:	f383 8811 	msr	BASEPRI, r3
 800d88c:	f3bf 8f6f 	isb	sy
 800d890:	f3bf 8f4f 	dsb	sy
 800d894:	b662      	cpsie	i
 800d896:	607b      	str	r3, [r7, #4]
}
 800d898:	bf00      	nop
 800d89a:	e7fe      	b.n	800d89a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d89c:	4b0a      	ldr	r3, [pc, #40]	; (800d8c8 <vPortExitCritical+0x54>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	4a09      	ldr	r2, [pc, #36]	; (800d8c8 <vPortExitCritical+0x54>)
 800d8a4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8a6:	4b08      	ldr	r3, [pc, #32]	; (800d8c8 <vPortExitCritical+0x54>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d105      	bne.n	800d8ba <vPortExitCritical+0x46>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d8b8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8ba:	bf00      	nop
 800d8bc:	370c      	adds	r7, #12
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr
 800d8c6:	bf00      	nop
 800d8c8:	20000048 	.word	0x20000048
 800d8cc:	00000000 	.word	0x00000000

0800d8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8d0:	f3ef 8009 	mrs	r0, PSP
 800d8d4:	f3bf 8f6f 	isb	sy
 800d8d8:	4b15      	ldr	r3, [pc, #84]	; (800d930 <pxCurrentTCBConst>)
 800d8da:	681a      	ldr	r2, [r3, #0]
 800d8dc:	f01e 0f10 	tst.w	lr, #16
 800d8e0:	bf08      	it	eq
 800d8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ea:	6010      	str	r0, [r2, #0]
 800d8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8f4:	b672      	cpsid	i
 800d8f6:	f380 8811 	msr	BASEPRI, r0
 800d8fa:	f3bf 8f4f 	dsb	sy
 800d8fe:	f3bf 8f6f 	isb	sy
 800d902:	b662      	cpsie	i
 800d904:	f7ff f9e6 	bl	800ccd4 <vTaskSwitchContext>
 800d908:	f04f 0000 	mov.w	r0, #0
 800d90c:	f380 8811 	msr	BASEPRI, r0
 800d910:	bc09      	pop	{r0, r3}
 800d912:	6819      	ldr	r1, [r3, #0]
 800d914:	6808      	ldr	r0, [r1, #0]
 800d916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d91a:	f01e 0f10 	tst.w	lr, #16
 800d91e:	bf08      	it	eq
 800d920:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d924:	f380 8809 	msr	PSP, r0
 800d928:	f3bf 8f6f 	isb	sy
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop

0800d930 <pxCurrentTCBConst>:
 800d930:	20000cac 	.word	0x20000cac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d934:	bf00      	nop
 800d936:	bf00      	nop

0800d938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
	__asm volatile
 800d93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d942:	b672      	cpsid	i
 800d944:	f383 8811 	msr	BASEPRI, r3
 800d948:	f3bf 8f6f 	isb	sy
 800d94c:	f3bf 8f4f 	dsb	sy
 800d950:	b662      	cpsie	i
 800d952:	607b      	str	r3, [r7, #4]
}
 800d954:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d956:	f7ff f903 	bl	800cb60 <xTaskIncrementTick>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d003      	beq.n	800d968 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d960:	4b06      	ldr	r3, [pc, #24]	; (800d97c <SysTick_Handler+0x44>)
 800d962:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d966:	601a      	str	r2, [r3, #0]
 800d968:	2300      	movs	r3, #0
 800d96a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	f383 8811 	msr	BASEPRI, r3
}
 800d972:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}
 800d97c:	e000ed04 	.word	0xe000ed04

0800d980 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d980:	b480      	push	{r7}
 800d982:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d984:	4b0b      	ldr	r3, [pc, #44]	; (800d9b4 <vPortSetupTimerInterrupt+0x34>)
 800d986:	2200      	movs	r2, #0
 800d988:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d98a:	4b0b      	ldr	r3, [pc, #44]	; (800d9b8 <vPortSetupTimerInterrupt+0x38>)
 800d98c:	2200      	movs	r2, #0
 800d98e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d990:	4b0a      	ldr	r3, [pc, #40]	; (800d9bc <vPortSetupTimerInterrupt+0x3c>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	4a0a      	ldr	r2, [pc, #40]	; (800d9c0 <vPortSetupTimerInterrupt+0x40>)
 800d996:	fba2 2303 	umull	r2, r3, r2, r3
 800d99a:	099b      	lsrs	r3, r3, #6
 800d99c:	4a09      	ldr	r2, [pc, #36]	; (800d9c4 <vPortSetupTimerInterrupt+0x44>)
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9a2:	4b04      	ldr	r3, [pc, #16]	; (800d9b4 <vPortSetupTimerInterrupt+0x34>)
 800d9a4:	2207      	movs	r2, #7
 800d9a6:	601a      	str	r2, [r3, #0]
}
 800d9a8:	bf00      	nop
 800d9aa:	46bd      	mov	sp, r7
 800d9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b0:	4770      	bx	lr
 800d9b2:	bf00      	nop
 800d9b4:	e000e010 	.word	0xe000e010
 800d9b8:	e000e018 	.word	0xe000e018
 800d9bc:	2000003c 	.word	0x2000003c
 800d9c0:	10624dd3 	.word	0x10624dd3
 800d9c4:	e000e014 	.word	0xe000e014

0800d9c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9c8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9d8 <vPortEnableVFP+0x10>
 800d9cc:	6801      	ldr	r1, [r0, #0]
 800d9ce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9d2:	6001      	str	r1, [r0, #0]
 800d9d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9d6:	bf00      	nop
 800d9d8:	e000ed88 	.word	0xe000ed88

0800d9dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b08a      	sub	sp, #40	; 0x28
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d9e8:	f7ff f80e 	bl	800ca08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d9ec:	4b5b      	ldr	r3, [pc, #364]	; (800db5c <pvPortMalloc+0x180>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d101      	bne.n	800d9f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d9f4:	f000 f91a 	bl	800dc2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d9f8:	4b59      	ldr	r3, [pc, #356]	; (800db60 <pvPortMalloc+0x184>)
 800d9fa:	681a      	ldr	r2, [r3, #0]
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4013      	ands	r3, r2
 800da00:	2b00      	cmp	r3, #0
 800da02:	f040 8092 	bne.w	800db2a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d01f      	beq.n	800da4c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800da0c:	2208      	movs	r2, #8
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	4413      	add	r3, r2
 800da12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f003 0307 	and.w	r3, r3, #7
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d016      	beq.n	800da4c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f023 0307 	bic.w	r3, r3, #7
 800da24:	3308      	adds	r3, #8
 800da26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f003 0307 	and.w	r3, r3, #7
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00c      	beq.n	800da4c <pvPortMalloc+0x70>
	__asm volatile
 800da32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da36:	b672      	cpsid	i
 800da38:	f383 8811 	msr	BASEPRI, r3
 800da3c:	f3bf 8f6f 	isb	sy
 800da40:	f3bf 8f4f 	dsb	sy
 800da44:	b662      	cpsie	i
 800da46:	617b      	str	r3, [r7, #20]
}
 800da48:	bf00      	nop
 800da4a:	e7fe      	b.n	800da4a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d06b      	beq.n	800db2a <pvPortMalloc+0x14e>
 800da52:	4b44      	ldr	r3, [pc, #272]	; (800db64 <pvPortMalloc+0x188>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d866      	bhi.n	800db2a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800da5c:	4b42      	ldr	r3, [pc, #264]	; (800db68 <pvPortMalloc+0x18c>)
 800da5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800da60:	4b41      	ldr	r3, [pc, #260]	; (800db68 <pvPortMalloc+0x18c>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da66:	e004      	b.n	800da72 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800da68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800da6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	685b      	ldr	r3, [r3, #4]
 800da76:	687a      	ldr	r2, [r7, #4]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d903      	bls.n	800da84 <pvPortMalloc+0xa8>
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d1f1      	bne.n	800da68 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800da84:	4b35      	ldr	r3, [pc, #212]	; (800db5c <pvPortMalloc+0x180>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d04d      	beq.n	800db2a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	2208      	movs	r2, #8
 800da94:	4413      	add	r3, r2
 800da96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800da98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da9a:	681a      	ldr	r2, [r3, #0]
 800da9c:	6a3b      	ldr	r3, [r7, #32]
 800da9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800daa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daa2:	685a      	ldr	r2, [r3, #4]
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	1ad2      	subs	r2, r2, r3
 800daa8:	2308      	movs	r3, #8
 800daaa:	005b      	lsls	r3, r3, #1
 800daac:	429a      	cmp	r2, r3
 800daae:	d921      	bls.n	800daf4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4413      	add	r3, r2
 800dab6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dab8:	69bb      	ldr	r3, [r7, #24]
 800daba:	f003 0307 	and.w	r3, r3, #7
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00c      	beq.n	800dadc <pvPortMalloc+0x100>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac6:	b672      	cpsid	i
 800dac8:	f383 8811 	msr	BASEPRI, r3
 800dacc:	f3bf 8f6f 	isb	sy
 800dad0:	f3bf 8f4f 	dsb	sy
 800dad4:	b662      	cpsie	i
 800dad6:	613b      	str	r3, [r7, #16]
}
 800dad8:	bf00      	nop
 800dada:	e7fe      	b.n	800dada <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	685a      	ldr	r2, [r3, #4]
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	1ad2      	subs	r2, r2, r3
 800dae4:	69bb      	ldr	r3, [r7, #24]
 800dae6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800daee:	69b8      	ldr	r0, [r7, #24]
 800daf0:	f000 f8fe 	bl	800dcf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800daf4:	4b1b      	ldr	r3, [pc, #108]	; (800db64 <pvPortMalloc+0x188>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	1ad3      	subs	r3, r2, r3
 800dafe:	4a19      	ldr	r2, [pc, #100]	; (800db64 <pvPortMalloc+0x188>)
 800db00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db02:	4b18      	ldr	r3, [pc, #96]	; (800db64 <pvPortMalloc+0x188>)
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	4b19      	ldr	r3, [pc, #100]	; (800db6c <pvPortMalloc+0x190>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d203      	bcs.n	800db16 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db0e:	4b15      	ldr	r3, [pc, #84]	; (800db64 <pvPortMalloc+0x188>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	4a16      	ldr	r2, [pc, #88]	; (800db6c <pvPortMalloc+0x190>)
 800db14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db18:	685a      	ldr	r2, [r3, #4]
 800db1a:	4b11      	ldr	r3, [pc, #68]	; (800db60 <pvPortMalloc+0x184>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	431a      	orrs	r2, r3
 800db20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db26:	2200      	movs	r2, #0
 800db28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db2a:	f7fe ff7b 	bl	800ca24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db2e:	69fb      	ldr	r3, [r7, #28]
 800db30:	f003 0307 	and.w	r3, r3, #7
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00c      	beq.n	800db52 <pvPortMalloc+0x176>
	__asm volatile
 800db38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db3c:	b672      	cpsid	i
 800db3e:	f383 8811 	msr	BASEPRI, r3
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	f3bf 8f4f 	dsb	sy
 800db4a:	b662      	cpsie	i
 800db4c:	60fb      	str	r3, [r7, #12]
}
 800db4e:	bf00      	nop
 800db50:	e7fe      	b.n	800db50 <pvPortMalloc+0x174>
	return pvReturn;
 800db52:	69fb      	ldr	r3, [r7, #28]
}
 800db54:	4618      	mov	r0, r3
 800db56:	3728      	adds	r7, #40	; 0x28
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	200049e8 	.word	0x200049e8
 800db60:	200049f4 	.word	0x200049f4
 800db64:	200049ec 	.word	0x200049ec
 800db68:	200049e0 	.word	0x200049e0
 800db6c:	200049f0 	.word	0x200049f0

0800db70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d04c      	beq.n	800dc1c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800db82:	2308      	movs	r3, #8
 800db84:	425b      	negs	r3, r3
 800db86:	697a      	ldr	r2, [r7, #20]
 800db88:	4413      	add	r3, r2
 800db8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	685a      	ldr	r2, [r3, #4]
 800db94:	4b23      	ldr	r3, [pc, #140]	; (800dc24 <vPortFree+0xb4>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4013      	ands	r3, r2
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d10c      	bne.n	800dbb8 <vPortFree+0x48>
	__asm volatile
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	b672      	cpsid	i
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	b662      	cpsie	i
 800dbb2:	60fb      	str	r3, [r7, #12]
}
 800dbb4:	bf00      	nop
 800dbb6:	e7fe      	b.n	800dbb6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00c      	beq.n	800dbda <vPortFree+0x6a>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbc4:	b672      	cpsid	i
 800dbc6:	f383 8811 	msr	BASEPRI, r3
 800dbca:	f3bf 8f6f 	isb	sy
 800dbce:	f3bf 8f4f 	dsb	sy
 800dbd2:	b662      	cpsie	i
 800dbd4:	60bb      	str	r3, [r7, #8]
}
 800dbd6:	bf00      	nop
 800dbd8:	e7fe      	b.n	800dbd8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	685a      	ldr	r2, [r3, #4]
 800dbde:	4b11      	ldr	r3, [pc, #68]	; (800dc24 <vPortFree+0xb4>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	4013      	ands	r3, r2
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d019      	beq.n	800dc1c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dbe8:	693b      	ldr	r3, [r7, #16]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d115      	bne.n	800dc1c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <vPortFree+0xb4>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	43db      	mvns	r3, r3
 800dbfa:	401a      	ands	r2, r3
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc00:	f7fe ff02 	bl	800ca08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	685a      	ldr	r2, [r3, #4]
 800dc08:	4b07      	ldr	r3, [pc, #28]	; (800dc28 <vPortFree+0xb8>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	4a06      	ldr	r2, [pc, #24]	; (800dc28 <vPortFree+0xb8>)
 800dc10:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc12:	6938      	ldr	r0, [r7, #16]
 800dc14:	f000 f86c 	bl	800dcf0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dc18:	f7fe ff04 	bl	800ca24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc1c:	bf00      	nop
 800dc1e:	3718      	adds	r7, #24
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	200049f4 	.word	0x200049f4
 800dc28:	200049ec 	.word	0x200049ec

0800dc2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc2c:	b480      	push	{r7}
 800dc2e:	b085      	sub	sp, #20
 800dc30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc38:	4b27      	ldr	r3, [pc, #156]	; (800dcd8 <prvHeapInit+0xac>)
 800dc3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f003 0307 	and.w	r3, r3, #7
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d00c      	beq.n	800dc60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3307      	adds	r3, #7
 800dc4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f023 0307 	bic.w	r3, r3, #7
 800dc52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	1ad3      	subs	r3, r2, r3
 800dc5a:	4a1f      	ldr	r2, [pc, #124]	; (800dcd8 <prvHeapInit+0xac>)
 800dc5c:	4413      	add	r3, r2
 800dc5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dc64:	4a1d      	ldr	r2, [pc, #116]	; (800dcdc <prvHeapInit+0xb0>)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dc6a:	4b1c      	ldr	r3, [pc, #112]	; (800dcdc <prvHeapInit+0xb0>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	68ba      	ldr	r2, [r7, #8]
 800dc74:	4413      	add	r3, r2
 800dc76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dc78:	2208      	movs	r2, #8
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	1a9b      	subs	r3, r3, r2
 800dc7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f023 0307 	bic.w	r3, r3, #7
 800dc86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	4a15      	ldr	r2, [pc, #84]	; (800dce0 <prvHeapInit+0xb4>)
 800dc8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dc8e:	4b14      	ldr	r3, [pc, #80]	; (800dce0 <prvHeapInit+0xb4>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2200      	movs	r2, #0
 800dc94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dc96:	4b12      	ldr	r3, [pc, #72]	; (800dce0 <prvHeapInit+0xb4>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	68fa      	ldr	r2, [r7, #12]
 800dca6:	1ad2      	subs	r2, r2, r3
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcac:	4b0c      	ldr	r3, [pc, #48]	; (800dce0 <prvHeapInit+0xb4>)
 800dcae:	681a      	ldr	r2, [r3, #0]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	4a0a      	ldr	r2, [pc, #40]	; (800dce4 <prvHeapInit+0xb8>)
 800dcba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	4a09      	ldr	r2, [pc, #36]	; (800dce8 <prvHeapInit+0xbc>)
 800dcc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dcc4:	4b09      	ldr	r3, [pc, #36]	; (800dcec <prvHeapInit+0xc0>)
 800dcc6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dcca:	601a      	str	r2, [r3, #0]
}
 800dccc:	bf00      	nop
 800dcce:	3714      	adds	r7, #20
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr
 800dcd8:	20000de0 	.word	0x20000de0
 800dcdc:	200049e0 	.word	0x200049e0
 800dce0:	200049e8 	.word	0x200049e8
 800dce4:	200049f0 	.word	0x200049f0
 800dce8:	200049ec 	.word	0x200049ec
 800dcec:	200049f4 	.word	0x200049f4

0800dcf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b085      	sub	sp, #20
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcf8:	4b28      	ldr	r3, [pc, #160]	; (800dd9c <prvInsertBlockIntoFreeList+0xac>)
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	e002      	b.n	800dd04 <prvInsertBlockIntoFreeList+0x14>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	429a      	cmp	r2, r3
 800dd0c:	d8f7      	bhi.n	800dcfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	68ba      	ldr	r2, [r7, #8]
 800dd18:	4413      	add	r3, r2
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d108      	bne.n	800dd32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	685a      	ldr	r2, [r3, #4]
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	441a      	add	r2, r3
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	685b      	ldr	r3, [r3, #4]
 800dd3a:	68ba      	ldr	r2, [r7, #8]
 800dd3c:	441a      	add	r2, r3
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d118      	bne.n	800dd78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681a      	ldr	r2, [r3, #0]
 800dd4a:	4b15      	ldr	r3, [pc, #84]	; (800dda0 <prvInsertBlockIntoFreeList+0xb0>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d00d      	beq.n	800dd6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	685a      	ldr	r2, [r3, #4]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	441a      	add	r2, r3
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	681a      	ldr	r2, [r3, #0]
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	601a      	str	r2, [r3, #0]
 800dd6c:	e008      	b.n	800dd80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dd6e:	4b0c      	ldr	r3, [pc, #48]	; (800dda0 <prvInsertBlockIntoFreeList+0xb0>)
 800dd70:	681a      	ldr	r2, [r3, #0]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	601a      	str	r2, [r3, #0]
 800dd76:	e003      	b.n	800dd80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dd80:	68fa      	ldr	r2, [r7, #12]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d002      	beq.n	800dd8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	687a      	ldr	r2, [r7, #4]
 800dd8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dd8e:	bf00      	nop
 800dd90:	3714      	adds	r7, #20
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr
 800dd9a:	bf00      	nop
 800dd9c:	200049e0 	.word	0x200049e0
 800dda0:	200049e8 	.word	0x200049e8

0800dda4 <__errno>:
 800dda4:	4b01      	ldr	r3, [pc, #4]	; (800ddac <__errno+0x8>)
 800dda6:	6818      	ldr	r0, [r3, #0]
 800dda8:	4770      	bx	lr
 800ddaa:	bf00      	nop
 800ddac:	2000004c 	.word	0x2000004c

0800ddb0 <__libc_init_array>:
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	4d0d      	ldr	r5, [pc, #52]	; (800dde8 <__libc_init_array+0x38>)
 800ddb4:	4c0d      	ldr	r4, [pc, #52]	; (800ddec <__libc_init_array+0x3c>)
 800ddb6:	1b64      	subs	r4, r4, r5
 800ddb8:	10a4      	asrs	r4, r4, #2
 800ddba:	2600      	movs	r6, #0
 800ddbc:	42a6      	cmp	r6, r4
 800ddbe:	d109      	bne.n	800ddd4 <__libc_init_array+0x24>
 800ddc0:	4d0b      	ldr	r5, [pc, #44]	; (800ddf0 <__libc_init_array+0x40>)
 800ddc2:	4c0c      	ldr	r4, [pc, #48]	; (800ddf4 <__libc_init_array+0x44>)
 800ddc4:	f000 fcf8 	bl	800e7b8 <_init>
 800ddc8:	1b64      	subs	r4, r4, r5
 800ddca:	10a4      	asrs	r4, r4, #2
 800ddcc:	2600      	movs	r6, #0
 800ddce:	42a6      	cmp	r6, r4
 800ddd0:	d105      	bne.n	800ddde <__libc_init_array+0x2e>
 800ddd2:	bd70      	pop	{r4, r5, r6, pc}
 800ddd4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ddd8:	4798      	blx	r3
 800ddda:	3601      	adds	r6, #1
 800dddc:	e7ee      	b.n	800ddbc <__libc_init_array+0xc>
 800ddde:	f855 3b04 	ldr.w	r3, [r5], #4
 800dde2:	4798      	blx	r3
 800dde4:	3601      	adds	r6, #1
 800dde6:	e7f2      	b.n	800ddce <__libc_init_array+0x1e>
 800dde8:	080134b4 	.word	0x080134b4
 800ddec:	080134b4 	.word	0x080134b4
 800ddf0:	080134b4 	.word	0x080134b4
 800ddf4:	080134b8 	.word	0x080134b8

0800ddf8 <__retarget_lock_acquire_recursive>:
 800ddf8:	4770      	bx	lr

0800ddfa <__retarget_lock_release_recursive>:
 800ddfa:	4770      	bx	lr

0800ddfc <memcpy>:
 800ddfc:	440a      	add	r2, r1
 800ddfe:	4291      	cmp	r1, r2
 800de00:	f100 33ff 	add.w	r3, r0, #4294967295
 800de04:	d100      	bne.n	800de08 <memcpy+0xc>
 800de06:	4770      	bx	lr
 800de08:	b510      	push	{r4, lr}
 800de0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de12:	4291      	cmp	r1, r2
 800de14:	d1f9      	bne.n	800de0a <memcpy+0xe>
 800de16:	bd10      	pop	{r4, pc}

0800de18 <memset>:
 800de18:	4402      	add	r2, r0
 800de1a:	4603      	mov	r3, r0
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d100      	bne.n	800de22 <memset+0xa>
 800de20:	4770      	bx	lr
 800de22:	f803 1b01 	strb.w	r1, [r3], #1
 800de26:	e7f9      	b.n	800de1c <memset+0x4>

0800de28 <sbrk_aligned>:
 800de28:	b570      	push	{r4, r5, r6, lr}
 800de2a:	4e0e      	ldr	r6, [pc, #56]	; (800de64 <sbrk_aligned+0x3c>)
 800de2c:	460c      	mov	r4, r1
 800de2e:	6831      	ldr	r1, [r6, #0]
 800de30:	4605      	mov	r5, r0
 800de32:	b911      	cbnz	r1, 800de3a <sbrk_aligned+0x12>
 800de34:	f000 f8f6 	bl	800e024 <_sbrk_r>
 800de38:	6030      	str	r0, [r6, #0]
 800de3a:	4621      	mov	r1, r4
 800de3c:	4628      	mov	r0, r5
 800de3e:	f000 f8f1 	bl	800e024 <_sbrk_r>
 800de42:	1c43      	adds	r3, r0, #1
 800de44:	d00a      	beq.n	800de5c <sbrk_aligned+0x34>
 800de46:	1cc4      	adds	r4, r0, #3
 800de48:	f024 0403 	bic.w	r4, r4, #3
 800de4c:	42a0      	cmp	r0, r4
 800de4e:	d007      	beq.n	800de60 <sbrk_aligned+0x38>
 800de50:	1a21      	subs	r1, r4, r0
 800de52:	4628      	mov	r0, r5
 800de54:	f000 f8e6 	bl	800e024 <_sbrk_r>
 800de58:	3001      	adds	r0, #1
 800de5a:	d101      	bne.n	800de60 <sbrk_aligned+0x38>
 800de5c:	f04f 34ff 	mov.w	r4, #4294967295
 800de60:	4620      	mov	r0, r4
 800de62:	bd70      	pop	{r4, r5, r6, pc}
 800de64:	20004a00 	.word	0x20004a00

0800de68 <_malloc_r>:
 800de68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de6c:	1ccd      	adds	r5, r1, #3
 800de6e:	f025 0503 	bic.w	r5, r5, #3
 800de72:	3508      	adds	r5, #8
 800de74:	2d0c      	cmp	r5, #12
 800de76:	bf38      	it	cc
 800de78:	250c      	movcc	r5, #12
 800de7a:	2d00      	cmp	r5, #0
 800de7c:	4607      	mov	r7, r0
 800de7e:	db01      	blt.n	800de84 <_malloc_r+0x1c>
 800de80:	42a9      	cmp	r1, r5
 800de82:	d905      	bls.n	800de90 <_malloc_r+0x28>
 800de84:	230c      	movs	r3, #12
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	2600      	movs	r6, #0
 800de8a:	4630      	mov	r0, r6
 800de8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de90:	4e2e      	ldr	r6, [pc, #184]	; (800df4c <_malloc_r+0xe4>)
 800de92:	f000 f8f7 	bl	800e084 <__malloc_lock>
 800de96:	6833      	ldr	r3, [r6, #0]
 800de98:	461c      	mov	r4, r3
 800de9a:	bb34      	cbnz	r4, 800deea <_malloc_r+0x82>
 800de9c:	4629      	mov	r1, r5
 800de9e:	4638      	mov	r0, r7
 800dea0:	f7ff ffc2 	bl	800de28 <sbrk_aligned>
 800dea4:	1c43      	adds	r3, r0, #1
 800dea6:	4604      	mov	r4, r0
 800dea8:	d14d      	bne.n	800df46 <_malloc_r+0xde>
 800deaa:	6834      	ldr	r4, [r6, #0]
 800deac:	4626      	mov	r6, r4
 800deae:	2e00      	cmp	r6, #0
 800deb0:	d140      	bne.n	800df34 <_malloc_r+0xcc>
 800deb2:	6823      	ldr	r3, [r4, #0]
 800deb4:	4631      	mov	r1, r6
 800deb6:	4638      	mov	r0, r7
 800deb8:	eb04 0803 	add.w	r8, r4, r3
 800debc:	f000 f8b2 	bl	800e024 <_sbrk_r>
 800dec0:	4580      	cmp	r8, r0
 800dec2:	d13a      	bne.n	800df3a <_malloc_r+0xd2>
 800dec4:	6821      	ldr	r1, [r4, #0]
 800dec6:	3503      	adds	r5, #3
 800dec8:	1a6d      	subs	r5, r5, r1
 800deca:	f025 0503 	bic.w	r5, r5, #3
 800dece:	3508      	adds	r5, #8
 800ded0:	2d0c      	cmp	r5, #12
 800ded2:	bf38      	it	cc
 800ded4:	250c      	movcc	r5, #12
 800ded6:	4629      	mov	r1, r5
 800ded8:	4638      	mov	r0, r7
 800deda:	f7ff ffa5 	bl	800de28 <sbrk_aligned>
 800dede:	3001      	adds	r0, #1
 800dee0:	d02b      	beq.n	800df3a <_malloc_r+0xd2>
 800dee2:	6823      	ldr	r3, [r4, #0]
 800dee4:	442b      	add	r3, r5
 800dee6:	6023      	str	r3, [r4, #0]
 800dee8:	e00e      	b.n	800df08 <_malloc_r+0xa0>
 800deea:	6822      	ldr	r2, [r4, #0]
 800deec:	1b52      	subs	r2, r2, r5
 800deee:	d41e      	bmi.n	800df2e <_malloc_r+0xc6>
 800def0:	2a0b      	cmp	r2, #11
 800def2:	d916      	bls.n	800df22 <_malloc_r+0xba>
 800def4:	1961      	adds	r1, r4, r5
 800def6:	42a3      	cmp	r3, r4
 800def8:	6025      	str	r5, [r4, #0]
 800defa:	bf18      	it	ne
 800defc:	6059      	strne	r1, [r3, #4]
 800defe:	6863      	ldr	r3, [r4, #4]
 800df00:	bf08      	it	eq
 800df02:	6031      	streq	r1, [r6, #0]
 800df04:	5162      	str	r2, [r4, r5]
 800df06:	604b      	str	r3, [r1, #4]
 800df08:	4638      	mov	r0, r7
 800df0a:	f104 060b 	add.w	r6, r4, #11
 800df0e:	f000 f8bf 	bl	800e090 <__malloc_unlock>
 800df12:	f026 0607 	bic.w	r6, r6, #7
 800df16:	1d23      	adds	r3, r4, #4
 800df18:	1af2      	subs	r2, r6, r3
 800df1a:	d0b6      	beq.n	800de8a <_malloc_r+0x22>
 800df1c:	1b9b      	subs	r3, r3, r6
 800df1e:	50a3      	str	r3, [r4, r2]
 800df20:	e7b3      	b.n	800de8a <_malloc_r+0x22>
 800df22:	6862      	ldr	r2, [r4, #4]
 800df24:	42a3      	cmp	r3, r4
 800df26:	bf0c      	ite	eq
 800df28:	6032      	streq	r2, [r6, #0]
 800df2a:	605a      	strne	r2, [r3, #4]
 800df2c:	e7ec      	b.n	800df08 <_malloc_r+0xa0>
 800df2e:	4623      	mov	r3, r4
 800df30:	6864      	ldr	r4, [r4, #4]
 800df32:	e7b2      	b.n	800de9a <_malloc_r+0x32>
 800df34:	4634      	mov	r4, r6
 800df36:	6876      	ldr	r6, [r6, #4]
 800df38:	e7b9      	b.n	800deae <_malloc_r+0x46>
 800df3a:	230c      	movs	r3, #12
 800df3c:	603b      	str	r3, [r7, #0]
 800df3e:	4638      	mov	r0, r7
 800df40:	f000 f8a6 	bl	800e090 <__malloc_unlock>
 800df44:	e7a1      	b.n	800de8a <_malloc_r+0x22>
 800df46:	6025      	str	r5, [r4, #0]
 800df48:	e7de      	b.n	800df08 <_malloc_r+0xa0>
 800df4a:	bf00      	nop
 800df4c:	200049fc 	.word	0x200049fc

0800df50 <cleanup_glue>:
 800df50:	b538      	push	{r3, r4, r5, lr}
 800df52:	460c      	mov	r4, r1
 800df54:	6809      	ldr	r1, [r1, #0]
 800df56:	4605      	mov	r5, r0
 800df58:	b109      	cbz	r1, 800df5e <cleanup_glue+0xe>
 800df5a:	f7ff fff9 	bl	800df50 <cleanup_glue>
 800df5e:	4621      	mov	r1, r4
 800df60:	4628      	mov	r0, r5
 800df62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800df66:	f000 b899 	b.w	800e09c <_free_r>
	...

0800df6c <_reclaim_reent>:
 800df6c:	4b2c      	ldr	r3, [pc, #176]	; (800e020 <_reclaim_reent+0xb4>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4283      	cmp	r3, r0
 800df72:	b570      	push	{r4, r5, r6, lr}
 800df74:	4604      	mov	r4, r0
 800df76:	d051      	beq.n	800e01c <_reclaim_reent+0xb0>
 800df78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800df7a:	b143      	cbz	r3, 800df8e <_reclaim_reent+0x22>
 800df7c:	68db      	ldr	r3, [r3, #12]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d14a      	bne.n	800e018 <_reclaim_reent+0xac>
 800df82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df84:	6819      	ldr	r1, [r3, #0]
 800df86:	b111      	cbz	r1, 800df8e <_reclaim_reent+0x22>
 800df88:	4620      	mov	r0, r4
 800df8a:	f000 f887 	bl	800e09c <_free_r>
 800df8e:	6961      	ldr	r1, [r4, #20]
 800df90:	b111      	cbz	r1, 800df98 <_reclaim_reent+0x2c>
 800df92:	4620      	mov	r0, r4
 800df94:	f000 f882 	bl	800e09c <_free_r>
 800df98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800df9a:	b111      	cbz	r1, 800dfa2 <_reclaim_reent+0x36>
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 f87d 	bl	800e09c <_free_r>
 800dfa2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dfa4:	b111      	cbz	r1, 800dfac <_reclaim_reent+0x40>
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 f878 	bl	800e09c <_free_r>
 800dfac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dfae:	b111      	cbz	r1, 800dfb6 <_reclaim_reent+0x4a>
 800dfb0:	4620      	mov	r0, r4
 800dfb2:	f000 f873 	bl	800e09c <_free_r>
 800dfb6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800dfb8:	b111      	cbz	r1, 800dfc0 <_reclaim_reent+0x54>
 800dfba:	4620      	mov	r0, r4
 800dfbc:	f000 f86e 	bl	800e09c <_free_r>
 800dfc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dfc2:	b111      	cbz	r1, 800dfca <_reclaim_reent+0x5e>
 800dfc4:	4620      	mov	r0, r4
 800dfc6:	f000 f869 	bl	800e09c <_free_r>
 800dfca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dfcc:	b111      	cbz	r1, 800dfd4 <_reclaim_reent+0x68>
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f000 f864 	bl	800e09c <_free_r>
 800dfd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfd6:	b111      	cbz	r1, 800dfde <_reclaim_reent+0x72>
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 f85f 	bl	800e09c <_free_r>
 800dfde:	69a3      	ldr	r3, [r4, #24]
 800dfe0:	b1e3      	cbz	r3, 800e01c <_reclaim_reent+0xb0>
 800dfe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dfe4:	4620      	mov	r0, r4
 800dfe6:	4798      	blx	r3
 800dfe8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800dfea:	b1b9      	cbz	r1, 800e01c <_reclaim_reent+0xb0>
 800dfec:	4620      	mov	r0, r4
 800dfee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dff2:	f7ff bfad 	b.w	800df50 <cleanup_glue>
 800dff6:	5949      	ldr	r1, [r1, r5]
 800dff8:	b941      	cbnz	r1, 800e00c <_reclaim_reent+0xa0>
 800dffa:	3504      	adds	r5, #4
 800dffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dffe:	2d80      	cmp	r5, #128	; 0x80
 800e000:	68d9      	ldr	r1, [r3, #12]
 800e002:	d1f8      	bne.n	800dff6 <_reclaim_reent+0x8a>
 800e004:	4620      	mov	r0, r4
 800e006:	f000 f849 	bl	800e09c <_free_r>
 800e00a:	e7ba      	b.n	800df82 <_reclaim_reent+0x16>
 800e00c:	680e      	ldr	r6, [r1, #0]
 800e00e:	4620      	mov	r0, r4
 800e010:	f000 f844 	bl	800e09c <_free_r>
 800e014:	4631      	mov	r1, r6
 800e016:	e7ef      	b.n	800dff8 <_reclaim_reent+0x8c>
 800e018:	2500      	movs	r5, #0
 800e01a:	e7ef      	b.n	800dffc <_reclaim_reent+0x90>
 800e01c:	bd70      	pop	{r4, r5, r6, pc}
 800e01e:	bf00      	nop
 800e020:	2000004c 	.word	0x2000004c

0800e024 <_sbrk_r>:
 800e024:	b538      	push	{r3, r4, r5, lr}
 800e026:	4d06      	ldr	r5, [pc, #24]	; (800e040 <_sbrk_r+0x1c>)
 800e028:	2300      	movs	r3, #0
 800e02a:	4604      	mov	r4, r0
 800e02c:	4608      	mov	r0, r1
 800e02e:	602b      	str	r3, [r5, #0]
 800e030:	f7f6 f9ca 	bl	80043c8 <_sbrk>
 800e034:	1c43      	adds	r3, r0, #1
 800e036:	d102      	bne.n	800e03e <_sbrk_r+0x1a>
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	b103      	cbz	r3, 800e03e <_sbrk_r+0x1a>
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	bd38      	pop	{r3, r4, r5, pc}
 800e040:	20004a04 	.word	0x20004a04

0800e044 <siprintf>:
 800e044:	b40e      	push	{r1, r2, r3}
 800e046:	b500      	push	{lr}
 800e048:	b09c      	sub	sp, #112	; 0x70
 800e04a:	ab1d      	add	r3, sp, #116	; 0x74
 800e04c:	9002      	str	r0, [sp, #8]
 800e04e:	9006      	str	r0, [sp, #24]
 800e050:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e054:	4809      	ldr	r0, [pc, #36]	; (800e07c <siprintf+0x38>)
 800e056:	9107      	str	r1, [sp, #28]
 800e058:	9104      	str	r1, [sp, #16]
 800e05a:	4909      	ldr	r1, [pc, #36]	; (800e080 <siprintf+0x3c>)
 800e05c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e060:	9105      	str	r1, [sp, #20]
 800e062:	6800      	ldr	r0, [r0, #0]
 800e064:	9301      	str	r3, [sp, #4]
 800e066:	a902      	add	r1, sp, #8
 800e068:	f000 f8c0 	bl	800e1ec <_svfiprintf_r>
 800e06c:	9b02      	ldr	r3, [sp, #8]
 800e06e:	2200      	movs	r2, #0
 800e070:	701a      	strb	r2, [r3, #0]
 800e072:	b01c      	add	sp, #112	; 0x70
 800e074:	f85d eb04 	ldr.w	lr, [sp], #4
 800e078:	b003      	add	sp, #12
 800e07a:	4770      	bx	lr
 800e07c:	2000004c 	.word	0x2000004c
 800e080:	ffff0208 	.word	0xffff0208

0800e084 <__malloc_lock>:
 800e084:	4801      	ldr	r0, [pc, #4]	; (800e08c <__malloc_lock+0x8>)
 800e086:	f7ff beb7 	b.w	800ddf8 <__retarget_lock_acquire_recursive>
 800e08a:	bf00      	nop
 800e08c:	200049f8 	.word	0x200049f8

0800e090 <__malloc_unlock>:
 800e090:	4801      	ldr	r0, [pc, #4]	; (800e098 <__malloc_unlock+0x8>)
 800e092:	f7ff beb2 	b.w	800ddfa <__retarget_lock_release_recursive>
 800e096:	bf00      	nop
 800e098:	200049f8 	.word	0x200049f8

0800e09c <_free_r>:
 800e09c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e09e:	2900      	cmp	r1, #0
 800e0a0:	d044      	beq.n	800e12c <_free_r+0x90>
 800e0a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0a6:	9001      	str	r0, [sp, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	f1a1 0404 	sub.w	r4, r1, #4
 800e0ae:	bfb8      	it	lt
 800e0b0:	18e4      	addlt	r4, r4, r3
 800e0b2:	f7ff ffe7 	bl	800e084 <__malloc_lock>
 800e0b6:	4a1e      	ldr	r2, [pc, #120]	; (800e130 <_free_r+0x94>)
 800e0b8:	9801      	ldr	r0, [sp, #4]
 800e0ba:	6813      	ldr	r3, [r2, #0]
 800e0bc:	b933      	cbnz	r3, 800e0cc <_free_r+0x30>
 800e0be:	6063      	str	r3, [r4, #4]
 800e0c0:	6014      	str	r4, [r2, #0]
 800e0c2:	b003      	add	sp, #12
 800e0c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0c8:	f7ff bfe2 	b.w	800e090 <__malloc_unlock>
 800e0cc:	42a3      	cmp	r3, r4
 800e0ce:	d908      	bls.n	800e0e2 <_free_r+0x46>
 800e0d0:	6825      	ldr	r5, [r4, #0]
 800e0d2:	1961      	adds	r1, r4, r5
 800e0d4:	428b      	cmp	r3, r1
 800e0d6:	bf01      	itttt	eq
 800e0d8:	6819      	ldreq	r1, [r3, #0]
 800e0da:	685b      	ldreq	r3, [r3, #4]
 800e0dc:	1949      	addeq	r1, r1, r5
 800e0de:	6021      	streq	r1, [r4, #0]
 800e0e0:	e7ed      	b.n	800e0be <_free_r+0x22>
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	b10b      	cbz	r3, 800e0ec <_free_r+0x50>
 800e0e8:	42a3      	cmp	r3, r4
 800e0ea:	d9fa      	bls.n	800e0e2 <_free_r+0x46>
 800e0ec:	6811      	ldr	r1, [r2, #0]
 800e0ee:	1855      	adds	r5, r2, r1
 800e0f0:	42a5      	cmp	r5, r4
 800e0f2:	d10b      	bne.n	800e10c <_free_r+0x70>
 800e0f4:	6824      	ldr	r4, [r4, #0]
 800e0f6:	4421      	add	r1, r4
 800e0f8:	1854      	adds	r4, r2, r1
 800e0fa:	42a3      	cmp	r3, r4
 800e0fc:	6011      	str	r1, [r2, #0]
 800e0fe:	d1e0      	bne.n	800e0c2 <_free_r+0x26>
 800e100:	681c      	ldr	r4, [r3, #0]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	6053      	str	r3, [r2, #4]
 800e106:	4421      	add	r1, r4
 800e108:	6011      	str	r1, [r2, #0]
 800e10a:	e7da      	b.n	800e0c2 <_free_r+0x26>
 800e10c:	d902      	bls.n	800e114 <_free_r+0x78>
 800e10e:	230c      	movs	r3, #12
 800e110:	6003      	str	r3, [r0, #0]
 800e112:	e7d6      	b.n	800e0c2 <_free_r+0x26>
 800e114:	6825      	ldr	r5, [r4, #0]
 800e116:	1961      	adds	r1, r4, r5
 800e118:	428b      	cmp	r3, r1
 800e11a:	bf04      	itt	eq
 800e11c:	6819      	ldreq	r1, [r3, #0]
 800e11e:	685b      	ldreq	r3, [r3, #4]
 800e120:	6063      	str	r3, [r4, #4]
 800e122:	bf04      	itt	eq
 800e124:	1949      	addeq	r1, r1, r5
 800e126:	6021      	streq	r1, [r4, #0]
 800e128:	6054      	str	r4, [r2, #4]
 800e12a:	e7ca      	b.n	800e0c2 <_free_r+0x26>
 800e12c:	b003      	add	sp, #12
 800e12e:	bd30      	pop	{r4, r5, pc}
 800e130:	200049fc 	.word	0x200049fc

0800e134 <__ssputs_r>:
 800e134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e138:	688e      	ldr	r6, [r1, #8]
 800e13a:	429e      	cmp	r6, r3
 800e13c:	4682      	mov	sl, r0
 800e13e:	460c      	mov	r4, r1
 800e140:	4690      	mov	r8, r2
 800e142:	461f      	mov	r7, r3
 800e144:	d838      	bhi.n	800e1b8 <__ssputs_r+0x84>
 800e146:	898a      	ldrh	r2, [r1, #12]
 800e148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e14c:	d032      	beq.n	800e1b4 <__ssputs_r+0x80>
 800e14e:	6825      	ldr	r5, [r4, #0]
 800e150:	6909      	ldr	r1, [r1, #16]
 800e152:	eba5 0901 	sub.w	r9, r5, r1
 800e156:	6965      	ldr	r5, [r4, #20]
 800e158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e15c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e160:	3301      	adds	r3, #1
 800e162:	444b      	add	r3, r9
 800e164:	106d      	asrs	r5, r5, #1
 800e166:	429d      	cmp	r5, r3
 800e168:	bf38      	it	cc
 800e16a:	461d      	movcc	r5, r3
 800e16c:	0553      	lsls	r3, r2, #21
 800e16e:	d531      	bpl.n	800e1d4 <__ssputs_r+0xa0>
 800e170:	4629      	mov	r1, r5
 800e172:	f7ff fe79 	bl	800de68 <_malloc_r>
 800e176:	4606      	mov	r6, r0
 800e178:	b950      	cbnz	r0, 800e190 <__ssputs_r+0x5c>
 800e17a:	230c      	movs	r3, #12
 800e17c:	f8ca 3000 	str.w	r3, [sl]
 800e180:	89a3      	ldrh	r3, [r4, #12]
 800e182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e186:	81a3      	strh	r3, [r4, #12]
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e190:	6921      	ldr	r1, [r4, #16]
 800e192:	464a      	mov	r2, r9
 800e194:	f7ff fe32 	bl	800ddfc <memcpy>
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	6126      	str	r6, [r4, #16]
 800e1a6:	6165      	str	r5, [r4, #20]
 800e1a8:	444e      	add	r6, r9
 800e1aa:	eba5 0509 	sub.w	r5, r5, r9
 800e1ae:	6026      	str	r6, [r4, #0]
 800e1b0:	60a5      	str	r5, [r4, #8]
 800e1b2:	463e      	mov	r6, r7
 800e1b4:	42be      	cmp	r6, r7
 800e1b6:	d900      	bls.n	800e1ba <__ssputs_r+0x86>
 800e1b8:	463e      	mov	r6, r7
 800e1ba:	6820      	ldr	r0, [r4, #0]
 800e1bc:	4632      	mov	r2, r6
 800e1be:	4641      	mov	r1, r8
 800e1c0:	f000 faa8 	bl	800e714 <memmove>
 800e1c4:	68a3      	ldr	r3, [r4, #8]
 800e1c6:	1b9b      	subs	r3, r3, r6
 800e1c8:	60a3      	str	r3, [r4, #8]
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	4433      	add	r3, r6
 800e1ce:	6023      	str	r3, [r4, #0]
 800e1d0:	2000      	movs	r0, #0
 800e1d2:	e7db      	b.n	800e18c <__ssputs_r+0x58>
 800e1d4:	462a      	mov	r2, r5
 800e1d6:	f000 fab7 	bl	800e748 <_realloc_r>
 800e1da:	4606      	mov	r6, r0
 800e1dc:	2800      	cmp	r0, #0
 800e1de:	d1e1      	bne.n	800e1a4 <__ssputs_r+0x70>
 800e1e0:	6921      	ldr	r1, [r4, #16]
 800e1e2:	4650      	mov	r0, sl
 800e1e4:	f7ff ff5a 	bl	800e09c <_free_r>
 800e1e8:	e7c7      	b.n	800e17a <__ssputs_r+0x46>
	...

0800e1ec <_svfiprintf_r>:
 800e1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f0:	4698      	mov	r8, r3
 800e1f2:	898b      	ldrh	r3, [r1, #12]
 800e1f4:	061b      	lsls	r3, r3, #24
 800e1f6:	b09d      	sub	sp, #116	; 0x74
 800e1f8:	4607      	mov	r7, r0
 800e1fa:	460d      	mov	r5, r1
 800e1fc:	4614      	mov	r4, r2
 800e1fe:	d50e      	bpl.n	800e21e <_svfiprintf_r+0x32>
 800e200:	690b      	ldr	r3, [r1, #16]
 800e202:	b963      	cbnz	r3, 800e21e <_svfiprintf_r+0x32>
 800e204:	2140      	movs	r1, #64	; 0x40
 800e206:	f7ff fe2f 	bl	800de68 <_malloc_r>
 800e20a:	6028      	str	r0, [r5, #0]
 800e20c:	6128      	str	r0, [r5, #16]
 800e20e:	b920      	cbnz	r0, 800e21a <_svfiprintf_r+0x2e>
 800e210:	230c      	movs	r3, #12
 800e212:	603b      	str	r3, [r7, #0]
 800e214:	f04f 30ff 	mov.w	r0, #4294967295
 800e218:	e0d1      	b.n	800e3be <_svfiprintf_r+0x1d2>
 800e21a:	2340      	movs	r3, #64	; 0x40
 800e21c:	616b      	str	r3, [r5, #20]
 800e21e:	2300      	movs	r3, #0
 800e220:	9309      	str	r3, [sp, #36]	; 0x24
 800e222:	2320      	movs	r3, #32
 800e224:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e228:	f8cd 800c 	str.w	r8, [sp, #12]
 800e22c:	2330      	movs	r3, #48	; 0x30
 800e22e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3d8 <_svfiprintf_r+0x1ec>
 800e232:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e236:	f04f 0901 	mov.w	r9, #1
 800e23a:	4623      	mov	r3, r4
 800e23c:	469a      	mov	sl, r3
 800e23e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e242:	b10a      	cbz	r2, 800e248 <_svfiprintf_r+0x5c>
 800e244:	2a25      	cmp	r2, #37	; 0x25
 800e246:	d1f9      	bne.n	800e23c <_svfiprintf_r+0x50>
 800e248:	ebba 0b04 	subs.w	fp, sl, r4
 800e24c:	d00b      	beq.n	800e266 <_svfiprintf_r+0x7a>
 800e24e:	465b      	mov	r3, fp
 800e250:	4622      	mov	r2, r4
 800e252:	4629      	mov	r1, r5
 800e254:	4638      	mov	r0, r7
 800e256:	f7ff ff6d 	bl	800e134 <__ssputs_r>
 800e25a:	3001      	adds	r0, #1
 800e25c:	f000 80aa 	beq.w	800e3b4 <_svfiprintf_r+0x1c8>
 800e260:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e262:	445a      	add	r2, fp
 800e264:	9209      	str	r2, [sp, #36]	; 0x24
 800e266:	f89a 3000 	ldrb.w	r3, [sl]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	f000 80a2 	beq.w	800e3b4 <_svfiprintf_r+0x1c8>
 800e270:	2300      	movs	r3, #0
 800e272:	f04f 32ff 	mov.w	r2, #4294967295
 800e276:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e27a:	f10a 0a01 	add.w	sl, sl, #1
 800e27e:	9304      	str	r3, [sp, #16]
 800e280:	9307      	str	r3, [sp, #28]
 800e282:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e286:	931a      	str	r3, [sp, #104]	; 0x68
 800e288:	4654      	mov	r4, sl
 800e28a:	2205      	movs	r2, #5
 800e28c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e290:	4851      	ldr	r0, [pc, #324]	; (800e3d8 <_svfiprintf_r+0x1ec>)
 800e292:	f7f1 ffbd 	bl	8000210 <memchr>
 800e296:	9a04      	ldr	r2, [sp, #16]
 800e298:	b9d8      	cbnz	r0, 800e2d2 <_svfiprintf_r+0xe6>
 800e29a:	06d0      	lsls	r0, r2, #27
 800e29c:	bf44      	itt	mi
 800e29e:	2320      	movmi	r3, #32
 800e2a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2a4:	0711      	lsls	r1, r2, #28
 800e2a6:	bf44      	itt	mi
 800e2a8:	232b      	movmi	r3, #43	; 0x2b
 800e2aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2ae:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b2:	2b2a      	cmp	r3, #42	; 0x2a
 800e2b4:	d015      	beq.n	800e2e2 <_svfiprintf_r+0xf6>
 800e2b6:	9a07      	ldr	r2, [sp, #28]
 800e2b8:	4654      	mov	r4, sl
 800e2ba:	2000      	movs	r0, #0
 800e2bc:	f04f 0c0a 	mov.w	ip, #10
 800e2c0:	4621      	mov	r1, r4
 800e2c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2c6:	3b30      	subs	r3, #48	; 0x30
 800e2c8:	2b09      	cmp	r3, #9
 800e2ca:	d94e      	bls.n	800e36a <_svfiprintf_r+0x17e>
 800e2cc:	b1b0      	cbz	r0, 800e2fc <_svfiprintf_r+0x110>
 800e2ce:	9207      	str	r2, [sp, #28]
 800e2d0:	e014      	b.n	800e2fc <_svfiprintf_r+0x110>
 800e2d2:	eba0 0308 	sub.w	r3, r0, r8
 800e2d6:	fa09 f303 	lsl.w	r3, r9, r3
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	9304      	str	r3, [sp, #16]
 800e2de:	46a2      	mov	sl, r4
 800e2e0:	e7d2      	b.n	800e288 <_svfiprintf_r+0x9c>
 800e2e2:	9b03      	ldr	r3, [sp, #12]
 800e2e4:	1d19      	adds	r1, r3, #4
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	9103      	str	r1, [sp, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	bfbb      	ittet	lt
 800e2ee:	425b      	neglt	r3, r3
 800e2f0:	f042 0202 	orrlt.w	r2, r2, #2
 800e2f4:	9307      	strge	r3, [sp, #28]
 800e2f6:	9307      	strlt	r3, [sp, #28]
 800e2f8:	bfb8      	it	lt
 800e2fa:	9204      	strlt	r2, [sp, #16]
 800e2fc:	7823      	ldrb	r3, [r4, #0]
 800e2fe:	2b2e      	cmp	r3, #46	; 0x2e
 800e300:	d10c      	bne.n	800e31c <_svfiprintf_r+0x130>
 800e302:	7863      	ldrb	r3, [r4, #1]
 800e304:	2b2a      	cmp	r3, #42	; 0x2a
 800e306:	d135      	bne.n	800e374 <_svfiprintf_r+0x188>
 800e308:	9b03      	ldr	r3, [sp, #12]
 800e30a:	1d1a      	adds	r2, r3, #4
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	9203      	str	r2, [sp, #12]
 800e310:	2b00      	cmp	r3, #0
 800e312:	bfb8      	it	lt
 800e314:	f04f 33ff 	movlt.w	r3, #4294967295
 800e318:	3402      	adds	r4, #2
 800e31a:	9305      	str	r3, [sp, #20]
 800e31c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3e8 <_svfiprintf_r+0x1fc>
 800e320:	7821      	ldrb	r1, [r4, #0]
 800e322:	2203      	movs	r2, #3
 800e324:	4650      	mov	r0, sl
 800e326:	f7f1 ff73 	bl	8000210 <memchr>
 800e32a:	b140      	cbz	r0, 800e33e <_svfiprintf_r+0x152>
 800e32c:	2340      	movs	r3, #64	; 0x40
 800e32e:	eba0 000a 	sub.w	r0, r0, sl
 800e332:	fa03 f000 	lsl.w	r0, r3, r0
 800e336:	9b04      	ldr	r3, [sp, #16]
 800e338:	4303      	orrs	r3, r0
 800e33a:	3401      	adds	r4, #1
 800e33c:	9304      	str	r3, [sp, #16]
 800e33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e342:	4826      	ldr	r0, [pc, #152]	; (800e3dc <_svfiprintf_r+0x1f0>)
 800e344:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e348:	2206      	movs	r2, #6
 800e34a:	f7f1 ff61 	bl	8000210 <memchr>
 800e34e:	2800      	cmp	r0, #0
 800e350:	d038      	beq.n	800e3c4 <_svfiprintf_r+0x1d8>
 800e352:	4b23      	ldr	r3, [pc, #140]	; (800e3e0 <_svfiprintf_r+0x1f4>)
 800e354:	bb1b      	cbnz	r3, 800e39e <_svfiprintf_r+0x1b2>
 800e356:	9b03      	ldr	r3, [sp, #12]
 800e358:	3307      	adds	r3, #7
 800e35a:	f023 0307 	bic.w	r3, r3, #7
 800e35e:	3308      	adds	r3, #8
 800e360:	9303      	str	r3, [sp, #12]
 800e362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e364:	4433      	add	r3, r6
 800e366:	9309      	str	r3, [sp, #36]	; 0x24
 800e368:	e767      	b.n	800e23a <_svfiprintf_r+0x4e>
 800e36a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e36e:	460c      	mov	r4, r1
 800e370:	2001      	movs	r0, #1
 800e372:	e7a5      	b.n	800e2c0 <_svfiprintf_r+0xd4>
 800e374:	2300      	movs	r3, #0
 800e376:	3401      	adds	r4, #1
 800e378:	9305      	str	r3, [sp, #20]
 800e37a:	4619      	mov	r1, r3
 800e37c:	f04f 0c0a 	mov.w	ip, #10
 800e380:	4620      	mov	r0, r4
 800e382:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e386:	3a30      	subs	r2, #48	; 0x30
 800e388:	2a09      	cmp	r2, #9
 800e38a:	d903      	bls.n	800e394 <_svfiprintf_r+0x1a8>
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d0c5      	beq.n	800e31c <_svfiprintf_r+0x130>
 800e390:	9105      	str	r1, [sp, #20]
 800e392:	e7c3      	b.n	800e31c <_svfiprintf_r+0x130>
 800e394:	fb0c 2101 	mla	r1, ip, r1, r2
 800e398:	4604      	mov	r4, r0
 800e39a:	2301      	movs	r3, #1
 800e39c:	e7f0      	b.n	800e380 <_svfiprintf_r+0x194>
 800e39e:	ab03      	add	r3, sp, #12
 800e3a0:	9300      	str	r3, [sp, #0]
 800e3a2:	462a      	mov	r2, r5
 800e3a4:	4b0f      	ldr	r3, [pc, #60]	; (800e3e4 <_svfiprintf_r+0x1f8>)
 800e3a6:	a904      	add	r1, sp, #16
 800e3a8:	4638      	mov	r0, r7
 800e3aa:	f3af 8000 	nop.w
 800e3ae:	1c42      	adds	r2, r0, #1
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	d1d6      	bne.n	800e362 <_svfiprintf_r+0x176>
 800e3b4:	89ab      	ldrh	r3, [r5, #12]
 800e3b6:	065b      	lsls	r3, r3, #25
 800e3b8:	f53f af2c 	bmi.w	800e214 <_svfiprintf_r+0x28>
 800e3bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3be:	b01d      	add	sp, #116	; 0x74
 800e3c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c4:	ab03      	add	r3, sp, #12
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	462a      	mov	r2, r5
 800e3ca:	4b06      	ldr	r3, [pc, #24]	; (800e3e4 <_svfiprintf_r+0x1f8>)
 800e3cc:	a904      	add	r1, sp, #16
 800e3ce:	4638      	mov	r0, r7
 800e3d0:	f000 f87a 	bl	800e4c8 <_printf_i>
 800e3d4:	e7eb      	b.n	800e3ae <_svfiprintf_r+0x1c2>
 800e3d6:	bf00      	nop
 800e3d8:	08013478 	.word	0x08013478
 800e3dc:	08013482 	.word	0x08013482
 800e3e0:	00000000 	.word	0x00000000
 800e3e4:	0800e135 	.word	0x0800e135
 800e3e8:	0801347e 	.word	0x0801347e

0800e3ec <_printf_common>:
 800e3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3f0:	4616      	mov	r6, r2
 800e3f2:	4699      	mov	r9, r3
 800e3f4:	688a      	ldr	r2, [r1, #8]
 800e3f6:	690b      	ldr	r3, [r1, #16]
 800e3f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	bfb8      	it	lt
 800e400:	4613      	movlt	r3, r2
 800e402:	6033      	str	r3, [r6, #0]
 800e404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e408:	4607      	mov	r7, r0
 800e40a:	460c      	mov	r4, r1
 800e40c:	b10a      	cbz	r2, 800e412 <_printf_common+0x26>
 800e40e:	3301      	adds	r3, #1
 800e410:	6033      	str	r3, [r6, #0]
 800e412:	6823      	ldr	r3, [r4, #0]
 800e414:	0699      	lsls	r1, r3, #26
 800e416:	bf42      	ittt	mi
 800e418:	6833      	ldrmi	r3, [r6, #0]
 800e41a:	3302      	addmi	r3, #2
 800e41c:	6033      	strmi	r3, [r6, #0]
 800e41e:	6825      	ldr	r5, [r4, #0]
 800e420:	f015 0506 	ands.w	r5, r5, #6
 800e424:	d106      	bne.n	800e434 <_printf_common+0x48>
 800e426:	f104 0a19 	add.w	sl, r4, #25
 800e42a:	68e3      	ldr	r3, [r4, #12]
 800e42c:	6832      	ldr	r2, [r6, #0]
 800e42e:	1a9b      	subs	r3, r3, r2
 800e430:	42ab      	cmp	r3, r5
 800e432:	dc26      	bgt.n	800e482 <_printf_common+0x96>
 800e434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e438:	1e13      	subs	r3, r2, #0
 800e43a:	6822      	ldr	r2, [r4, #0]
 800e43c:	bf18      	it	ne
 800e43e:	2301      	movne	r3, #1
 800e440:	0692      	lsls	r2, r2, #26
 800e442:	d42b      	bmi.n	800e49c <_printf_common+0xb0>
 800e444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e448:	4649      	mov	r1, r9
 800e44a:	4638      	mov	r0, r7
 800e44c:	47c0      	blx	r8
 800e44e:	3001      	adds	r0, #1
 800e450:	d01e      	beq.n	800e490 <_printf_common+0xa4>
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	68e5      	ldr	r5, [r4, #12]
 800e456:	6832      	ldr	r2, [r6, #0]
 800e458:	f003 0306 	and.w	r3, r3, #6
 800e45c:	2b04      	cmp	r3, #4
 800e45e:	bf08      	it	eq
 800e460:	1aad      	subeq	r5, r5, r2
 800e462:	68a3      	ldr	r3, [r4, #8]
 800e464:	6922      	ldr	r2, [r4, #16]
 800e466:	bf0c      	ite	eq
 800e468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e46c:	2500      	movne	r5, #0
 800e46e:	4293      	cmp	r3, r2
 800e470:	bfc4      	itt	gt
 800e472:	1a9b      	subgt	r3, r3, r2
 800e474:	18ed      	addgt	r5, r5, r3
 800e476:	2600      	movs	r6, #0
 800e478:	341a      	adds	r4, #26
 800e47a:	42b5      	cmp	r5, r6
 800e47c:	d11a      	bne.n	800e4b4 <_printf_common+0xc8>
 800e47e:	2000      	movs	r0, #0
 800e480:	e008      	b.n	800e494 <_printf_common+0xa8>
 800e482:	2301      	movs	r3, #1
 800e484:	4652      	mov	r2, sl
 800e486:	4649      	mov	r1, r9
 800e488:	4638      	mov	r0, r7
 800e48a:	47c0      	blx	r8
 800e48c:	3001      	adds	r0, #1
 800e48e:	d103      	bne.n	800e498 <_printf_common+0xac>
 800e490:	f04f 30ff 	mov.w	r0, #4294967295
 800e494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e498:	3501      	adds	r5, #1
 800e49a:	e7c6      	b.n	800e42a <_printf_common+0x3e>
 800e49c:	18e1      	adds	r1, r4, r3
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	2030      	movs	r0, #48	; 0x30
 800e4a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4a6:	4422      	add	r2, r4
 800e4a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4b0:	3302      	adds	r3, #2
 800e4b2:	e7c7      	b.n	800e444 <_printf_common+0x58>
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	4622      	mov	r2, r4
 800e4b8:	4649      	mov	r1, r9
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	47c0      	blx	r8
 800e4be:	3001      	adds	r0, #1
 800e4c0:	d0e6      	beq.n	800e490 <_printf_common+0xa4>
 800e4c2:	3601      	adds	r6, #1
 800e4c4:	e7d9      	b.n	800e47a <_printf_common+0x8e>
	...

0800e4c8 <_printf_i>:
 800e4c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4cc:	7e0f      	ldrb	r7, [r1, #24]
 800e4ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4d0:	2f78      	cmp	r7, #120	; 0x78
 800e4d2:	4691      	mov	r9, r2
 800e4d4:	4680      	mov	r8, r0
 800e4d6:	460c      	mov	r4, r1
 800e4d8:	469a      	mov	sl, r3
 800e4da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4de:	d807      	bhi.n	800e4f0 <_printf_i+0x28>
 800e4e0:	2f62      	cmp	r7, #98	; 0x62
 800e4e2:	d80a      	bhi.n	800e4fa <_printf_i+0x32>
 800e4e4:	2f00      	cmp	r7, #0
 800e4e6:	f000 80d8 	beq.w	800e69a <_printf_i+0x1d2>
 800e4ea:	2f58      	cmp	r7, #88	; 0x58
 800e4ec:	f000 80a3 	beq.w	800e636 <_printf_i+0x16e>
 800e4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4f8:	e03a      	b.n	800e570 <_printf_i+0xa8>
 800e4fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4fe:	2b15      	cmp	r3, #21
 800e500:	d8f6      	bhi.n	800e4f0 <_printf_i+0x28>
 800e502:	a101      	add	r1, pc, #4	; (adr r1, 800e508 <_printf_i+0x40>)
 800e504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e508:	0800e561 	.word	0x0800e561
 800e50c:	0800e575 	.word	0x0800e575
 800e510:	0800e4f1 	.word	0x0800e4f1
 800e514:	0800e4f1 	.word	0x0800e4f1
 800e518:	0800e4f1 	.word	0x0800e4f1
 800e51c:	0800e4f1 	.word	0x0800e4f1
 800e520:	0800e575 	.word	0x0800e575
 800e524:	0800e4f1 	.word	0x0800e4f1
 800e528:	0800e4f1 	.word	0x0800e4f1
 800e52c:	0800e4f1 	.word	0x0800e4f1
 800e530:	0800e4f1 	.word	0x0800e4f1
 800e534:	0800e681 	.word	0x0800e681
 800e538:	0800e5a5 	.word	0x0800e5a5
 800e53c:	0800e663 	.word	0x0800e663
 800e540:	0800e4f1 	.word	0x0800e4f1
 800e544:	0800e4f1 	.word	0x0800e4f1
 800e548:	0800e6a3 	.word	0x0800e6a3
 800e54c:	0800e4f1 	.word	0x0800e4f1
 800e550:	0800e5a5 	.word	0x0800e5a5
 800e554:	0800e4f1 	.word	0x0800e4f1
 800e558:	0800e4f1 	.word	0x0800e4f1
 800e55c:	0800e66b 	.word	0x0800e66b
 800e560:	682b      	ldr	r3, [r5, #0]
 800e562:	1d1a      	adds	r2, r3, #4
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	602a      	str	r2, [r5, #0]
 800e568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e56c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e570:	2301      	movs	r3, #1
 800e572:	e0a3      	b.n	800e6bc <_printf_i+0x1f4>
 800e574:	6820      	ldr	r0, [r4, #0]
 800e576:	6829      	ldr	r1, [r5, #0]
 800e578:	0606      	lsls	r6, r0, #24
 800e57a:	f101 0304 	add.w	r3, r1, #4
 800e57e:	d50a      	bpl.n	800e596 <_printf_i+0xce>
 800e580:	680e      	ldr	r6, [r1, #0]
 800e582:	602b      	str	r3, [r5, #0]
 800e584:	2e00      	cmp	r6, #0
 800e586:	da03      	bge.n	800e590 <_printf_i+0xc8>
 800e588:	232d      	movs	r3, #45	; 0x2d
 800e58a:	4276      	negs	r6, r6
 800e58c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e590:	485e      	ldr	r0, [pc, #376]	; (800e70c <_printf_i+0x244>)
 800e592:	230a      	movs	r3, #10
 800e594:	e019      	b.n	800e5ca <_printf_i+0x102>
 800e596:	680e      	ldr	r6, [r1, #0]
 800e598:	602b      	str	r3, [r5, #0]
 800e59a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e59e:	bf18      	it	ne
 800e5a0:	b236      	sxthne	r6, r6
 800e5a2:	e7ef      	b.n	800e584 <_printf_i+0xbc>
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	6820      	ldr	r0, [r4, #0]
 800e5a8:	1d19      	adds	r1, r3, #4
 800e5aa:	6029      	str	r1, [r5, #0]
 800e5ac:	0601      	lsls	r1, r0, #24
 800e5ae:	d501      	bpl.n	800e5b4 <_printf_i+0xec>
 800e5b0:	681e      	ldr	r6, [r3, #0]
 800e5b2:	e002      	b.n	800e5ba <_printf_i+0xf2>
 800e5b4:	0646      	lsls	r6, r0, #25
 800e5b6:	d5fb      	bpl.n	800e5b0 <_printf_i+0xe8>
 800e5b8:	881e      	ldrh	r6, [r3, #0]
 800e5ba:	4854      	ldr	r0, [pc, #336]	; (800e70c <_printf_i+0x244>)
 800e5bc:	2f6f      	cmp	r7, #111	; 0x6f
 800e5be:	bf0c      	ite	eq
 800e5c0:	2308      	moveq	r3, #8
 800e5c2:	230a      	movne	r3, #10
 800e5c4:	2100      	movs	r1, #0
 800e5c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5ca:	6865      	ldr	r5, [r4, #4]
 800e5cc:	60a5      	str	r5, [r4, #8]
 800e5ce:	2d00      	cmp	r5, #0
 800e5d0:	bfa2      	ittt	ge
 800e5d2:	6821      	ldrge	r1, [r4, #0]
 800e5d4:	f021 0104 	bicge.w	r1, r1, #4
 800e5d8:	6021      	strge	r1, [r4, #0]
 800e5da:	b90e      	cbnz	r6, 800e5e0 <_printf_i+0x118>
 800e5dc:	2d00      	cmp	r5, #0
 800e5de:	d04d      	beq.n	800e67c <_printf_i+0x1b4>
 800e5e0:	4615      	mov	r5, r2
 800e5e2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5e6:	fb03 6711 	mls	r7, r3, r1, r6
 800e5ea:	5dc7      	ldrb	r7, [r0, r7]
 800e5ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5f0:	4637      	mov	r7, r6
 800e5f2:	42bb      	cmp	r3, r7
 800e5f4:	460e      	mov	r6, r1
 800e5f6:	d9f4      	bls.n	800e5e2 <_printf_i+0x11a>
 800e5f8:	2b08      	cmp	r3, #8
 800e5fa:	d10b      	bne.n	800e614 <_printf_i+0x14c>
 800e5fc:	6823      	ldr	r3, [r4, #0]
 800e5fe:	07de      	lsls	r6, r3, #31
 800e600:	d508      	bpl.n	800e614 <_printf_i+0x14c>
 800e602:	6923      	ldr	r3, [r4, #16]
 800e604:	6861      	ldr	r1, [r4, #4]
 800e606:	4299      	cmp	r1, r3
 800e608:	bfde      	ittt	le
 800e60a:	2330      	movle	r3, #48	; 0x30
 800e60c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e610:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e614:	1b52      	subs	r2, r2, r5
 800e616:	6122      	str	r2, [r4, #16]
 800e618:	f8cd a000 	str.w	sl, [sp]
 800e61c:	464b      	mov	r3, r9
 800e61e:	aa03      	add	r2, sp, #12
 800e620:	4621      	mov	r1, r4
 800e622:	4640      	mov	r0, r8
 800e624:	f7ff fee2 	bl	800e3ec <_printf_common>
 800e628:	3001      	adds	r0, #1
 800e62a:	d14c      	bne.n	800e6c6 <_printf_i+0x1fe>
 800e62c:	f04f 30ff 	mov.w	r0, #4294967295
 800e630:	b004      	add	sp, #16
 800e632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e636:	4835      	ldr	r0, [pc, #212]	; (800e70c <_printf_i+0x244>)
 800e638:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e63c:	6829      	ldr	r1, [r5, #0]
 800e63e:	6823      	ldr	r3, [r4, #0]
 800e640:	f851 6b04 	ldr.w	r6, [r1], #4
 800e644:	6029      	str	r1, [r5, #0]
 800e646:	061d      	lsls	r5, r3, #24
 800e648:	d514      	bpl.n	800e674 <_printf_i+0x1ac>
 800e64a:	07df      	lsls	r7, r3, #31
 800e64c:	bf44      	itt	mi
 800e64e:	f043 0320 	orrmi.w	r3, r3, #32
 800e652:	6023      	strmi	r3, [r4, #0]
 800e654:	b91e      	cbnz	r6, 800e65e <_printf_i+0x196>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	f023 0320 	bic.w	r3, r3, #32
 800e65c:	6023      	str	r3, [r4, #0]
 800e65e:	2310      	movs	r3, #16
 800e660:	e7b0      	b.n	800e5c4 <_printf_i+0xfc>
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	f043 0320 	orr.w	r3, r3, #32
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	2378      	movs	r3, #120	; 0x78
 800e66c:	4828      	ldr	r0, [pc, #160]	; (800e710 <_printf_i+0x248>)
 800e66e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e672:	e7e3      	b.n	800e63c <_printf_i+0x174>
 800e674:	0659      	lsls	r1, r3, #25
 800e676:	bf48      	it	mi
 800e678:	b2b6      	uxthmi	r6, r6
 800e67a:	e7e6      	b.n	800e64a <_printf_i+0x182>
 800e67c:	4615      	mov	r5, r2
 800e67e:	e7bb      	b.n	800e5f8 <_printf_i+0x130>
 800e680:	682b      	ldr	r3, [r5, #0]
 800e682:	6826      	ldr	r6, [r4, #0]
 800e684:	6961      	ldr	r1, [r4, #20]
 800e686:	1d18      	adds	r0, r3, #4
 800e688:	6028      	str	r0, [r5, #0]
 800e68a:	0635      	lsls	r5, r6, #24
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	d501      	bpl.n	800e694 <_printf_i+0x1cc>
 800e690:	6019      	str	r1, [r3, #0]
 800e692:	e002      	b.n	800e69a <_printf_i+0x1d2>
 800e694:	0670      	lsls	r0, r6, #25
 800e696:	d5fb      	bpl.n	800e690 <_printf_i+0x1c8>
 800e698:	8019      	strh	r1, [r3, #0]
 800e69a:	2300      	movs	r3, #0
 800e69c:	6123      	str	r3, [r4, #16]
 800e69e:	4615      	mov	r5, r2
 800e6a0:	e7ba      	b.n	800e618 <_printf_i+0x150>
 800e6a2:	682b      	ldr	r3, [r5, #0]
 800e6a4:	1d1a      	adds	r2, r3, #4
 800e6a6:	602a      	str	r2, [r5, #0]
 800e6a8:	681d      	ldr	r5, [r3, #0]
 800e6aa:	6862      	ldr	r2, [r4, #4]
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	4628      	mov	r0, r5
 800e6b0:	f7f1 fdae 	bl	8000210 <memchr>
 800e6b4:	b108      	cbz	r0, 800e6ba <_printf_i+0x1f2>
 800e6b6:	1b40      	subs	r0, r0, r5
 800e6b8:	6060      	str	r0, [r4, #4]
 800e6ba:	6863      	ldr	r3, [r4, #4]
 800e6bc:	6123      	str	r3, [r4, #16]
 800e6be:	2300      	movs	r3, #0
 800e6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6c4:	e7a8      	b.n	800e618 <_printf_i+0x150>
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	462a      	mov	r2, r5
 800e6ca:	4649      	mov	r1, r9
 800e6cc:	4640      	mov	r0, r8
 800e6ce:	47d0      	blx	sl
 800e6d0:	3001      	adds	r0, #1
 800e6d2:	d0ab      	beq.n	800e62c <_printf_i+0x164>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	079b      	lsls	r3, r3, #30
 800e6d8:	d413      	bmi.n	800e702 <_printf_i+0x23a>
 800e6da:	68e0      	ldr	r0, [r4, #12]
 800e6dc:	9b03      	ldr	r3, [sp, #12]
 800e6de:	4298      	cmp	r0, r3
 800e6e0:	bfb8      	it	lt
 800e6e2:	4618      	movlt	r0, r3
 800e6e4:	e7a4      	b.n	800e630 <_printf_i+0x168>
 800e6e6:	2301      	movs	r3, #1
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	4649      	mov	r1, r9
 800e6ec:	4640      	mov	r0, r8
 800e6ee:	47d0      	blx	sl
 800e6f0:	3001      	adds	r0, #1
 800e6f2:	d09b      	beq.n	800e62c <_printf_i+0x164>
 800e6f4:	3501      	adds	r5, #1
 800e6f6:	68e3      	ldr	r3, [r4, #12]
 800e6f8:	9903      	ldr	r1, [sp, #12]
 800e6fa:	1a5b      	subs	r3, r3, r1
 800e6fc:	42ab      	cmp	r3, r5
 800e6fe:	dcf2      	bgt.n	800e6e6 <_printf_i+0x21e>
 800e700:	e7eb      	b.n	800e6da <_printf_i+0x212>
 800e702:	2500      	movs	r5, #0
 800e704:	f104 0619 	add.w	r6, r4, #25
 800e708:	e7f5      	b.n	800e6f6 <_printf_i+0x22e>
 800e70a:	bf00      	nop
 800e70c:	08013489 	.word	0x08013489
 800e710:	0801349a 	.word	0x0801349a

0800e714 <memmove>:
 800e714:	4288      	cmp	r0, r1
 800e716:	b510      	push	{r4, lr}
 800e718:	eb01 0402 	add.w	r4, r1, r2
 800e71c:	d902      	bls.n	800e724 <memmove+0x10>
 800e71e:	4284      	cmp	r4, r0
 800e720:	4623      	mov	r3, r4
 800e722:	d807      	bhi.n	800e734 <memmove+0x20>
 800e724:	1e43      	subs	r3, r0, #1
 800e726:	42a1      	cmp	r1, r4
 800e728:	d008      	beq.n	800e73c <memmove+0x28>
 800e72a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e72e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e732:	e7f8      	b.n	800e726 <memmove+0x12>
 800e734:	4402      	add	r2, r0
 800e736:	4601      	mov	r1, r0
 800e738:	428a      	cmp	r2, r1
 800e73a:	d100      	bne.n	800e73e <memmove+0x2a>
 800e73c:	bd10      	pop	{r4, pc}
 800e73e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e742:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e746:	e7f7      	b.n	800e738 <memmove+0x24>

0800e748 <_realloc_r>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	4680      	mov	r8, r0
 800e74e:	4614      	mov	r4, r2
 800e750:	460e      	mov	r6, r1
 800e752:	b921      	cbnz	r1, 800e75e <_realloc_r+0x16>
 800e754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e758:	4611      	mov	r1, r2
 800e75a:	f7ff bb85 	b.w	800de68 <_malloc_r>
 800e75e:	b92a      	cbnz	r2, 800e76c <_realloc_r+0x24>
 800e760:	f7ff fc9c 	bl	800e09c <_free_r>
 800e764:	4625      	mov	r5, r4
 800e766:	4628      	mov	r0, r5
 800e768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e76c:	f000 f81b 	bl	800e7a6 <_malloc_usable_size_r>
 800e770:	4284      	cmp	r4, r0
 800e772:	4607      	mov	r7, r0
 800e774:	d802      	bhi.n	800e77c <_realloc_r+0x34>
 800e776:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e77a:	d812      	bhi.n	800e7a2 <_realloc_r+0x5a>
 800e77c:	4621      	mov	r1, r4
 800e77e:	4640      	mov	r0, r8
 800e780:	f7ff fb72 	bl	800de68 <_malloc_r>
 800e784:	4605      	mov	r5, r0
 800e786:	2800      	cmp	r0, #0
 800e788:	d0ed      	beq.n	800e766 <_realloc_r+0x1e>
 800e78a:	42bc      	cmp	r4, r7
 800e78c:	4622      	mov	r2, r4
 800e78e:	4631      	mov	r1, r6
 800e790:	bf28      	it	cs
 800e792:	463a      	movcs	r2, r7
 800e794:	f7ff fb32 	bl	800ddfc <memcpy>
 800e798:	4631      	mov	r1, r6
 800e79a:	4640      	mov	r0, r8
 800e79c:	f7ff fc7e 	bl	800e09c <_free_r>
 800e7a0:	e7e1      	b.n	800e766 <_realloc_r+0x1e>
 800e7a2:	4635      	mov	r5, r6
 800e7a4:	e7df      	b.n	800e766 <_realloc_r+0x1e>

0800e7a6 <_malloc_usable_size_r>:
 800e7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7aa:	1f18      	subs	r0, r3, #4
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	bfbc      	itt	lt
 800e7b0:	580b      	ldrlt	r3, [r1, r0]
 800e7b2:	18c0      	addlt	r0, r0, r3
 800e7b4:	4770      	bx	lr
	...

0800e7b8 <_init>:
 800e7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ba:	bf00      	nop
 800e7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7be:	bc08      	pop	{r3}
 800e7c0:	469e      	mov	lr, r3
 800e7c2:	4770      	bx	lr

0800e7c4 <_fini>:
 800e7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7c6:	bf00      	nop
 800e7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7ca:	bc08      	pop	{r3}
 800e7cc:	469e      	mov	lr, r3
 800e7ce:	4770      	bx	lr
