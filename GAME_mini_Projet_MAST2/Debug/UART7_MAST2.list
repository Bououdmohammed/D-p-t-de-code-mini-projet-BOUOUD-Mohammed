
UART7_MAST2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e650  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cdc  0800e820  0800e820  0001e820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080134fc  080134fc  000300b0  2**0
                  CONTENTS
  4 .ARM          00000008  080134fc  080134fc  000234fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013504  08013504  000300b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013504  08013504  00023504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013508  08013508  00023508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0801350c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000495c  200000b0  080135bc  000300b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a0c  080135bc  00034a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030bbb  00000000  00000000  000300e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bc8  00000000  00000000  00060c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002680  00000000  00000000  00066868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002418  00000000  00000000  00068ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb36  00000000  00000000  0006b300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d6c6  00000000  00000000  00099e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117c84  00000000  00000000  000c74fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001df180  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a884  00000000  00000000  001df1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e808 	.word	0x0800e808

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000b4 	.word	0x200000b4
 800020c:	0800e808 	.word	0x0800e808

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	4a07      	ldr	r2, [pc, #28]	; (80005e0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005c4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c6:	68bb      	ldr	r3, [r7, #8]
 80005c8:	4a06      	ldr	r2, [pc, #24]	; (80005e4 <vApplicationGetIdleTaskMemory+0x30>)
 80005ca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2280      	movs	r2, #128	; 0x80
 80005d0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000cc 	.word	0x200000cc
 80005e4:	20000180 	.word	0x20000180

080005e8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f002 f850 	bl	8002698 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 f9b4 	bl	8000964 <ft5336_I2C_InitializeIfRequired>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800060e:	bf00      	nop
 8000610:	370c      	adds	r7, #12
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr

0800061a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800061a:	b580      	push	{r7, lr}
 800061c:	b084      	sub	sp, #16
 800061e:	af00      	add	r7, sp, #0
 8000620:	4603      	mov	r3, r0
 8000622:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800062c:	2300      	movs	r3, #0
 800062e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000630:	f000 f998 	bl	8000964 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000634:	2300      	movs	r3, #0
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e010      	b.n	800065c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800063a:	88fb      	ldrh	r3, [r7, #6]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	21a8      	movs	r1, #168	; 0xa8
 8000640:	4618      	mov	r0, r3
 8000642:	f002 f80b 	bl	800265c <TS_IO_Read>
 8000646:	4603      	mov	r3, r0
 8000648:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800064a:	7b7b      	ldrb	r3, [r7, #13]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b51      	cmp	r3, #81	; 0x51
 8000650:	d101      	bne.n	8000656 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d802      	bhi.n	8000668 <ft5336_ReadID+0x4e>
 8000662:	7bbb      	ldrb	r3, [r7, #14]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0e8      	beq.n	800063a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000668:	7b7b      	ldrb	r3, [r7, #13]
 800066a:	b2db      	uxtb	r3, r3
 800066c:	b29b      	uxth	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	4603      	mov	r3, r0
 800067e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000680:	88fb      	ldrh	r3, [r7, #6]
 8000682:	4618      	mov	r0, r3
 8000684:	f000 f97e 	bl	8000984 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000688:	88fb      	ldrh	r3, [r7, #6]
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f932 	bl	80008f4 <ft5336_TS_DisableIT>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006a6:	88fb      	ldrh	r3, [r7, #6]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	2102      	movs	r1, #2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f001 ffd5 	bl	800265c <TS_IO_Read>
 80006b2:	4603      	mov	r3, r0
 80006b4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	2b05      	cmp	r3, #5
 80006c8:	d901      	bls.n	80006ce <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80006d6:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <ft5336_TS_DetectTouch+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	b2db      	uxtb	r3, r3
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000380 	.word	0x20000380

080006ec <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
 80006f8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800070e:	4b6d      	ldr	r3, [pc, #436]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000710:	789a      	ldrb	r2, [r3, #2]
 8000712:	4b6c      	ldr	r3, [pc, #432]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 8000714:	785b      	ldrb	r3, [r3, #1]
 8000716:	429a      	cmp	r2, r3
 8000718:	f080 80cf 	bcs.w	80008ba <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800071c:	4b69      	ldr	r3, [pc, #420]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 800071e:	789b      	ldrb	r3, [r3, #2]
 8000720:	2b09      	cmp	r3, #9
 8000722:	d871      	bhi.n	8000808 <ft5336_TS_GetXY+0x11c>
 8000724:	a201      	add	r2, pc, #4	; (adr r2, 800072c <ft5336_TS_GetXY+0x40>)
 8000726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072a:	bf00      	nop
 800072c:	08000755 	.word	0x08000755
 8000730:	08000767 	.word	0x08000767
 8000734:	08000779 	.word	0x08000779
 8000738:	0800078b 	.word	0x0800078b
 800073c:	0800079d 	.word	0x0800079d
 8000740:	080007af 	.word	0x080007af
 8000744:	080007c1 	.word	0x080007c1
 8000748:	080007d3 	.word	0x080007d3
 800074c:	080007e5 	.word	0x080007e5
 8000750:	080007f7 	.word	0x080007f7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000754:	2304      	movs	r3, #4
 8000756:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000758:	2303      	movs	r3, #3
 800075a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800075c:	2306      	movs	r3, #6
 800075e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000760:	2305      	movs	r3, #5
 8000762:	753b      	strb	r3, [r7, #20]
      break;
 8000764:	e051      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000766:	230a      	movs	r3, #10
 8000768:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800076a:	2309      	movs	r3, #9
 800076c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800076e:	230c      	movs	r3, #12
 8000770:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000772:	230b      	movs	r3, #11
 8000774:	753b      	strb	r3, [r7, #20]
      break;
 8000776:	e048      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000778:	2310      	movs	r3, #16
 800077a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800077c:	230f      	movs	r3, #15
 800077e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000780:	2312      	movs	r3, #18
 8000782:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000784:	2311      	movs	r3, #17
 8000786:	753b      	strb	r3, [r7, #20]
      break;
 8000788:	e03f      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800078a:	2316      	movs	r3, #22
 800078c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800078e:	2315      	movs	r3, #21
 8000790:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000792:	2318      	movs	r3, #24
 8000794:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000796:	2317      	movs	r3, #23
 8000798:	753b      	strb	r3, [r7, #20]
      break;
 800079a:	e036      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800079c:	231c      	movs	r3, #28
 800079e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007a0:	231b      	movs	r3, #27
 80007a2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007a4:	231e      	movs	r3, #30
 80007a6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007a8:	231d      	movs	r3, #29
 80007aa:	753b      	strb	r3, [r7, #20]
      break;
 80007ac:	e02d      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007ae:	2322      	movs	r3, #34	; 0x22
 80007b0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007b2:	2321      	movs	r3, #33	; 0x21
 80007b4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007b6:	2324      	movs	r3, #36	; 0x24
 80007b8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ba:	2323      	movs	r3, #35	; 0x23
 80007bc:	753b      	strb	r3, [r7, #20]
      break;
 80007be:	e024      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007c0:	2328      	movs	r3, #40	; 0x28
 80007c2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007c4:	2327      	movs	r3, #39	; 0x27
 80007c6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007c8:	232a      	movs	r3, #42	; 0x2a
 80007ca:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007cc:	2329      	movs	r3, #41	; 0x29
 80007ce:	753b      	strb	r3, [r7, #20]
      break;
 80007d0:	e01b      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80007d2:	232e      	movs	r3, #46	; 0x2e
 80007d4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80007d6:	232d      	movs	r3, #45	; 0x2d
 80007d8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007da:	2330      	movs	r3, #48	; 0x30
 80007dc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007de:	232f      	movs	r3, #47	; 0x2f
 80007e0:	753b      	strb	r3, [r7, #20]
      break;
 80007e2:	e012      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007e4:	2334      	movs	r3, #52	; 0x34
 80007e6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007e8:	2333      	movs	r3, #51	; 0x33
 80007ea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007ec:	2336      	movs	r3, #54	; 0x36
 80007ee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007f0:	2335      	movs	r3, #53	; 0x35
 80007f2:	753b      	strb	r3, [r7, #20]
      break;
 80007f4:	e009      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007f6:	233a      	movs	r3, #58	; 0x3a
 80007f8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007fa:	2339      	movs	r3, #57	; 0x39
 80007fc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007fe:	233c      	movs	r3, #60	; 0x3c
 8000800:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000802:	233b      	movs	r3, #59	; 0x3b
 8000804:	753b      	strb	r3, [r7, #20]
      break;
 8000806:	e000      	b.n	800080a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000808:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800080a:	89fb      	ldrh	r3, [r7, #14]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	7dfa      	ldrb	r2, [r7, #23]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f001 ff22 	bl	800265c <TS_IO_Read>
 8000818:	4603      	mov	r3, r0
 800081a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800081c:	7cfb      	ldrb	r3, [r7, #19]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b29      	ldr	r3, [pc, #164]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000824:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000826:	89fb      	ldrh	r3, [r7, #14]
 8000828:	b2db      	uxtb	r3, r3
 800082a:	7dba      	ldrb	r2, [r7, #22]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f001 ff14 	bl	800265c <TS_IO_Read>
 8000834:	4603      	mov	r3, r0
 8000836:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000838:	7cfb      	ldrb	r3, [r7, #19]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	021b      	lsls	r3, r3, #8
 800083e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000842:	b21a      	sxth	r2, r3
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	b21b      	sxth	r3, r3
 800084a:	4313      	orrs	r3, r2
 800084c:	b21b      	sxth	r3, r3
 800084e:	b29a      	uxth	r2, r3
 8000850:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000852:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000854:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000856:	881a      	ldrh	r2, [r3, #0]
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800085c:	89fb      	ldrh	r3, [r7, #14]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	7d7a      	ldrb	r2, [r7, #21]
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fef9 	bl	800265c <TS_IO_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000878:	89fb      	ldrh	r3, [r7, #14]
 800087a:	b2db      	uxtb	r3, r3
 800087c:	7d3a      	ldrb	r2, [r7, #20]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f001 feeb 	bl	800265c <TS_IO_Read>
 8000886:	4603      	mov	r3, r0
 8000888:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800088a:	7cfb      	ldrb	r3, [r7, #19]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000894:	b21a      	sxth	r2, r3
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 8000898:	881b      	ldrh	r3, [r3, #0]
 800089a:	b21b      	sxth	r3, r3
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <ft5336_TS_GetXY+0x1dc>)
 80008a8:	881a      	ldrh	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008ae:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b0:	789b      	ldrb	r3, [r3, #2]
 80008b2:	3301      	adds	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b03      	ldr	r3, [pc, #12]	; (80008c4 <ft5336_TS_GetXY+0x1d8>)
 80008b8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ba:	bf00      	nop
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000380 	.word	0x20000380
 80008c8:	20000384 	.word	0x20000384

080008cc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008da:	2301      	movs	r3, #1
 80008dc:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	7bfa      	ldrb	r2, [r7, #15]
 80008e4:	21a4      	movs	r1, #164	; 0xa4
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fe9e 	bl	8002628 <TS_IO_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}

080008f4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000902:	2300      	movs	r3, #0
 8000904:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000906:	88fb      	ldrh	r3, [r7, #6]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	7bfa      	ldrb	r2, [r7, #15]
 800090c:	21a4      	movs	r1, #164	; 0xa4
 800090e:	4618      	mov	r0, r3
 8000910:	f001 fe8a 	bl	8002628 <TS_IO_Write>
}
 8000914:	bf00      	nop
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000950:	4b03      	ldr	r3, [pc, #12]	; (8000960 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000952:	781b      	ldrb	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000380 	.word	0x20000380

08000964 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000968:	f7ff fff0 	bl	800094c <ft5336_Get_I2C_InitializedStatus>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d104      	bne.n	800097c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000972:	f001 fe4f 	bl	8002614 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000976:	4b02      	ldr	r3, [pc, #8]	; (8000980 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
  }
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000380 	.word	0x20000380

08000984 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	4603      	mov	r3, r0
 800098c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000992:	68fb      	ldr	r3, [r7, #12]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a0:	b5b0      	push	{r4, r5, r7, lr}
 80009a2:	b0bc      	sub	sp, #240	; 0xf0
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a6:	f003 fda8 	bl	80044fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009aa:	f000 f955 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ae:	f000 ff1d 	bl	80017ec <MX_GPIO_Init>
  MX_ADC3_Init();
 80009b2:	f000 fa15 	bl	8000de0 <MX_ADC3_Init>
  MX_DMA2D_Init();
 80009b6:	f000 fa8f 	bl	8000ed8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80009ba:	f000 fec7 	bl	800174c <MX_FMC_Init>
  MX_I2C1_Init();
 80009be:	f000 fabd 	bl	8000f3c <MX_I2C1_Init>
  MX_I2C3_Init();
 80009c2:	f000 fafb 	bl	8000fbc <MX_I2C3_Init>
  MX_LTDC_Init();
 80009c6:	f000 fb39 	bl	800103c <MX_LTDC_Init>
  MX_RTC_Init();
 80009ca:	f000 fbb9 	bl	8001140 <MX_RTC_Init>
  MX_SPI2_Init();
 80009ce:	f000 fc5d 	bl	800128c <MX_SPI2_Init>
  MX_TIM1_Init();
 80009d2:	f000 fc99 	bl	8001308 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009d6:	f000 fceb 	bl	80013b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009da:	f000 fd37 	bl	800144c <MX_TIM3_Init>
  MX_TIM5_Init();
 80009de:	f000 fd83 	bl	80014e8 <MX_TIM5_Init>
  MX_TIM8_Init();
 80009e2:	f000 fdcf 	bl	8001584 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80009e6:	f000 fe51 	bl	800168c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80009ea:	f000 fe7f 	bl	80016ec <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80009ee:	f000 f9a5 	bl	8000d3c <MX_ADC1_Init>
  MX_DAC_Init();
 80009f2:	f000 fa47 	bl	8000e84 <MX_DAC_Init>
  MX_UART7_Init();
 80009f6:	f000 fe19 	bl	800162c <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  	BSP_LCD_Init();
 80009fa:	f001 fe59 	bl	80026b0 <BSP_LCD_Init>
    BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80009fe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a02:	2000      	movs	r0, #0
 8000a04:	f001 feec 	bl	80027e0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8000a08:	f001 fec2 	bl	8002790 <BSP_LCD_GetXSize>
 8000a0c:	4604      	mov	r4, r0
 8000a0e:	f001 fed3 	bl	80027b8 <BSP_LCD_GetYSize>
 8000a12:	4603      	mov	r3, r0
 8000a14:	fb04 f303 	mul.w	r3, r4, r3
 8000a18:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	f001 fedd 	bl	80027e0 <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000a26:	f002 fa3f 	bl	8002ea8 <BSP_LCD_DisplayOn>
    BSP_LCD_SelectLayer(0);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 ff38 	bl	80028a0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295
 8000a34:	f001 ff90 	bl	8002958 <BSP_LCD_Clear>
    BSP_LCD_SelectLayer(1);
 8000a38:	2001      	movs	r0, #1
 8000a3a:	f001 ff31 	bl	80028a0 <BSP_LCD_SelectLayer>
    BSP_LCD_Clear(00);
 8000a3e:	2000      	movs	r0, #0
 8000a40:	f001 ff8a 	bl	8002958 <BSP_LCD_Clear>
    BSP_LCD_DrawBitmap(0,0,(uint8_t*)diableRGB565_bmp);
 8000a44:	4a6e      	ldr	r2, [pc, #440]	; (8000c00 <main+0x260>)
 8000a46:	2100      	movs	r1, #0
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f002 f901 	bl	8002c50 <BSP_LCD_DrawBitmap>
    BSP_LCD_SetFont(&Font12);
 8000a4e:	486d      	ldr	r0, [pc, #436]	; (8000c04 <main+0x264>)
 8000a50:	f001 ff68 	bl	8002924 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_MAGENTA);
 8000a54:	f46f 407f 	mvn.w	r0, #65280	; 0xff00
 8000a58:	f001 ff32 	bl	80028c0 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f001 ff47 	bl	80028f0 <BSP_LCD_SetBackColor>

    BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a62:	f001 fe95 	bl	8002790 <BSP_LCD_GetXSize>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29c      	uxth	r4, r3
 8000a6a:	f001 fea5 	bl	80027b8 <BSP_LCD_GetYSize>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	4619      	mov	r1, r3
 8000a74:	4620      	mov	r0, r4
 8000a76:	f002 fe29 	bl	80036cc <BSP_TS_Init>
    //uart7
    HAL_UART_Receive_IT(&huart7,(uint8_t *)rxbuffer,3);
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	4962      	ldr	r1, [pc, #392]	; (8000c08 <main+0x268>)
 8000a7e:	4863      	ldr	r0, [pc, #396]	; (8000c0c <main+0x26c>)
 8000a80:	f009 f98c 	bl	8009d9c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of MUTEX */
  osMutexDef(MUTEX);
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MUTEXHandle = osMutexCreate(osMutex(MUTEX));
 8000a90:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000a94:	4618      	mov	r0, r3
 8000a96:	f00a fdbc 	bl	800b612 <osMutexCreate>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	4a5c      	ldr	r2, [pc, #368]	; (8000c10 <main+0x270>)
 8000a9e:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueP2V */
  osMessageQDef(myQueueP2V, 2, uint16_t);
 8000aa0:	4b5c      	ldr	r3, [pc, #368]	; (8000c14 <main+0x274>)
 8000aa2:	f107 04d8 	add.w	r4, r7, #216	; 0xd8
 8000aa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueP2VHandle = osMessageCreate(osMessageQ(myQueueP2V), NULL);
 8000aac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f00a fdc5 	bl	800b642 <osMessageCreate>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4a57      	ldr	r2, [pc, #348]	; (8000c18 <main+0x278>)
 8000abc:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 2, uint16_t);
 8000abe:	4b55      	ldr	r3, [pc, #340]	; (8000c14 <main+0x274>)
 8000ac0:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8000ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000ace:	2100      	movs	r1, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f00a fdb6 	bl	800b642 <osMessageCreate>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	4a50      	ldr	r2, [pc, #320]	; (8000c1c <main+0x27c>)
 8000ada:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueHommePos */
  osMessageQDef(myQueueHommePos, 2, uint16_t);
 8000adc:	4b4d      	ldr	r3, [pc, #308]	; (8000c14 <main+0x274>)
 8000ade:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000ae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueHommePosHandle = osMessageCreate(osMessageQ(myQueueHommePos), NULL);
 8000ae8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f00a fda7 	bl	800b642 <osMessageCreate>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a4a      	ldr	r2, [pc, #296]	; (8000c20 <main+0x280>)
 8000af8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myQueueBompe */
  osMessageQDef(myQueueBompe, 2, uint16_t);
 8000afa:	4b46      	ldr	r3, [pc, #280]	; (8000c14 <main+0x274>)
 8000afc:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueBompeHandle = osMessageCreate(osMessageQ(myQueueBompe), NULL);
 8000b06:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f00a fd98 	bl	800b642 <osMessageCreate>
 8000b12:	4603      	mov	r3, r0
 8000b14:	4a43      	ldr	r2, [pc, #268]	; (8000c24 <main+0x284>)
 8000b16:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b18:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <main+0x288>)
 8000b1a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000b1e:	461d      	mov	r5, r3
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b2c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00a fd0d 	bl	800b552 <osThreadCreate>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	4a3c      	ldr	r2, [pc, #240]	; (8000c2c <main+0x28c>)
 8000b3c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task_1 */
  osThreadDef(Task_1, Task_diable, osPriorityNormal, 0, 1024);
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <main+0x290>)
 8000b40:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b44:	461d      	mov	r5, r3
 8000b46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task_1Handle = osThreadCreate(osThread(Task_1), NULL);
 8000b52:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00a fcfa 	bl	800b552 <osThreadCreate>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a34      	ldr	r2, [pc, #208]	; (8000c34 <main+0x294>)
 8000b62:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask03 */
  osThreadDef(myTask03, Task_homme, osPriorityNormal, 0, 1024);
 8000b64:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <main+0x298>)
 8000b66:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b6a:	461d      	mov	r5, r3
 8000b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8000b78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f00a fce7 	bl	800b552 <osThreadCreate>
 8000b84:	4603      	mov	r3, r0
 8000b86:	4a2d      	ldr	r2, [pc, #180]	; (8000c3c <main+0x29c>)
 8000b88:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask06 */
  osThreadDef(myTask06, Task_Transmit_data, osPriorityNormal, 0, 128);
 8000b8a:	4b2d      	ldr	r3, [pc, #180]	; (8000c40 <main+0x2a0>)
 8000b8c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b90:	461d      	mov	r5, r3
 8000b92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b96:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask06Handle = osThreadCreate(osThread(myTask06), NULL);
 8000b9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f00a fcd4 	bl	800b552 <osThreadCreate>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4a25      	ldr	r2, [pc, #148]	; (8000c44 <main+0x2a4>)
 8000bae:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask05 */
  osThreadDef(myTask05, Task_missile, osPriorityNormal, 0, 1024);
 8000bb0:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <main+0x2a8>)
 8000bb2:	f107 041c 	add.w	r4, r7, #28
 8000bb6:	461d      	mov	r5, r3
 8000bb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bc0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask05Handle = osThreadCreate(osThread(myTask05), NULL);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f00a fcc1 	bl	800b552 <osThreadCreate>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <main+0x2ac>)
 8000bd4:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask07 */
  osThreadDef(myTask07, Task_Game_Over, osPriorityIdle, 0, 128);
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <main+0x2b0>)
 8000bd8:	463c      	mov	r4, r7
 8000bda:	461d      	mov	r5, r3
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000be4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask07Handle = osThreadCreate(osThread(myTask07), NULL);
 8000be8:	463b      	mov	r3, r7
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f00a fcb0 	bl	800b552 <osThreadCreate>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a17      	ldr	r2, [pc, #92]	; (8000c54 <main+0x2b4>)
 8000bf6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bf8:	f00a fca4 	bl	800b544 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <main+0x25c>
 8000bfe:	bf00      	nop
 8000c00:	0800e954 	.word	0x0800e954
 8000c04:	20000030 	.word	0x20000030
 8000c08:	20000998 	.word	0x20000998
 8000c0c:	200007ac 	.word	0x200007ac
 8000c10:	20000994 	.word	0x20000994
 8000c14:	0800e864 	.word	0x0800e864
 8000c18:	20000984 	.word	0x20000984
 8000c1c:	20000988 	.word	0x20000988
 8000c20:	2000098c 	.word	0x2000098c
 8000c24:	20000990 	.word	0x20000990
 8000c28:	0800e874 	.word	0x0800e874
 8000c2c:	2000096c 	.word	0x2000096c
 8000c30:	0800e890 	.word	0x0800e890
 8000c34:	20000970 	.word	0x20000970
 8000c38:	0800e8ac 	.word	0x0800e8ac
 8000c3c:	20000974 	.word	0x20000974
 8000c40:	0800e8c8 	.word	0x0800e8c8
 8000c44:	20000978 	.word	0x20000978
 8000c48:	0800e8e4 	.word	0x0800e8e4
 8000c4c:	2000097c 	.word	0x2000097c
 8000c50:	0800e900 	.word	0x0800e900
 8000c54:	20000980 	.word	0x20000980

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b094      	sub	sp, #80	; 0x50
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0320 	add.w	r3, r7, #32
 8000c62:	2230      	movs	r2, #48	; 0x30
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f00d f8fe 	bl	800de68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
 8000c7a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c7c:	f006 fcea 	bl	8007654 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <SystemClock_Config+0xdc>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a2b      	ldr	r2, [pc, #172]	; (8000d34 <SystemClock_Config+0xdc>)
 8000c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8c:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <SystemClock_Config+0xdc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <SystemClock_Config+0xe0>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	; (8000d38 <SystemClock_Config+0xe0>)
 8000c9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	4b24      	ldr	r3, [pc, #144]	; (8000d38 <SystemClock_Config+0xe0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000cb0:	2309      	movs	r3, #9
 8000cb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000cc8:	2319      	movs	r3, #25
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ccc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000cd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000cd6:	2309      	movs	r3, #9
 8000cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f006 fd18 	bl	8007714 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000cea:	f001 fb37 	bl	800235c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cee:	f006 fcc1 	bl	8007674 <HAL_PWREx_EnableOverDrive>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000cf8:	f001 fb30 	bl	800235c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d00:	2302      	movs	r3, #2
 8000d02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000d14:	f107 030c 	add.w	r3, r7, #12
 8000d18:	2106      	movs	r1, #6
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f006 ff9e 	bl	8007c5c <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000d26:	f001 fb19 	bl	800235c <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40007000 	.word	0x40007000

08000d3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d42:	463b      	mov	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <MX_ADC1_Init+0xa0>)
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d9e:	f003 fbfd 	bl	800459c <HAL_ADC_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000da8:	f001 fad8 	bl	800235c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000dbe:	f003 fd97 	bl	80048f0 <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dc8:	f001 fac8 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000388 	.word	0x20000388
 8000dd8:	40012000 	.word	0x40012000
 8000ddc:	0f000001 	.word	0x0f000001

08000de0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <MX_ADC3_Init+0x9c>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000dfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dfe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <MX_ADC3_Init+0xa0>)
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e42:	f003 fbab 	bl	800459c <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e4c:	f001 fa86 	bl	800235c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e50:	2306      	movs	r3, #6
 8000e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e62:	f003 fd45 	bl	80048f0 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e6c:	f001 fa76 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200003d0 	.word	0x200003d0
 8000e7c:	40012200 	.word	0x40012200
 8000e80:	0f000001 	.word	0x0f000001

08000e84 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_DAC_Init+0x4c>)
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <MX_DAC_Init+0x50>)
 8000e96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_DAC_Init+0x4c>)
 8000e9a:	f004 f85b 	bl	8004f54 <HAL_DAC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ea4:	f001 fa5a 	bl	800235c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <MX_DAC_Init+0x4c>)
 8000eb8:	f004 f8d2 	bl	8005060 <HAL_DAC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ec2:	f001 fa4b 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000418 	.word	0x20000418
 8000ed4:	40007400 	.word	0x40007400

08000ed8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_DMA2D_Init+0x60>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f0e:	f004 fb51 	bl	80055b4 <HAL_DMA2D_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f18:	f001 fa20 	bl	800235c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f20:	f004 fdb6 	bl	8005a90 <HAL_DMA2D_ConfigLayer>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f2a:	f001 fa17 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	2000042c 	.word	0x2000042c
 8000f38:	4002b000 	.word	0x4002b000

08000f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_I2C1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <MX_I2C1_Init+0x7c>)
 8000f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f78:	f005 f9ba 	bl	80062f0 <HAL_I2C_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f82:	f001 f9eb 	bl	800235c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f8a:	f005 ff53 	bl	8006e34 <HAL_I2CEx_ConfigAnalogFilter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f94:	f001 f9e2 	bl	800235c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f9c:	f005 ff95 	bl	8006eca <HAL_I2CEx_ConfigDigitalFilter>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f001 f9d9 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000046c 	.word	0x2000046c
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	00c0eaff 	.word	0x00c0eaff

08000fbc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_I2C3_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_I2C3_Init+0x7c>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C3_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_I2C3_Init+0x74>)
 8000ff8:	f005 f97a 	bl	80062f0 <HAL_I2C_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001002:	f001 f9ab 	bl	800235c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001006:	2100      	movs	r1, #0
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_I2C3_Init+0x74>)
 800100a:	f005 ff13 	bl	8006e34 <HAL_I2CEx_ConfigAnalogFilter>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001014:	f001 f9a2 	bl	800235c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_I2C3_Init+0x74>)
 800101c:	f005 ff55 	bl	8006eca <HAL_I2CEx_ConfigDigitalFilter>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001026:	f001 f999 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200004b8 	.word	0x200004b8
 8001034:	40005c00 	.word	0x40005c00
 8001038:	00c0eaff 	.word	0x00c0eaff

0800103c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	; 0x38
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2234      	movs	r2, #52	; 0x34
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00c ff0d 	bl	800de68 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800104e:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001050:	4a3a      	ldr	r2, [pc, #232]	; (800113c <MX_LTDC_Init+0x100>)
 8001052:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <MX_LTDC_Init+0xfc>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <MX_LTDC_Init+0xfc>)
 800106e:	2228      	movs	r2, #40	; 0x28
 8001070:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001074:	2209      	movs	r2, #9
 8001076:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <MX_LTDC_Init+0xfc>)
 800107a:	2235      	movs	r2, #53	; 0x35
 800107c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001080:	220b      	movs	r2, #11
 8001082:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001086:	f240 2215 	movw	r2, #533	; 0x215
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_LTDC_Init+0xfc>)
 800108e:	f240 121b 	movw	r2, #283	; 0x11b
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001096:	f240 2235 	movw	r2, #565	; 0x235
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_LTDC_Init+0xfc>)
 800109e:	f240 121d 	movw	r2, #285	; 0x11d
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010bc:	481e      	ldr	r0, [pc, #120]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010be:	f005 ff51 	bl	8006f64 <HAL_LTDC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010c8:	f001 f948 	bl	800235c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80010da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010e4:	23ff      	movs	r3, #255	; 0xff
 80010e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010f2:	2307      	movs	r3, #7
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010f6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80010fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001102:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001122:	f006 f8b1 	bl	8007288 <HAL_LTDC_ConfigLayer>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800112c:	f001 f916 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000504 	.word	0x20000504
 800113c:	40016800 	.word	0x40016800

08001140 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b092      	sub	sp, #72	; 0x48
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	222c      	movs	r2, #44	; 0x2c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00c fe80 	bl	800de68 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <MX_RTC_Init+0x144>)
 800116a:	4a47      	ldr	r2, [pc, #284]	; (8001288 <MX_RTC_Init+0x148>)
 800116c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800116e:	4b45      	ldr	r3, [pc, #276]	; (8001284 <MX_RTC_Init+0x144>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <MX_RTC_Init+0x144>)
 8001176:	227f      	movs	r2, #127	; 0x7f
 8001178:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <MX_RTC_Init+0x144>)
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <MX_RTC_Init+0x144>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <MX_RTC_Init+0x144>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <MX_RTC_Init+0x144>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001192:	483c      	ldr	r0, [pc, #240]	; (8001284 <MX_RTC_Init+0x144>)
 8001194:	f007 fb6a 	bl	800886c <HAL_RTC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800119e:	f001 f8dd 	bl	800235c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c0:	2201      	movs	r2, #1
 80011c2:	4619      	mov	r1, r3
 80011c4:	482f      	ldr	r0, [pc, #188]	; (8001284 <MX_RTC_Init+0x144>)
 80011c6:	f007 fbe3 	bl	8008990 <HAL_RTC_SetTime>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011d0:	f001 f8c4 	bl	800235c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011da:	2301      	movs	r3, #1
 80011dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x5;
 80011e0:	2305      	movs	r3, #5
 80011e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x22;
 80011e6:	2322      	movs	r3, #34	; 0x22
 80011e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	4823      	ldr	r0, [pc, #140]	; (8001284 <MX_RTC_Init+0x144>)
 80011f6:	f007 fc89 	bl	8008b0c <HAL_RTC_SetDate>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001200:	f001 f8ac 	bl	800235c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001204:	2300      	movs	r3, #0
 8001206:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001208:	2300      	movs	r3, #0
 800120a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800120c:	2300      	movs	r3, #0
 800120e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	2201      	movs	r2, #1
 8001238:	4619      	mov	r1, r3
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <MX_RTC_Init+0x144>)
 800123c:	f007 fd0e 	bl	8008c5c <HAL_RTC_SetAlarm>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001246:	f001 f889 	bl	800235c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800124a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <MX_RTC_Init+0x144>)
 8001258:	f007 fd00 	bl	8008c5c <HAL_RTC_SetAlarm>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001262:	f001 f87b 	bl	800235c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001266:	2202      	movs	r2, #2
 8001268:	2100      	movs	r1, #0
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_RTC_Init+0x144>)
 800126c:	f007 fe80 	bl	8008f70 <HAL_RTCEx_SetTimeStamp>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001276:	f001 f871 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3748      	adds	r7, #72	; 0x48
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200005ac 	.word	0x200005ac
 8001288:	40002800 	.word	0x40002800

0800128c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_SPI2_Init+0x74>)
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <MX_SPI2_Init+0x78>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_SPI2_Init+0x74>)
 8001298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800129c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_SPI2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_SPI2_Init+0x74>)
 80012a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_SPI2_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_SPI2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_SPI2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_SPI2_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_SPI2_Init+0x74>)
 80012da:	2207      	movs	r2, #7
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_SPI2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_SPI2_Init+0x74>)
 80012e6:	2208      	movs	r2, #8
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ec:	f007 ff27 	bl	800913e <HAL_SPI_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012f6:	f001 f831 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200005cc 	.word	0x200005cc
 8001304:	40003800 	.word	0x40003800

08001308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <MX_TIM1_Init+0xa4>)
 800132a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001354:	f007 ff9e 	bl	8009294 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800135e:	f000 fffd 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001370:	f008 f980 	bl	8009674 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800137a:	f000 ffef 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001390:	f008 fb9c 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800139a:	f000 ffdf 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000630 	.word	0x20000630
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_TIM2_Init+0x98>)
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM2_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_TIM2_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_TIM2_Init+0x98>)
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_TIM2_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM2_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_TIM2_Init+0x98>)
 80013f8:	f007 ff4c 	bl	8009294 <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001402:	f000 ffab 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_TIM2_Init+0x98>)
 8001414:	f008 f92e 	bl	8009674 <HAL_TIM_ConfigClockSource>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800141e:	f000 ff9d 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_TIM2_Init+0x98>)
 8001430:	f008 fb4c 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800143a:	f000 ff8f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000067c 	.word	0x2000067c

0800144c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b088      	sub	sp, #32
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <MX_TIM3_Init+0x94>)
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <MX_TIM3_Init+0x98>)
 800146e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <MX_TIM3_Init+0x94>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_TIM3_Init+0x94>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_TIM3_Init+0x94>)
 800147e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001482:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001484:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_TIM3_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_TIM3_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001490:	4813      	ldr	r0, [pc, #76]	; (80014e0 <MX_TIM3_Init+0x94>)
 8001492:	f007 feff 	bl	8009294 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800149c:	f000 ff5e 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	; (80014e0 <MX_TIM3_Init+0x94>)
 80014ae:	f008 f8e1 	bl	8009674 <HAL_TIM_ConfigClockSource>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80014b8:	f000 ff50 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014c4:	1d3b      	adds	r3, r7, #4
 80014c6:	4619      	mov	r1, r3
 80014c8:	4805      	ldr	r0, [pc, #20]	; (80014e0 <MX_TIM3_Init+0x94>)
 80014ca:	f008 faff 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014d4:	f000 ff42 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014d8:	bf00      	nop
 80014da:	3720      	adds	r7, #32
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200006c8 	.word	0x200006c8
 80014e4:	40000400 	.word	0x40000400

080014e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM5_Init+0x94>)
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <MX_TIM5_Init+0x98>)
 800150a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_TIM5_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_TIM5_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_TIM5_Init+0x94>)
 800151a:	f04f 32ff 	mov.w	r2, #4294967295
 800151e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_TIM5_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_TIM5_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800152c:	4813      	ldr	r0, [pc, #76]	; (800157c <MX_TIM5_Init+0x94>)
 800152e:	f007 feb1 	bl	8009294 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001538:	f000 ff10 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4619      	mov	r1, r3
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_TIM5_Init+0x94>)
 800154a:	f008 f893 	bl	8009674 <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001554:	f000 ff02 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM5_Init+0x94>)
 8001566:	f008 fab1 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001570:	f000 fef4 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000714 	.word	0x20000714
 8001580:	40000c00 	.word	0x40000c00

08001584 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b088      	sub	sp, #32
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <MX_TIM8_Init+0xa4>)
 80015a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015a8:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ae:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80015ce:	4815      	ldr	r0, [pc, #84]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015d0:	f007 fe60 	bl	8009294 <HAL_TIM_Base_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80015da:	f000 febf 	bl	800235c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4619      	mov	r1, r3
 80015ea:	480e      	ldr	r0, [pc, #56]	; (8001624 <MX_TIM8_Init+0xa0>)
 80015ec:	f008 f842 	bl	8009674 <HAL_TIM_ConfigClockSource>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80015f6:	f000 feb1 	bl	800235c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4806      	ldr	r0, [pc, #24]	; (8001624 <MX_TIM8_Init+0xa0>)
 800160c:	f008 fa5e 	bl	8009acc <HAL_TIMEx_MasterConfigSynchronization>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001616:	f000 fea1 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000760 	.word	0x20000760
 8001628:	40010400 	.word	0x40010400

0800162c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001630:	4b14      	ldr	r3, [pc, #80]	; (8001684 <MX_UART7_Init+0x58>)
 8001632:	4a15      	ldr	r2, [pc, #84]	; (8001688 <MX_UART7_Init+0x5c>)
 8001634:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001636:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_UART7_Init+0x58>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <MX_UART7_Init+0x58>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <MX_UART7_Init+0x58>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <MX_UART7_Init+0x58>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <MX_UART7_Init+0x58>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <MX_UART7_Init+0x58>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b09      	ldr	r3, [pc, #36]	; (8001684 <MX_UART7_Init+0x58>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <MX_UART7_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <MX_UART7_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_UART7_Init+0x58>)
 8001670:	f008 fad8 	bl	8009c24 <HAL_UART_Init>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800167a:	f000 fe6f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200007ac 	.word	0x200007ac
 8001688:	40007800 	.word	0x40007800

0800168c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001690:	4b14      	ldr	r3, [pc, #80]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 8001692:	4a15      	ldr	r2, [pc, #84]	; (80016e8 <MX_USART1_UART_Init+0x5c>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART1_UART_Init+0x58>)
 80016d0:	f008 faa8 	bl	8009c24 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016da:	f000 fe3f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000830 	.word	0x20000830
 80016e8:	40011000 	.word	0x40011000

080016ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_USART6_UART_Init+0x58>)
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <MX_USART6_UART_Init+0x5c>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_USART6_UART_Init+0x58>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART6_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_USART6_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART6_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART6_UART_Init+0x58>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART6_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART6_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART6_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART6_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART6_UART_Init+0x58>)
 8001730:	f008 fa78 	bl	8009c24 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800173a:	f000 fe0f 	bl	800235c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200008b4 	.word	0x200008b4
 8001748:	40011400 	.word	0x40011400

0800174c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
 8001760:	615a      	str	r2, [r3, #20]
 8001762:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001764:	4b1f      	ldr	r3, [pc, #124]	; (80017e4 <MX_FMC_Init+0x98>)
 8001766:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <MX_FMC_Init+0x9c>)
 8001768:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800176a:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_FMC_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001770:	4b1c      	ldr	r3, [pc, #112]	; (80017e4 <MX_FMC_Init+0x98>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001776:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_FMC_Init+0x98>)
 8001778:	2204      	movs	r2, #4
 800177a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <MX_FMC_Init+0x98>)
 800177e:	2210      	movs	r2, #16
 8001780:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_FMC_Init+0x98>)
 8001784:	2240      	movs	r2, #64	; 0x40
 8001786:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001788:	4b16      	ldr	r3, [pc, #88]	; (80017e4 <MX_FMC_Init+0x98>)
 800178a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800178e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_FMC_Init+0x98>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_FMC_Init+0x98>)
 8001798:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800179c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_FMC_Init+0x98>)
 80017a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_FMC_Init+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80017b0:	2307      	movs	r3, #7
 80017b2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80017b4:	2304      	movs	r3, #4
 80017b6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80017b8:	2307      	movs	r3, #7
 80017ba:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80017bc:	2303      	movs	r3, #3
 80017be:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_FMC_Init+0x98>)
 80017ce:	f007 fc25 	bl	800901c <HAL_SDRAM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80017d8:	f000 fdc0 	bl	800235c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000938 	.word	0x20000938
 80017e8:	a0000140 	.word	0xa0000140

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b090      	sub	sp, #64	; 0x40
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4bae      	ldr	r3, [pc, #696]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4aad      	ldr	r2, [pc, #692]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4bab      	ldr	r3, [pc, #684]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800181a:	4ba8      	ldr	r3, [pc, #672]	; (8001abc <MX_GPIO_Init+0x2d0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4aa7      	ldr	r2, [pc, #668]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4ba5      	ldr	r3, [pc, #660]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4ba2      	ldr	r3, [pc, #648]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4aa1      	ldr	r2, [pc, #644]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b9f      	ldr	r3, [pc, #636]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800184a:	4b9c      	ldr	r3, [pc, #624]	; (8001abc <MX_GPIO_Init+0x2d0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a9b      	ldr	r2, [pc, #620]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001850:	f043 0308 	orr.w	r3, r3, #8
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b99      	ldr	r3, [pc, #612]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001862:	4b96      	ldr	r3, [pc, #600]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a95      	ldr	r2, [pc, #596]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001868:	f043 0304 	orr.w	r3, r3, #4
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b93      	ldr	r3, [pc, #588]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b90      	ldr	r3, [pc, #576]	; (8001abc <MX_GPIO_Init+0x2d0>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a8f      	ldr	r2, [pc, #572]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b8d      	ldr	r3, [pc, #564]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001892:	4b8a      	ldr	r3, [pc, #552]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a89      	ldr	r2, [pc, #548]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001898:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b87      	ldr	r3, [pc, #540]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018aa:	4b84      	ldr	r3, [pc, #528]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a83      	ldr	r2, [pc, #524]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b81      	ldr	r3, [pc, #516]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018c2:	4b7e      	ldr	r3, [pc, #504]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a7d      	ldr	r2, [pc, #500]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	4b78      	ldr	r3, [pc, #480]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a77      	ldr	r2, [pc, #476]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b75      	ldr	r3, [pc, #468]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	4b72      	ldr	r3, [pc, #456]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a71      	ldr	r2, [pc, #452]	; (8001abc <MX_GPIO_Init+0x2d0>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b6f      	ldr	r3, [pc, #444]	; (8001abc <MX_GPIO_Init+0x2d0>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2160      	movs	r1, #96	; 0x60
 800190e:	486c      	ldr	r0, [pc, #432]	; (8001ac0 <MX_GPIO_Init+0x2d4>)
 8001910:	f004 fcbc 	bl	800628c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001914:	2201      	movs	r2, #1
 8001916:	2120      	movs	r1, #32
 8001918:	486a      	ldr	r0, [pc, #424]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800191a:	f004 fcb7 	bl	800628c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2108      	movs	r1, #8
 8001922:	4868      	ldr	r0, [pc, #416]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001924:	f004 fcb2 	bl	800628c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	2108      	movs	r1, #8
 800192c:	4866      	ldr	r0, [pc, #408]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 800192e:	f004 fcad 	bl	800628c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	4864      	ldr	r0, [pc, #400]	; (8001acc <MX_GPIO_Init+0x2e0>)
 800193a:	f004 fca7 	bl	800628c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800193e:	2200      	movs	r2, #0
 8001940:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001944:	4862      	ldr	r0, [pc, #392]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001946:	f004 fca1 	bl	800628c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800194a:	2200      	movs	r2, #0
 800194c:	21c8      	movs	r1, #200	; 0xc8
 800194e:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 8001950:	f004 fc9c 	bl	800628c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001954:	2308      	movs	r3, #8
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001958:	2300      	movs	r3, #0
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001964:	4619      	mov	r1, r3
 8001966:	4856      	ldr	r0, [pc, #344]	; (8001ac0 <MX_GPIO_Init+0x2d4>)
 8001968:	f004 f9c0 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800196c:	2304      	movs	r3, #4
 800196e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800197c:	2309      	movs	r3, #9
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001984:	4619      	mov	r1, r3
 8001986:	484e      	ldr	r0, [pc, #312]	; (8001ac0 <MX_GPIO_Init+0x2d4>)
 8001988:	f004 f9b0 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800198c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800199e:	230b      	movs	r3, #11
 80019a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a6:	4619      	mov	r1, r3
 80019a8:	484a      	ldr	r0, [pc, #296]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 80019aa:	f004 f99f 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80019ae:	f643 0323 	movw	r3, #14371	; 0x3823
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019c0:	230a      	movs	r3, #10
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	4843      	ldr	r0, [pc, #268]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 80019cc:	f004 f98e 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80019e0:	2308      	movs	r3, #8
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e8:	4619      	mov	r1, r3
 80019ea:	4836      	ldr	r0, [pc, #216]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80019ec:	f004 f97e 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80019f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f6:	2302      	movs	r3, #2
 80019f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019fe:	2303      	movs	r3, #3
 8001a00:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a02:	230c      	movs	r3, #12
 8001a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4833      	ldr	r0, [pc, #204]	; (8001adc <MX_GPIO_Init+0x2f0>)
 8001a0e:	f004 f96d 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a26:	4619      	mov	r1, r3
 8001a28:	482d      	ldr	r0, [pc, #180]	; (8001ae0 <MX_GPIO_Init+0x2f4>)
 8001a2a:	f004 f95f 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001a2e:	2360      	movs	r3, #96	; 0x60
 8001a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a42:	4619      	mov	r1, r3
 8001a44:	481e      	ldr	r0, [pc, #120]	; (8001ac0 <MX_GPIO_Init+0x2d4>)
 8001a46:	f004 f951 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a62:	4619      	mov	r1, r3
 8001a64:	481c      	ldr	r0, [pc, #112]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 8001a66:	f004 f941 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4819      	ldr	r0, [pc, #100]	; (8001ae4 <MX_GPIO_Init+0x2f8>)
 8001a80:	f004 f934 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a88:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a96:	4619      	mov	r1, r3
 8001a98:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001a9a:	f004 f927 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001a9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	4619      	mov	r1, r3
 8001aba:	e015      	b.n	8001ae8 <MX_GPIO_Init+0x2fc>
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40020c00 	.word	0x40020c00
 8001ac8:	40022800 	.word	0x40022800
 8001acc:	40022000 	.word	0x40022000
 8001ad0:	40021c00 	.word	0x40021c00
 8001ad4:	40021800 	.word	0x40021800
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020000 	.word	0x40020000
 8001ae4:	40022400 	.word	0x40022400
 8001ae8:	48a3      	ldr	r0, [pc, #652]	; (8001d78 <MX_GPIO_Init+0x58c>)
 8001aea:	f004 f8ff 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001aee:	23f0      	movs	r3, #240	; 0xf0
 8001af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001afe:	230a      	movs	r3, #10
 8001b00:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b06:	4619      	mov	r1, r3
 8001b08:	489c      	ldr	r0, [pc, #624]	; (8001d7c <MX_GPIO_Init+0x590>)
 8001b0a:	f004 f8ef 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001b20:	230a      	movs	r3, #10
 8001b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4895      	ldr	r0, [pc, #596]	; (8001d80 <MX_GPIO_Init+0x594>)
 8001b2c:	f004 f8de 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b30:	2328      	movs	r3, #40	; 0x28
 8001b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b44:	4619      	mov	r1, r3
 8001b46:	488f      	ldr	r0, [pc, #572]	; (8001d84 <MX_GPIO_Init+0x598>)
 8001b48:	f004 f8d0 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b52:	2300      	movs	r3, #0
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4889      	ldr	r0, [pc, #548]	; (8001d88 <MX_GPIO_Init+0x59c>)
 8001b62:	f004 f8c3 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b66:	2308      	movs	r3, #8
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4883      	ldr	r0, [pc, #524]	; (8001d8c <MX_GPIO_Init+0x5a0>)
 8001b7e:	f004 f8b5 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 RMII_RXER_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001b82:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b94:	4619      	mov	r1, r3
 8001b96:	487a      	ldr	r0, [pc, #488]	; (8001d80 <MX_GPIO_Init+0x594>)
 8001b98:	f004 f8a8 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b9c:	2310      	movs	r3, #16
 8001b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ba8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bac:	4619      	mov	r1, r3
 8001bae:	4875      	ldr	r0, [pc, #468]	; (8001d84 <MX_GPIO_Init+0x598>)
 8001bb0:	f004 f89c 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001bc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	486d      	ldr	r0, [pc, #436]	; (8001d84 <MX_GPIO_Init+0x598>)
 8001bd0:	f004 f88c 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin PH13 NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001bd4:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be6:	4619      	mov	r1, r3
 8001be8:	4869      	ldr	r0, [pc, #420]	; (8001d90 <MX_GPIO_Init+0x5a4>)
 8001bea:	f004 f87f 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c04:	4619      	mov	r1, r3
 8001c06:	485d      	ldr	r0, [pc, #372]	; (8001d7c <MX_GPIO_Init+0x590>)
 8001c08:	f004 f870 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001c0c:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c22:	4619      	mov	r1, r3
 8001c24:	485a      	ldr	r0, [pc, #360]	; (8001d90 <MX_GPIO_Init+0x5a4>)
 8001c26:	f004 f861 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : BP1_Pin PA6 */
  GPIO_InitStruct.Pin = BP1_Pin|GPIO_PIN_6;
 8001c2a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	484e      	ldr	r0, [pc, #312]	; (8001d78 <MX_GPIO_Init+0x58c>)
 8001c40:	f004 f854 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c4a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4848      	ldr	r0, [pc, #288]	; (8001d7c <MX_GPIO_Init+0x590>)
 8001c5c:	f004 f846 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c60:	2310      	movs	r3, #16
 8001c62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c64:	2302      	movs	r3, #2
 8001c66:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c70:	230a      	movs	r3, #10
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4845      	ldr	r0, [pc, #276]	; (8001d90 <MX_GPIO_Init+0x5a4>)
 8001c7c:	f004 f836 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001c80:	23c8      	movs	r3, #200	; 0xc8
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c94:	4619      	mov	r1, r3
 8001c96:	483a      	ldr	r0, [pc, #232]	; (8001d80 <MX_GPIO_Init+0x594>)
 8001c98:	f004 f828 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c9c:	2305      	movs	r3, #5
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cac:	230a      	movs	r3, #10
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4834      	ldr	r0, [pc, #208]	; (8001d88 <MX_GPIO_Init+0x59c>)
 8001cb8:	f004 f818 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cbc:	2332      	movs	r3, #50	; 0x32
 8001cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ccc:	230b      	movs	r3, #11
 8001cce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482c      	ldr	r0, [pc, #176]	; (8001d88 <MX_GPIO_Init+0x59c>)
 8001cd8:	f004 f808 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cec:	2309      	movs	r3, #9
 8001cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4827      	ldr	r0, [pc, #156]	; (8001d94 <MX_GPIO_Init+0x5a8>)
 8001cf8:	f003 fff8 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001cfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d0e:	2309      	movs	r3, #9
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d16:	4619      	mov	r1, r3
 8001d18:	481a      	ldr	r0, [pc, #104]	; (8001d84 <MX_GPIO_Init+0x598>)
 8001d1a:	f003 ffe7 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d1e:	2386      	movs	r3, #134	; 0x86
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d2e:	230b      	movs	r3, #11
 8001d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d36:	4619      	mov	r1, r3
 8001d38:	480f      	ldr	r0, [pc, #60]	; (8001d78 <MX_GPIO_Init+0x58c>)
 8001d3a:	f003 ffd7 	bl	8005cec <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001d3e:	2328      	movs	r3, #40	; 0x28
 8001d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d4e:	230a      	movs	r3, #10
 8001d50:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d56:	4619      	mov	r1, r3
 8001d58:	4807      	ldr	r0, [pc, #28]	; (8001d78 <MX_GPIO_Init+0x58c>)
 8001d5a:	f003 ffc7 	bl	8005cec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2105      	movs	r1, #5
 8001d62:	2028      	movs	r0, #40	; 0x28
 8001d64:	f003 f8cc 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d68:	2028      	movs	r0, #40	; 0x28
 8001d6a:	f003 f8e5 	bl	8004f38 <HAL_NVIC_EnableIRQ>

}
 8001d6e:	bf00      	nop
 8001d70:	3740      	adds	r7, #64	; 0x40
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40020000 	.word	0x40020000
 8001d7c:	40022000 	.word	0x40022000
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40020c00 	.word	0x40020c00
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40022800 	.word	0x40022800
 8001d90:	40021c00 	.word	0x40021c00
 8001d94:	40020400 	.word	0x40020400

08001d98 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// EXTI Line4 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
    {
    	/*
    	 *
    	 */
    }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
		x_homme = 2*rxbuffer[1];
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <HAL_UART_RxCpltCallback+0x90>)
 8001dba:	785b      	ldrb	r3, [r3, #1]
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_UART_RxCpltCallback+0x94>)
 8001dc4:	801a      	strh	r2, [r3, #0]
		y_missile = 2*rxbuffer[2];
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <HAL_UART_RxCpltCallback+0x90>)
 8001dc8:	789b      	ldrb	r3, [r3, #2]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_UART_RxCpltCallback+0x98>)
 8001dd2:	801a      	strh	r2, [r3, #0]
		if(rxbuffer[0]==0){
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <HAL_UART_RxCpltCallback+0x90>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d111      	bne.n	8001e00 <HAL_UART_RxCpltCallback+0x50>
			HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 1);
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de2:	481a      	ldr	r0, [pc, #104]	; (8001e4c <HAL_UART_RxCpltCallback+0x9c>)
 8001de4:	f004 fa52 	bl	800628c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 1);
 8001de8:	2201      	movs	r2, #1
 8001dea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dee:	4817      	ldr	r0, [pc, #92]	; (8001e4c <HAL_UART_RxCpltCallback+0x9c>)
 8001df0:	f004 fa4c 	bl	800628c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8001df4:	2201      	movs	r2, #1
 8001df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dfa:	4814      	ldr	r0, [pc, #80]	; (8001e4c <HAL_UART_RxCpltCallback+0x9c>)
 8001dfc:	f004 fa46 	bl	800628c <HAL_GPIO_WritePin>
		}
		if(rxbuffer[0]==1) {
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_UART_RxCpltCallback+0x90>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d111      	bne.n	8001e2c <HAL_UART_RxCpltCallback+0x7c>
			HAL_GPIO_WritePin(LED11_GPIO_Port, LED11_Pin, 0);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e0e:	480f      	ldr	r0, [pc, #60]	; (8001e4c <HAL_UART_RxCpltCallback+0x9c>)
 8001e10:	f004 fa3c 	bl	800628c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED12_GPIO_Port, LED12_Pin, 0);
 8001e14:	2200      	movs	r2, #0
 8001e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1a:	480c      	ldr	r0, [pc, #48]	; (8001e4c <HAL_UART_RxCpltCallback+0x9c>)
 8001e1c:	f004 fa36 	bl	800628c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e26:	4809      	ldr	r0, [pc, #36]	; (8001e4c <HAL_UART_RxCpltCallback+0x9c>)
 8001e28:	f004 fa30 	bl	800628c <HAL_GPIO_WritePin>
		}
		HAL_UART_Receive_IT(&huart7,(uint8_t *)rxbuffer,3);
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	4904      	ldr	r1, [pc, #16]	; (8001e40 <HAL_UART_RxCpltCallback+0x90>)
 8001e30:	4807      	ldr	r0, [pc, #28]	; (8001e50 <HAL_UART_RxCpltCallback+0xa0>)
 8001e32:	f007 ffb3 	bl	8009d9c <HAL_UART_Receive_IT>
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000998 	.word	0x20000998
 8001e44:	200009ae 	.word	0x200009ae
 8001e48:	200009b4 	.word	0x200009b4
 8001e4c:	40021c00 	.word	0x40021c00
 8001e50:	200007ac 	.word	0x200007ac

08001e54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f009 fbc4 	bl	800b5ea <osDelay>
 8001e62:	e7fb      	b.n	8001e5c <StartDefaultTask+0x8>

08001e64 <Task_diable>:
*
* Joueur diable peux faire dépacer le diable et jeter des bompes
*/
/* USER CODE END Header_Task_diable */
void Task_diable(void const * argument)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08c      	sub	sp, #48	; 0x30
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_diable */
	uint16_t x_diable = 5;
 8001e6c:	2305      	movs	r3, #5
 8001e6e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t y_diable = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t Bompe=0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	847b      	strh	r3, [r7, #34]	; 0x22
	//uint16_t size_x_diable = 50;
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=3;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
	// y_diable est fixe à 0
	uint16_t Message;
	HAL_GPIO_WritePin(LED13_GPIO_Port, LED11_Pin,1);
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e82:	4848      	ldr	r0, [pc, #288]	; (8001fa4 <Task_diable+0x140>)
 8001e84:	f004 fa02 	bl	800628c <HAL_GPIO_WritePin>

	uint32_t joystick_h;//, joystick_v;
	ADC_ChannelConfTypeDef sConfig = {0};
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e96:	2301      	movs	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
	sConfig.Channel = ADC_CHANNEL_8;
 8001e9e:	2308      	movs	r3, #8
 8001ea0:	60bb      	str	r3, [r7, #8]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001ea2:	f107 0308 	add.w	r3, r7, #8
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	483f      	ldr	r0, [pc, #252]	; (8001fa8 <Task_diable+0x144>)
 8001eaa:	f002 fd21 	bl	80048f0 <HAL_ADC_ConfigChannel>
  /* Infinite loop */
  for(;;)
  {
	xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// task take mutex
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <Task_diable+0x148>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00a f826 	bl	800bf08 <xQueueSemaphoreTake>

	HAL_ADC_Start(&hadc1);
 8001ebc:	483c      	ldr	r0, [pc, #240]	; (8001fb0 <Task_diable+0x14c>)
 8001ebe:	f002 fbb1 	bl	8004624 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001ec2:	bf00      	nop
 8001ec4:	2164      	movs	r1, #100	; 0x64
 8001ec6:	483a      	ldr	r0, [pc, #232]	; (8001fb0 <Task_diable+0x14c>)
 8001ec8:	f002 fc7a 	bl	80047c0 <HAL_ADC_PollForConversion>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f8      	bne.n	8001ec4 <Task_diable+0x60>
	joystick_h = HAL_ADC_GetValue(&hadc1);
 8001ed2:	4837      	ldr	r0, [pc, #220]	; (8001fb0 <Task_diable+0x14c>)
 8001ed4:	f002 fcff 	bl	80048d6 <HAL_ADC_GetValue>
 8001ed8:	6278      	str	r0, [r7, #36]	; 0x24


	if((joystick_h>3000)&(x_diable>5)){
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf8c      	ite	hi
 8001ee4:	2301      	movhi	r3, #1
 8001ee6:	2300      	movls	r3, #0
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	bf8c      	ite	hi
 8001ef0:	2301      	movhi	r3, #1
 8001ef2:	2300      	movls	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <Task_diable+0xa2>
		x_diable--;
 8001efe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f00:	3b01      	subs	r3, #1
 8001f02:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001f04:	e016      	b.n	8001f34 <Task_diable+0xd0>
	}
	else if((joystick_h<1000)&(x_diable<420)){
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	bf94      	ite	ls
 8001f10:	2301      	movls	r3, #1
 8001f12:	2300      	movhi	r3, #0
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f18:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001f1c:	428b      	cmp	r3, r1
 8001f1e:	bf94      	ite	ls
 8001f20:	2301      	movls	r3, #1
 8001f22:	2300      	movhi	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4013      	ands	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d002      	beq.n	8001f34 <Task_diable+0xd0>
		x_diable++;
 8001f2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f30:	3301      	adds	r3, #1
 8001f32:	85fb      	strh	r3, [r7, #46]	; 0x2e
	}// end else if
	pos_diablex = x_diable;//pour transmettre la position
 8001f34:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <Task_diable+0x150>)
 8001f36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f38:	8013      	strh	r3, [r2, #0]

	 BSP_LCD_SelectLayer(1);
 8001f3a:	2001      	movs	r0, #1
 8001f3c:	f000 fcb0 	bl	80028a0 <BSP_LCD_SelectLayer>
	 BSP_LCD_DrawBitmap(x_diable,y_diable,(uint8_t*)diableRGB565_bmp);
 8001f40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f42:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001f44:	4a1c      	ldr	r2, [pc, #112]	; (8001fb8 <Task_diable+0x154>)
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fe82 	bl	8002c50 <BSP_LCD_DrawBitmap>
	 // Envoie de position
	 Message = x_diable;
 8001f4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f4e:	837b      	strh	r3, [r7, #26]
	 xQueueSend(myQueueP2VHandle, &Message, 0);
 8001f50:	4b1a      	ldr	r3, [pc, #104]	; (8001fbc <Task_diable+0x158>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	f107 011a 	add.w	r1, r7, #26
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f009 fde8 	bl	800bb30 <xQueueGenericSend>

	 if(HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin)==0){//tir
 8001f60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f64:	4816      	ldr	r0, [pc, #88]	; (8001fc0 <Task_diable+0x15c>)
 8001f66:	f004 f979 	bl	800625c <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <Task_diable+0x110>
	 		  Bompe =1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	847b      	strh	r3, [r7, #34]	; 0x22
	 }
	 xQueueSend(myQueueBompeHandle, &Bompe, 0);
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <Task_diable+0x160>)
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	f107 0122 	add.w	r1, r7, #34	; 0x22
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f009 fdd6 	bl	800bb30 <xQueueGenericSend>
	 Bompe = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	847b      	strh	r3, [r7, #34]	; 0x22

	 xSemaphoreGive(MUTEXHandle);//task give mutex
 8001f88:	4b08      	ldr	r3, [pc, #32]	; (8001fac <Task_diable+0x148>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	f009 fdcd 	bl	800bb30 <xQueueGenericSend>
	 vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 8001f96:	f107 031c 	add.w	r3, r7, #28
 8001f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f00a fc33 	bl	800c808 <vTaskDelayUntil>
	xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// task take mutex
 8001fa2:	e784      	b.n	8001eae <Task_diable+0x4a>
 8001fa4:	40021c00 	.word	0x40021c00
 8001fa8:	200003d0 	.word	0x200003d0
 8001fac:	20000994 	.word	0x20000994
 8001fb0:	20000388 	.word	0x20000388
 8001fb4:	200009b0 	.word	0x200009b0
 8001fb8:	0800e954 	.word	0x0800e954
 8001fbc:	20000984 	.word	0x20000984
 8001fc0:	40020000 	.word	0x40020000
 8001fc4:	20000990 	.word	0x20000990

08001fc8 <Task_homme>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_homme */
void Task_homme(void const * argument)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_homme */
	uint16_t y_homme = 220; // fixe en bas
 8001fd0:	23dc      	movs	r3, #220	; 0xdc
 8001fd2:	82bb      	strh	r3, [r7, #20]
	uint16_t old_x_homme=x_homme;
 8001fd4:	4b20      	ldr	r3, [pc, #128]	; (8002058 <Task_homme+0x90>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	82fb      	strh	r3, [r7, #22]
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=3;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	613b      	str	r3, [r7, #16]

	//uint16_t missile = 0;
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// Task homme prend mutex
 8001fde:	4b1f      	ldr	r3, [pc, #124]	; (800205c <Task_homme+0x94>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f009 ff8e 	bl	800bf08 <xQueueSemaphoreTake>
	  BSP_LCD_SelectLayer(1);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f000 fc57 	bl	80028a0 <BSP_LCD_SelectLayer>
	  BSP_LCD_DrawBitmap(x_homme,y_homme,(uint8_t*)batmanRGB565_bmp);
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <Task_homme+0x90>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	8abb      	ldrh	r3, [r7, #20]
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <Task_homme+0x98>)
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f000 fe27 	bl	8002c50 <BSP_LCD_DrawBitmap>
	  if(x_homme!=old_x_homme){
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <Task_homme+0x90>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	8afa      	ldrh	r2, [r7, #22]
 8002008:	429a      	cmp	r2, r3
 800200a:	d00c      	beq.n	8002026 <Task_homme+0x5e>
		  BSP_LCD_SelectLayer(1);
 800200c:	2001      	movs	r0, #1
 800200e:	f000 fc47 	bl	80028a0 <BSP_LCD_SelectLayer>
		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002012:	f04f 30ff 	mov.w	r0, #4294967295
 8002016:	f000 fc53 	bl	80028c0 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillRect(old_x_homme, y_homme, 40, 50);
 800201a:	8ab9      	ldrh	r1, [r7, #20]
 800201c:	8af8      	ldrh	r0, [r7, #22]
 800201e:	2332      	movs	r3, #50	; 0x32
 8002020:	2228      	movs	r2, #40	; 0x28
 8002022:	f000 fec7 	bl	8002db4 <BSP_LCD_FillRect>
	  }
	  old_x_homme=x_homme;
 8002026:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <Task_homme+0x90>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	82fb      	strh	r3, [r7, #22]

	  xQueueSend(myQueueHommePosHandle, &x_homme, 0);
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <Task_homme+0x9c>)
 800202e:	6818      	ldr	r0, [r3, #0]
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	4908      	ldr	r1, [pc, #32]	; (8002058 <Task_homme+0x90>)
 8002036:	f009 fd7b 	bl	800bb30 <xQueueGenericSend>
	  xSemaphoreGive(MUTEXHandle); /* La tache homme rend le mutex */
 800203a:	4b08      	ldr	r3, [pc, #32]	; (800205c <Task_homme+0x94>)
 800203c:	6818      	ldr	r0, [r3, #0]
 800203e:	2300      	movs	r3, #0
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	f009 fd74 	bl	800bb30 <xQueueGenericSend>
	  vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	6939      	ldr	r1, [r7, #16]
 800204e:	4618      	mov	r0, r3
 8002050:	f00a fbda 	bl	800c808 <vTaskDelayUntil>
	  xSemaphoreTake(MUTEXHandle, portMAX_DELAY);// Task homme prend mutex
 8002054:	e7c3      	b.n	8001fde <Task_homme+0x16>
 8002056:	bf00      	nop
 8002058:	200009ae 	.word	0x200009ae
 800205c:	20000994 	.word	0x20000994
 8002060:	08010184 	.word	0x08010184
 8002064:	2000098c 	.word	0x2000098c

08002068 <Task_Transmit_data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Transmit_data */
void Task_Transmit_data(void const * argument)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Transmit_data */
  /* Infinite loop */
  for(;;)
  {
	  txbuffer[0]=HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin);
 8002070:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002074:	4811      	ldr	r0, [pc, #68]	; (80020bc <Task_Transmit_data+0x54>)
 8002076:	f004 f8f1 	bl	800625c <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	4b10      	ldr	r3, [pc, #64]	; (80020c0 <Task_Transmit_data+0x58>)
 8002080:	701a      	strb	r2, [r3, #0]
	  // transmit pos Diable
	  txbuffer[1]=pos_diablex/2;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <Task_Transmit_data+0x5c>)
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	b2da      	uxtb	r2, r3
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <Task_Transmit_data+0x58>)
 800208e:	705a      	strb	r2, [r3, #1]
	  // Transmit pso bompe
	  txbuffer[2]=pos_Bompey/2;
 8002090:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <Task_Transmit_data+0x60>)
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	b29b      	uxth	r3, r3
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <Task_Transmit_data+0x58>)
 800209c:	709a      	strb	r2, [r3, #2]
	  // Transmitt GameOver
	  txbuffer[3]=Game_Over;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <Task_Transmit_data+0x64>)
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b06      	ldr	r3, [pc, #24]	; (80020c0 <Task_Transmit_data+0x58>)
 80020a6:	70da      	strb	r2, [r3, #3]
	  HAL_UART_Transmit_IT(&huart7,(uint8_t *)txbuffer,4);
 80020a8:	2204      	movs	r2, #4
 80020aa:	4905      	ldr	r1, [pc, #20]	; (80020c0 <Task_Transmit_data+0x58>)
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <Task_Transmit_data+0x68>)
 80020ae:	f007 fe07 	bl	8009cc0 <HAL_UART_Transmit_IT>
	  osDelay(100);
 80020b2:	2064      	movs	r0, #100	; 0x64
 80020b4:	f009 fa99 	bl	800b5ea <osDelay>
	  txbuffer[0]=HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin);
 80020b8:	e7da      	b.n	8002070 <Task_Transmit_data+0x8>
 80020ba:	bf00      	nop
 80020bc:	40020000 	.word	0x40020000
 80020c0:	200009a4 	.word	0x200009a4
 80020c4:	200009b0 	.word	0x200009b0
 80020c8:	200009b2 	.word	0x200009b2
 80020cc:	200009b6 	.word	0x200009b6
 80020d0:	200007ac 	.word	0x200007ac

080020d4 <Task_missile>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_missile */
void Task_missile(void const * argument)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b094      	sub	sp, #80	; 0x50
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_missile */
	uint16_t x_bompe = 5;
 80020dc:	2305      	movs	r3, #5
 80020de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t y_bompe = 5;
 80020e2:	2305      	movs	r3, #5
 80020e4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint16_t x_missile = x_homme;
 80020e8:	4b73      	ldr	r3, [pc, #460]	; (80022b8 <Task_missile+0x1e4>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=2;
 80020f0:	2302      	movs	r3, #2
 80020f2:	647b      	str	r3, [r7, #68]	; 0x44
	uint16_t Bompe;
	uint16_t old_x_missile = x_missile;
 80020f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80020f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	uint16_t old_y_missile = y_missile;
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <Task_missile+0x1e8>)
 80020fe:	881b      	ldrh	r3, [r3, #0]
 8002100:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	uint16_t y_homme=220;
 8002104:	23dc      	movs	r3, #220	; 0xdc
 8002106:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	char text[50]={};
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	f107 030c 	add.w	r3, r7, #12
 8002112:	222e      	movs	r2, #46	; 0x2e
 8002114:	2100      	movs	r1, #0
 8002116:	4618      	mov	r0, r3
 8002118:	f00b fea6 	bl	800de68 <memset>
  /* Infinite loop */
  for(;;)
  {
	 xQueueReceive(myQueueP2VHandle, &x_bompe, 10);
 800211c:	4b68      	ldr	r3, [pc, #416]	; (80022c0 <Task_missile+0x1ec>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8002124:	220a      	movs	r2, #10
 8002126:	4618      	mov	r0, r3
 8002128:	f009 fe08 	bl	800bd3c <xQueueReceive>
	 if(((x_homme<=x_bompe)&&(x_bompe<=x_homme+30))&&(y_homme<=y_bompe-20)){// si je Gagne
 800212c:	4b62      	ldr	r3, [pc, #392]	; (80022b8 <Task_missile+0x1e4>)
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002134:	429a      	cmp	r2, r3
 8002136:	d82f      	bhi.n	8002198 <Task_missile+0xc4>
 8002138:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800213c:	461a      	mov	r2, r3
 800213e:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <Task_missile+0x1e4>)
 8002140:	881b      	ldrh	r3, [r3, #0]
 8002142:	331e      	adds	r3, #30
 8002144:	429a      	cmp	r2, r3
 8002146:	dc27      	bgt.n	8002198 <Task_missile+0xc4>
 8002148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800214c:	f1a3 0213 	sub.w	r2, r3, #19
 8002150:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002154:	429a      	cmp	r2, r3
 8002156:	dd1f      	ble.n	8002198 <Task_missile+0xc4>
		 Game_Over = 1;
 8002158:	4b5a      	ldr	r3, [pc, #360]	; (80022c4 <Task_missile+0x1f0>)
 800215a:	2201      	movs	r2, #1
 800215c:	801a      	strh	r2, [r3, #0]
	 	 BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 800215e:	485a      	ldr	r0, [pc, #360]	; (80022c8 <Task_missile+0x1f4>)
 8002160:	f000 fbae 	bl	80028c0 <BSP_LCD_SetTextColor>
	 	 sprintf(text,"YOU WIN :)");
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	4958      	ldr	r1, [pc, #352]	; (80022cc <Task_missile+0x1f8>)
 800216a:	4618      	mov	r0, r3
 800216c:	f00b ff92 	bl	800e094 <siprintf>
	 	 BSP_LCD_DisplayStringAt(0, 136,(uint8_t*) text, CENTER_MODE);
 8002170:	f107 0208 	add.w	r2, r7, #8
 8002174:	2301      	movs	r3, #1
 8002176:	2188      	movs	r1, #136	; 0x88
 8002178:	2000      	movs	r0, #0
 800217a:	f000 fc59 	bl	8002a30 <BSP_LCD_DisplayStringAt>
	 	 sprintf(text,"Press RESET to restart");
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4953      	ldr	r1, [pc, #332]	; (80022d0 <Task_missile+0x1fc>)
 8002184:	4618      	mov	r0, r3
 8002186:	f00b ff85 	bl	800e094 <siprintf>
	 	 BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, CENTER_MODE);
 800218a:	f107 0208 	add.w	r2, r7, #8
 800218e:	2301      	movs	r3, #1
 8002190:	2196      	movs	r1, #150	; 0x96
 8002192:	2000      	movs	r0, #0
 8002194:	f000 fc4c 	bl	8002a30 <BSP_LCD_DisplayStringAt>
	 }
	 if(((x_bompe<=x_missile)&&(x_missile<=x_bompe+40))&&(y_missile<=25)){// si je Perd
 8002198:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800219c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d32a      	bcc.n	80021fa <Task_missile+0x126>
 80021a4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80021a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80021ac:	3328      	adds	r3, #40	; 0x28
 80021ae:	429a      	cmp	r2, r3
 80021b0:	dc23      	bgt.n	80021fa <Task_missile+0x126>
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <Task_missile+0x1e8>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	2b19      	cmp	r3, #25
 80021b8:	d81f      	bhi.n	80021fa <Task_missile+0x126>
		 Game_Over=2;
 80021ba:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <Task_missile+0x1f0>)
 80021bc:	2202      	movs	r2, #2
 80021be:	801a      	strh	r2, [r3, #0]
		 BSP_LCD_SetTextColor(LCD_COLOR_RED);
 80021c0:	4844      	ldr	r0, [pc, #272]	; (80022d4 <Task_missile+0x200>)
 80021c2:	f000 fb7d 	bl	80028c0 <BSP_LCD_SetTextColor>
		 sprintf(text,"YOU LOSS ):");
 80021c6:	f107 0308 	add.w	r3, r7, #8
 80021ca:	4943      	ldr	r1, [pc, #268]	; (80022d8 <Task_missile+0x204>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f00b ff61 	bl	800e094 <siprintf>
		 BSP_LCD_DisplayStringAt(0, 136,(uint8_t*) text, CENTER_MODE);
 80021d2:	f107 0208 	add.w	r2, r7, #8
 80021d6:	2301      	movs	r3, #1
 80021d8:	2188      	movs	r1, #136	; 0x88
 80021da:	2000      	movs	r0, #0
 80021dc:	f000 fc28 	bl	8002a30 <BSP_LCD_DisplayStringAt>
	 	 sprintf(text,"Press RESET to restart");
 80021e0:	f107 0308 	add.w	r3, r7, #8
 80021e4:	493a      	ldr	r1, [pc, #232]	; (80022d0 <Task_missile+0x1fc>)
 80021e6:	4618      	mov	r0, r3
 80021e8:	f00b ff54 	bl	800e094 <siprintf>
	 	 BSP_LCD_DisplayStringAt(0, 150,(uint8_t*) text, CENTER_MODE);
 80021ec:	f107 0208 	add.w	r2, r7, #8
 80021f0:	2301      	movs	r3, #1
 80021f2:	2196      	movs	r1, #150	; 0x96
 80021f4:	2000      	movs	r0, #0
 80021f6:	f000 fc1b 	bl	8002a30 <BSP_LCD_DisplayStringAt>
	 }

	 xQueueReceive(myQueueBompeHandle, &Bompe, 10);
 80021fa:	4b38      	ldr	r3, [pc, #224]	; (80022dc <Task_missile+0x208>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 8002202:	220a      	movs	r2, #10
 8002204:	4618      	mov	r0, r3
 8002206:	f009 fd99 	bl	800bd3c <xQueueReceive>
	 if(Bompe){
 800220a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800220c:	2b00      	cmp	r3, #0
 800220e:	d004      	beq.n	800221a <Task_missile+0x146>
		 y_bompe++;
 8002210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002214:	3301      	adds	r3, #1
 8002216:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	 }
	 if(y_bompe>255){
 800221a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800221e:	2bff      	cmp	r3, #255	; 0xff
 8002220:	d902      	bls.n	8002228 <Task_missile+0x154>
		 y_bompe=10;
 8002222:	230a      	movs	r3, #10
 8002224:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	 }
	 pos_Bompey = y_bompe;
 8002228:	4a2d      	ldr	r2, [pc, #180]	; (80022e0 <Task_missile+0x20c>)
 800222a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800222e:	8013      	strh	r3, [r2, #0]

	 x_missile = x_homme;
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <Task_missile+0x1e4>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	 BSP_LCD_SelectLayer(1);
 8002238:	2001      	movs	r0, #1
 800223a:	f000 fb31 	bl	80028a0 <BSP_LCD_SelectLayer>
	 BSP_LCD_DrawBitmap(x_bompe,y_bompe,(uint8_t*)missile_diableRGB565_bmp);
 800223e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002242:	4618      	mov	r0, r3
 8002244:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002248:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <Task_missile+0x210>)
 800224a:	4619      	mov	r1, r3
 800224c:	f000 fd00 	bl	8002c50 <BSP_LCD_DrawBitmap>
	 BSP_LCD_DrawBitmap(x_missile,y_missile,(uint8_t*)missileRGB565_bmp);
 8002250:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002254:	4a19      	ldr	r2, [pc, #100]	; (80022bc <Task_missile+0x1e8>)
 8002256:	8812      	ldrh	r2, [r2, #0]
 8002258:	4611      	mov	r1, r2
 800225a:	4a23      	ldr	r2, [pc, #140]	; (80022e8 <Task_missile+0x214>)
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fcf7 	bl	8002c50 <BSP_LCD_DrawBitmap>
	 if((old_x_missile!=x_missile)||(old_y_missile != y_missile)){
 8002262:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8002266:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800226a:	429a      	cmp	r2, r3
 800226c:	d105      	bne.n	800227a <Task_missile+0x1a6>
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <Task_missile+0x1e8>)
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002276:	429a      	cmp	r2, r3
 8002278:	d00e      	beq.n	8002298 <Task_missile+0x1c4>
		 BSP_LCD_SelectLayer(1);
 800227a:	2001      	movs	r0, #1
 800227c:	f000 fb10 	bl	80028a0 <BSP_LCD_SelectLayer>
		 BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f000 fb1c 	bl	80028c0 <BSP_LCD_SetTextColor>
		 BSP_LCD_FillRect(old_x_missile, old_y_missile, 20, 30);
 8002288:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800228c:	f8b7 004a 	ldrh.w	r0, [r7, #74]	; 0x4a
 8002290:	231e      	movs	r3, #30
 8002292:	2214      	movs	r2, #20
 8002294:	f000 fd8e 	bl	8002db4 <BSP_LCD_FillRect>
	 }
	 old_x_missile = x_missile;
 8002298:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800229c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	 old_y_missile = y_missile;
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <Task_missile+0x1e8>)
 80022a2:	881b      	ldrh	r3, [r3, #0]
 80022a4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	 vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 80022a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80022ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80022ae:	4618      	mov	r0, r3
 80022b0:	f00a faaa 	bl	800c808 <vTaskDelayUntil>
	 xQueueReceive(myQueueP2VHandle, &x_bompe, 10);
 80022b4:	e732      	b.n	800211c <Task_missile+0x48>
 80022b6:	bf00      	nop
 80022b8:	200009ae 	.word	0x200009ae
 80022bc:	200009b4 	.word	0x200009b4
 80022c0:	20000984 	.word	0x20000984
 80022c4:	200009b6 	.word	0x200009b6
 80022c8:	ff0000ff 	.word	0xff0000ff
 80022cc:	0800e91c 	.word	0x0800e91c
 80022d0:	0800e928 	.word	0x0800e928
 80022d4:	ffff0000 	.word	0xffff0000
 80022d8:	0800e940 	.word	0x0800e940
 80022dc:	20000990 	.word	0x20000990
 80022e0:	200009b2 	.word	0x200009b2
 80022e4:	080110a4 	.word	0x080110a4
 80022e8:	08011344 	.word	0x08011344

080022ec <Task_Game_Over>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Game_Over */
void Task_Game_Over(void const * argument)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Game_Over */
	TickType_t pxPreviousWakeTime;
	TickType_t xTimeIncrement=2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(Game_Over==1){
 80022f8:	4b0c      	ldr	r3, [pc, #48]	; (800232c <Task_Game_Over+0x40>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d104      	bne.n	800230a <Task_Game_Over+0x1e>
		  vTaskDelete(myTask03Handle);// delete Task homme
 8002300:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <Task_Game_Over+0x44>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f00a f9ed 	bl	800c6e4 <vTaskDelete>
	  }
	  if(Game_Over==2){
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <Task_Game_Over+0x40>)
 800230c:	881b      	ldrh	r3, [r3, #0]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d104      	bne.n	800231c <Task_Game_Over+0x30>
		  vTaskDelete(Task_1Handle);// delete Task Diable
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <Task_Game_Over+0x48>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f00a f9e4 	bl	800c6e4 <vTaskDelete>
	  }
	  vTaskDelayUntil(&pxPreviousWakeTime,xTimeIncrement);
 800231c:	f107 0308 	add.w	r3, r7, #8
 8002320:	68f9      	ldr	r1, [r7, #12]
 8002322:	4618      	mov	r0, r3
 8002324:	f00a fa70 	bl	800c808 <vTaskDelayUntil>
	  if(Game_Over==1){
 8002328:	e7e6      	b.n	80022f8 <Task_Game_Over+0xc>
 800232a:	bf00      	nop
 800232c:	200009b6 	.word	0x200009b6
 8002330:	20000974 	.word	0x20000974
 8002334:	20000970 	.word	0x20000970

08002338 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a04      	ldr	r2, [pc, #16]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800234a:	f002 f8e3 	bl	8004514 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40001000 	.word	0x40001000

0800235c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002360:	b672      	cpsid	i
}
 8002362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002364:	e7fe      	b.n	8002364 <Error_Handler+0x8>
	...

08002368 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a51      	ldr	r2, [pc, #324]	; (80024b8 <I2Cx_MspInit+0x150>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d14d      	bne.n	8002414 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <I2Cx_MspInit+0x154>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a4f      	ldr	r2, [pc, #316]	; (80024bc <I2Cx_MspInit+0x154>)
 800237e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b4d      	ldr	r3, [pc, #308]	; (80024bc <I2Cx_MspInit+0x154>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002394:	2312      	movs	r3, #18
 8002396:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800239c:	2302      	movs	r3, #2
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80023a0:	2304      	movs	r3, #4
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023a4:	f107 031c 	add.w	r3, r7, #28
 80023a8:	4619      	mov	r1, r3
 80023aa:	4845      	ldr	r0, [pc, #276]	; (80024c0 <I2Cx_MspInit+0x158>)
 80023ac:	f003 fc9e 	bl	8005cec <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80023b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023b6:	f107 031c 	add.w	r3, r7, #28
 80023ba:	4619      	mov	r1, r3
 80023bc:	4840      	ldr	r0, [pc, #256]	; (80024c0 <I2Cx_MspInit+0x158>)
 80023be:	f003 fc95 	bl	8005cec <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80023c2:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <I2Cx_MspInit+0x154>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <I2Cx_MspInit+0x154>)
 80023c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023cc:	6413      	str	r3, [r2, #64]	; 0x40
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <I2Cx_MspInit+0x154>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80023da:	4b38      	ldr	r3, [pc, #224]	; (80024bc <I2Cx_MspInit+0x154>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a37      	ldr	r2, [pc, #220]	; (80024bc <I2Cx_MspInit+0x154>)
 80023e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023e4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <I2Cx_MspInit+0x154>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a34      	ldr	r2, [pc, #208]	; (80024bc <I2Cx_MspInit+0x154>)
 80023ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023f0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80023f2:	2200      	movs	r2, #0
 80023f4:	210f      	movs	r1, #15
 80023f6:	2048      	movs	r0, #72	; 0x48
 80023f8:	f002 fd82 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80023fc:	2048      	movs	r0, #72	; 0x48
 80023fe:	f002 fd9b 	bl	8004f38 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	210f      	movs	r1, #15
 8002406:	2049      	movs	r0, #73	; 0x49
 8002408:	f002 fd7a 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800240c:	2049      	movs	r0, #73	; 0x49
 800240e:	f002 fd93 	bl	8004f38 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002412:	e04d      	b.n	80024b0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002414:	4b29      	ldr	r3, [pc, #164]	; (80024bc <I2Cx_MspInit+0x154>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002418:	4a28      	ldr	r2, [pc, #160]	; (80024bc <I2Cx_MspInit+0x154>)
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	6313      	str	r3, [r2, #48]	; 0x30
 8002420:	4b26      	ldr	r3, [pc, #152]	; (80024bc <I2Cx_MspInit+0x154>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800242c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002430:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002432:	2312      	movs	r3, #18
 8002434:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800243a:	2302      	movs	r3, #2
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800243e:	2304      	movs	r3, #4
 8002440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002442:	f107 031c 	add.w	r3, r7, #28
 8002446:	4619      	mov	r1, r3
 8002448:	481e      	ldr	r0, [pc, #120]	; (80024c4 <I2Cx_MspInit+0x15c>)
 800244a:	f003 fc4f 	bl	8005cec <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800244e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002452:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	4619      	mov	r1, r3
 800245a:	481a      	ldr	r0, [pc, #104]	; (80024c4 <I2Cx_MspInit+0x15c>)
 800245c:	f003 fc46 	bl	8005cec <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002460:	4b16      	ldr	r3, [pc, #88]	; (80024bc <I2Cx_MspInit+0x154>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	4a15      	ldr	r2, [pc, #84]	; (80024bc <I2Cx_MspInit+0x154>)
 8002466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800246a:	6413      	str	r3, [r2, #64]	; 0x40
 800246c:	4b13      	ldr	r3, [pc, #76]	; (80024bc <I2Cx_MspInit+0x154>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002478:	4b10      	ldr	r3, [pc, #64]	; (80024bc <I2Cx_MspInit+0x154>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	4a0f      	ldr	r2, [pc, #60]	; (80024bc <I2Cx_MspInit+0x154>)
 800247e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002482:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002484:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <I2Cx_MspInit+0x154>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	4a0c      	ldr	r2, [pc, #48]	; (80024bc <I2Cx_MspInit+0x154>)
 800248a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800248e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002490:	2200      	movs	r2, #0
 8002492:	210f      	movs	r1, #15
 8002494:	201f      	movs	r0, #31
 8002496:	f002 fd33 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800249a:	201f      	movs	r0, #31
 800249c:	f002 fd4c 	bl	8004f38 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80024a0:	2200      	movs	r2, #0
 80024a2:	210f      	movs	r1, #15
 80024a4:	2020      	movs	r0, #32
 80024a6:	f002 fd2b 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80024aa:	2020      	movs	r0, #32
 80024ac:	f002 fd44 	bl	8004f38 <HAL_NVIC_EnableIRQ>
}
 80024b0:	bf00      	nop
 80024b2:	3730      	adds	r7, #48	; 0x30
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200009b8 	.word	0x200009b8
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40021c00 	.word	0x40021c00
 80024c4:	40020400 	.word	0x40020400

080024c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f004 f9fb 	bl	80068cc <HAL_I2C_GetState>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d125      	bne.n	8002528 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a14      	ldr	r2, [pc, #80]	; (8002530 <I2Cx_Init+0x68>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d103      	bne.n	80024ec <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a13      	ldr	r2, [pc, #76]	; (8002534 <I2Cx_Init+0x6c>)
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e002      	b.n	80024f2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <I2Cx_Init+0x70>)
 80024f0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a11      	ldr	r2, [pc, #68]	; (800253c <I2Cx_Init+0x74>)
 80024f6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff23 	bl	8002368 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f003 fee4 	bl	80062f0 <HAL_I2C_Init>
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	200009b8 	.word	0x200009b8
 8002534:	40005c00 	.word	0x40005c00
 8002538:	40005400 	.word	0x40005400
 800253c:	40912732 	.word	0x40912732

08002540 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af04      	add	r7, sp, #16
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	4608      	mov	r0, r1
 800254a:	4611      	mov	r1, r2
 800254c:	461a      	mov	r2, r3
 800254e:	4603      	mov	r3, r0
 8002550:	72fb      	strb	r3, [r7, #11]
 8002552:	460b      	mov	r3, r1
 8002554:	813b      	strh	r3, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800255e:	7afb      	ldrb	r3, [r7, #11]
 8002560:	b299      	uxth	r1, r3
 8002562:	88f8      	ldrh	r0, [r7, #6]
 8002564:	893a      	ldrh	r2, [r7, #8]
 8002566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800256a:	9302      	str	r3, [sp, #8]
 800256c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	4603      	mov	r3, r0
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f004 f88e 	bl	8006698 <HAL_I2C_Mem_Read>
 800257c:	4603      	mov	r3, r0
 800257e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002586:	7afb      	ldrb	r3, [r7, #11]
 8002588:	4619      	mov	r1, r3
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f832 	bl	80025f4 <I2Cx_Error>
  }
  return status;    
 8002590:	7dfb      	ldrb	r3, [r7, #23]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b08a      	sub	sp, #40	; 0x28
 800259e:	af04      	add	r7, sp, #16
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	4608      	mov	r0, r1
 80025a4:	4611      	mov	r1, r2
 80025a6:	461a      	mov	r2, r3
 80025a8:	4603      	mov	r3, r0
 80025aa:	72fb      	strb	r3, [r7, #11]
 80025ac:	460b      	mov	r3, r1
 80025ae:	813b      	strh	r3, [r7, #8]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025b8:	7afb      	ldrb	r3, [r7, #11]
 80025ba:	b299      	uxth	r1, r3
 80025bc:	88f8      	ldrh	r0, [r7, #6]
 80025be:	893a      	ldrh	r2, [r7, #8]
 80025c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c4:	9302      	str	r3, [sp, #8]
 80025c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	4603      	mov	r3, r0
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f003 ff4d 	bl	8006470 <HAL_I2C_Mem_Write>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80025da:	7dfb      	ldrb	r3, [r7, #23]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80025e0:	7afb      	ldrb	r3, [r7, #11]
 80025e2:	4619      	mov	r1, r3
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f805 	bl	80025f4 <I2Cx_Error>
  }
  return status;
 80025ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f003 ff05 	bl	8006410 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff5e 	bl	80024c8 <I2Cx_Init>
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <TS_IO_Init+0x10>)
 800261a:	f7ff ff55 	bl	80024c8 <I2Cx_Init>
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200009b8 	.word	0x200009b8

08002628 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af02      	add	r7, sp, #8
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	460b      	mov	r3, r1
 8002634:	71bb      	strb	r3, [r7, #6]
 8002636:	4613      	mov	r3, r2
 8002638:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	b29a      	uxth	r2, r3
 800263e:	79f9      	ldrb	r1, [r7, #7]
 8002640:	2301      	movs	r3, #1
 8002642:	9301      	str	r3, [sp, #4]
 8002644:	1d7b      	adds	r3, r7, #5
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	2301      	movs	r3, #1
 800264a:	4803      	ldr	r0, [pc, #12]	; (8002658 <TS_IO_Write+0x30>)
 800264c:	f7ff ffa5 	bl	800259a <I2Cx_WriteMultiple>
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	200009b8 	.word	0x200009b8

0800265c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af02      	add	r7, sp, #8
 8002662:	4603      	mov	r3, r0
 8002664:	460a      	mov	r2, r1
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002670:	79bb      	ldrb	r3, [r7, #6]
 8002672:	b29a      	uxth	r2, r3
 8002674:	79f9      	ldrb	r1, [r7, #7]
 8002676:	2301      	movs	r3, #1
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	f107 030f 	add.w	r3, r7, #15
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2301      	movs	r3, #1
 8002682:	4804      	ldr	r0, [pc, #16]	; (8002694 <TS_IO_Read+0x38>)
 8002684:	f7ff ff5c 	bl	8002540 <I2Cx_ReadMultiple>

  return read_value;
 8002688:	7bfb      	ldrb	r3, [r7, #15]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200009b8 	.word	0x200009b8

08002698 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f001 ff57 	bl	8004554 <HAL_Delay>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80026b4:	4b31      	ldr	r3, [pc, #196]	; (800277c <BSP_LCD_Init+0xcc>)
 80026b6:	2228      	movs	r2, #40	; 0x28
 80026b8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80026ba:	4b30      	ldr	r3, [pc, #192]	; (800277c <BSP_LCD_Init+0xcc>)
 80026bc:	2209      	movs	r2, #9
 80026be:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <BSP_LCD_Init+0xcc>)
 80026c2:	2235      	movs	r2, #53	; 0x35
 80026c4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80026c6:	4b2d      	ldr	r3, [pc, #180]	; (800277c <BSP_LCD_Init+0xcc>)
 80026c8:	220b      	movs	r2, #11
 80026ca:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80026cc:	4b2b      	ldr	r3, [pc, #172]	; (800277c <BSP_LCD_Init+0xcc>)
 80026ce:	f240 121b 	movw	r2, #283	; 0x11b
 80026d2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026d4:	4b29      	ldr	r3, [pc, #164]	; (800277c <BSP_LCD_Init+0xcc>)
 80026d6:	f240 2215 	movw	r2, #533	; 0x215
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80026dc:	4b27      	ldr	r3, [pc, #156]	; (800277c <BSP_LCD_Init+0xcc>)
 80026de:	f240 121d 	movw	r2, #285	; 0x11d
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80026e4:	4b25      	ldr	r3, [pc, #148]	; (800277c <BSP_LCD_Init+0xcc>)
 80026e6:	f240 2235 	movw	r2, #565	; 0x235
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80026ec:	2100      	movs	r1, #0
 80026ee:	4823      	ldr	r0, [pc, #140]	; (800277c <BSP_LCD_Init+0xcc>)
 80026f0:	f000 fcd2 	bl	8003098 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <BSP_LCD_Init+0xcc>)
 80026f6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80026fa:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	; (800277c <BSP_LCD_Init+0xcc>)
 80026fe:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002702:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <BSP_LCD_Init+0xcc>)
 8002706:	2200      	movs	r2, #0
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <BSP_LCD_Init+0xcc>)
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002714:	4b19      	ldr	r3, [pc, #100]	; (800277c <BSP_LCD_Init+0xcc>)
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <BSP_LCD_Init+0xcc>)
 800271e:	2200      	movs	r2, #0
 8002720:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002722:	4b16      	ldr	r3, [pc, #88]	; (800277c <BSP_LCD_Init+0xcc>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002728:	4b14      	ldr	r3, [pc, #80]	; (800277c <BSP_LCD_Init+0xcc>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800272e:	4b13      	ldr	r3, [pc, #76]	; (800277c <BSP_LCD_Init+0xcc>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002734:	4b11      	ldr	r3, [pc, #68]	; (800277c <BSP_LCD_Init+0xcc>)
 8002736:	4a12      	ldr	r2, [pc, #72]	; (8002780 <BSP_LCD_Init+0xd0>)
 8002738:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800273a:	4810      	ldr	r0, [pc, #64]	; (800277c <BSP_LCD_Init+0xcc>)
 800273c:	f004 fde2 	bl	8007304 <HAL_LTDC_GetState>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002746:	2100      	movs	r1, #0
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <BSP_LCD_Init+0xcc>)
 800274a:	f000 fbcb 	bl	8002ee4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800274e:	480b      	ldr	r0, [pc, #44]	; (800277c <BSP_LCD_Init+0xcc>)
 8002750:	f004 fc08 	bl	8006f64 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002754:	2201      	movs	r2, #1
 8002756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800275a:	480a      	ldr	r0, [pc, #40]	; (8002784 <BSP_LCD_Init+0xd4>)
 800275c:	f003 fd96 	bl	800628c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002760:	2201      	movs	r2, #1
 8002762:	2108      	movs	r1, #8
 8002764:	4808      	ldr	r0, [pc, #32]	; (8002788 <BSP_LCD_Init+0xd8>)
 8002766:	f003 fd91 	bl	800628c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800276a:	f000 fdf9 	bl	8003360 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800276e:	4807      	ldr	r0, [pc, #28]	; (800278c <BSP_LCD_Init+0xdc>)
 8002770:	f000 f8d8 	bl	8002924 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	20000a04 	.word	0x20000a04
 8002780:	40016800 	.word	0x40016800
 8002784:	40022000 	.word	0x40022000
 8002788:	40022800 	.word	0x40022800
 800278c:	20000028 	.word	0x20000028

08002790 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <BSP_LCD_GetXSize+0x20>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a06      	ldr	r2, [pc, #24]	; (80027b4 <BSP_LCD_GetXSize+0x24>)
 800279a:	2134      	movs	r1, #52	; 0x34
 800279c:	fb01 f303 	mul.w	r3, r1, r3
 80027a0:	4413      	add	r3, r2
 80027a2:	3360      	adds	r3, #96	; 0x60
 80027a4:	681b      	ldr	r3, [r3, #0]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20000aec 	.word	0x20000aec
 80027b4:	20000a04 	.word	0x20000a04

080027b8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <BSP_LCD_GetYSize+0x20>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a06      	ldr	r2, [pc, #24]	; (80027dc <BSP_LCD_GetYSize+0x24>)
 80027c2:	2134      	movs	r1, #52	; 0x34
 80027c4:	fb01 f303 	mul.w	r3, r1, r3
 80027c8:	4413      	add	r3, r2
 80027ca:	3364      	adds	r3, #100	; 0x64
 80027cc:	681b      	ldr	r3, [r3, #0]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	20000aec 	.word	0x20000aec
 80027dc:	20000a04 	.word	0x20000a04

080027e0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b090      	sub	sp, #64	; 0x40
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80027f0:	f7ff ffce 	bl	8002790 <BSP_LCD_GetXSize>
 80027f4:	4603      	mov	r3, r0
 80027f6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80027fc:	f7ff ffdc 	bl	80027b8 <BSP_LCD_GetYSize>
 8002800:	4603      	mov	r3, r0
 8002802:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002804:	2300      	movs	r3, #0
 8002806:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800280c:	23ff      	movs	r3, #255	; 0xff
 800280e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002826:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800282a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800282c:	2307      	movs	r3, #7
 800282e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002830:	f7ff ffae 	bl	8002790 <BSP_LCD_GetXSize>
 8002834:	4603      	mov	r3, r0
 8002836:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002838:	f7ff ffbe 	bl	80027b8 <BSP_LCD_GetYSize>
 800283c:	4603      	mov	r3, r0
 800283e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	4619      	mov	r1, r3
 8002848:	4812      	ldr	r0, [pc, #72]	; (8002894 <BSP_LCD_LayerDefaultInit+0xb4>)
 800284a:	f004 fd1d 	bl	8007288 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800284e:	88fa      	ldrh	r2, [r7, #6]
 8002850:	4911      	ldr	r1, [pc, #68]	; (8002898 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3304      	adds	r3, #4
 800285e:	f04f 32ff 	mov.w	r2, #4294967295
 8002862:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002864:	88fa      	ldrh	r2, [r7, #6]
 8002866:	490c      	ldr	r1, [pc, #48]	; (8002898 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002868:	4613      	mov	r3, r2
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3308      	adds	r3, #8
 8002874:	4a09      	ldr	r2, [pc, #36]	; (800289c <BSP_LCD_LayerDefaultInit+0xbc>)
 8002876:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	4907      	ldr	r1, [pc, #28]	; (8002898 <BSP_LCD_LayerDefaultInit+0xb8>)
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	440b      	add	r3, r1
 8002886:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800288a:	601a      	str	r2, [r3, #0]
}
 800288c:	bf00      	nop
 800288e:	3740      	adds	r7, #64	; 0x40
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	20000a04 	.word	0x20000a04
 8002898:	20000af0 	.word	0x20000af0
 800289c:	20000028 	.word	0x20000028

080028a0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <BSP_LCD_SelectLayer+0x1c>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
} 
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000aec 	.word	0x20000aec

080028c0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <BSP_LCD_SetTextColor+0x28>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	4907      	ldr	r1, [pc, #28]	; (80028ec <BSP_LCD_SetTextColor+0x2c>)
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	601a      	str	r2, [r3, #0]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	20000aec 	.word	0x20000aec
 80028ec:	20000af0 	.word	0x20000af0

080028f0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <BSP_LCD_SetBackColor+0x2c>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4908      	ldr	r1, [pc, #32]	; (8002920 <BSP_LCD_SetBackColor+0x30>)
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3304      	adds	r3, #4
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	601a      	str	r2, [r3, #0]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000aec 	.word	0x20000aec
 8002920:	20000af0 	.word	0x20000af0

08002924 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <BSP_LCD_SetFont+0x2c>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4908      	ldr	r1, [pc, #32]	; (8002954 <BSP_LCD_SetFont+0x30>)
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3308      	adds	r3, #8
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000aec 	.word	0x20000aec
 8002954:	20000af0 	.word	0x20000af0

08002958 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295a:	b085      	sub	sp, #20
 800295c:	af02      	add	r7, sp, #8
 800295e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <BSP_LCD_Clear+0x48>)
 8002962:	681c      	ldr	r4, [r3, #0]
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <BSP_LCD_Clear+0x48>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <BSP_LCD_Clear+0x4c>)
 800296a:	2134      	movs	r1, #52	; 0x34
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	335c      	adds	r3, #92	; 0x5c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	461e      	mov	r6, r3
 8002978:	f7ff ff0a 	bl	8002790 <BSP_LCD_GetXSize>
 800297c:	4605      	mov	r5, r0
 800297e:	f7ff ff1b 	bl	80027b8 <BSP_LCD_GetYSize>
 8002982:	4602      	mov	r2, r0
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	9301      	str	r3, [sp, #4]
 8002988:	2300      	movs	r3, #0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	4613      	mov	r3, r2
 800298e:	462a      	mov	r2, r5
 8002990:	4631      	mov	r1, r6
 8002992:	4620      	mov	r0, r4
 8002994:	f000 fc54 	bl	8003240 <LL_FillBuffer>
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029a0:	20000aec 	.word	0x20000aec
 80029a4:	20000a04 	.word	0x20000a04

080029a8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80029a8:	b590      	push	{r4, r7, lr}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
 80029b2:	460b      	mov	r3, r1
 80029b4:	80bb      	strh	r3, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <BSP_LCD_DisplayChar+0x80>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	491b      	ldr	r1, [pc, #108]	; (8002a2c <BSP_LCD_DisplayChar+0x84>)
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	440b      	add	r3, r1
 80029ca:	3308      	adds	r3, #8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	78fb      	ldrb	r3, [r7, #3]
 80029d2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <BSP_LCD_DisplayChar+0x80>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4c14      	ldr	r4, [pc, #80]	; (8002a2c <BSP_LCD_DisplayChar+0x84>)
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4423      	add	r3, r4
 80029e6:	3308      	adds	r3, #8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80029ec:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80029f0:	4b0d      	ldr	r3, [pc, #52]	; (8002a28 <BSP_LCD_DisplayChar+0x80>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	4c0d      	ldr	r4, [pc, #52]	; (8002a2c <BSP_LCD_DisplayChar+0x84>)
 80029f6:	4613      	mov	r3, r2
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4423      	add	r3, r4
 8002a00:	3308      	adds	r3, #8
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	889b      	ldrh	r3, [r3, #4]
 8002a06:	3307      	adds	r3, #7
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	da00      	bge.n	8002a0e <BSP_LCD_DisplayChar+0x66>
 8002a0c:	3307      	adds	r3, #7
 8002a0e:	10db      	asrs	r3, r3, #3
 8002a10:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a14:	18ca      	adds	r2, r1, r3
 8002a16:	88b9      	ldrh	r1, [r7, #4]
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fb58 	bl	80030d0 <DrawChar>
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd90      	pop	{r4, r7, pc}
 8002a28:	20000aec 	.word	0x20000aec
 8002a2c:	20000af0 	.word	0x20000af0

08002a30 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60ba      	str	r2, [r7, #8]
 8002a38:	461a      	mov	r2, r3
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	81fb      	strh	r3, [r7, #14]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	81bb      	strh	r3, [r7, #12]
 8002a42:	4613      	mov	r3, r2
 8002a44:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002a46:	2301      	movs	r3, #1
 8002a48:	83fb      	strh	r3, [r7, #30]
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002a5a:	e002      	b.n	8002a62 <BSP_LCD_DisplayStringAt+0x32>
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	617a      	str	r2, [r7, #20]
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d1f6      	bne.n	8002a5c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002a6e:	f7ff fe8f 	bl	8002790 <BSP_LCD_GetXSize>
 8002a72:	4601      	mov	r1, r0
 8002a74:	4b50      	ldr	r3, [pc, #320]	; (8002bb8 <BSP_LCD_DisplayStringAt+0x188>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4850      	ldr	r0, [pc, #320]	; (8002bbc <BSP_LCD_DisplayStringAt+0x18c>)
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4403      	add	r3, r0
 8002a84:	3308      	adds	r3, #8
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	889b      	ldrh	r3, [r3, #4]
 8002a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002a90:	79fb      	ldrb	r3, [r7, #7]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d01c      	beq.n	8002ad0 <BSP_LCD_DisplayStringAt+0xa0>
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	dc33      	bgt.n	8002b02 <BSP_LCD_DisplayStringAt+0xd2>
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d002      	beq.n	8002aa4 <BSP_LCD_DisplayStringAt+0x74>
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d019      	beq.n	8002ad6 <BSP_LCD_DisplayStringAt+0xa6>
 8002aa2:	e02e      	b.n	8002b02 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	1ad1      	subs	r1, r2, r3
 8002aaa:	4b43      	ldr	r3, [pc, #268]	; (8002bb8 <BSP_LCD_DisplayStringAt+0x188>)
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	4843      	ldr	r0, [pc, #268]	; (8002bbc <BSP_LCD_DisplayStringAt+0x18c>)
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4403      	add	r3, r0
 8002aba:	3308      	adds	r3, #8
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	889b      	ldrh	r3, [r3, #4]
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	085b      	lsrs	r3, r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	89fb      	ldrh	r3, [r7, #14]
 8002aca:	4413      	add	r3, r2
 8002acc:	83fb      	strh	r3, [r7, #30]
      break;
 8002ace:	e01b      	b.n	8002b08 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002ad0:	89fb      	ldrh	r3, [r7, #14]
 8002ad2:	83fb      	strh	r3, [r7, #30]
      break;
 8002ad4:	e018      	b.n	8002b08 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	b299      	uxth	r1, r3
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <BSP_LCD_DisplayStringAt+0x188>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	4836      	ldr	r0, [pc, #216]	; (8002bbc <BSP_LCD_DisplayStringAt+0x18c>)
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4403      	add	r3, r0
 8002aee:	3308      	adds	r3, #8
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	889b      	ldrh	r3, [r3, #4]
 8002af4:	fb11 f303 	smulbb	r3, r1, r3
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	89fb      	ldrh	r3, [r7, #14]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	83fb      	strh	r3, [r7, #30]
      break;
 8002b00:	e002      	b.n	8002b08 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002b02:	89fb      	ldrh	r3, [r7, #14]
 8002b04:	83fb      	strh	r3, [r7, #30]
      break;
 8002b06:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002b08:	8bfb      	ldrh	r3, [r7, #30]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <BSP_LCD_DisplayStringAt+0xe6>
 8002b0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da1d      	bge.n	8002b52 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b1a:	e01a      	b.n	8002b52 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	89b9      	ldrh	r1, [r7, #12]
 8002b22:	8bfb      	ldrh	r3, [r7, #30]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff3f 	bl	80029a8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <BSP_LCD_DisplayStringAt+0x188>)
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	4923      	ldr	r1, [pc, #140]	; (8002bbc <BSP_LCD_DisplayStringAt+0x18c>)
 8002b30:	4613      	mov	r3, r2
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	889a      	ldrh	r2, [r3, #4]
 8002b40:	8bfb      	ldrh	r3, [r7, #30]
 8002b42:	4413      	add	r3, r2
 8002b44:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
    i++;
 8002b4c:	8bbb      	ldrh	r3, [r7, #28]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	bf14      	ite	ne
 8002b5a:	2301      	movne	r3, #1
 8002b5c:	2300      	moveq	r3, #0
 8002b5e:	b2dc      	uxtb	r4, r3
 8002b60:	f7ff fe16 	bl	8002790 <BSP_LCD_GetXSize>
 8002b64:	8bb9      	ldrh	r1, [r7, #28]
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <BSP_LCD_DisplayStringAt+0x188>)
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	4d14      	ldr	r5, [pc, #80]	; (8002bbc <BSP_LCD_DisplayStringAt+0x18c>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	442b      	add	r3, r5
 8002b76:	3308      	adds	r3, #8
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	889b      	ldrh	r3, [r3, #4]
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ac3      	subs	r3, r0, r3
 8002b82:	b299      	uxth	r1, r3
 8002b84:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <BSP_LCD_DisplayStringAt+0x188>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <BSP_LCD_DisplayStringAt+0x18c>)
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4403      	add	r3, r0
 8002b94:	3308      	adds	r3, #8
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	889b      	ldrh	r3, [r3, #4]
 8002b9a:	4299      	cmp	r1, r3
 8002b9c:	bf2c      	ite	cs
 8002b9e:	2301      	movcs	r3, #1
 8002ba0:	2300      	movcc	r3, #0
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	4023      	ands	r3, r4
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1b7      	bne.n	8002b1c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002bac:	bf00      	nop
 8002bae:	bf00      	nop
 8002bb0:	3720      	adds	r7, #32
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000aec 	.word	0x20000aec
 8002bbc:	20000af0 	.word	0x20000af0

08002bc0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002bc0:	b5b0      	push	{r4, r5, r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	603a      	str	r2, [r7, #0]
 8002bca:	80fb      	strh	r3, [r7, #6]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <BSP_LCD_DrawPixel+0x88>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <BSP_LCD_DrawPixel+0x8c>)
 8002bd6:	2134      	movs	r1, #52	; 0x34
 8002bd8:	fb01 f303 	mul.w	r3, r1, r3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3348      	adds	r3, #72	; 0x48
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d116      	bne.n	8002c14 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002be6:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <BSP_LCD_DrawPixel+0x88>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a18      	ldr	r2, [pc, #96]	; (8002c4c <BSP_LCD_DrawPixel+0x8c>)
 8002bec:	2134      	movs	r1, #52	; 0x34
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	681c      	ldr	r4, [r3, #0]
 8002bf8:	88bd      	ldrh	r5, [r7, #4]
 8002bfa:	f7ff fdc9 	bl	8002790 <BSP_LCD_GetXSize>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	fb03 f205 	mul.w	r2, r3, r5
 8002c04:	88fb      	ldrh	r3, [r7, #6]
 8002c06:	4413      	add	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4423      	add	r3, r4
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	b292      	uxth	r2, r2
 8002c10:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002c12:	e015      	b.n	8002c40 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <BSP_LCD_DrawPixel+0x88>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <BSP_LCD_DrawPixel+0x8c>)
 8002c1a:	2134      	movs	r1, #52	; 0x34
 8002c1c:	fb01 f303 	mul.w	r3, r1, r3
 8002c20:	4413      	add	r3, r2
 8002c22:	335c      	adds	r3, #92	; 0x5c
 8002c24:	681c      	ldr	r4, [r3, #0]
 8002c26:	88bd      	ldrh	r5, [r7, #4]
 8002c28:	f7ff fdb2 	bl	8002790 <BSP_LCD_GetXSize>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	fb03 f205 	mul.w	r2, r3, r5
 8002c32:	88fb      	ldrh	r3, [r7, #6]
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4423      	add	r3, r4
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	6013      	str	r3, [r2, #0]
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bdb0      	pop	{r4, r5, r7, pc}
 8002c48:	20000aec 	.word	0x20000aec
 8002c4c:	20000a04 	.word	0x20000a04

08002c50 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002c50:	b590      	push	{r4, r7, lr}
 8002c52:	b08b      	sub	sp, #44	; 0x2c
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	330a      	adds	r3, #10
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	330b      	adds	r3, #11
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	441a      	add	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	330c      	adds	r3, #12
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	441a      	add	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	330d      	adds	r3, #13
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	4413      	add	r3, r2
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3312      	adds	r3, #18
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3313      	adds	r3, #19
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	021b      	lsls	r3, r3, #8
 8002ca8:	441a      	add	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3314      	adds	r3, #20
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	041b      	lsls	r3, r3, #16
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3315      	adds	r3, #21
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	061b      	lsls	r3, r3, #24
 8002cbc:	4413      	add	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3316      	adds	r3, #22
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3317      	adds	r3, #23
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	021b      	lsls	r3, r3, #8
 8002cd0:	441a      	add	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3318      	adds	r3, #24
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	441a      	add	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3319      	adds	r3, #25
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	061b      	lsls	r3, r3, #24
 8002ce4:	4413      	add	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	331c      	adds	r3, #28
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	331d      	adds	r3, #29
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	4413      	add	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8002cfc:	4b2b      	ldr	r3, [pc, #172]	; (8002dac <BSP_LCD_DrawBitmap+0x15c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a2b      	ldr	r2, [pc, #172]	; (8002db0 <BSP_LCD_DrawBitmap+0x160>)
 8002d02:	2134      	movs	r1, #52	; 0x34
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	335c      	adds	r3, #92	; 0x5c
 8002d0c:	681c      	ldr	r4, [r3, #0]
 8002d0e:	f7ff fd3f 	bl	8002790 <BSP_LCD_GetXSize>
 8002d12:	4602      	mov	r2, r0
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	fb03 f202 	mul.w	r2, r3, r2
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4423      	add	r3, r4
 8002d22:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	3b20      	subs	r3, #32
 8002d28:	2b07      	cmp	r3, #7
 8002d2a:	d802      	bhi.n	8002d32 <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	e008      	b.n	8002d44 <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	3b10      	subs	r3, #16
 8002d36:	2b07      	cmp	r3, #7
 8002d38:	d802      	bhi.n	8002d40 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 8002d3a:	2302      	movs	r3, #2
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e001      	b.n	8002d44 <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 8002d40:	2301      	movs	r3, #1
 8002d42:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	fb02 f303 	mul.w	r3, r2, r3
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	08d2      	lsrs	r2, r2, #3
 8002d52:	fb03 f202 	mul.w	r2, r3, r2
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	4413      	add	r3, r2
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
 8002d64:	e018      	b.n	8002d98 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 8002d66:	6a39      	ldr	r1, [r7, #32]
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 fab3 	bl	80032d8 <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 8002d72:	f7ff fd0d 	bl	8002790 <BSP_LCD_GetXSize>
 8002d76:	4603      	mov	r3, r0
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	6a3a      	ldr	r2, [r7, #32]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	08db      	lsrs	r3, r3, #3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	425b      	negs	r3, r3
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	4413      	add	r3, r2
 8002d90:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	3301      	adds	r3, #1
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
 8002d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d3e2      	bcc.n	8002d66 <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	372c      	adds	r7, #44	; 0x2c
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd90      	pop	{r4, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000aec 	.word	0x20000aec
 8002db0:	20000a04 	.word	0x20000a04

08002db4 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002db8:	b086      	sub	sp, #24
 8002dba:	af02      	add	r7, sp, #8
 8002dbc:	4604      	mov	r4, r0
 8002dbe:	4608      	mov	r0, r1
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	4623      	mov	r3, r4
 8002dc6:	80fb      	strh	r3, [r7, #6]
 8002dc8:	4603      	mov	r3, r0
 8002dca:	80bb      	strh	r3, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <BSP_LCD_FillRect+0xe8>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4930      	ldr	r1, [pc, #192]	; (8002ea0 <BSP_LCD_FillRect+0xec>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fd68 	bl	80028c0 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <BSP_LCD_FillRect+0xe8>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <BSP_LCD_FillRect+0xf0>)
 8002df6:	2134      	movs	r1, #52	; 0x34
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3348      	adds	r3, #72	; 0x48
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d114      	bne.n	8002e30 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e06:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <BSP_LCD_FillRect+0xe8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a26      	ldr	r2, [pc, #152]	; (8002ea4 <BSP_LCD_FillRect+0xf0>)
 8002e0c:	2134      	movs	r1, #52	; 0x34
 8002e0e:	fb01 f303 	mul.w	r3, r1, r3
 8002e12:	4413      	add	r3, r2
 8002e14:	335c      	adds	r3, #92	; 0x5c
 8002e16:	681c      	ldr	r4, [r3, #0]
 8002e18:	f7ff fcba 	bl	8002790 <BSP_LCD_GetXSize>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	88bb      	ldrh	r3, [r7, #4]
 8002e20:	fb03 f202 	mul.w	r2, r3, r2
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	4413      	add	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4423      	add	r3, r4
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e013      	b.n	8002e58 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e30:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <BSP_LCD_FillRect+0xe8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1b      	ldr	r2, [pc, #108]	; (8002ea4 <BSP_LCD_FillRect+0xf0>)
 8002e36:	2134      	movs	r1, #52	; 0x34
 8002e38:	fb01 f303 	mul.w	r3, r1, r3
 8002e3c:	4413      	add	r3, r2
 8002e3e:	335c      	adds	r3, #92	; 0x5c
 8002e40:	681c      	ldr	r4, [r3, #0]
 8002e42:	f7ff fca5 	bl	8002790 <BSP_LCD_GetXSize>
 8002e46:	4602      	mov	r2, r0
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	fb03 f202 	mul.w	r2, r3, r2
 8002e4e:	88fb      	ldrh	r3, [r7, #6]
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4423      	add	r3, r4
 8002e56:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002e58:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <BSP_LCD_FillRect+0xe8>)
 8002e5a:	681c      	ldr	r4, [r3, #0]
 8002e5c:	68fd      	ldr	r5, [r7, #12]
 8002e5e:	887e      	ldrh	r6, [r7, #2]
 8002e60:	f8b7 8000 	ldrh.w	r8, [r7]
 8002e64:	f7ff fc94 	bl	8002790 <BSP_LCD_GetXSize>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	887b      	ldrh	r3, [r7, #2]
 8002e6c:	1ad1      	subs	r1, r2, r3
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	; (8002e9c <BSP_LCD_FillRect+0xe8>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	480b      	ldr	r0, [pc, #44]	; (8002ea0 <BSP_LCD_FillRect+0xec>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	005b      	lsls	r3, r3, #1
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4403      	add	r3, r0
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	9100      	str	r1, [sp, #0]
 8002e84:	4643      	mov	r3, r8
 8002e86:	4632      	mov	r2, r6
 8002e88:	4629      	mov	r1, r5
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 f9d8 	bl	8003240 <LL_FillBuffer>
}
 8002e90:	bf00      	nop
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000aec 	.word	0x20000aec
 8002ea0:	20000af0 	.word	0x20000af0
 8002ea4:	20000a04 	.word	0x20000a04

08002ea8 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <BSP_LCD_DisplayOn+0x30>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <BSP_LCD_DisplayOn+0x30>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ec2:	4806      	ldr	r0, [pc, #24]	; (8002edc <BSP_LCD_DisplayOn+0x34>)
 8002ec4:	f003 f9e2 	bl	800628c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002ec8:	2201      	movs	r2, #1
 8002eca:	2108      	movs	r1, #8
 8002ecc:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <BSP_LCD_DisplayOn+0x38>)
 8002ece:	f003 f9dd 	bl	800628c <HAL_GPIO_WritePin>
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000a04 	.word	0x20000a04
 8002edc:	40022000 	.word	0x40022000
 8002ee0:	40022800 	.word	0x40022800

08002ee4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b090      	sub	sp, #64	; 0x40
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002eee:	4b64      	ldr	r3, [pc, #400]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4a63      	ldr	r2, [pc, #396]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002ef4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	4b61      	ldr	r3, [pc, #388]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f06:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	4a5d      	ldr	r2, [pc, #372]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f10:	6313      	str	r3, [r2, #48]	; 0x30
 8002f12:	4b5b      	ldr	r3, [pc, #364]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f1e:	4b58      	ldr	r3, [pc, #352]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	4a57      	ldr	r2, [pc, #348]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f24:	f043 0310 	orr.w	r3, r3, #16
 8002f28:	6313      	str	r3, [r2, #48]	; 0x30
 8002f2a:	4b55      	ldr	r3, [pc, #340]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	f003 0310 	and.w	r3, r3, #16
 8002f32:	623b      	str	r3, [r7, #32]
 8002f34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f36:	4b52      	ldr	r3, [pc, #328]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	4a51      	ldr	r2, [pc, #324]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f40:	6313      	str	r3, [r2, #48]	; 0x30
 8002f42:	4b4f      	ldr	r3, [pc, #316]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002f4e:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	4a4b      	ldr	r2, [pc, #300]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5a:	4b49      	ldr	r3, [pc, #292]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002f66:	4b46      	ldr	r3, [pc, #280]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	4a45      	ldr	r2, [pc, #276]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f70:	6313      	str	r3, [r2, #48]	; 0x30
 8002f72:	4b43      	ldr	r3, [pc, #268]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002f7e:	4b40      	ldr	r3, [pc, #256]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a3f      	ldr	r2, [pc, #252]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002f96:	4b3a      	ldr	r3, [pc, #232]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	4a39      	ldr	r2, [pc, #228]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa2:	4b37      	ldr	r3, [pc, #220]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002fae:	4b34      	ldr	r3, [pc, #208]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	4a33      	ldr	r2, [pc, #204]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002fb4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fba:	4b31      	ldr	r3, [pc, #196]	; (8003080 <BSP_LCD_MspInit+0x19c>)
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002fd6:	230e      	movs	r3, #14
 8002fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002fda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4828      	ldr	r0, [pc, #160]	; (8003084 <BSP_LCD_MspInit+0x1a0>)
 8002fe2:	f002 fe83 	bl	8005cec <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002fe6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002ff0:	2309      	movs	r3, #9
 8002ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002ff4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	4823      	ldr	r0, [pc, #140]	; (8003088 <BSP_LCD_MspInit+0x1a4>)
 8002ffc:	f002 fe76 	bl	8005cec <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003000:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003006:	2302      	movs	r3, #2
 8003008:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800300a:	230e      	movs	r3, #14
 800300c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800300e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003012:	4619      	mov	r1, r3
 8003014:	481d      	ldr	r0, [pc, #116]	; (800308c <BSP_LCD_MspInit+0x1a8>)
 8003016:	f002 fe69 	bl	8005cec <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800301a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800301e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003020:	2302      	movs	r3, #2
 8003022:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003024:	230e      	movs	r3, #14
 8003026:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003028:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302c:	4619      	mov	r1, r3
 800302e:	4818      	ldr	r0, [pc, #96]	; (8003090 <BSP_LCD_MspInit+0x1ac>)
 8003030:	f002 fe5c 	bl	8005cec <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003034:	23f7      	movs	r3, #247	; 0xf7
 8003036:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800303c:	230e      	movs	r3, #14
 800303e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003044:	4619      	mov	r1, r3
 8003046:	4813      	ldr	r0, [pc, #76]	; (8003094 <BSP_LCD_MspInit+0x1b0>)
 8003048:	f002 fe50 	bl	8005cec <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 800304c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003052:	2301      	movs	r3, #1
 8003054:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003056:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800305a:	4619      	mov	r1, r3
 800305c:	480b      	ldr	r0, [pc, #44]	; (800308c <BSP_LCD_MspInit+0x1a8>)
 800305e:	f002 fe45 	bl	8005cec <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003062:	2308      	movs	r3, #8
 8003064:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003066:	2301      	movs	r3, #1
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800306a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800306e:	4619      	mov	r1, r3
 8003070:	4808      	ldr	r0, [pc, #32]	; (8003094 <BSP_LCD_MspInit+0x1b0>)
 8003072:	f002 fe3b 	bl	8005cec <HAL_GPIO_Init>
}
 8003076:	bf00      	nop
 8003078:	3740      	adds	r7, #64	; 0x40
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40021000 	.word	0x40021000
 8003088:	40021800 	.word	0x40021800
 800308c:	40022000 	.word	0x40022000
 8003090:	40022400 	.word	0x40022400
 8003094:	40022800 	.word	0x40022800

08003098 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <BSP_LCD_ClockConfig+0x34>)
 80030a4:	2208      	movs	r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <BSP_LCD_ClockConfig+0x34>)
 80030aa:	22c0      	movs	r2, #192	; 0xc0
 80030ac:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <BSP_LCD_ClockConfig+0x34>)
 80030b0:	2205      	movs	r2, #5
 80030b2:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <BSP_LCD_ClockConfig+0x34>)
 80030b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80030ba:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80030bc:	4803      	ldr	r0, [pc, #12]	; (80030cc <BSP_LCD_ClockConfig+0x34>)
 80030be:	f004 ffe5 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000b08 	.word	0x20000b08

080030d0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	603a      	str	r2, [r7, #0]
 80030da:	80fb      	strh	r3, [r7, #6]
 80030dc:	460b      	mov	r3, r1
 80030de:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80030e8:	4b53      	ldr	r3, [pc, #332]	; (8003238 <DrawChar+0x168>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4953      	ldr	r1, [pc, #332]	; (800323c <DrawChar+0x16c>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	3308      	adds	r3, #8
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	88db      	ldrh	r3, [r3, #6]
 80030fe:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003100:	4b4d      	ldr	r3, [pc, #308]	; (8003238 <DrawChar+0x168>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	494d      	ldr	r1, [pc, #308]	; (800323c <DrawChar+0x16c>)
 8003106:	4613      	mov	r3, r2
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	4413      	add	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	440b      	add	r3, r1
 8003110:	3308      	adds	r3, #8
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	889b      	ldrh	r3, [r3, #4]
 8003116:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003118:	8a3b      	ldrh	r3, [r7, #16]
 800311a:	3307      	adds	r3, #7
 800311c:	2b00      	cmp	r3, #0
 800311e:	da00      	bge.n	8003122 <DrawChar+0x52>
 8003120:	3307      	adds	r3, #7
 8003122:	10db      	asrs	r3, r3, #3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8a3b      	ldrh	r3, [r7, #16]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
 8003136:	e076      	b.n	8003226 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003138:	8a3b      	ldrh	r3, [r7, #16]
 800313a:	3307      	adds	r3, #7
 800313c:	2b00      	cmp	r3, #0
 800313e:	da00      	bge.n	8003142 <DrawChar+0x72>
 8003140:	3307      	adds	r3, #7
 8003142:	10db      	asrs	r3, r3, #3
 8003144:	461a      	mov	r2, r3
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fb02 f303 	mul.w	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	4413      	add	r3, r2
 8003150:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003152:	8a3b      	ldrh	r3, [r7, #16]
 8003154:	3307      	adds	r3, #7
 8003156:	2b00      	cmp	r3, #0
 8003158:	da00      	bge.n	800315c <DrawChar+0x8c>
 800315a:	3307      	adds	r3, #7
 800315c:	10db      	asrs	r3, r3, #3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d002      	beq.n	8003168 <DrawChar+0x98>
 8003162:	2b02      	cmp	r3, #2
 8003164:	d004      	beq.n	8003170 <DrawChar+0xa0>
 8003166:	e00c      	b.n	8003182 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	617b      	str	r3, [r7, #20]
      break;
 800316e:	e016      	b.n	800319e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	3201      	adds	r2, #1
 800317a:	7812      	ldrb	r2, [r2, #0]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
      break;
 8003180:	e00d      	b.n	800319e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	041a      	lsls	r2, r3, #16
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	3301      	adds	r3, #1
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	021b      	lsls	r3, r3, #8
 8003190:	4313      	orrs	r3, r2
 8003192:	68ba      	ldr	r2, [r7, #8]
 8003194:	3202      	adds	r2, #2
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]
      break;
 800319c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	e036      	b.n	8003212 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80031a4:	8a3a      	ldrh	r2, [r7, #16]
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	1ad2      	subs	r2, r2, r3
 80031aa:	7bfb      	ldrb	r3, [r7, #15]
 80031ac:	4413      	add	r3, r2
 80031ae:	3b01      	subs	r3, #1
 80031b0:	2201      	movs	r2, #1
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	4413      	add	r3, r2
 80031c8:	b298      	uxth	r0, r3
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <DrawChar+0x168>)
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	491b      	ldr	r1, [pc, #108]	; (800323c <DrawChar+0x16c>)
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	88bb      	ldrh	r3, [r7, #4]
 80031de:	4619      	mov	r1, r3
 80031e0:	f7ff fcee 	bl	8002bc0 <BSP_LCD_DrawPixel>
 80031e4:	e012      	b.n	800320c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	4413      	add	r3, r2
 80031ee:	b298      	uxth	r0, r3
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <DrawChar+0x168>)
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	4911      	ldr	r1, [pc, #68]	; (800323c <DrawChar+0x16c>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	3304      	adds	r3, #4
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	88bb      	ldrh	r3, [r7, #4]
 8003206:	4619      	mov	r1, r3
 8003208:	f7ff fcda 	bl	8002bc0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	3301      	adds	r3, #1
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	8a3b      	ldrh	r3, [r7, #16]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	429a      	cmp	r2, r3
 8003218:	d3c4      	bcc.n	80031a4 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800321a:	88bb      	ldrh	r3, [r7, #4]
 800321c:	3301      	adds	r3, #1
 800321e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	3301      	adds	r3, #1
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	8a7b      	ldrh	r3, [r7, #18]
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	429a      	cmp	r2, r3
 800322c:	d384      	bcc.n	8003138 <DrawChar+0x68>
  }
}
 800322e:	bf00      	nop
 8003230:	bf00      	nop
 8003232:	3720      	adds	r7, #32
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000aec 	.word	0x20000aec
 800323c:	20000af0 	.word	0x20000af0

08003240 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <LL_FillBuffer+0x88>)
 8003250:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003254:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003256:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <LL_FillBuffer+0x8c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <LL_FillBuffer+0x90>)
 800325c:	2134      	movs	r1, #52	; 0x34
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3348      	adds	r3, #72	; 0x48
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d103      	bne.n	8003274 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800326c:	4b16      	ldr	r3, [pc, #88]	; (80032c8 <LL_FillBuffer+0x88>)
 800326e:	2202      	movs	r2, #2
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e002      	b.n	800327a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003274:	4b14      	ldr	r3, [pc, #80]	; (80032c8 <LL_FillBuffer+0x88>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <LL_FillBuffer+0x88>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <LL_FillBuffer+0x88>)
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <LL_FillBuffer+0x94>)
 8003284:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003286:	4810      	ldr	r0, [pc, #64]	; (80032c8 <LL_FillBuffer+0x88>)
 8003288:	f002 f994 	bl	80055b4 <HAL_DMA2D_Init>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d115      	bne.n	80032be <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003292:	68f9      	ldr	r1, [r7, #12]
 8003294:	480c      	ldr	r0, [pc, #48]	; (80032c8 <LL_FillBuffer+0x88>)
 8003296:	f002 fbfb 	bl	8005a90 <HAL_DMA2D_ConfigLayer>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10e      	bne.n	80032be <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69f9      	ldr	r1, [r7, #28]
 80032aa:	4807      	ldr	r0, [pc, #28]	; (80032c8 <LL_FillBuffer+0x88>)
 80032ac:	f002 f9cc 	bl	8005648 <HAL_DMA2D_Start>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d103      	bne.n	80032be <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80032b6:	210a      	movs	r1, #10
 80032b8:	4803      	ldr	r0, [pc, #12]	; (80032c8 <LL_FillBuffer+0x88>)
 80032ba:	f002 f9f0 	bl	800569e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000aac 	.word	0x20000aac
 80032cc:	20000aec 	.word	0x20000aec
 80032d0:	20000a04 	.word	0x20000a04
 80032d4:	4002b000 	.word	0x4002b000

080032d8 <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af02      	add	r7, sp, #8
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
 80032e4:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 80032e6:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 80032e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032ec:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80032f4:	4b18      	ldr	r3, [pc, #96]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80032fa:	4b17      	ldr	r3, [pc, #92]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003306:	4a14      	ldr	r2, [pc, #80]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 800330e:	2200      	movs	r2, #0
 8003310:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 8003314:	4a11      	ldr	r2, [pc, #68]	; (800335c <LL_ConvertLineToARGB8888+0x84>)
 8003316:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003318:	480f      	ldr	r0, [pc, #60]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 800331a:	f002 f94b 	bl	80055b4 <HAL_DMA2D_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d115      	bne.n	8003350 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003324:	2101      	movs	r1, #1
 8003326:	480c      	ldr	r0, [pc, #48]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 8003328:	f002 fbb2 	bl	8005a90 <HAL_DMA2D_ConfigLayer>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003332:	68f9      	ldr	r1, [r7, #12]
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	2301      	movs	r3, #1
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4806      	ldr	r0, [pc, #24]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 800333e:	f002 f983 	bl	8005648 <HAL_DMA2D_Start>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d103      	bne.n	8003350 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003348:	210a      	movs	r1, #10
 800334a:	4803      	ldr	r0, [pc, #12]	; (8003358 <LL_ConvertLineToARGB8888+0x80>)
 800334c:	f002 f9a7 	bl	800569e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000aac 	.word	0x20000aac
 800335c:	4002b000 	.word	0x4002b000

08003360 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003364:	4b29      	ldr	r3, [pc, #164]	; (800340c <BSP_SDRAM_Init+0xac>)
 8003366:	4a2a      	ldr	r2, [pc, #168]	; (8003410 <BSP_SDRAM_Init+0xb0>)
 8003368:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800336a:	4b2a      	ldr	r3, [pc, #168]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 800336c:	2202      	movs	r2, #2
 800336e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 8003372:	2207      	movs	r2, #7
 8003374:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003376:	4b27      	ldr	r3, [pc, #156]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 8003378:	2204      	movs	r2, #4
 800337a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800337c:	4b25      	ldr	r3, [pc, #148]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 800337e:	2207      	movs	r2, #7
 8003380:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003382:	4b24      	ldr	r3, [pc, #144]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 8003384:	2202      	movs	r2, #2
 8003386:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003388:	4b22      	ldr	r3, [pc, #136]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 800338a:	2202      	movs	r2, #2
 800338c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800338e:	4b21      	ldr	r3, [pc, #132]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 8003390:	2202      	movs	r2, #2
 8003392:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003394:	4b1d      	ldr	r3, [pc, #116]	; (800340c <BSP_SDRAM_Init+0xac>)
 8003396:	2200      	movs	r2, #0
 8003398:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800339a:	4b1c      	ldr	r3, [pc, #112]	; (800340c <BSP_SDRAM_Init+0xac>)
 800339c:	2200      	movs	r2, #0
 800339e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033a2:	2204      	movs	r2, #4
 80033a4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80033a6:	4b19      	ldr	r3, [pc, #100]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033a8:	2210      	movs	r2, #16
 80033aa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033ae:	2240      	movs	r2, #64	; 0x40
 80033b0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80033b2:	4b16      	ldr	r3, [pc, #88]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033b8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80033ba:	4b14      	ldr	r3, [pc, #80]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033bc:	2200      	movs	r2, #0
 80033be:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80033c0:	4b12      	ldr	r3, [pc, #72]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80033c8:	4b10      	ldr	r3, [pc, #64]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80033d6:	2100      	movs	r1, #0
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033da:	f000 f87f 	bl	80034dc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80033de:	490d      	ldr	r1, [pc, #52]	; (8003414 <BSP_SDRAM_Init+0xb4>)
 80033e0:	480a      	ldr	r0, [pc, #40]	; (800340c <BSP_SDRAM_Init+0xac>)
 80033e2:	f005 fe1b 	bl	800901c <HAL_SDRAM_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <BSP_SDRAM_Init+0xb8>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	701a      	strb	r2, [r3, #0]
 80033f2:	e002      	b.n	80033fa <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <BSP_SDRAM_Init+0xb8>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80033fa:	f240 6003 	movw	r0, #1539	; 0x603
 80033fe:	f000 f80d 	bl	800341c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <BSP_SDRAM_Init+0xb8>)
 8003404:	781b      	ldrb	r3, [r3, #0]
}
 8003406:	4618      	mov	r0, r3
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000b8c 	.word	0x20000b8c
 8003410:	a0000140 	.word	0xa0000140
 8003414:	20000bc0 	.word	0x20000bc0
 8003418:	20000038 	.word	0x20000038

0800341c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003428:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003430:	2210      	movs	r2, #16
 8003432:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003434:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003436:	2201      	movs	r2, #1
 8003438:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800343a:	4b26      	ldr	r3, [pc, #152]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800343c:	2200      	movs	r2, #0
 800343e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003444:	4923      	ldr	r1, [pc, #140]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003446:	4824      	ldr	r0, [pc, #144]	; (80034d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003448:	f005 fe1c 	bl	8009084 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800344c:	2001      	movs	r0, #1
 800344e:	f001 f881 	bl	8004554 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003452:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003454:	2202      	movs	r2, #2
 8003456:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003458:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800345a:	2210      	movs	r2, #16
 800345c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800345e:	4b1d      	ldr	r3, [pc, #116]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003460:	2201      	movs	r2, #1
 8003462:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003464:	4b1b      	ldr	r3, [pc, #108]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003466:	2200      	movs	r2, #0
 8003468:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800346a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800346e:	4919      	ldr	r1, [pc, #100]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003470:	4819      	ldr	r0, [pc, #100]	; (80034d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003472:	f005 fe07 	bl	8009084 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003476:	4b17      	ldr	r3, [pc, #92]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003478:	2203      	movs	r2, #3
 800347a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800347c:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800347e:	2210      	movs	r2, #16
 8003480:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003484:	2208      	movs	r2, #8
 8003486:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003488:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800348e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003492:	4910      	ldr	r1, [pc, #64]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003494:	4810      	ldr	r0, [pc, #64]	; (80034d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003496:	f005 fdf5 	bl	8009084 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800349a:	f44f 7308 	mov.w	r3, #544	; 0x220
 800349e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a2:	2204      	movs	r2, #4
 80034a4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034a6:	4b0b      	ldr	r3, [pc, #44]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034a8:	2210      	movs	r2, #16
 80034aa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80034ac:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4a07      	ldr	r2, [pc, #28]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80034b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034bc:	4905      	ldr	r1, [pc, #20]	; (80034d4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034be:	4806      	ldr	r0, [pc, #24]	; (80034d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034c0:	f005 fde0 	bl	8009084 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4804      	ldr	r0, [pc, #16]	; (80034d8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034c8:	f005 fe11 	bl	80090ee <HAL_SDRAM_ProgramRefreshRate>
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	20000bdc 	.word	0x20000bdc
 80034d8:	20000b8c 	.word	0x20000b8c

080034dc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80034dc:	b580      	push	{r7, lr}
 80034de:	b090      	sub	sp, #64	; 0x40
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80034e6:	4b70      	ldr	r3, [pc, #448]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	4a6f      	ldr	r2, [pc, #444]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6393      	str	r3, [r2, #56]	; 0x38
 80034f2:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80034fe:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a69      	ldr	r2, [pc, #420]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003516:	4b64      	ldr	r3, [pc, #400]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	4a63      	ldr	r2, [pc, #396]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 800351c:	f043 0304 	orr.w	r3, r3, #4
 8003520:	6313      	str	r3, [r2, #48]	; 0x30
 8003522:	4b61      	ldr	r3, [pc, #388]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800352e:	4b5e      	ldr	r3, [pc, #376]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	4a5d      	ldr	r2, [pc, #372]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003534:	f043 0308 	orr.w	r3, r3, #8
 8003538:	6313      	str	r3, [r2, #48]	; 0x30
 800353a:	4b5b      	ldr	r3, [pc, #364]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003546:	4b58      	ldr	r3, [pc, #352]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a57      	ldr	r2, [pc, #348]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 800354c:	f043 0310 	orr.w	r3, r3, #16
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b55      	ldr	r3, [pc, #340]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	61bb      	str	r3, [r7, #24]
 800355c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800355e:	4b52      	ldr	r3, [pc, #328]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	4a51      	ldr	r2, [pc, #324]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003564:	f043 0320 	orr.w	r3, r3, #32
 8003568:	6313      	str	r3, [r2, #48]	; 0x30
 800356a:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356e:	f003 0320 	and.w	r3, r3, #32
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003576:	4b4c      	ldr	r3, [pc, #304]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357a:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 800357c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003580:	6313      	str	r3, [r2, #48]	; 0x30
 8003582:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800358e:	4b46      	ldr	r3, [pc, #280]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a45      	ldr	r2, [pc, #276]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 8003594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <BSP_SDRAM_MspInit+0x1cc>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80035aa:	2301      	movs	r3, #1
 80035ac:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80035ae:	2302      	movs	r3, #2
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80035b2:	230c      	movs	r3, #12
 80035b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80035b6:	2308      	movs	r3, #8
 80035b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80035ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035be:	4619      	mov	r1, r3
 80035c0:	483a      	ldr	r0, [pc, #232]	; (80036ac <BSP_SDRAM_MspInit+0x1d0>)
 80035c2:	f002 fb93 	bl	8005cec <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80035c6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80035ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80035cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035d0:	4619      	mov	r1, r3
 80035d2:	4837      	ldr	r0, [pc, #220]	; (80036b0 <BSP_SDRAM_MspInit+0x1d4>)
 80035d4:	f002 fb8a 	bl	8005cec <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80035d8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80035dc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80035de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e2:	4619      	mov	r1, r3
 80035e4:	4833      	ldr	r0, [pc, #204]	; (80036b4 <BSP_SDRAM_MspInit+0x1d8>)
 80035e6:	f002 fb81 	bl	8005cec <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80035ea:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80035ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80035f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035f4:	4619      	mov	r1, r3
 80035f6:	4830      	ldr	r0, [pc, #192]	; (80036b8 <BSP_SDRAM_MspInit+0x1dc>)
 80035f8:	f002 fb78 	bl	8005cec <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80035fc:	f248 1333 	movw	r3, #33075	; 0x8133
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003602:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003606:	4619      	mov	r1, r3
 8003608:	482c      	ldr	r0, [pc, #176]	; (80036bc <BSP_SDRAM_MspInit+0x1e0>)
 800360a:	f002 fb6f 	bl	8005cec <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800360e:	2328      	movs	r3, #40	; 0x28
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003616:	4619      	mov	r1, r3
 8003618:	4829      	ldr	r0, [pc, #164]	; (80036c0 <BSP_SDRAM_MspInit+0x1e4>)
 800361a:	f002 fb67 	bl	8005cec <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800361e:	4b29      	ldr	r3, [pc, #164]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003620:	2200      	movs	r2, #0
 8003622:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003624:	4b27      	ldr	r3, [pc, #156]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800362c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003630:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003634:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003638:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800363a:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800363c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003640:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003642:	4b20      	ldr	r3, [pc, #128]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003644:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003648:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800364c:	2200      	movs	r2, #0
 800364e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003650:	4b1c      	ldr	r3, [pc, #112]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003656:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800365a:	2200      	movs	r2, #0
 800365c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800365e:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003660:	2203      	movs	r2, #3
 8003662:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003666:	2200      	movs	r2, #0
 8003668:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003670:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <BSP_SDRAM_MspInit+0x1ec>)
 8003674:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a12      	ldr	r2, [pc, #72]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800367a:	631a      	str	r2, [r3, #48]	; 0x30
 800367c:	4a11      	ldr	r2, [pc, #68]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003682:	4810      	ldr	r0, [pc, #64]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 8003684:	f001 fdf4 	bl	8005270 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003688:	480e      	ldr	r0, [pc, #56]	; (80036c4 <BSP_SDRAM_MspInit+0x1e8>)
 800368a:	f001 fd43 	bl	8005114 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800368e:	2200      	movs	r2, #0
 8003690:	210f      	movs	r1, #15
 8003692:	2038      	movs	r0, #56	; 0x38
 8003694:	f001 fc34 	bl	8004f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003698:	2038      	movs	r0, #56	; 0x38
 800369a:	f001 fc4d 	bl	8004f38 <HAL_NVIC_EnableIRQ>
}
 800369e:	bf00      	nop
 80036a0:	3740      	adds	r7, #64	; 0x40
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020c00 	.word	0x40020c00
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40021400 	.word	0x40021400
 80036bc:	40021800 	.word	0x40021800
 80036c0:	40021c00 	.word	0x40021c00
 80036c4:	20000bec 	.word	0x20000bec
 80036c8:	40026410 	.word	0x40026410

080036cc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	460a      	mov	r2, r1
 80036d6:	80fb      	strh	r3, [r7, #6]
 80036d8:	4613      	mov	r3, r2
 80036da:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80036e0:	4a14      	ldr	r2, [pc, #80]	; (8003734 <BSP_TS_Init+0x68>)
 80036e2:	88fb      	ldrh	r3, [r7, #6]
 80036e4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <BSP_TS_Init+0x6c>)
 80036e8:	88bb      	ldrh	r3, [r7, #4]
 80036ea:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80036ec:	4b13      	ldr	r3, [pc, #76]	; (800373c <BSP_TS_Init+0x70>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2070      	movs	r0, #112	; 0x70
 80036f2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80036f4:	4b11      	ldr	r3, [pc, #68]	; (800373c <BSP_TS_Init+0x70>)
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	2070      	movs	r0, #112	; 0x70
 80036fa:	4798      	blx	r3
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b51      	cmp	r3, #81	; 0x51
 8003700:	d111      	bne.n	8003726 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003702:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <BSP_TS_Init+0x74>)
 8003704:	4a0d      	ldr	r2, [pc, #52]	; (800373c <BSP_TS_Init+0x70>)
 8003706:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003708:	4b0e      	ldr	r3, [pc, #56]	; (8003744 <BSP_TS_Init+0x78>)
 800370a:	2270      	movs	r2, #112	; 0x70
 800370c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800370e:	4b0e      	ldr	r3, [pc, #56]	; (8003748 <BSP_TS_Init+0x7c>)
 8003710:	2208      	movs	r2, #8
 8003712:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <BSP_TS_Init+0x74>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	4a0a      	ldr	r2, [pc, #40]	; (8003744 <BSP_TS_Init+0x78>)
 800371c:	7812      	ldrb	r2, [r2, #0]
 800371e:	b292      	uxth	r2, r2
 8003720:	4610      	mov	r0, r2
 8003722:	4798      	blx	r3
 8003724:	e001      	b.n	800372a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003726:	2303      	movs	r3, #3
 8003728:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000c50 	.word	0x20000c50
 8003738:	20000c52 	.word	0x20000c52
 800373c:	20000000 	.word	0x20000000
 8003740:	20000c4c 	.word	0x20000c4c
 8003744:	20000c55 	.word	0x20000c55
 8003748:	20000c54 	.word	0x20000c54

0800374c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b11      	ldr	r3, [pc, #68]	; (8003798 <HAL_MspInit+0x4c>)
 8003754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003756:	4a10      	ldr	r2, [pc, #64]	; (8003798 <HAL_MspInit+0x4c>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	6413      	str	r3, [r2, #64]	; 0x40
 800375e:	4b0e      	ldr	r3, [pc, #56]	; (8003798 <HAL_MspInit+0x4c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	607b      	str	r3, [r7, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <HAL_MspInit+0x4c>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a0a      	ldr	r2, [pc, #40]	; (8003798 <HAL_MspInit+0x4c>)
 8003770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b08      	ldr	r3, [pc, #32]	; (8003798 <HAL_MspInit+0x4c>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800377e:	603b      	str	r3, [r7, #0]
 8003780:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003782:	2200      	movs	r2, #0
 8003784:	210f      	movs	r1, #15
 8003786:	f06f 0001 	mvn.w	r0, #1
 800378a:	f001 fbb9 	bl	8004f00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b08c      	sub	sp, #48	; 0x30
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a4:	f107 031c 	add.w	r3, r7, #28
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]
 80037ac:	605a      	str	r2, [r3, #4]
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	60da      	str	r2, [r3, #12]
 80037b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_ADC_MspInit+0xc8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d124      	bne.n	8003808 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	4a29      	ldr	r2, [pc, #164]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ca:	4b27      	ldr	r3, [pc, #156]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d6:	4b24      	ldr	r3, [pc, #144]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a23      	ldr	r2, [pc, #140]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80037ee:	2301      	movs	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037f2:	2303      	movs	r3, #3
 80037f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037fa:	f107 031c 	add.w	r3, r7, #28
 80037fe:	4619      	mov	r1, r3
 8003800:	481a      	ldr	r0, [pc, #104]	; (800386c <HAL_ADC_MspInit+0xd0>)
 8003802:	f002 fa73 	bl	8005cec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003806:	e029      	b.n	800385c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <HAL_ADC_MspInit+0xd4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d124      	bne.n	800385c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003812:	4b15      	ldr	r3, [pc, #84]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 8003814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003816:	4a14      	ldr	r2, [pc, #80]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 8003818:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381c:	6453      	str	r3, [r2, #68]	; 0x44
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 8003820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003826:	613b      	str	r3, [r7, #16]
 8003828:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a0e      	ldr	r2, [pc, #56]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 8003830:	f043 0320 	orr.w	r3, r3, #32
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <HAL_ADC_MspInit+0xcc>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8003842:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003848:	2303      	movs	r3, #3
 800384a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4807      	ldr	r0, [pc, #28]	; (8003874 <HAL_ADC_MspInit+0xd8>)
 8003858:	f002 fa48 	bl	8005cec <HAL_GPIO_Init>
}
 800385c:	bf00      	nop
 800385e:	3730      	adds	r7, #48	; 0x30
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40012000 	.word	0x40012000
 8003868:	40023800 	.word	0x40023800
 800386c:	40020000 	.word	0x40020000
 8003870:	40012200 	.word	0x40012200
 8003874:	40021400 	.word	0x40021400

08003878 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08a      	sub	sp, #40	; 0x28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 0314 	add.w	r3, r7, #20
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a19      	ldr	r2, [pc, #100]	; (80038fc <HAL_DAC_MspInit+0x84>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d12b      	bne.n	80038f2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800389a:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_DAC_MspInit+0x88>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a18      	ldr	r2, [pc, #96]	; (8003900 <HAL_DAC_MspInit+0x88>)
 80038a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b16      	ldr	r3, [pc, #88]	; (8003900 <HAL_DAC_MspInit+0x88>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <HAL_DAC_MspInit+0x88>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a12      	ldr	r2, [pc, #72]	; (8003900 <HAL_DAC_MspInit+0x88>)
 80038b8:	f043 0301 	orr.w	r3, r3, #1
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b10      	ldr	r3, [pc, #64]	; (8003900 <HAL_DAC_MspInit+0x88>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80038ca:	2310      	movs	r3, #16
 80038cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ce:	2303      	movs	r3, #3
 80038d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038d6:	f107 0314 	add.w	r3, r7, #20
 80038da:	4619      	mov	r1, r3
 80038dc:	4809      	ldr	r0, [pc, #36]	; (8003904 <HAL_DAC_MspInit+0x8c>)
 80038de:	f002 fa05 	bl	8005cec <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	210f      	movs	r1, #15
 80038e6:	2036      	movs	r0, #54	; 0x36
 80038e8:	f001 fb0a 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038ec:	2036      	movs	r0, #54	; 0x36
 80038ee:	f001 fb23 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80038f2:	bf00      	nop
 80038f4:	3728      	adds	r7, #40	; 0x28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40007400 	.word	0x40007400
 8003900:	40023800 	.word	0x40023800
 8003904:	40020000 	.word	0x40020000

08003908 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <HAL_DMA2D_MspInit+0x44>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d113      	bne.n	8003942 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <HAL_DMA2D_MspInit+0x48>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a0c      	ldr	r2, [pc, #48]	; (8003950 <HAL_DMA2D_MspInit+0x48>)
 8003920:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_DMA2D_MspInit+0x48>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8003932:	2200      	movs	r2, #0
 8003934:	2105      	movs	r1, #5
 8003936:	205a      	movs	r0, #90	; 0x5a
 8003938:	f001 fae2 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800393c:	205a      	movs	r0, #90	; 0x5a
 800393e:	f001 fafb 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003942:	bf00      	nop
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	4002b000 	.word	0x4002b000
 8003950:	40023800 	.word	0x40023800

08003954 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b0ac      	sub	sp, #176	; 0xb0
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800396c:	f107 0318 	add.w	r3, r7, #24
 8003970:	2284      	movs	r2, #132	; 0x84
 8003972:	2100      	movs	r1, #0
 8003974:	4618      	mov	r0, r3
 8003976:	f00a fa77 	bl	800de68 <memset>
  if(hi2c->Instance==I2C1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a44      	ldr	r2, [pc, #272]	; (8003a90 <HAL_I2C_MspInit+0x13c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d13d      	bne.n	8003a00 <HAL_I2C_MspInit+0xac>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003984:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003988:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800398a:	2300      	movs	r3, #0
 800398c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800398e:	f107 0318 	add.w	r3, r7, #24
 8003992:	4618      	mov	r0, r3
 8003994:	f004 fb7a 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800399e:	f7fe fcdd 	bl	800235c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039a2:	4b3c      	ldr	r3, [pc, #240]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a3b      	ldr	r2, [pc, #236]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 80039a8:	f043 0302 	orr.w	r3, r3, #2
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b39      	ldr	r3, [pc, #228]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80039ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80039be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039c2:	2312      	movs	r3, #18
 80039c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ce:	2303      	movs	r3, #3
 80039d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039d4:	2304      	movs	r3, #4
 80039d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039de:	4619      	mov	r1, r3
 80039e0:	482d      	ldr	r0, [pc, #180]	; (8003a98 <HAL_I2C_MspInit+0x144>)
 80039e2:	f002 f983 	bl	8005cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039e6:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	4a2a      	ldr	r2, [pc, #168]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 80039ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039f0:	6413      	str	r3, [r2, #64]	; 0x40
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80039fe:	e042      	b.n	8003a86 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C3)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a25      	ldr	r2, [pc, #148]	; (8003a9c <HAL_I2C_MspInit+0x148>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d13d      	bne.n	8003a86 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8003a0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a16:	f107 0318 	add.w	r3, r7, #24
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fb36 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8003a26:	f7fe fc99 	bl	800235c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 8003a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a34:	6313      	str	r3, [r2, #48]	; 0x30
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003a42:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a4a:	2312      	movs	r3, #18
 8003a4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a56:	2303      	movs	r3, #3
 8003a58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003a62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a66:	4619      	mov	r1, r3
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <HAL_I2C_MspInit+0x14c>)
 8003a6a:	f002 f93f 	bl	8005cec <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003a6e:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	4a08      	ldr	r2, [pc, #32]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 8003a74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a78:	6413      	str	r3, [r2, #64]	; 0x40
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <HAL_I2C_MspInit+0x140>)
 8003a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
}
 8003a86:	bf00      	nop
 8003a88:	37b0      	adds	r7, #176	; 0xb0
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40005400 	.word	0x40005400
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40020400 	.word	0x40020400
 8003a9c:	40005c00 	.word	0x40005c00
 8003aa0:	40021c00 	.word	0x40021c00

08003aa4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_I2C_MspDeInit+0x64>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d110      	bne.n	8003ad8 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <HAL_I2C_MspDeInit+0x68>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	4a14      	ldr	r2, [pc, #80]	; (8003b0c <HAL_I2C_MspDeInit+0x68>)
 8003abc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ac0:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8003ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ac6:	4812      	ldr	r0, [pc, #72]	; (8003b10 <HAL_I2C_MspDeInit+0x6c>)
 8003ac8:	f002 fabc 	bl	8006044 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8003acc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ad0:	480f      	ldr	r0, [pc, #60]	; (8003b10 <HAL_I2C_MspDeInit+0x6c>)
 8003ad2:	f002 fab7 	bl	8006044 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003ad6:	e013      	b.n	8003b00 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <HAL_I2C_MspDeInit+0x70>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d10e      	bne.n	8003b00 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8003ae2:	4b0a      	ldr	r3, [pc, #40]	; (8003b0c <HAL_I2C_MspDeInit+0x68>)
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	4a09      	ldr	r2, [pc, #36]	; (8003b0c <HAL_I2C_MspDeInit+0x68>)
 8003ae8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aec:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8003aee:	2180      	movs	r1, #128	; 0x80
 8003af0:	4809      	ldr	r0, [pc, #36]	; (8003b18 <HAL_I2C_MspDeInit+0x74>)
 8003af2:	f002 faa7 	bl	8006044 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8003af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003afa:	4807      	ldr	r0, [pc, #28]	; (8003b18 <HAL_I2C_MspDeInit+0x74>)
 8003afc:	f002 faa2 	bl	8006044 <HAL_GPIO_DeInit>
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40005400 	.word	0x40005400
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40005c00 	.word	0x40005c00
 8003b18:	40021c00 	.word	0x40021c00

08003b1c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b0ae      	sub	sp, #184	; 0xb8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b24:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b34:	f107 0320 	add.w	r3, r7, #32
 8003b38:	2284      	movs	r2, #132	; 0x84
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f00a f993 	bl	800de68 <memset>
  if(hltdc->Instance==LTDC)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6f      	ldr	r2, [pc, #444]	; (8003d04 <HAL_LTDC_MspInit+0x1e8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	f040 80d6 	bne.w	8003cfa <HAL_LTDC_MspInit+0x1de>
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003b4e:	2308      	movs	r3, #8
 8003b50:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8003b52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8003b58:	2305      	movs	r3, #5
 8003b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8003b5c:	2302      	movs	r3, #2
 8003b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003b60:	2303      	movs	r3, #3
 8003b62:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003b64:	2301      	movs	r3, #1
 8003b66:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8003b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003b6e:	f107 0320 	add.w	r3, r7, #32
 8003b72:	4618      	mov	r0, r3
 8003b74:	f004 fa8a 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8003b7e:	f7fe fbed 	bl	800235c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003b82:	4b61      	ldr	r3, [pc, #388]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a60      	ldr	r2, [pc, #384]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003b88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b5e      	ldr	r3, [pc, #376]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b96:	61fb      	str	r3, [r7, #28]
 8003b98:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b9a:	4b5b      	ldr	r3, [pc, #364]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4a5a      	ldr	r2, [pc, #360]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003ba0:	f043 0310 	orr.w	r3, r3, #16
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4b58      	ldr	r3, [pc, #352]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003bb2:	4b55      	ldr	r3, [pc, #340]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb6:	4a54      	ldr	r2, [pc, #336]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bbe:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003bca:	4b4f      	ldr	r3, [pc, #316]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	4a4e      	ldr	r2, [pc, #312]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd6:	4b4c      	ldr	r3, [pc, #304]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003be2:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a48      	ldr	r2, [pc, #288]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b46      	ldr	r3, [pc, #280]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	60fb      	str	r3, [r7, #12]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003bfa:	4b43      	ldr	r3, [pc, #268]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c04:	6313      	str	r3, [r2, #48]	; 0x30
 8003c06:	4b40      	ldr	r3, [pc, #256]	; (8003d08 <HAL_LTDC_MspInit+0x1ec>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003c12:	2310      	movs	r3, #16
 8003c14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c24:	2300      	movs	r3, #0
 8003c26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c2a:	230e      	movs	r3, #14
 8003c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4835      	ldr	r0, [pc, #212]	; (8003d0c <HAL_LTDC_MspInit+0x1f0>)
 8003c38:	f002 f858 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003c3c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003c40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c56:	230e      	movs	r3, #14
 8003c58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003c5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c60:	4619      	mov	r1, r3
 8003c62:	482b      	ldr	r0, [pc, #172]	; (8003d10 <HAL_LTDC_MspInit+0x1f4>)
 8003c64:	f002 f842 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003c68:	23f7      	movs	r3, #247	; 0xf7
 8003c6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c80:	230e      	movs	r3, #14
 8003c82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003c86:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4821      	ldr	r0, [pc, #132]	; (8003d14 <HAL_LTDC_MspInit+0x1f8>)
 8003c8e:	f002 f82d 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003cac:	2309      	movs	r3, #9
 8003cae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003cb2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4817      	ldr	r0, [pc, #92]	; (8003d18 <HAL_LTDC_MspInit+0x1fc>)
 8003cba:	f002 f817 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003cbe:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003cc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc6:	2302      	movs	r3, #2
 8003cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003cd8:	230e      	movs	r3, #14
 8003cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003cde:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	480d      	ldr	r0, [pc, #52]	; (8003d1c <HAL_LTDC_MspInit+0x200>)
 8003ce6:	f002 f801 	bl	8005cec <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2105      	movs	r1, #5
 8003cee:	2058      	movs	r0, #88	; 0x58
 8003cf0:	f001 f906 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003cf4:	2058      	movs	r0, #88	; 0x58
 8003cf6:	f001 f91f 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003cfa:	bf00      	nop
 8003cfc:	37b8      	adds	r7, #184	; 0xb8
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40016800 	.word	0x40016800
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40022400 	.word	0x40022400
 8003d14:	40022800 	.word	0x40022800
 8003d18:	40021800 	.word	0x40021800
 8003d1c:	40022000 	.word	0x40022000

08003d20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b0a4      	sub	sp, #144	; 0x90
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d28:	f107 030c 	add.w	r3, r7, #12
 8003d2c:	2284      	movs	r2, #132	; 0x84
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00a f899 	bl	800de68 <memset>
  if(hrtc->Instance==RTC)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	; (8003d74 <HAL_RTC_MspInit+0x54>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d114      	bne.n	8003d6a <HAL_RTC_MspInit+0x4a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d40:	2320      	movs	r3, #32
 8003d42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d48:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d4a:	f107 030c 	add.w	r3, r7, #12
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 f99c 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003d5a:	f7fe faff 	bl	800235c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_RTC_MspInit+0x58>)
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <HAL_RTC_MspInit+0x58>)
 8003d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d68:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003d6a:	bf00      	nop
 8003d6c:	3790      	adds	r7, #144	; 0x90
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40002800 	.word	0x40002800
 8003d78:	40023800 	.word	0x40023800

08003d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08a      	sub	sp, #40	; 0x28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d84:	f107 0314 	add.w	r3, r7, #20
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_SPI_MspInit+0xb4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d144      	bne.n	8003e28 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d9e:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da8:	6413      	str	r3, [r2, #64]	; 0x40
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc2:	4b1c      	ldr	r3, [pc, #112]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd2:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003dd4:	f043 0302 	orr.w	r3, r3, #2
 8003dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_SPI_MspInit+0xb8>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	60bb      	str	r3, [r7, #8]
 8003de4:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8003de6:	2303      	movs	r3, #3
 8003de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003df2:	2303      	movs	r3, #3
 8003df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003df6:	2305      	movs	r3, #5
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003dfa:	f107 0314 	add.w	r3, r7, #20
 8003dfe:	4619      	mov	r1, r3
 8003e00:	480d      	ldr	r0, [pc, #52]	; (8003e38 <HAL_SPI_MspInit+0xbc>)
 8003e02:	f001 ff73 	bl	8005cec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8003e06:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e14:	2300      	movs	r3, #0
 8003e16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e18:	2305      	movs	r3, #5
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1c:	f107 0314 	add.w	r3, r7, #20
 8003e20:	4619      	mov	r1, r3
 8003e22:	4806      	ldr	r0, [pc, #24]	; (8003e3c <HAL_SPI_MspInit+0xc0>)
 8003e24:	f001 ff62 	bl	8005cec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003e28:	bf00      	nop
 8003e2a:	3728      	adds	r7, #40	; 0x28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	40003800 	.word	0x40003800
 8003e34:	40023800 	.word	0x40023800
 8003e38:	40022000 	.word	0x40022000
 8003e3c:	40020400 	.word	0x40020400

08003e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08e      	sub	sp, #56	; 0x38
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a3b      	ldr	r2, [pc, #236]	; (8003f4c <HAL_TIM_Base_MspInit+0x10c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d10c      	bne.n	8003e7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	4a3a      	ldr	r2, [pc, #232]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6e:	4b38      	ldr	r3, [pc, #224]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	623b      	str	r3, [r7, #32]
 8003e78:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003e7a:	e062      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM2)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e84:	d10c      	bne.n	8003ea0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e86:	4b32      	ldr	r3, [pc, #200]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	4a31      	ldr	r2, [pc, #196]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6413      	str	r3, [r2, #64]	; 0x40
 8003e92:	4b2f      	ldr	r3, [pc, #188]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	69fb      	ldr	r3, [r7, #28]
}
 8003e9e:	e050      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2b      	ldr	r2, [pc, #172]	; (8003f54 <HAL_TIM_Base_MspInit+0x114>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003eaa:	4b29      	ldr	r3, [pc, #164]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a28      	ldr	r2, [pc, #160]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003eb0:	f043 0302 	orr.w	r3, r3, #2
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b26      	ldr	r3, [pc, #152]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
}
 8003ec2:	e03e      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a23      	ldr	r2, [pc, #140]	; (8003f58 <HAL_TIM_Base_MspInit+0x118>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a1f      	ldr	r2, [pc, #124]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003ed4:	f043 0308 	orr.w	r3, r3, #8
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	e02c      	b.n	8003f42 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM8)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1b      	ldr	r2, [pc, #108]	; (8003f5c <HAL_TIM_Base_MspInit+0x11c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d127      	bne.n	8003f42 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ef2:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003ef8:	f043 0302 	orr.w	r3, r3, #2
 8003efc:	6453      	str	r3, [r2, #68]	; 0x44
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	613b      	str	r3, [r7, #16]
 8003f08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f0a:	4b11      	ldr	r3, [pc, #68]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	4a10      	ldr	r2, [pc, #64]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f14:	6313      	str	r3, [r2, #48]	; 0x30
 8003f16:	4b0e      	ldr	r3, [pc, #56]	; (8003f50 <HAL_TIM_Base_MspInit+0x110>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003f22:	2304      	movs	r3, #4
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f26:	2302      	movs	r3, #2
 8003f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003f32:	2303      	movs	r3, #3
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4808      	ldr	r0, [pc, #32]	; (8003f60 <HAL_TIM_Base_MspInit+0x120>)
 8003f3e:	f001 fed5 	bl	8005cec <HAL_GPIO_Init>
}
 8003f42:	bf00      	nop
 8003f44:	3738      	adds	r7, #56	; 0x38
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40010000 	.word	0x40010000
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40000400 	.word	0x40000400
 8003f58:	40000c00 	.word	0x40000c00
 8003f5c:	40010400 	.word	0x40010400
 8003f60:	40022000 	.word	0x40022000

08003f64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b0b0      	sub	sp, #192	; 0xc0
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f6c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]
 8003f74:	605a      	str	r2, [r3, #4]
 8003f76:	609a      	str	r2, [r3, #8]
 8003f78:	60da      	str	r2, [r3, #12]
 8003f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f80:	2284      	movs	r2, #132	; 0x84
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f009 ff6f 	bl	800de68 <memset>
  if(huart->Instance==UART7)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a79      	ldr	r2, [pc, #484]	; (8004174 <HAL_UART_MspInit+0x210>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d145      	bne.n	8004020 <HAL_UART_MspInit+0xbc>
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f98:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f004 f871 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003fb0:	f7fe f9d4 	bl	800235c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003fb4:	4b70      	ldr	r3, [pc, #448]	; (8004178 <HAL_UART_MspInit+0x214>)
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	4a6f      	ldr	r2, [pc, #444]	; (8004178 <HAL_UART_MspInit+0x214>)
 8003fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003fc0:	4b6d      	ldr	r3, [pc, #436]	; (8004178 <HAL_UART_MspInit+0x214>)
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fcc:	4b6a      	ldr	r3, [pc, #424]	; (8004178 <HAL_UART_MspInit+0x214>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	4a69      	ldr	r2, [pc, #420]	; (8004178 <HAL_UART_MspInit+0x214>)
 8003fd2:	f043 0320 	orr.w	r3, r3, #32
 8003fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8003fd8:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_UART_MspInit+0x214>)
 8003fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003fe4:	23c0      	movs	r3, #192	; 0xc0
 8003fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fea:	2302      	movs	r3, #2
 8003fec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003ffc:	2308      	movs	r3, #8
 8003ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004002:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004006:	4619      	mov	r1, r3
 8004008:	485c      	ldr	r0, [pc, #368]	; (800417c <HAL_UART_MspInit+0x218>)
 800400a:	f001 fe6f 	bl	8005cec <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800400e:	2200      	movs	r2, #0
 8004010:	2105      	movs	r1, #5
 8004012:	2052      	movs	r0, #82	; 0x52
 8004014:	f000 ff74 	bl	8004f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004018:	2052      	movs	r0, #82	; 0x52
 800401a:	f000 ff8d 	bl	8004f38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800401e:	e0a4      	b.n	800416a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a56      	ldr	r2, [pc, #344]	; (8004180 <HAL_UART_MspInit+0x21c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d15d      	bne.n	80040e6 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800402a:	2340      	movs	r3, #64	; 0x40
 800402c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800402e:	2300      	movs	r3, #0
 8004030:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004036:	4618      	mov	r0, r3
 8004038:	f004 f828 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8004042:	f7fe f98b 	bl	800235c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004046:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	4a4b      	ldr	r2, [pc, #300]	; (8004178 <HAL_UART_MspInit+0x214>)
 800404c:	f043 0310 	orr.w	r3, r3, #16
 8004050:	6453      	str	r3, [r2, #68]	; 0x44
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	f003 0310 	and.w	r3, r3, #16
 800405a:	61fb      	str	r3, [r7, #28]
 800405c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405e:	4b46      	ldr	r3, [pc, #280]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	4a45      	ldr	r2, [pc, #276]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004064:	f043 0302 	orr.w	r3, r3, #2
 8004068:	6313      	str	r3, [r2, #48]	; 0x30
 800406a:	4b43      	ldr	r3, [pc, #268]	; (8004178 <HAL_UART_MspInit+0x214>)
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004076:	4b40      	ldr	r3, [pc, #256]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407a:	4a3f      	ldr	r2, [pc, #252]	; (8004178 <HAL_UART_MspInit+0x214>)
 800407c:	f043 0301 	orr.w	r3, r3, #1
 8004080:	6313      	str	r3, [r2, #48]	; 0x30
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800408e:	2380      	movs	r3, #128	; 0x80
 8004090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004094:	2302      	movs	r3, #2
 8004096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409a:	2300      	movs	r3, #0
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040a6:	2307      	movs	r3, #7
 80040a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80040ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80040b0:	4619      	mov	r1, r3
 80040b2:	4834      	ldr	r0, [pc, #208]	; (8004184 <HAL_UART_MspInit+0x220>)
 80040b4:	f001 fe1a 	bl	8005cec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80040b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c0:	2302      	movs	r3, #2
 80040c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040d2:	2307      	movs	r3, #7
 80040d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80040d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80040dc:	4619      	mov	r1, r3
 80040de:	482a      	ldr	r0, [pc, #168]	; (8004188 <HAL_UART_MspInit+0x224>)
 80040e0:	f001 fe04 	bl	8005cec <HAL_GPIO_Init>
}
 80040e4:	e041      	b.n	800416a <HAL_UART_MspInit+0x206>
  else if(huart->Instance==USART6)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a28      	ldr	r2, [pc, #160]	; (800418c <HAL_UART_MspInit+0x228>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d13c      	bne.n	800416a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80040f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004100:	4618      	mov	r0, r3
 8004102:	f003 ffc3 	bl	800808c <HAL_RCCEx_PeriphCLKConfig>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 800410c:	f7fe f926 	bl	800235c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004110:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004116:	f043 0320 	orr.w	r3, r3, #32
 800411a:	6453      	str	r3, [r2, #68]	; 0x44
 800411c:	4b16      	ldr	r3, [pc, #88]	; (8004178 <HAL_UART_MspInit+0x214>)
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004128:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_UART_MspInit+0x214>)
 800412a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412c:	4a12      	ldr	r2, [pc, #72]	; (8004178 <HAL_UART_MspInit+0x214>)
 800412e:	f043 0304 	orr.w	r3, r3, #4
 8004132:	6313      	str	r3, [r2, #48]	; 0x30
 8004134:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_UART_MspInit+0x214>)
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004140:	23c0      	movs	r3, #192	; 0xc0
 8004142:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004146:	2302      	movs	r3, #2
 8004148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004152:	2303      	movs	r3, #3
 8004154:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004158:	2308      	movs	r3, #8
 800415a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800415e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004162:	4619      	mov	r1, r3
 8004164:	480a      	ldr	r0, [pc, #40]	; (8004190 <HAL_UART_MspInit+0x22c>)
 8004166:	f001 fdc1 	bl	8005cec <HAL_GPIO_Init>
}
 800416a:	bf00      	nop
 800416c:	37c0      	adds	r7, #192	; 0xc0
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40007800 	.word	0x40007800
 8004178:	40023800 	.word	0x40023800
 800417c:	40021400 	.word	0x40021400
 8004180:	40011000 	.word	0x40011000
 8004184:	40020400 	.word	0x40020400
 8004188:	40020000 	.word	0x40020000
 800418c:	40011400 	.word	0x40011400
 8004190:	40020800 	.word	0x40020800

08004194 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800419a:	1d3b      	adds	r3, r7, #4
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80041a8:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <HAL_FMC_MspInit+0x100>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d16d      	bne.n	800428c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80041b0:	4b38      	ldr	r3, [pc, #224]	; (8004294 <HAL_FMC_MspInit+0x100>)
 80041b2:	2201      	movs	r2, #1
 80041b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80041b6:	4b38      	ldr	r3, [pc, #224]	; (8004298 <HAL_FMC_MspInit+0x104>)
 80041b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ba:	4a37      	ldr	r2, [pc, #220]	; (8004298 <HAL_FMC_MspInit+0x104>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	6393      	str	r3, [r2, #56]	; 0x38
 80041c2:	4b35      	ldr	r3, [pc, #212]	; (8004298 <HAL_FMC_MspInit+0x104>)
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	603b      	str	r3, [r7, #0]
 80041cc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 80041ce:	f64f 7383 	movw	r3, #65411	; 0xff83
 80041d2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	2302      	movs	r3, #2
 80041d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041dc:	2303      	movs	r3, #3
 80041de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80041e0:	230c      	movs	r3, #12
 80041e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80041e4:	1d3b      	adds	r3, r7, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	482c      	ldr	r0, [pc, #176]	; (800429c <HAL_FMC_MspInit+0x108>)
 80041ea:	f001 fd7f 	bl	8005cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 80041ee:	f248 1333 	movw	r3, #33075	; 0x8133
 80041f2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f4:	2302      	movs	r3, #2
 80041f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fc:	2303      	movs	r3, #3
 80041fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004200:	230c      	movs	r3, #12
 8004202:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4825      	ldr	r0, [pc, #148]	; (80042a0 <HAL_FMC_MspInit+0x10c>)
 800420a:	f001 fd6f 	bl	8005cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 800420e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004212:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004214:	2302      	movs	r3, #2
 8004216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800421c:	2303      	movs	r3, #3
 800421e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004220:	230c      	movs	r3, #12
 8004222:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	4619      	mov	r1, r3
 8004228:	481e      	ldr	r0, [pc, #120]	; (80042a4 <HAL_FMC_MspInit+0x110>)
 800422a:	f001 fd5f 	bl	8005cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 800422e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004232:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004234:	2302      	movs	r3, #2
 8004236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004238:	2300      	movs	r3, #0
 800423a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800423c:	2303      	movs	r3, #3
 800423e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004240:	230c      	movs	r3, #12
 8004242:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004244:	1d3b      	adds	r3, r7, #4
 8004246:	4619      	mov	r1, r3
 8004248:	4817      	ldr	r0, [pc, #92]	; (80042a8 <HAL_FMC_MspInit+0x114>)
 800424a:	f001 fd4f 	bl	8005cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 800424e:	2328      	movs	r3, #40	; 0x28
 8004250:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004252:	2302      	movs	r3, #2
 8004254:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800425a:	2303      	movs	r3, #3
 800425c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800425e:	230c      	movs	r3, #12
 8004260:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004262:	1d3b      	adds	r3, r7, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4811      	ldr	r0, [pc, #68]	; (80042ac <HAL_FMC_MspInit+0x118>)
 8004268:	f001 fd40 	bl	8005cec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800426c:	2308      	movs	r3, #8
 800426e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004270:	2302      	movs	r3, #2
 8004272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004278:	2303      	movs	r3, #3
 800427a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800427c:	230c      	movs	r3, #12
 800427e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004280:	1d3b      	adds	r3, r7, #4
 8004282:	4619      	mov	r1, r3
 8004284:	480a      	ldr	r0, [pc, #40]	; (80042b0 <HAL_FMC_MspInit+0x11c>)
 8004286:	f001 fd31 	bl	8005cec <HAL_GPIO_Init>
 800428a:	e000      	b.n	800428e <HAL_FMC_MspInit+0xfa>
    return;
 800428c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000c58 	.word	0x20000c58
 8004298:	40023800 	.word	0x40023800
 800429c:	40021000 	.word	0x40021000
 80042a0:	40021800 	.word	0x40021800
 80042a4:	40020c00 	.word	0x40020c00
 80042a8:	40021400 	.word	0x40021400
 80042ac:	40021c00 	.word	0x40021c00
 80042b0:	40020800 	.word	0x40020800

080042b4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80042bc:	f7ff ff6a 	bl	8004194 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80042c0:	bf00      	nop
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80042d8:	2200      	movs	r2, #0
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	2036      	movs	r0, #54	; 0x36
 80042de:	f000 fe0f 	bl	8004f00 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042e2:	2036      	movs	r0, #54	; 0x36
 80042e4:	f000 fe28 	bl	8004f38 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042e8:	4b1f      	ldr	r3, [pc, #124]	; (8004368 <HAL_InitTick+0xa0>)
 80042ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ec:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <HAL_InitTick+0xa0>)
 80042ee:	f043 0310 	orr.w	r3, r3, #16
 80042f2:	6413      	str	r3, [r2, #64]	; 0x40
 80042f4:	4b1c      	ldr	r3, [pc, #112]	; (8004368 <HAL_InitTick+0xa0>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f003 0310 	and.w	r3, r3, #16
 80042fc:	60fb      	str	r3, [r7, #12]
 80042fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004300:	f107 0210 	add.w	r2, r7, #16
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f003 fe8c 	bl	8008028 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004310:	f003 fe62 	bl	8007fd8 <HAL_RCC_GetPCLK1Freq>
 8004314:	4603      	mov	r3, r0
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	4a13      	ldr	r2, [pc, #76]	; (800436c <HAL_InitTick+0xa4>)
 800431e:	fba2 2303 	umull	r2, r3, r2, r3
 8004322:	0c9b      	lsrs	r3, r3, #18
 8004324:	3b01      	subs	r3, #1
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004328:	4b11      	ldr	r3, [pc, #68]	; (8004370 <HAL_InitTick+0xa8>)
 800432a:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_InitTick+0xac>)
 800432c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800432e:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_InitTick+0xa8>)
 8004330:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004334:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004336:	4a0e      	ldr	r2, [pc, #56]	; (8004370 <HAL_InitTick+0xa8>)
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <HAL_InitTick+0xa8>)
 800433e:	2200      	movs	r2, #0
 8004340:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004342:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_InitTick+0xa8>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004348:	4809      	ldr	r0, [pc, #36]	; (8004370 <HAL_InitTick+0xa8>)
 800434a:	f004 ffa3 	bl	8009294 <HAL_TIM_Base_Init>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004354:	4806      	ldr	r0, [pc, #24]	; (8004370 <HAL_InitTick+0xa8>)
 8004356:	f004 fff5 	bl	8009344 <HAL_TIM_Base_Start_IT>
 800435a:	4603      	mov	r3, r0
 800435c:	e000      	b.n	8004360 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	3730      	adds	r7, #48	; 0x30
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	431bde83 	.word	0x431bde83
 8004370:	20000c5c 	.word	0x20000c5c
 8004374:	40001000 	.word	0x40001000

08004378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800437c:	e7fe      	b.n	800437c <NMI_Handler+0x4>

0800437e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800437e:	b480      	push	{r7}
 8004380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004382:	e7fe      	b.n	8004382 <HardFault_Handler+0x4>

08004384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004388:	e7fe      	b.n	8004388 <MemManage_Handler+0x4>

0800438a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800438a:	b480      	push	{r7}
 800438c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800438e:	e7fe      	b.n	800438e <BusFault_Handler+0x4>

08004390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004394:	e7fe      	b.n	8004394 <UsageFault_Handler+0x4>

08004396 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800439a:	bf00      	nop
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr

080043a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80043a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80043ac:	f001 ff88 	bl	80062c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80043b0:	bf00      	nop
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <TIM6_DAC_IRQHandler+0x20>)
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d002      	beq.n	80043c8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80043c2:	4804      	ldr	r0, [pc, #16]	; (80043d4 <TIM6_DAC_IRQHandler+0x20>)
 80043c4:	f000 fde8 	bl	8004f98 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80043c8:	4803      	ldr	r0, [pc, #12]	; (80043d8 <TIM6_DAC_IRQHandler+0x24>)
 80043ca:	f005 f833 	bl	8009434 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	20000418 	.word	0x20000418
 80043d8:	20000c5c 	.word	0x20000c5c

080043dc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80043e0:	4802      	ldr	r0, [pc, #8]	; (80043ec <UART7_IRQHandler+0x10>)
 80043e2:	f005 fd29 	bl	8009e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	200007ac 	.word	0x200007ac

080043f0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043f4:	4802      	ldr	r0, [pc, #8]	; (8004400 <LTDC_IRQHandler+0x10>)
 80043f6:	f002 fe85 	bl	8007104 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000504 	.word	0x20000504

08004404 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8004408:	4802      	ldr	r0, [pc, #8]	; (8004414 <DMA2D_IRQHandler+0x10>)
 800440a:	f001 fa31 	bl	8005870 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	2000042c 	.word	0x2000042c

08004418 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004420:	4a14      	ldr	r2, [pc, #80]	; (8004474 <_sbrk+0x5c>)
 8004422:	4b15      	ldr	r3, [pc, #84]	; (8004478 <_sbrk+0x60>)
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800442c:	4b13      	ldr	r3, [pc, #76]	; (800447c <_sbrk+0x64>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <_sbrk+0x64>)
 8004436:	4a12      	ldr	r2, [pc, #72]	; (8004480 <_sbrk+0x68>)
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800443a:	4b10      	ldr	r3, [pc, #64]	; (800447c <_sbrk+0x64>)
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	429a      	cmp	r2, r3
 8004446:	d207      	bcs.n	8004458 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004448:	f009 fcd4 	bl	800ddf4 <__errno>
 800444c:	4603      	mov	r3, r0
 800444e:	220c      	movs	r2, #12
 8004450:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	e009      	b.n	800446c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004458:	4b08      	ldr	r3, [pc, #32]	; (800447c <_sbrk+0x64>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800445e:	4b07      	ldr	r3, [pc, #28]	; (800447c <_sbrk+0x64>)
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	4a05      	ldr	r2, [pc, #20]	; (800447c <_sbrk+0x64>)
 8004468:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20050000 	.word	0x20050000
 8004478:	00000400 	.word	0x00000400
 800447c:	20000ca8 	.word	0x20000ca8
 8004480:	20004a10 	.word	0x20004a10

08004484 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004488:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <SystemInit+0x20>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800448e:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <SystemInit+0x20>)
 8004490:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004494:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044ac:	480d      	ldr	r0, [pc, #52]	; (80044e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044ae:	490e      	ldr	r1, [pc, #56]	; (80044e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044b0:	4a0e      	ldr	r2, [pc, #56]	; (80044ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b4:	e002      	b.n	80044bc <LoopCopyDataInit>

080044b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ba:	3304      	adds	r3, #4

080044bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c0:	d3f9      	bcc.n	80044b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c2:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044c4:	4c0b      	ldr	r4, [pc, #44]	; (80044f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80044c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c8:	e001      	b.n	80044ce <LoopFillZerobss>

080044ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044cc:	3204      	adds	r2, #4

080044ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d0:	d3fb      	bcc.n	80044ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044d2:	f7ff ffd7 	bl	8004484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044d6:	f009 fc93 	bl	800de00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044da:	f7fc fa61 	bl	80009a0 <main>
  bx  lr    
 80044de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044e0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80044e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80044ec:	0801350c 	.word	0x0801350c
  ldr r2, =_sbss
 80044f0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80044f4:	20004a0c 	.word	0x20004a0c

080044f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f8:	e7fe      	b.n	80044f8 <ADC_IRQHandler>

080044fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044fe:	2003      	movs	r0, #3
 8004500:	f000 fcf3 	bl	8004eea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004504:	200f      	movs	r0, #15
 8004506:	f7ff fedf 	bl	80042c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800450a:	f7ff f91f 	bl	800374c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_IncTick+0x20>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	461a      	mov	r2, r3
 800451e:	4b06      	ldr	r3, [pc, #24]	; (8004538 <HAL_IncTick+0x24>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4413      	add	r3, r2
 8004524:	4a04      	ldr	r2, [pc, #16]	; (8004538 <HAL_IncTick+0x24>)
 8004526:	6013      	str	r3, [r2, #0]
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	20000044 	.word	0x20000044
 8004538:	20000cac 	.word	0x20000cac

0800453c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return uwTick;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HAL_GetTick+0x14>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	20000cac 	.word	0x20000cac

08004554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800455c:	f7ff ffee 	bl	800453c <HAL_GetTick>
 8004560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456c:	d005      	beq.n	800457a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <HAL_Delay+0x44>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	4413      	add	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800457a:	bf00      	nop
 800457c:	f7ff ffde 	bl	800453c <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d8f7      	bhi.n	800457c <HAL_Delay+0x28>
  {
  }
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000044 	.word	0x20000044

0800459c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e031      	b.n	8004616 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff f8ee 	bl	800379c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d116      	bne.n	8004608 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <HAL_ADC_Init+0x84>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	f043 0202 	orr.w	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fad6 	bl	8004b9c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f023 0303 	bic.w	r3, r3, #3
 80045fe:	f043 0201 	orr.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
 8004606:	e001      	b.n	800460c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004614:	7bfb      	ldrb	r3, [r7, #15]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3710      	adds	r7, #16
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	ffffeefd 	.word	0xffffeefd

08004624 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004636:	2b01      	cmp	r3, #1
 8004638:	d101      	bne.n	800463e <HAL_ADC_Start+0x1a>
 800463a:	2302      	movs	r3, #2
 800463c:	e0ad      	b.n	800479a <HAL_ADC_Start+0x176>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b01      	cmp	r3, #1
 8004652:	d018      	beq.n	8004686 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689a      	ldr	r2, [r3, #8]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004664:	4b50      	ldr	r3, [pc, #320]	; (80047a8 <HAL_ADC_Start+0x184>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a50      	ldr	r2, [pc, #320]	; (80047ac <HAL_ADC_Start+0x188>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	0c9a      	lsrs	r2, r3, #18
 8004670:	4613      	mov	r3, r2
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	4413      	add	r3, r2
 8004676:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004678:	e002      	b.n	8004680 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3b01      	subs	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d1f9      	bne.n	800467a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b01      	cmp	r3, #1
 8004692:	d175      	bne.n	8004780 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004698:	4b45      	ldr	r3, [pc, #276]	; (80047b0 <HAL_ADC_Start+0x18c>)
 800469a:	4013      	ands	r3, r2
 800469c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d007      	beq.n	80046c2 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80046ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d106      	bne.n	80046de <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d4:	f023 0206 	bic.w	r2, r3, #6
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	645a      	str	r2, [r3, #68]	; 0x44
 80046dc:	e002      	b.n	80046e4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80046f4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80046f6:	4b2f      	ldr	r3, [pc, #188]	; (80047b4 <HAL_ADC_Start+0x190>)
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f003 031f 	and.w	r3, r3, #31
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10f      	bne.n	8004722 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d143      	bne.n	8004798 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	e03a      	b.n	8004798 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <HAL_ADC_Start+0x194>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d10e      	bne.n	800474a <HAL_ADC_Start+0x126>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d107      	bne.n	800474a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004748:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800474a:	4b1a      	ldr	r3, [pc, #104]	; (80047b4 <HAL_ADC_Start+0x190>)
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b00      	cmp	r3, #0
 8004754:	d120      	bne.n	8004798 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a18      	ldr	r2, [pc, #96]	; (80047bc <HAL_ADC_Start+0x198>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d11b      	bne.n	8004798 <HAL_ADC_Start+0x174>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d114      	bne.n	8004798 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	e00b      	b.n	8004798 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f043 0210 	orr.w	r2, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004790:	f043 0201 	orr.w	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	2000003c 	.word	0x2000003c
 80047ac:	431bde83 	.word	0x431bde83
 80047b0:	fffff8fe 	.word	0xfffff8fe
 80047b4:	40012300 	.word	0x40012300
 80047b8:	40012000 	.word	0x40012000
 80047bc:	40012200 	.word	0x40012200

080047c0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047dc:	d113      	bne.n	8004806 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ec:	d10b      	bne.n	8004806 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f043 0220 	orr.w	r2, r3, #32
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e063      	b.n	80048ce <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004806:	f7ff fe99 	bl	800453c <HAL_GetTick>
 800480a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800480c:	e021      	b.n	8004852 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d01d      	beq.n	8004852 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_ADC_PollForConversion+0x6c>
 800481c:	f7ff fe8e 	bl	800453c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d212      	bcs.n	8004852 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d00b      	beq.n	8004852 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	f043 0204 	orr.w	r2, r3, #4
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e03d      	b.n	80048ce <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b02      	cmp	r3, #2
 800485e:	d1d6      	bne.n	800480e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0212 	mvn.w	r2, #18
 8004868:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d123      	bne.n	80048cc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004888:	2b00      	cmp	r3, #0
 800488a:	d11f      	bne.n	80048cc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004892:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004896:	2b00      	cmp	r3, #0
 8004898:	d006      	beq.n	80048a8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d111      	bne.n	80048cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004904:	2b01      	cmp	r3, #1
 8004906:	d101      	bne.n	800490c <HAL_ADC_ConfigChannel+0x1c>
 8004908:	2302      	movs	r3, #2
 800490a:	e136      	b.n	8004b7a <HAL_ADC_ConfigChannel+0x28a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b09      	cmp	r3, #9
 800491a:	d93a      	bls.n	8004992 <HAL_ADC_ConfigChannel+0xa2>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004924:	d035      	beq.n	8004992 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68d9      	ldr	r1, [r3, #12]
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	b29b      	uxth	r3, r3
 8004932:	461a      	mov	r2, r3
 8004934:	4613      	mov	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4413      	add	r3, r2
 800493a:	3b1e      	subs	r3, #30
 800493c:	2207      	movs	r2, #7
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	43da      	mvns	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	400a      	ands	r2, r1
 800494a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a8d      	ldr	r2, [pc, #564]	; (8004b88 <HAL_ADC_ConfigChannel+0x298>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d10a      	bne.n	800496c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68d9      	ldr	r1, [r3, #12]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	061a      	lsls	r2, r3, #24
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800496a:	e035      	b.n	80049d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68d9      	ldr	r1, [r3, #12]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	b29b      	uxth	r3, r3
 800497c:	4618      	mov	r0, r3
 800497e:	4603      	mov	r3, r0
 8004980:	005b      	lsls	r3, r3, #1
 8004982:	4403      	add	r3, r0
 8004984:	3b1e      	subs	r3, #30
 8004986:	409a      	lsls	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004990:	e022      	b.n	80049d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6919      	ldr	r1, [r3, #16]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	4613      	mov	r3, r2
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	4413      	add	r3, r2
 80049a6:	2207      	movs	r2, #7
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	43da      	mvns	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	400a      	ands	r2, r1
 80049b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6919      	ldr	r1, [r3, #16]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689a      	ldr	r2, [r3, #8]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	4618      	mov	r0, r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4403      	add	r3, r0
 80049ce:	409a      	lsls	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d824      	bhi.n	8004a2a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	3b05      	subs	r3, #5
 80049f2:	221f      	movs	r2, #31
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43da      	mvns	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	400a      	ands	r2, r1
 8004a00:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	4618      	mov	r0, r3
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685a      	ldr	r2, [r3, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	3b05      	subs	r3, #5
 8004a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	635a      	str	r2, [r3, #52]	; 0x34
 8004a28:	e04c      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b0c      	cmp	r3, #12
 8004a30:	d824      	bhi.n	8004a7c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	3b23      	subs	r3, #35	; 0x23
 8004a44:	221f      	movs	r2, #31
 8004a46:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	400a      	ands	r2, r1
 8004a52:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	4618      	mov	r0, r3
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685a      	ldr	r2, [r3, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	3b23      	subs	r3, #35	; 0x23
 8004a6e:	fa00 f203 	lsl.w	r2, r0, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	631a      	str	r2, [r3, #48]	; 0x30
 8004a7a:	e023      	b.n	8004ac4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3b41      	subs	r3, #65	; 0x41
 8004a8e:	221f      	movs	r2, #31
 8004a90:	fa02 f303 	lsl.w	r3, r2, r3
 8004a94:	43da      	mvns	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	400a      	ands	r2, r1
 8004a9c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	4618      	mov	r0, r3
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3b41      	subs	r3, #65	; 0x41
 8004ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_ADC_ConfigChannel+0x29c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d10a      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1f4>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ad6:	d105      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004ad8:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	4a2c      	ldr	r2, [pc, #176]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ade:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004ae2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <HAL_ADC_ConfigChannel+0x29c>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d10f      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x21e>
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b12      	cmp	r3, #18
 8004af4:	d10b      	bne.n	8004b0e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004af6:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	4a25      	ldr	r2, [pc, #148]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004afc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b00:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004b02:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4a22      	ldr	r2, [pc, #136]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a1e      	ldr	r2, [pc, #120]	; (8004b8c <HAL_ADC_ConfigChannel+0x29c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d12b      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x280>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a1a      	ldr	r2, [pc, #104]	; (8004b88 <HAL_ADC_ConfigChannel+0x298>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d003      	beq.n	8004b2a <HAL_ADC_ConfigChannel+0x23a>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2b11      	cmp	r3, #17
 8004b28:	d122      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004b2a:	4b19      	ldr	r3, [pc, #100]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b30:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004b34:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004b36:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	4a15      	ldr	r2, [pc, #84]	; (8004b90 <HAL_ADC_ConfigChannel+0x2a0>)
 8004b3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b40:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <HAL_ADC_ConfigChannel+0x298>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d111      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <HAL_ADC_ConfigChannel+0x2a4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a11      	ldr	r2, [pc, #68]	; (8004b98 <HAL_ADC_ConfigChannel+0x2a8>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	0c9a      	lsrs	r2, r3, #18
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b62:	e002      	b.n	8004b6a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	3b01      	subs	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f9      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	10000012 	.word	0x10000012
 8004b8c:	40012000 	.word	0x40012000
 8004b90:	40012300 	.word	0x40012300
 8004b94:	2000003c 	.word	0x2000003c
 8004b98:	431bde83 	.word	0x431bde83

08004b9c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004ba4:	4b78      	ldr	r3, [pc, #480]	; (8004d88 <ADC_Init+0x1ec>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	4a77      	ldr	r2, [pc, #476]	; (8004d88 <ADC_Init+0x1ec>)
 8004baa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004bae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004bb0:	4b75      	ldr	r3, [pc, #468]	; (8004d88 <ADC_Init+0x1ec>)
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4973      	ldr	r1, [pc, #460]	; (8004d88 <ADC_Init+0x1ec>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6859      	ldr	r1, [r3, #4]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	021a      	lsls	r2, r3, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004bf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6859      	ldr	r1, [r3, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689a      	ldr	r2, [r3, #8]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6899      	ldr	r1, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2a:	4a58      	ldr	r2, [pc, #352]	; (8004d8c <ADC_Init+0x1f0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d022      	beq.n	8004c76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6899      	ldr	r1, [r3, #8]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689a      	ldr	r2, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	6899      	ldr	r1, [r3, #8]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	e00f      	b.n	8004c96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0202 	bic.w	r2, r2, #2
 8004ca4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6899      	ldr	r1, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	005a      	lsls	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01b      	beq.n	8004cfc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685a      	ldr	r2, [r3, #4]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cd2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004ce2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	035a      	lsls	r2, r3, #13
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
 8004cfa:	e007      	b.n	8004d0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	3b01      	subs	r3, #1
 8004d28:	051a      	lsls	r2, r3, #20
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6899      	ldr	r1, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d4e:	025a      	lsls	r2, r3, #9
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6899      	ldr	r1, [r3, #8]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	029a      	lsls	r2, r3, #10
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	609a      	str	r2, [r3, #8]
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	40012300 	.word	0x40012300
 8004d8c:	0f000001 	.word	0x0f000001

08004d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004da0:	4b0b      	ldr	r3, [pc, #44]	; (8004dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dac:	4013      	ands	r3, r2
 8004dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004db8:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dbe:	4a04      	ldr	r2, [pc, #16]	; (8004dd0 <__NVIC_SetPriorityGrouping+0x40>)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	60d3      	str	r3, [r2, #12]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	e000ed00 	.word	0xe000ed00
 8004dd4:	05fa0000 	.word	0x05fa0000

08004dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ddc:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <__NVIC_GetPriorityGrouping+0x18>)
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	0a1b      	lsrs	r3, r3, #8
 8004de2:	f003 0307 	and.w	r3, r3, #7
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	e000ed00 	.word	0xe000ed00

08004df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	db0b      	blt.n	8004e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e06:	79fb      	ldrb	r3, [r7, #7]
 8004e08:	f003 021f 	and.w	r2, r3, #31
 8004e0c:	4907      	ldr	r1, [pc, #28]	; (8004e2c <__NVIC_EnableIRQ+0x38>)
 8004e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	2001      	movs	r0, #1
 8004e16:	fa00 f202 	lsl.w	r2, r0, r2
 8004e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	e000e100 	.word	0xe000e100

08004e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	6039      	str	r1, [r7, #0]
 8004e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	db0a      	blt.n	8004e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	490c      	ldr	r1, [pc, #48]	; (8004e7c <__NVIC_SetPriority+0x4c>)
 8004e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e4e:	0112      	lsls	r2, r2, #4
 8004e50:	b2d2      	uxtb	r2, r2
 8004e52:	440b      	add	r3, r1
 8004e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e58:	e00a      	b.n	8004e70 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	4908      	ldr	r1, [pc, #32]	; (8004e80 <__NVIC_SetPriority+0x50>)
 8004e60:	79fb      	ldrb	r3, [r7, #7]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	3b04      	subs	r3, #4
 8004e68:	0112      	lsls	r2, r2, #4
 8004e6a:	b2d2      	uxtb	r2, r2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	761a      	strb	r2, [r3, #24]
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	e000e100 	.word	0xe000e100
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b089      	sub	sp, #36	; 0x24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f1c3 0307 	rsb	r3, r3, #7
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	bf28      	it	cs
 8004ea2:	2304      	movcs	r3, #4
 8004ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	3304      	adds	r3, #4
 8004eaa:	2b06      	cmp	r3, #6
 8004eac:	d902      	bls.n	8004eb4 <NVIC_EncodePriority+0x30>
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	3b03      	subs	r3, #3
 8004eb2:	e000      	b.n	8004eb6 <NVIC_EncodePriority+0x32>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	43d9      	mvns	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004edc:	4313      	orrs	r3, r2
         );
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3724      	adds	r7, #36	; 0x24
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff ff4c 	bl	8004d90 <__NVIC_SetPriorityGrouping>
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	4603      	mov	r3, r0
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f12:	f7ff ff61 	bl	8004dd8 <__NVIC_GetPriorityGrouping>
 8004f16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	6978      	ldr	r0, [r7, #20]
 8004f1e:	f7ff ffb1 	bl	8004e84 <NVIC_EncodePriority>
 8004f22:	4602      	mov	r2, r0
 8004f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f28:	4611      	mov	r1, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff ff80 	bl	8004e30 <__NVIC_SetPriority>
}
 8004f30:	bf00      	nop
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff ff54 	bl	8004df4 <__NVIC_EnableIRQ>
}
 8004f4c:	bf00      	nop
 8004f4e:	3708      	adds	r7, #8
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e014      	b.n	8004f90 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	791b      	ldrb	r3, [r3, #4]
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d105      	bne.n	8004f7c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe fc7e 	bl	8003878 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004faa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fae:	d120      	bne.n	8004ff2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fbe:	d118      	bne.n	8004ff2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f043 0201 	orr.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fda:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fea:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f82d 	bl	800504c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ffc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005000:	d120      	bne.n	8005044 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005010:	d118      	bne.n	8005044 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2204      	movs	r2, #4
 8005016:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	f043 0202 	orr.w	r2, r3, #2
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800502c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800503c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f85d 	bl	80050fe <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005060:	b480      	push	{r7}
 8005062:	b087      	sub	sp, #28
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	795b      	ldrb	r3, [r3, #5]
 8005070:	2b01      	cmp	r3, #1
 8005072:	d101      	bne.n	8005078 <HAL_DAC_ConfigChannel+0x18>
 8005074:	2302      	movs	r3, #2
 8005076:	e03c      	b.n	80050f2 <HAL_DAC_ConfigChannel+0x92>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2201      	movs	r2, #1
 800507c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2202      	movs	r2, #2
 8005082:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f003 0310 	and.w	r3, r3, #16
 8005092:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4013      	ands	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6819      	ldr	r1, [r3, #0]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	22c0      	movs	r2, #192	; 0xc0
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	43da      	mvns	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	400a      	ands	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2200      	movs	r2, #0
 80050ee:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	371c      	adds	r7, #28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005106:	bf00      	nop
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005120:	f7ff fa0c 	bl	800453c <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e099      	b.n	8005264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005150:	e00f      	b.n	8005172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005152:	f7ff f9f3 	bl	800453c <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b05      	cmp	r3, #5
 800515e:	d908      	bls.n	8005172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2203      	movs	r2, #3
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e078      	b.n	8005264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e8      	bne.n	8005152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4b38      	ldr	r3, [pc, #224]	; (800526c <HAL_DMA_Init+0x158>)
 800518c:	4013      	ands	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800519e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d107      	bne.n	80051dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	4313      	orrs	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b04      	cmp	r3, #4
 8005204:	d117      	bne.n	8005236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f94f 	bl	80054bc <DMA_CheckFifoParam>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005232:	2301      	movs	r3, #1
 8005234:	e016      	b.n	8005264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f906 	bl	8005450 <DMA_CalcBaseAndBitshift>
 8005244:	4603      	mov	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	223f      	movs	r2, #63	; 0x3f
 800524e:	409a      	lsls	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	f010803f 	.word	0xf010803f

08005270 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e050      	b.n	8005324 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d101      	bne.n	8005292 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800528e:	2302      	movs	r3, #2
 8005290:	e048      	b.n	8005324 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2200      	movs	r2, #0
 80052c8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2221      	movs	r2, #33	; 0x21
 80052d0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f8bc 	bl	8005450 <DMA_CalcBaseAndBitshift>
 80052d8:	4603      	mov	r3, r0
 80052da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e0:	223f      	movs	r2, #63	; 0x3f
 80052e2:	409a      	lsls	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2200      	movs	r2, #0
 80052f8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005338:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800533a:	f7ff f8ff 	bl	800453c <HAL_GetTick>
 800533e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d008      	beq.n	800535e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2280      	movs	r2, #128	; 0x80
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e052      	b.n	8005404 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0216 	bic.w	r2, r2, #22
 800536c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	695a      	ldr	r2, [r3, #20]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800537c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b00      	cmp	r3, #0
 8005384:	d103      	bne.n	800538e <HAL_DMA_Abort+0x62>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800538a:	2b00      	cmp	r3, #0
 800538c:	d007      	beq.n	800539e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0208 	bic.w	r2, r2, #8
 800539c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053ae:	e013      	b.n	80053d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053b0:	f7ff f8c4 	bl	800453c <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d90c      	bls.n	80053d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2220      	movs	r2, #32
 80053c2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2203      	movs	r2, #3
 80053c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e015      	b.n	8005404 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d1e4      	bne.n	80053b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ea:	223f      	movs	r2, #63	; 0x3f
 80053ec:	409a      	lsls	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b02      	cmp	r3, #2
 800541e:	d004      	beq.n	800542a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2280      	movs	r2, #128	; 0x80
 8005424:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e00c      	b.n	8005444 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2205      	movs	r2, #5
 800542e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 0201 	bic.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	3b10      	subs	r3, #16
 8005460:	4a13      	ldr	r2, [pc, #76]	; (80054b0 <DMA_CalcBaseAndBitshift+0x60>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800546a:	4a12      	ldr	r2, [pc, #72]	; (80054b4 <DMA_CalcBaseAndBitshift+0x64>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	4413      	add	r3, r2
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b03      	cmp	r3, #3
 800547c:	d908      	bls.n	8005490 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <DMA_CalcBaseAndBitshift+0x68>)
 8005486:	4013      	ands	r3, r2
 8005488:	1d1a      	adds	r2, r3, #4
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	659a      	str	r2, [r3, #88]	; 0x58
 800548e:	e006      	b.n	800549e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	461a      	mov	r2, r3
 8005496:	4b08      	ldr	r3, [pc, #32]	; (80054b8 <DMA_CalcBaseAndBitshift+0x68>)
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop
 80054b0:	aaaaaaab 	.word	0xaaaaaaab
 80054b4:	08013460 	.word	0x08013460
 80054b8:	fffffc00 	.word	0xfffffc00

080054bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054bc:	b480      	push	{r7}
 80054be:	b085      	sub	sp, #20
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d11f      	bne.n	8005516 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d856      	bhi.n	800558a <DMA_CheckFifoParam+0xce>
 80054dc:	a201      	add	r2, pc, #4	; (adr r2, 80054e4 <DMA_CheckFifoParam+0x28>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	080054f5 	.word	0x080054f5
 80054e8:	08005507 	.word	0x08005507
 80054ec:	080054f5 	.word	0x080054f5
 80054f0:	0800558b 	.word	0x0800558b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d046      	beq.n	800558e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005504:	e043      	b.n	800558e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800550e:	d140      	bne.n	8005592 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005510:	2301      	movs	r3, #1
 8005512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005514:	e03d      	b.n	8005592 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800551e:	d121      	bne.n	8005564 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b03      	cmp	r3, #3
 8005524:	d837      	bhi.n	8005596 <DMA_CheckFifoParam+0xda>
 8005526:	a201      	add	r2, pc, #4	; (adr r2, 800552c <DMA_CheckFifoParam+0x70>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	0800553d 	.word	0x0800553d
 8005530:	08005543 	.word	0x08005543
 8005534:	0800553d 	.word	0x0800553d
 8005538:	08005555 	.word	0x08005555
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
      break;
 8005540:	e030      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005546:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d025      	beq.n	800559a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005552:	e022      	b.n	800559a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005558:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800555c:	d11f      	bne.n	800559e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005562:	e01c      	b.n	800559e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d903      	bls.n	8005572 <DMA_CheckFifoParam+0xb6>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d003      	beq.n	8005578 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005570:	e018      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	73fb      	strb	r3, [r7, #15]
      break;
 8005576:	e015      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00e      	beq.n	80055a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      break;
 8005588:	e00b      	b.n	80055a2 <DMA_CheckFifoParam+0xe6>
      break;
 800558a:	bf00      	nop
 800558c:	e00a      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      break;
 800558e:	bf00      	nop
 8005590:	e008      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005592:	bf00      	nop
 8005594:	e006      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      break;
 8005596:	bf00      	nop
 8005598:	e004      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      break;
 800559a:	bf00      	nop
 800559c:	e002      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800559e:	bf00      	nop
 80055a0:	e000      	b.n	80055a4 <DMA_CheckFifoParam+0xe8>
      break;
 80055a2:	bf00      	nop
    }
  } 
  
  return status; 
 80055a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop

080055b4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e039      	b.n	800563a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d106      	bne.n	80055e0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7fe f994 	bl	8003908 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005604:	f023 0107 	bic.w	r1, r3, #7
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <HAL_DMA2D_Init+0x90>)
 800561c:	4013      	ands	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68d1      	ldr	r1, [r2, #12]
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6812      	ldr	r2, [r2, #0]
 8005626:	430b      	orrs	r3, r1
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3708      	adds	r7, #8
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	ffffc000 	.word	0xffffc000

08005648 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800565c:	2b01      	cmp	r3, #1
 800565e:	d101      	bne.n	8005664 <HAL_DMA2D_Start+0x1c>
 8005660:	2302      	movs	r3, #2
 8005662:	e018      	b.n	8005696 <HAL_DMA2D_Start+0x4e>
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 fa98 	bl	8005bb4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b086      	sub	sp, #24
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80056a8:	2300      	movs	r3, #0
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d056      	beq.n	8005768 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80056ba:	f7fe ff3f 	bl	800453c <HAL_GetTick>
 80056be:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80056c0:	e04b      	b.n	800575a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d023      	beq.n	800571c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e2:	f043 0202 	orr.w	r2, r3, #2
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056f8:	f043 0201 	orr.w	r2, r3, #1
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2221      	movs	r2, #33	; 0x21
 8005706:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2204      	movs	r2, #4
 800570c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e0a5      	b.n	8005868 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005722:	d01a      	beq.n	800575a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005724:	f7fe ff0a 	bl	800453c <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	429a      	cmp	r2, r3
 8005732:	d302      	bcc.n	800573a <HAL_DMA2D_PollForTransfer+0x9c>
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2203      	movs	r2, #3
 800574a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e086      	b.n	8005868 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d0ac      	beq.n	80056c2 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0320 	and.w	r3, r3, #32
 8005772:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	4313      	orrs	r3, r2
 8005782:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d061      	beq.n	800584e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800578a:	f7fe fed7 	bl	800453c <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005790:	e056      	b.n	8005840 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d02e      	beq.n	8005802 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	f043 0204 	orr.w	r2, r3, #4
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c8:	f043 0202 	orr.w	r2, r3, #2
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2229      	movs	r2, #41	; 0x29
 80057ec:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2204      	movs	r2, #4
 80057f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e032      	b.n	8005868 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005808:	d01a      	beq.n	8005840 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800580a:	f7fe fe97 	bl	800453c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <HAL_DMA2D_PollForTransfer+0x182>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10f      	bne.n	8005840 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2203      	movs	r2, #3
 8005830:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e013      	b.n	8005868 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0a1      	beq.n	8005792 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2212      	movs	r2, #18
 8005854:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d026      	beq.n	80058e0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005898:	2b00      	cmp	r3, #0
 800589a:	d021      	beq.n	80058e0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058aa:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b0:	f043 0201 	orr.w	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2201      	movs	r2, #1
 80058be:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2204      	movs	r2, #4
 80058c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d026      	beq.n	8005938 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d021      	beq.n	8005938 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005902:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2220      	movs	r2, #32
 800590a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005910:	f043 0202 	orr.w	r2, r3, #2
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2204      	movs	r2, #4
 800591c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f003 0308 	and.w	r3, r3, #8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d026      	beq.n	8005990 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005948:	2b00      	cmp	r3, #0
 800594a:	d021      	beq.n	8005990 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800595a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	f043 0204 	orr.w	r2, r3, #4
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f003 0304 	and.w	r3, r3, #4
 8005996:	2b00      	cmp	r3, #0
 8005998:	d013      	beq.n	80059c2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00e      	beq.n	80059c2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681a      	ldr	r2, [r3, #0]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059b2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2204      	movs	r2, #4
 80059ba:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f853 	bl	8005a68 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d024      	beq.n	8005a16 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d01f      	beq.n	8005a16 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80059e4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2202      	movs	r2, #2
 80059ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d01f      	beq.n	8005a60 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d01a      	beq.n	8005a60 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a38:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2210      	movs	r2, #16
 8005a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f80e 	bl	8005a7c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_DMA2D_ConfigLayer+0x20>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e079      	b.n	8005ba4 <HAL_DMA2D_ConfigLayer+0x114>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	011b      	lsls	r3, r3, #4
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	4413      	add	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	685a      	ldr	r2, [r3, #4]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005ada:	4b35      	ldr	r3, [pc, #212]	; (8005bb0 <HAL_DMA2D_ConfigLayer+0x120>)
 8005adc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b0a      	cmp	r3, #10
 8005ae4:	d003      	beq.n	8005aee <HAL_DMA2D_ConfigLayer+0x5e>
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b09      	cmp	r3, #9
 8005aec:	d107      	bne.n	8005afe <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005af6:	697a      	ldr	r2, [r7, #20]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	e005      	b.n	8005b0a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d120      	bne.n	8005b52 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	43db      	mvns	r3, r3
 8005b1a:	ea02 0103 	and.w	r1, r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	430a      	orrs	r2, r1
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b0a      	cmp	r3, #10
 8005b38:	d003      	beq.n	8005b42 <HAL_DMA2D_ConfigLayer+0xb2>
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b09      	cmp	r3, #9
 8005b40:	d127      	bne.n	8005b92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b50:	e01f      	b.n	8005b92 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	43db      	mvns	r3, r3
 8005b5c:	ea02 0103 	and.w	r1, r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	2b0a      	cmp	r3, #10
 8005b7a:	d003      	beq.n	8005b84 <HAL_DMA2D_ConfigLayer+0xf4>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b09      	cmp	r3, #9
 8005b82:	d106      	bne.n	8005b92 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005b90:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	371c      	adds	r7, #28
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	ff03000f 	.word	0xff03000f

08005bb4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b08b      	sub	sp, #44	; 0x2c
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	041a      	lsls	r2, r3, #16
 8005bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bec:	d174      	bne.n	8005cd8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005bf4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005bfc:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c04:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d108      	bne.n	8005c26 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	6a3b      	ldr	r3, [r7, #32]
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	627b      	str	r3, [r7, #36]	; 0x24
 8005c24:	e053      	b.n	8005cce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d106      	bne.n	8005c3c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005c2e:	69ba      	ldr	r2, [r7, #24]
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3a:	e048      	b.n	8005cce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d111      	bne.n	8005c68 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	0cdb      	lsrs	r3, r3, #19
 8005c48:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	0a9b      	lsrs	r3, r3, #10
 8005c4e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	08db      	lsrs	r3, r3, #3
 8005c54:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	02db      	lsls	r3, r3, #11
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
 8005c66:	e032      	b.n	8005cce <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d117      	bne.n	8005ca0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	0fdb      	lsrs	r3, r3, #31
 8005c74:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	0cdb      	lsrs	r3, r3, #19
 8005c7a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	0adb      	lsrs	r3, r3, #11
 8005c80:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	08db      	lsrs	r3, r3, #3
 8005c86:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	029b      	lsls	r3, r3, #10
 8005c90:	431a      	orrs	r2, r3
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	03db      	lsls	r3, r3, #15
 8005c96:	4313      	orrs	r3, r2
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c9e:	e016      	b.n	8005cce <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	0f1b      	lsrs	r3, r3, #28
 8005ca4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	0d1b      	lsrs	r3, r3, #20
 8005caa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	0b1b      	lsrs	r3, r3, #12
 8005cb0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	091b      	lsrs	r3, r3, #4
 8005cb6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	011a      	lsls	r2, r3, #4
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	021b      	lsls	r3, r3, #8
 8005cc0:	431a      	orrs	r2, r3
 8005cc2:	6a3b      	ldr	r3, [r7, #32]
 8005cc4:	031b      	lsls	r3, r3, #12
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005cd6:	e003      	b.n	8005ce0 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	60da      	str	r2, [r3, #12]
}
 8005ce0:	bf00      	nop
 8005ce2:	372c      	adds	r7, #44	; 0x2c
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b089      	sub	sp, #36	; 0x24
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	61fb      	str	r3, [r7, #28]
 8005d0a:	e175      	b.n	8005ff8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	fa02 f303 	lsl.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	f040 8164 	bne.w	8005ff2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d005      	beq.n	8005d42 <HAL_GPIO_Init+0x56>
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d130      	bne.n	8005da4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	005b      	lsls	r3, r3, #1
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d52:	43db      	mvns	r3, r3
 8005d54:	69ba      	ldr	r2, [r7, #24]
 8005d56:	4013      	ands	r3, r2
 8005d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	fa02 f303 	lsl.w	r3, r2, r3
 8005d66:	69ba      	ldr	r2, [r7, #24]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005d78:	2201      	movs	r2, #1
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	43db      	mvns	r3, r3
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	4013      	ands	r3, r2
 8005d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 0201 	and.w	r2, r3, #1
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	fa02 f303 	lsl.w	r3, r2, r3
 8005d98:	69ba      	ldr	r2, [r7, #24]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69ba      	ldr	r2, [r7, #24]
 8005da2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	f003 0303 	and.w	r3, r3, #3
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d017      	beq.n	8005de0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	2203      	movs	r2, #3
 8005dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc0:	43db      	mvns	r3, r3
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f003 0303 	and.w	r3, r3, #3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d123      	bne.n	8005e34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	08da      	lsrs	r2, r3, #3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3208      	adds	r2, #8
 8005df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	f003 0307 	and.w	r3, r3, #7
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	220f      	movs	r2, #15
 8005e04:	fa02 f303 	lsl.w	r3, r2, r3
 8005e08:	43db      	mvns	r3, r3
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e20:	69ba      	ldr	r2, [r7, #24]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	08da      	lsrs	r2, r3, #3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	3208      	adds	r2, #8
 8005e2e:	69b9      	ldr	r1, [r7, #24]
 8005e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	2203      	movs	r2, #3
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	43db      	mvns	r3, r3
 8005e46:	69ba      	ldr	r2, [r7, #24]
 8005e48:	4013      	ands	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	f003 0203 	and.w	r2, r3, #3
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	005b      	lsls	r3, r3, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69ba      	ldr	r2, [r7, #24]
 8005e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f000 80be 	beq.w	8005ff2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e76:	4b66      	ldr	r3, [pc, #408]	; (8006010 <HAL_GPIO_Init+0x324>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	4a65      	ldr	r2, [pc, #404]	; (8006010 <HAL_GPIO_Init+0x324>)
 8005e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e80:	6453      	str	r3, [r2, #68]	; 0x44
 8005e82:	4b63      	ldr	r3, [pc, #396]	; (8006010 <HAL_GPIO_Init+0x324>)
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005e8e:	4a61      	ldr	r2, [pc, #388]	; (8006014 <HAL_GPIO_Init+0x328>)
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	089b      	lsrs	r3, r3, #2
 8005e94:	3302      	adds	r3, #2
 8005e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	220f      	movs	r2, #15
 8005ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a58      	ldr	r2, [pc, #352]	; (8006018 <HAL_GPIO_Init+0x32c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d037      	beq.n	8005f2a <HAL_GPIO_Init+0x23e>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a57      	ldr	r2, [pc, #348]	; (800601c <HAL_GPIO_Init+0x330>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d031      	beq.n	8005f26 <HAL_GPIO_Init+0x23a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a56      	ldr	r2, [pc, #344]	; (8006020 <HAL_GPIO_Init+0x334>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d02b      	beq.n	8005f22 <HAL_GPIO_Init+0x236>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a55      	ldr	r2, [pc, #340]	; (8006024 <HAL_GPIO_Init+0x338>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d025      	beq.n	8005f1e <HAL_GPIO_Init+0x232>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a54      	ldr	r2, [pc, #336]	; (8006028 <HAL_GPIO_Init+0x33c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01f      	beq.n	8005f1a <HAL_GPIO_Init+0x22e>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a53      	ldr	r2, [pc, #332]	; (800602c <HAL_GPIO_Init+0x340>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d019      	beq.n	8005f16 <HAL_GPIO_Init+0x22a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a52      	ldr	r2, [pc, #328]	; (8006030 <HAL_GPIO_Init+0x344>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_GPIO_Init+0x226>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a51      	ldr	r2, [pc, #324]	; (8006034 <HAL_GPIO_Init+0x348>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00d      	beq.n	8005f0e <HAL_GPIO_Init+0x222>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a50      	ldr	r2, [pc, #320]	; (8006038 <HAL_GPIO_Init+0x34c>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d007      	beq.n	8005f0a <HAL_GPIO_Init+0x21e>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a4f      	ldr	r2, [pc, #316]	; (800603c <HAL_GPIO_Init+0x350>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d101      	bne.n	8005f06 <HAL_GPIO_Init+0x21a>
 8005f02:	2309      	movs	r3, #9
 8005f04:	e012      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f06:	230a      	movs	r3, #10
 8005f08:	e010      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	e00e      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f0e:	2307      	movs	r3, #7
 8005f10:	e00c      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f12:	2306      	movs	r3, #6
 8005f14:	e00a      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f16:	2305      	movs	r3, #5
 8005f18:	e008      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f1a:	2304      	movs	r3, #4
 8005f1c:	e006      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e004      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e002      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_GPIO_Init+0x240>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	69fa      	ldr	r2, [r7, #28]
 8005f2e:	f002 0203 	and.w	r2, r2, #3
 8005f32:	0092      	lsls	r2, r2, #2
 8005f34:	4093      	lsls	r3, r2
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005f3c:	4935      	ldr	r1, [pc, #212]	; (8006014 <HAL_GPIO_Init+0x328>)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	089b      	lsrs	r3, r3, #2
 8005f42:	3302      	adds	r3, #2
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f4a:	4b3d      	ldr	r3, [pc, #244]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	43db      	mvns	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f6e:	4a34      	ldr	r2, [pc, #208]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f74:	4b32      	ldr	r3, [pc, #200]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	43db      	mvns	r3, r3
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	4013      	ands	r3, r2
 8005f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005f90:	69ba      	ldr	r2, [r7, #24]
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f98:	4a29      	ldr	r2, [pc, #164]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005f9e:	4b28      	ldr	r3, [pc, #160]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	43db      	mvns	r3, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4013      	ands	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <HAL_GPIO_Init+0x354>)
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	2b0f      	cmp	r3, #15
 8005ffc:	f67f ae86 	bls.w	8005d0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006000:	bf00      	nop
 8006002:	bf00      	nop
 8006004:	3724      	adds	r7, #36	; 0x24
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	40023800 	.word	0x40023800
 8006014:	40013800 	.word	0x40013800
 8006018:	40020000 	.word	0x40020000
 800601c:	40020400 	.word	0x40020400
 8006020:	40020800 	.word	0x40020800
 8006024:	40020c00 	.word	0x40020c00
 8006028:	40021000 	.word	0x40021000
 800602c:	40021400 	.word	0x40021400
 8006030:	40021800 	.word	0x40021800
 8006034:	40021c00 	.word	0x40021c00
 8006038:	40022000 	.word	0x40022000
 800603c:	40022400 	.word	0x40022400
 8006040:	40013c00 	.word	0x40013c00

08006044 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006044:	b480      	push	{r7}
 8006046:	b087      	sub	sp, #28
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800604e:	2300      	movs	r3, #0
 8006050:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006056:	2300      	movs	r3, #0
 8006058:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e0d9      	b.n	8006214 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006060:	2201      	movs	r2, #1
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	4013      	ands	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	429a      	cmp	r2, r3
 8006078:	f040 80c9 	bne.w	800620e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800607c:	4a6b      	ldr	r2, [pc, #428]	; (800622c <HAL_GPIO_DeInit+0x1e8>)
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	089b      	lsrs	r3, r3, #2
 8006082:	3302      	adds	r3, #2
 8006084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006088:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	220f      	movs	r2, #15
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	4013      	ands	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a63      	ldr	r2, [pc, #396]	; (8006230 <HAL_GPIO_DeInit+0x1ec>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d037      	beq.n	8006116 <HAL_GPIO_DeInit+0xd2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a62      	ldr	r2, [pc, #392]	; (8006234 <HAL_GPIO_DeInit+0x1f0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d031      	beq.n	8006112 <HAL_GPIO_DeInit+0xce>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a61      	ldr	r2, [pc, #388]	; (8006238 <HAL_GPIO_DeInit+0x1f4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d02b      	beq.n	800610e <HAL_GPIO_DeInit+0xca>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a60      	ldr	r2, [pc, #384]	; (800623c <HAL_GPIO_DeInit+0x1f8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d025      	beq.n	800610a <HAL_GPIO_DeInit+0xc6>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a5f      	ldr	r2, [pc, #380]	; (8006240 <HAL_GPIO_DeInit+0x1fc>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d01f      	beq.n	8006106 <HAL_GPIO_DeInit+0xc2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a5e      	ldr	r2, [pc, #376]	; (8006244 <HAL_GPIO_DeInit+0x200>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d019      	beq.n	8006102 <HAL_GPIO_DeInit+0xbe>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a5d      	ldr	r2, [pc, #372]	; (8006248 <HAL_GPIO_DeInit+0x204>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d013      	beq.n	80060fe <HAL_GPIO_DeInit+0xba>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a5c      	ldr	r2, [pc, #368]	; (800624c <HAL_GPIO_DeInit+0x208>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d00d      	beq.n	80060fa <HAL_GPIO_DeInit+0xb6>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a5b      	ldr	r2, [pc, #364]	; (8006250 <HAL_GPIO_DeInit+0x20c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d007      	beq.n	80060f6 <HAL_GPIO_DeInit+0xb2>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a5a      	ldr	r2, [pc, #360]	; (8006254 <HAL_GPIO_DeInit+0x210>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d101      	bne.n	80060f2 <HAL_GPIO_DeInit+0xae>
 80060ee:	2309      	movs	r3, #9
 80060f0:	e012      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 80060f2:	230a      	movs	r3, #10
 80060f4:	e010      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 80060f6:	2308      	movs	r3, #8
 80060f8:	e00e      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 80060fa:	2307      	movs	r3, #7
 80060fc:	e00c      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 80060fe:	2306      	movs	r3, #6
 8006100:	e00a      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 8006102:	2305      	movs	r3, #5
 8006104:	e008      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 8006106:	2304      	movs	r3, #4
 8006108:	e006      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 800610a:	2303      	movs	r3, #3
 800610c:	e004      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 800610e:	2302      	movs	r3, #2
 8006110:	e002      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_GPIO_DeInit+0xd4>
 8006116:	2300      	movs	r3, #0
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	f002 0203 	and.w	r2, r2, #3
 800611e:	0092      	lsls	r2, r2, #2
 8006120:	4093      	lsls	r3, r2
 8006122:	68ba      	ldr	r2, [r7, #8]
 8006124:	429a      	cmp	r2, r3
 8006126:	d132      	bne.n	800618e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006128:	4b4b      	ldr	r3, [pc, #300]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	43db      	mvns	r3, r3
 8006130:	4949      	ldr	r1, [pc, #292]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 8006132:	4013      	ands	r3, r2
 8006134:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006136:	4b48      	ldr	r3, [pc, #288]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	43db      	mvns	r3, r3
 800613e:	4946      	ldr	r1, [pc, #280]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 8006140:	4013      	ands	r3, r2
 8006142:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006144:	4b44      	ldr	r3, [pc, #272]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	43db      	mvns	r3, r3
 800614c:	4942      	ldr	r1, [pc, #264]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 800614e:	4013      	ands	r3, r2
 8006150:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006152:	4b41      	ldr	r3, [pc, #260]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 8006154:	689a      	ldr	r2, [r3, #8]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	43db      	mvns	r3, r3
 800615a:	493f      	ldr	r1, [pc, #252]	; (8006258 <HAL_GPIO_DeInit+0x214>)
 800615c:	4013      	ands	r3, r2
 800615e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	220f      	movs	r2, #15
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006170:	4a2e      	ldr	r2, [pc, #184]	; (800622c <HAL_GPIO_DeInit+0x1e8>)
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	089b      	lsrs	r3, r3, #2
 8006176:	3302      	adds	r3, #2
 8006178:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	43da      	mvns	r2, r3
 8006180:	482a      	ldr	r0, [pc, #168]	; (800622c <HAL_GPIO_DeInit+0x1e8>)
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	089b      	lsrs	r3, r3, #2
 8006186:	400a      	ands	r2, r1
 8006188:	3302      	adds	r3, #2
 800618a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	2103      	movs	r1, #3
 8006198:	fa01 f303 	lsl.w	r3, r1, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	401a      	ands	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	08da      	lsrs	r2, r3, #3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3208      	adds	r2, #8
 80061ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	220f      	movs	r2, #15
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	08d2      	lsrs	r2, r2, #3
 80061c4:	4019      	ands	r1, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3208      	adds	r2, #8
 80061ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	2103      	movs	r1, #3
 80061d8:	fa01 f303 	lsl.w	r3, r1, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	401a      	ands	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	2101      	movs	r1, #1
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	fa01 f303 	lsl.w	r3, r1, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	401a      	ands	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	2103      	movs	r1, #3
 8006202:	fa01 f303 	lsl.w	r3, r1, r3
 8006206:	43db      	mvns	r3, r3
 8006208:	401a      	ands	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	3301      	adds	r3, #1
 8006212:	617b      	str	r3, [r7, #20]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2b0f      	cmp	r3, #15
 8006218:	f67f af22 	bls.w	8006060 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40013800 	.word	0x40013800
 8006230:	40020000 	.word	0x40020000
 8006234:	40020400 	.word	0x40020400
 8006238:	40020800 	.word	0x40020800
 800623c:	40020c00 	.word	0x40020c00
 8006240:	40021000 	.word	0x40021000
 8006244:	40021400 	.word	0x40021400
 8006248:	40021800 	.word	0x40021800
 800624c:	40021c00 	.word	0x40021c00
 8006250:	40022000 	.word	0x40022000
 8006254:	40022400 	.word	0x40022400
 8006258:	40013c00 	.word	0x40013c00

0800625c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	460b      	mov	r3, r1
 8006266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	887b      	ldrh	r3, [r7, #2]
 800626e:	4013      	ands	r3, r2
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006274:	2301      	movs	r3, #1
 8006276:	73fb      	strb	r3, [r7, #15]
 8006278:	e001      	b.n	800627e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800627a:	2300      	movs	r3, #0
 800627c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800627e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006280:	4618      	mov	r0, r3
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	807b      	strh	r3, [r7, #2]
 8006298:	4613      	mov	r3, r2
 800629a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800629c:	787b      	ldrb	r3, [r7, #1]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062a2:	887a      	ldrh	r2, [r7, #2]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80062a8:	e003      	b.n	80062b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80062aa:	887b      	ldrh	r3, [r7, #2]
 80062ac:	041a      	lsls	r2, r3, #16
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	619a      	str	r2, [r3, #24]
}
 80062b2:	bf00      	nop
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	4603      	mov	r3, r0
 80062c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80062ca:	4b08      	ldr	r3, [pc, #32]	; (80062ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062cc:	695a      	ldr	r2, [r3, #20]
 80062ce:	88fb      	ldrh	r3, [r7, #6]
 80062d0:	4013      	ands	r3, r2
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d006      	beq.n	80062e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80062d6:	4a05      	ldr	r2, [pc, #20]	; (80062ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80062d8:	88fb      	ldrh	r3, [r7, #6]
 80062da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062dc:	88fb      	ldrh	r3, [r7, #6]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fb fd5a 	bl	8001d98 <HAL_GPIO_EXTI_Callback>
  }
}
 80062e4:	bf00      	nop
 80062e6:	3708      	adds	r7, #8
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40013c00 	.word	0x40013c00

080062f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e07f      	b.n	8006402 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006308:	b2db      	uxtb	r3, r3
 800630a:	2b00      	cmp	r3, #0
 800630c:	d106      	bne.n	800631c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7fd fb1c 	bl	8003954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2224      	movs	r2, #36	; 0x24
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0201 	bic.w	r2, r2, #1
 8006332:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006340:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006350:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d107      	bne.n	800636a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006366:	609a      	str	r2, [r3, #8]
 8006368:	e006      	b.n	8006378 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006376:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	2b02      	cmp	r3, #2
 800637e:	d104      	bne.n	800638a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006388:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6859      	ldr	r1, [r3, #4]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	4b1d      	ldr	r3, [pc, #116]	; (800640c <HAL_I2C_Init+0x11c>)
 8006396:	430b      	orrs	r3, r1
 8006398:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	691a      	ldr	r2, [r3, #16]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	430a      	orrs	r2, r1
 80063d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f042 0201 	orr.w	r2, r2, #1
 80063e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2220      	movs	r2, #32
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	02008000 	.word	0x02008000

08006410 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e021      	b.n	8006466 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2224      	movs	r2, #36	; 0x24
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fd fb32 	bl	8003aa4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	4608      	mov	r0, r1
 800647a:	4611      	mov	r1, r2
 800647c:	461a      	mov	r2, r3
 800647e:	4603      	mov	r3, r0
 8006480:	817b      	strh	r3, [r7, #10]
 8006482:	460b      	mov	r3, r1
 8006484:	813b      	strh	r3, [r7, #8]
 8006486:	4613      	mov	r3, r2
 8006488:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b20      	cmp	r3, #32
 8006494:	f040 80f9 	bne.w	800668a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_I2C_Mem_Write+0x34>
 800649e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d105      	bne.n	80064b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e0ed      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_I2C_Mem_Write+0x4e>
 80064ba:	2302      	movs	r3, #2
 80064bc:	e0e6      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2201      	movs	r2, #1
 80064c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064c6:	f7fe f839 	bl	800453c <HAL_GetTick>
 80064ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	2319      	movs	r3, #25
 80064d2:	2201      	movs	r2, #1
 80064d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f000 fad1 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0d1      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2221      	movs	r2, #33	; 0x21
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2240      	movs	r2, #64	; 0x40
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6a3a      	ldr	r2, [r7, #32]
 8006502:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006508:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006510:	88f8      	ldrh	r0, [r7, #6]
 8006512:	893a      	ldrh	r2, [r7, #8]
 8006514:	8979      	ldrh	r1, [r7, #10]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651c:	9300      	str	r3, [sp, #0]
 800651e:	4603      	mov	r3, r0
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f9e1 	bl	80068e8 <I2C_RequestMemoryWrite>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006534:	2301      	movs	r3, #1
 8006536:	e0a9      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653c:	b29b      	uxth	r3, r3
 800653e:	2bff      	cmp	r3, #255	; 0xff
 8006540:	d90e      	bls.n	8006560 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	22ff      	movs	r2, #255	; 0xff
 8006546:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800654c:	b2da      	uxtb	r2, r3
 800654e:	8979      	ldrh	r1, [r7, #10]
 8006550:	2300      	movs	r3, #0
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 fc39 	bl	8006dd0 <I2C_TransferConfig>
 800655e:	e00f      	b.n	8006580 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006564:	b29a      	uxth	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800656e:	b2da      	uxtb	r2, r3
 8006570:	8979      	ldrh	r1, [r7, #10]
 8006572:	2300      	movs	r3, #0
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 fc28 	bl	8006dd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fabb 	bl	8006b00 <I2C_WaitOnTXISFlagUntilTimeout>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d001      	beq.n	8006594 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e07b      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	781a      	ldrb	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d034      	beq.n	8006638 <HAL_I2C_Mem_Write+0x1c8>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d130      	bne.n	8006638 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	2200      	movs	r2, #0
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fa4d 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e04d      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	2bff      	cmp	r3, #255	; 0xff
 80065f8:	d90e      	bls.n	8006618 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	22ff      	movs	r2, #255	; 0xff
 80065fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006604:	b2da      	uxtb	r2, r3
 8006606:	8979      	ldrh	r1, [r7, #10]
 8006608:	2300      	movs	r3, #0
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f000 fbdd 	bl	8006dd0 <I2C_TransferConfig>
 8006616:	e00f      	b.n	8006638 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800661c:	b29a      	uxth	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006626:	b2da      	uxtb	r2, r3
 8006628:	8979      	ldrh	r1, [r7, #10]
 800662a:	2300      	movs	r3, #0
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f000 fbcc 	bl	8006dd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d19e      	bne.n	8006580 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fa9a 	bl	8006b80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
 8006654:	e01a      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2220      	movs	r2, #32
 800665c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6859      	ldr	r1, [r3, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <HAL_I2C_Mem_Write+0x224>)
 800666a:	400b      	ands	r3, r1
 800666c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	e000      	b.n	800668c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800668a:	2302      	movs	r3, #2
  }
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	fe00e800 	.word	0xfe00e800

08006698 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af02      	add	r7, sp, #8
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	4608      	mov	r0, r1
 80066a2:	4611      	mov	r1, r2
 80066a4:	461a      	mov	r2, r3
 80066a6:	4603      	mov	r3, r0
 80066a8:	817b      	strh	r3, [r7, #10]
 80066aa:	460b      	mov	r3, r1
 80066ac:	813b      	strh	r3, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	f040 80fd 	bne.w	80068ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <HAL_I2C_Mem_Read+0x34>
 80066c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d105      	bne.n	80066d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e0f1      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d101      	bne.n	80066e6 <HAL_I2C_Mem_Read+0x4e>
 80066e2:	2302      	movs	r3, #2
 80066e4:	e0ea      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066ee:	f7fd ff25 	bl	800453c <HAL_GetTick>
 80066f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	2319      	movs	r3, #25
 80066fa:	2201      	movs	r2, #1
 80066fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f9bd 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	d001      	beq.n	8006710 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e0d5      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2222      	movs	r2, #34	; 0x22
 8006714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2240      	movs	r2, #64	; 0x40
 800671c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a3a      	ldr	r2, [r7, #32]
 800672a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006738:	88f8      	ldrh	r0, [r7, #6]
 800673a:	893a      	ldrh	r2, [r7, #8]
 800673c:	8979      	ldrh	r1, [r7, #10]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006744:	9300      	str	r3, [sp, #0]
 8006746:	4603      	mov	r3, r0
 8006748:	68f8      	ldr	r0, [r7, #12]
 800674a:	f000 f921 	bl	8006990 <I2C_RequestMemoryRead>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d005      	beq.n	8006760 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e0ad      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2bff      	cmp	r3, #255	; 0xff
 8006768:	d90e      	bls.n	8006788 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	22ff      	movs	r2, #255	; 0xff
 800676e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006774:	b2da      	uxtb	r2, r3
 8006776:	8979      	ldrh	r1, [r7, #10]
 8006778:	4b52      	ldr	r3, [pc, #328]	; (80068c4 <HAL_I2C_Mem_Read+0x22c>)
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fb25 	bl	8006dd0 <I2C_TransferConfig>
 8006786:	e00f      	b.n	80067a8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006796:	b2da      	uxtb	r2, r3
 8006798:	8979      	ldrh	r1, [r7, #10]
 800679a:	4b4a      	ldr	r3, [pc, #296]	; (80068c4 <HAL_I2C_Mem_Read+0x22c>)
 800679c:	9300      	str	r3, [sp, #0]
 800679e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fb14 	bl	8006dd0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	2200      	movs	r2, #0
 80067b0:	2104      	movs	r1, #4
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f964 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e07c      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	b2d2      	uxtb	r2, r2
 80067ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d4:	1c5a      	adds	r2, r3, #1
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	3b01      	subs	r3, #1
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d034      	beq.n	8006868 <HAL_I2C_Mem_Read+0x1d0>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006802:	2b00      	cmp	r3, #0
 8006804:	d130      	bne.n	8006868 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	2200      	movs	r2, #0
 800680e:	2180      	movs	r1, #128	; 0x80
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f935 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e04d      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006824:	b29b      	uxth	r3, r3
 8006826:	2bff      	cmp	r3, #255	; 0xff
 8006828:	d90e      	bls.n	8006848 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006834:	b2da      	uxtb	r2, r3
 8006836:	8979      	ldrh	r1, [r7, #10]
 8006838:	2300      	movs	r3, #0
 800683a:	9300      	str	r3, [sp, #0]
 800683c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 fac5 	bl	8006dd0 <I2C_TransferConfig>
 8006846:	e00f      	b.n	8006868 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006856:	b2da      	uxtb	r2, r3
 8006858:	8979      	ldrh	r1, [r7, #10]
 800685a:	2300      	movs	r3, #0
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fab4 	bl	8006dd0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686c:	b29b      	uxth	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d19a      	bne.n	80067a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f982 	bl	8006b80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e01a      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	2220      	movs	r2, #32
 800688c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6859      	ldr	r1, [r3, #4]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	4b0b      	ldr	r3, [pc, #44]	; (80068c8 <HAL_I2C_Mem_Read+0x230>)
 800689a:	400b      	ands	r3, r1
 800689c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	e000      	b.n	80068bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068ba:	2302      	movs	r3, #2
  }
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	80002400 	.word	0x80002400
 80068c8:	fe00e800 	.word	0xfe00e800

080068cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068da:	b2db      	uxtb	r3, r3
}
 80068dc:	4618      	mov	r0, r3
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af02      	add	r7, sp, #8
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	4608      	mov	r0, r1
 80068f2:	4611      	mov	r1, r2
 80068f4:	461a      	mov	r2, r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	817b      	strh	r3, [r7, #10]
 80068fa:	460b      	mov	r3, r1
 80068fc:	813b      	strh	r3, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006902:	88fb      	ldrh	r3, [r7, #6]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	8979      	ldrh	r1, [r7, #10]
 8006908:	4b20      	ldr	r3, [pc, #128]	; (800698c <I2C_RequestMemoryWrite+0xa4>)
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006910:	68f8      	ldr	r0, [r7, #12]
 8006912:	f000 fa5d 	bl	8006dd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	69b9      	ldr	r1, [r7, #24]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f8f0 	bl	8006b00 <I2C_WaitOnTXISFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e02c      	b.n	8006984 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800692a:	88fb      	ldrh	r3, [r7, #6]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d105      	bne.n	800693c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006930:	893b      	ldrh	r3, [r7, #8]
 8006932:	b2da      	uxtb	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	629a      	str	r2, [r3, #40]	; 0x28
 800693a:	e015      	b.n	8006968 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	0a1b      	lsrs	r3, r3, #8
 8006940:	b29b      	uxth	r3, r3
 8006942:	b2da      	uxtb	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	69b9      	ldr	r1, [r7, #24]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f8d6 	bl	8006b00 <I2C_WaitOnTXISFlagUntilTimeout>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e012      	b.n	8006984 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800695e:	893b      	ldrh	r3, [r7, #8]
 8006960:	b2da      	uxtb	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2200      	movs	r2, #0
 8006970:	2180      	movs	r1, #128	; 0x80
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f884 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	80002000 	.word	0x80002000

08006990 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	4608      	mov	r0, r1
 800699a:	4611      	mov	r1, r2
 800699c:	461a      	mov	r2, r3
 800699e:	4603      	mov	r3, r0
 80069a0:	817b      	strh	r3, [r7, #10]
 80069a2:	460b      	mov	r3, r1
 80069a4:	813b      	strh	r3, [r7, #8]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	8979      	ldrh	r1, [r7, #10]
 80069b0:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <I2C_RequestMemoryRead+0xa4>)
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	2300      	movs	r3, #0
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 fa0a 	bl	8006dd0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069bc:	69fa      	ldr	r2, [r7, #28]
 80069be:	69b9      	ldr	r1, [r7, #24]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f89d 	bl	8006b00 <I2C_WaitOnTXISFlagUntilTimeout>
 80069c6:	4603      	mov	r3, r0
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d001      	beq.n	80069d0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	e02c      	b.n	8006a2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d105      	bne.n	80069e2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069d6:	893b      	ldrh	r3, [r7, #8]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	629a      	str	r2, [r3, #40]	; 0x28
 80069e0:	e015      	b.n	8006a0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80069e2:	893b      	ldrh	r3, [r7, #8]
 80069e4:	0a1b      	lsrs	r3, r3, #8
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80069f0:	69fa      	ldr	r2, [r7, #28]
 80069f2:	69b9      	ldr	r1, [r7, #24]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f883 	bl	8006b00 <I2C_WaitOnTXISFlagUntilTimeout>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e012      	b.n	8006a2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a04:	893b      	ldrh	r3, [r7, #8]
 8006a06:	b2da      	uxtb	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2140      	movs	r1, #64	; 0x40
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f000 f831 	bl	8006a80 <I2C_WaitOnFlagUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	80002000 	.word	0x80002000

08006a38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d103      	bne.n	8006a56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2200      	movs	r2, #0
 8006a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f003 0301 	and.w	r3, r3, #1
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d007      	beq.n	8006a74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	699a      	ldr	r2, [r3, #24]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	619a      	str	r2, [r3, #24]
  }
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a90:	e022      	b.n	8006ad8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d01e      	beq.n	8006ad8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9a:	f7fd fd4f 	bl	800453c <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d302      	bcc.n	8006ab0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d113      	bne.n	8006ad8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab4:	f043 0220 	orr.w	r2, r3, #32
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e00f      	b.n	8006af8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	bf0c      	ite	eq
 8006ae8:	2301      	moveq	r3, #1
 8006aea:	2300      	movne	r3, #0
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	79fb      	ldrb	r3, [r7, #7]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d0cd      	beq.n	8006a92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b0c:	e02c      	b.n	8006b68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f870 	bl	8006bf8 <I2C_IsErrorOccurred>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e02a      	b.n	8006b78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d01e      	beq.n	8006b68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2a:	f7fd fd07 	bl	800453c <HAL_GetTick>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d302      	bcc.n	8006b40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d113      	bne.n	8006b68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2220      	movs	r2, #32
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e007      	b.n	8006b78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f003 0302 	and.w	r3, r3, #2
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d1cb      	bne.n	8006b0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006b8c:	e028      	b.n	8006be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	68b9      	ldr	r1, [r7, #8]
 8006b92:	68f8      	ldr	r0, [r7, #12]
 8006b94:	f000 f830 	bl	8006bf8 <I2C_IsErrorOccurred>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e026      	b.n	8006bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fd fccb 	bl	800453c <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d113      	bne.n	8006be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bbc:	f043 0220 	orr.w	r2, r3, #32
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e007      	b.n	8006bf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f003 0320 	and.w	r3, r3, #32
 8006bea:	2b20      	cmp	r3, #32
 8006bec:	d1cf      	bne.n	8006b8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b08a      	sub	sp, #40	; 0x28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c04:	2300      	movs	r3, #0
 8006c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	699b      	ldr	r3, [r3, #24]
 8006c10:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006c12:	2300      	movs	r3, #0
 8006c14:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	f003 0310 	and.w	r3, r3, #16
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d075      	beq.n	8006d10 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2210      	movs	r2, #16
 8006c2a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006c2c:	e056      	b.n	8006cdc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c34:	d052      	beq.n	8006cdc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006c36:	f7fd fc81 	bl	800453c <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	68ba      	ldr	r2, [r7, #8]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d302      	bcc.n	8006c4c <I2C_IsErrorOccurred+0x54>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d147      	bne.n	8006cdc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c56:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006c5e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6e:	d12e      	bne.n	8006cce <I2C_IsErrorOccurred+0xd6>
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c76:	d02a      	beq.n	8006cce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006c78:	7cfb      	ldrb	r3, [r7, #19]
 8006c7a:	2b20      	cmp	r3, #32
 8006c7c:	d027      	beq.n	8006cce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c8c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006c8e:	f7fd fc55 	bl	800453c <HAL_GetTick>
 8006c92:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c94:	e01b      	b.n	8006cce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006c96:	f7fd fc51 	bl	800453c <HAL_GetTick>
 8006c9a:	4602      	mov	r2, r0
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	1ad3      	subs	r3, r2, r3
 8006ca0:	2b19      	cmp	r3, #25
 8006ca2:	d914      	bls.n	8006cce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	f043 0220 	orr.w	r2, r3, #32
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d1dc      	bne.n	8006c96 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d003      	beq.n	8006cf2 <I2C_IsErrorOccurred+0xfa>
 8006cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d09d      	beq.n	8006c2e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d103      	bne.n	8006d02 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f043 0304 	orr.w	r3, r3, #4
 8006d08:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699b      	ldr	r3, [r3, #24]
 8006d16:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00b      	beq.n	8006d3a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00b      	beq.n	8006d5c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	f043 0308 	orr.w	r3, r3, #8
 8006d4a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	f043 0302 	orr.w	r3, r3, #2
 8006d6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d01c      	beq.n	8006dc0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f7ff fe56 	bl	8006a38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6859      	ldr	r1, [r3, #4]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	4b0d      	ldr	r3, [pc, #52]	; (8006dcc <I2C_IsErrorOccurred+0x1d4>)
 8006d98:	400b      	ands	r3, r1
 8006d9a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2220      	movs	r2, #32
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3728      	adds	r7, #40	; 0x28
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	fe00e800 	.word	0xfe00e800

08006dd0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b087      	sub	sp, #28
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	460b      	mov	r3, r1
 8006ddc:	817b      	strh	r3, [r7, #10]
 8006dde:	4613      	mov	r3, r2
 8006de0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006de2:	897b      	ldrh	r3, [r7, #10]
 8006de4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006de8:	7a7b      	ldrb	r3, [r7, #9]
 8006dea:	041b      	lsls	r3, r3, #16
 8006dec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006df0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006dfe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	0d5b      	lsrs	r3, r3, #21
 8006e0a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006e0e:	4b08      	ldr	r3, [pc, #32]	; (8006e30 <I2C_TransferConfig+0x60>)
 8006e10:	430b      	orrs	r3, r1
 8006e12:	43db      	mvns	r3, r3
 8006e14:	ea02 0103 	and.w	r1, r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006e22:	bf00      	nop
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	03ff63ff 	.word	0x03ff63ff

08006e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b20      	cmp	r3, #32
 8006e48:	d138      	bne.n	8006ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e032      	b.n	8006ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2224      	movs	r2, #36	; 0x24
 8006e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0201 	bic.w	r2, r2, #1
 8006e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	e000      	b.n	8006ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006ebc:	2302      	movs	r3, #2
  }
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b085      	sub	sp, #20
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
 8006ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b20      	cmp	r3, #32
 8006ede:	d139      	bne.n	8006f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e033      	b.n	8006f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2224      	movs	r2, #36	; 0x24
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f022 0201 	bic.w	r2, r2, #1
 8006f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0201 	orr.w	r2, r2, #1
 8006f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	e000      	b.n	8006f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006f54:	2302      	movs	r3, #2
  }
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
	...

08006f64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d101      	bne.n	8006f76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e0bf      	b.n	80070f6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f7fc fdc6 	bl	8003b1c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699a      	ldr	r2, [r3, #24]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006fa6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	6999      	ldr	r1, [r3, #24]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	6899      	ldr	r1, [r3, #8]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	4b4a      	ldr	r3, [pc, #296]	; (8007100 <HAL_LTDC_Init+0x19c>)
 8006fd8:	400b      	ands	r3, r1
 8006fda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	695b      	ldr	r3, [r3, #20]
 8006fe0:	041b      	lsls	r3, r3, #16
 8006fe2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6899      	ldr	r1, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	431a      	orrs	r2, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68d9      	ldr	r1, [r3, #12]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	4b3e      	ldr	r3, [pc, #248]	; (8007100 <HAL_LTDC_Init+0x19c>)
 8007006:	400b      	ands	r3, r1
 8007008:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	041b      	lsls	r3, r3, #16
 8007010:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68d9      	ldr	r1, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	431a      	orrs	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	430a      	orrs	r2, r1
 8007026:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6919      	ldr	r1, [r3, #16]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	4b33      	ldr	r3, [pc, #204]	; (8007100 <HAL_LTDC_Init+0x19c>)
 8007034:	400b      	ands	r3, r1
 8007036:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703c:	041b      	lsls	r3, r3, #16
 800703e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6919      	ldr	r1, [r3, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	431a      	orrs	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6959      	ldr	r1, [r3, #20]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b27      	ldr	r3, [pc, #156]	; (8007100 <HAL_LTDC_Init+0x19c>)
 8007062:	400b      	ands	r3, r1
 8007064:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	041b      	lsls	r3, r3, #16
 800706c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	6959      	ldr	r1, [r3, #20]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	430a      	orrs	r2, r1
 8007082:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80070a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80070ba:	431a      	orrs	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	430a      	orrs	r2, r1
 80070c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0206 	orr.w	r2, r2, #6
 80070d2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699a      	ldr	r2, [r3, #24]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f042 0201 	orr.w	r2, r2, #1
 80070e2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	f000f800 	.word	0xf000f800

08007104 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007112:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d023      	beq.n	800716e <HAL_LTDC_IRQHandler+0x6a>
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01e      	beq.n	800716e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0204 	bic.w	r2, r2, #4
 800713e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2204      	movs	r2, #4
 8007146:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800714e:	f043 0201 	orr.w	r2, r3, #1
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2204      	movs	r2, #4
 800715c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f86f 	bl	800724c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d023      	beq.n	80071c0 <HAL_LTDC_IRQHandler+0xbc>
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	f003 0302 	and.w	r3, r3, #2
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01e      	beq.n	80071c0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0202 	bic.w	r2, r2, #2
 8007190:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2202      	movs	r2, #2
 8007198:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80071a0:	f043 0202 	orr.w	r2, r3, #2
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2204      	movs	r2, #4
 80071ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f846 	bl	800724c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01b      	beq.n	8007202 <HAL_LTDC_IRQHandler+0xfe>
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d016      	beq.n	8007202 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2201      	movs	r2, #1
 80071ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f82f 	bl	8007260 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01b      	beq.n	8007244 <HAL_LTDC_IRQHandler+0x140>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	f003 0308 	and.w	r3, r3, #8
 8007212:	2b00      	cmp	r3, #0
 8007214:	d016      	beq.n	8007244 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0208 	bic.w	r2, r2, #8
 8007224:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2208      	movs	r2, #8
 800722c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f818 	bl	8007274 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007244:	bf00      	nop
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007260:	b480      	push	{r7}
 8007262:	b083      	sub	sp, #12
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007288:	b5b0      	push	{r4, r5, r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_LTDC_ConfigLayer+0x1a>
 800729e:	2302      	movs	r3, #2
 80072a0:	e02c      	b.n	80072fc <HAL_LTDC_ConfigLayer+0x74>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2134      	movs	r1, #52	; 0x34
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	4413      	add	r3, r2
 80072be:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	4614      	mov	r4, r2
 80072c6:	461d      	mov	r5, r3
 80072c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	68b9      	ldr	r1, [r7, #8]
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f000 f81f 	bl	8007320 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2201      	movs	r2, #1
 80072e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2200      	movs	r2, #0
 80072f6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bdb0      	pop	{r4, r5, r7, pc}

08007304 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007312:	b2db      	uxtb	r3, r3
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	; 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	0c1b      	lsrs	r3, r3, #16
 8007338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800733c:	4413      	add	r3, r2
 800733e:	041b      	lsls	r3, r3, #16
 8007340:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	01db      	lsls	r3, r3, #7
 800734c:	4413      	add	r3, r2
 800734e:	3384      	adds	r3, #132	; 0x84
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	6812      	ldr	r2, [r2, #0]
 8007356:	4611      	mov	r1, r2
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	01d2      	lsls	r2, r2, #7
 800735c:	440a      	add	r2, r1
 800735e:	3284      	adds	r2, #132	; 0x84
 8007360:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007364:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	0c1b      	lsrs	r3, r3, #16
 8007372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007376:	4413      	add	r3, r2
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4619      	mov	r1, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	01db      	lsls	r3, r3, #7
 8007384:	440b      	add	r3, r1
 8007386:	3384      	adds	r3, #132	; 0x84
 8007388:	4619      	mov	r1, r3
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	4313      	orrs	r3, r2
 800738e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	68da      	ldr	r2, [r3, #12]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800739e:	4413      	add	r3, r2
 80073a0:	041b      	lsls	r3, r3, #16
 80073a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	461a      	mov	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	01db      	lsls	r3, r3, #7
 80073ae:	4413      	add	r3, r2
 80073b0:	3384      	adds	r3, #132	; 0x84
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	4611      	mov	r1, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	01d2      	lsls	r2, r2, #7
 80073be:	440a      	add	r2, r1
 80073c0:	3284      	adds	r2, #132	; 0x84
 80073c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80073c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073d6:	4413      	add	r3, r2
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	01db      	lsls	r3, r3, #7
 80073e4:	440b      	add	r3, r1
 80073e6:	3384      	adds	r3, #132	; 0x84
 80073e8:	4619      	mov	r1, r3
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	461a      	mov	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	01db      	lsls	r3, r3, #7
 80073fa:	4413      	add	r3, r2
 80073fc:	3384      	adds	r3, #132	; 0x84
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	6812      	ldr	r2, [r2, #0]
 8007404:	4611      	mov	r1, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	01d2      	lsls	r2, r2, #7
 800740a:	440a      	add	r2, r1
 800740c:	3284      	adds	r2, #132	; 0x84
 800740e:	f023 0307 	bic.w	r3, r3, #7
 8007412:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	01db      	lsls	r3, r3, #7
 800741e:	4413      	add	r3, r2
 8007420:	3384      	adds	r3, #132	; 0x84
 8007422:	461a      	mov	r2, r3
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007430:	021b      	lsls	r3, r3, #8
 8007432:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800743a:	041b      	lsls	r3, r3, #16
 800743c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	061b      	lsls	r3, r3, #24
 8007444:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	01db      	lsls	r3, r3, #7
 8007450:	4413      	add	r3, r2
 8007452:	3384      	adds	r3, #132	; 0x84
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	01db      	lsls	r3, r3, #7
 8007460:	4413      	add	r3, r2
 8007462:	3384      	adds	r3, #132	; 0x84
 8007464:	461a      	mov	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007470:	461a      	mov	r2, r3
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	431a      	orrs	r2, r3
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	431a      	orrs	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4619      	mov	r1, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	01db      	lsls	r3, r3, #7
 8007484:	440b      	add	r3, r1
 8007486:	3384      	adds	r3, #132	; 0x84
 8007488:	4619      	mov	r1, r3
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	4313      	orrs	r3, r2
 800748e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	461a      	mov	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	01db      	lsls	r3, r3, #7
 800749a:	4413      	add	r3, r2
 800749c:	3384      	adds	r3, #132	; 0x84
 800749e:	695b      	ldr	r3, [r3, #20]
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	6812      	ldr	r2, [r2, #0]
 80074a4:	4611      	mov	r1, r2
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	01d2      	lsls	r2, r2, #7
 80074aa:	440a      	add	r2, r1
 80074ac:	3284      	adds	r2, #132	; 0x84
 80074ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80074b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	461a      	mov	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	01db      	lsls	r3, r3, #7
 80074be:	4413      	add	r3, r2
 80074c0:	3384      	adds	r3, #132	; 0x84
 80074c2:	461a      	mov	r2, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	461a      	mov	r2, r3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	01db      	lsls	r3, r3, #7
 80074d4:	4413      	add	r3, r2
 80074d6:	3384      	adds	r3, #132	; 0x84
 80074d8:	69da      	ldr	r2, [r3, #28]
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4619      	mov	r1, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	01db      	lsls	r3, r3, #7
 80074e4:	440b      	add	r3, r1
 80074e6:	3384      	adds	r3, #132	; 0x84
 80074e8:	4619      	mov	r1, r3
 80074ea:	4b58      	ldr	r3, [pc, #352]	; (800764c <LTDC_SetConfig+0x32c>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	69da      	ldr	r2, [r3, #28]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	68f9      	ldr	r1, [r7, #12]
 80074fa:	6809      	ldr	r1, [r1, #0]
 80074fc:	4608      	mov	r0, r1
 80074fe:	6879      	ldr	r1, [r7, #4]
 8007500:	01c9      	lsls	r1, r1, #7
 8007502:	4401      	add	r1, r0
 8007504:	3184      	adds	r1, #132	; 0x84
 8007506:	4313      	orrs	r3, r2
 8007508:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	01db      	lsls	r3, r3, #7
 8007514:	4413      	add	r3, r2
 8007516:	3384      	adds	r3, #132	; 0x84
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	01db      	lsls	r3, r3, #7
 8007524:	4413      	add	r3, r2
 8007526:	3384      	adds	r3, #132	; 0x84
 8007528:	461a      	mov	r2, r3
 800752a:	2300      	movs	r3, #0
 800752c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	461a      	mov	r2, r3
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	01db      	lsls	r3, r3, #7
 8007538:	4413      	add	r3, r2
 800753a:	3384      	adds	r3, #132	; 0x84
 800753c:	461a      	mov	r2, r3
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007542:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800754c:	2304      	movs	r3, #4
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	e01b      	b.n	800758a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d102      	bne.n	8007560 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800755a:	2303      	movs	r3, #3
 800755c:	61fb      	str	r3, [r7, #28]
 800755e:	e014      	b.n	800758a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b04      	cmp	r3, #4
 8007566:	d00b      	beq.n	8007580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800756c:	2b02      	cmp	r3, #2
 800756e:	d007      	beq.n	8007580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007574:	2b03      	cmp	r3, #3
 8007576:	d003      	beq.n	8007580 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800757c:	2b07      	cmp	r3, #7
 800757e:	d102      	bne.n	8007586 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007580:	2302      	movs	r3, #2
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	e001      	b.n	800758a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007586:	2301      	movs	r3, #1
 8007588:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	01db      	lsls	r3, r3, #7
 8007594:	4413      	add	r3, r2
 8007596:	3384      	adds	r3, #132	; 0x84
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	4611      	mov	r1, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	01d2      	lsls	r2, r2, #7
 80075a4:	440a      	add	r2, r1
 80075a6:	3284      	adds	r2, #132	; 0x84
 80075a8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80075ac:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	fb02 f303 	mul.w	r3, r2, r3
 80075b8:	041a      	lsls	r2, r3, #16
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	6859      	ldr	r1, [r3, #4]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	1acb      	subs	r3, r1, r3
 80075c4:	69f9      	ldr	r1, [r7, #28]
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	3303      	adds	r3, #3
 80075cc:	68f9      	ldr	r1, [r7, #12]
 80075ce:	6809      	ldr	r1, [r1, #0]
 80075d0:	4608      	mov	r0, r1
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	01c9      	lsls	r1, r1, #7
 80075d6:	4401      	add	r1, r0
 80075d8:	3184      	adds	r1, #132	; 0x84
 80075da:	4313      	orrs	r3, r2
 80075dc:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	01db      	lsls	r3, r3, #7
 80075e8:	4413      	add	r3, r2
 80075ea:	3384      	adds	r3, #132	; 0x84
 80075ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4619      	mov	r1, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	01db      	lsls	r3, r3, #7
 80075f8:	440b      	add	r3, r1
 80075fa:	3384      	adds	r3, #132	; 0x84
 80075fc:	4619      	mov	r1, r3
 80075fe:	4b14      	ldr	r3, [pc, #80]	; (8007650 <LTDC_SetConfig+0x330>)
 8007600:	4013      	ands	r3, r2
 8007602:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	01db      	lsls	r3, r3, #7
 800760e:	4413      	add	r3, r2
 8007610:	3384      	adds	r3, #132	; 0x84
 8007612:	461a      	mov	r2, r3
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007618:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	01db      	lsls	r3, r3, #7
 8007624:	4413      	add	r3, r2
 8007626:	3384      	adds	r3, #132	; 0x84
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	6812      	ldr	r2, [r2, #0]
 800762e:	4611      	mov	r1, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	01d2      	lsls	r2, r2, #7
 8007634:	440a      	add	r2, r1
 8007636:	3284      	adds	r2, #132	; 0x84
 8007638:	f043 0301 	orr.w	r3, r3, #1
 800763c:	6013      	str	r3, [r2, #0]
}
 800763e:	bf00      	nop
 8007640:	3724      	adds	r7, #36	; 0x24
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	fffff8f8 	.word	0xfffff8f8
 8007650:	fffff800 	.word	0xfffff800

08007654 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a04      	ldr	r2, [pc, #16]	; (8007670 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800765e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007662:	6013      	str	r3, [r2, #0]
}
 8007664:	bf00      	nop
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40007000 	.word	0x40007000

08007674 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800767a:	2300      	movs	r3, #0
 800767c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800767e:	4b23      	ldr	r3, [pc, #140]	; (800770c <HAL_PWREx_EnableOverDrive+0x98>)
 8007680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007682:	4a22      	ldr	r2, [pc, #136]	; (800770c <HAL_PWREx_EnableOverDrive+0x98>)
 8007684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007688:	6413      	str	r3, [r2, #64]	; 0x40
 800768a:	4b20      	ldr	r3, [pc, #128]	; (800770c <HAL_PWREx_EnableOverDrive+0x98>)
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007696:	4b1e      	ldr	r3, [pc, #120]	; (8007710 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a1d      	ldr	r2, [pc, #116]	; (8007710 <HAL_PWREx_EnableOverDrive+0x9c>)
 800769c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076a0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076a2:	f7fc ff4b 	bl	800453c <HAL_GetTick>
 80076a6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076a8:	e009      	b.n	80076be <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076aa:	f7fc ff47 	bl	800453c <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076b8:	d901      	bls.n	80076be <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e022      	b.n	8007704 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80076be:	4b14      	ldr	r3, [pc, #80]	; (8007710 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ca:	d1ee      	bne.n	80076aa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80076cc:	4b10      	ldr	r3, [pc, #64]	; (8007710 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a0f      	ldr	r2, [pc, #60]	; (8007710 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076d8:	f7fc ff30 	bl	800453c <HAL_GetTick>
 80076dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076de:	e009      	b.n	80076f4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80076e0:	f7fc ff2c 	bl	800453c <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80076ee:	d901      	bls.n	80076f4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e007      	b.n	8007704 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80076f4:	4b06      	ldr	r3, [pc, #24]	; (8007710 <HAL_PWREx_EnableOverDrive+0x9c>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007700:	d1ee      	bne.n	80076e0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}
 800770c:	40023800 	.word	0x40023800
 8007710:	40007000 	.word	0x40007000

08007714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800771c:	2300      	movs	r3, #0
 800771e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d101      	bne.n	800772a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e291      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8087 	beq.w	8007846 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007738:	4b96      	ldr	r3, [pc, #600]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f003 030c 	and.w	r3, r3, #12
 8007740:	2b04      	cmp	r3, #4
 8007742:	d00c      	beq.n	800775e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007744:	4b93      	ldr	r3, [pc, #588]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	f003 030c 	and.w	r3, r3, #12
 800774c:	2b08      	cmp	r3, #8
 800774e:	d112      	bne.n	8007776 <HAL_RCC_OscConfig+0x62>
 8007750:	4b90      	ldr	r3, [pc, #576]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800775c:	d10b      	bne.n	8007776 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800775e:	4b8d      	ldr	r3, [pc, #564]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d06c      	beq.n	8007844 <HAL_RCC_OscConfig+0x130>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d168      	bne.n	8007844 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e26b      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777e:	d106      	bne.n	800778e <HAL_RCC_OscConfig+0x7a>
 8007780:	4b84      	ldr	r3, [pc, #528]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a83      	ldr	r2, [pc, #524]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007786:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800778a:	6013      	str	r3, [r2, #0]
 800778c:	e02e      	b.n	80077ec <HAL_RCC_OscConfig+0xd8>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10c      	bne.n	80077b0 <HAL_RCC_OscConfig+0x9c>
 8007796:	4b7f      	ldr	r3, [pc, #508]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a7e      	ldr	r2, [pc, #504]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 800779c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	4b7c      	ldr	r3, [pc, #496]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a7b      	ldr	r2, [pc, #492]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ac:	6013      	str	r3, [r2, #0]
 80077ae:	e01d      	b.n	80077ec <HAL_RCC_OscConfig+0xd8>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077b8:	d10c      	bne.n	80077d4 <HAL_RCC_OscConfig+0xc0>
 80077ba:	4b76      	ldr	r3, [pc, #472]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a75      	ldr	r2, [pc, #468]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	4b73      	ldr	r3, [pc, #460]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a72      	ldr	r2, [pc, #456]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	e00b      	b.n	80077ec <HAL_RCC_OscConfig+0xd8>
 80077d4:	4b6f      	ldr	r3, [pc, #444]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a6e      	ldr	r2, [pc, #440]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	4b6c      	ldr	r3, [pc, #432]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a6b      	ldr	r2, [pc, #428]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80077e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d013      	beq.n	800781c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077f4:	f7fc fea2 	bl	800453c <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077fc:	f7fc fe9e 	bl	800453c <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b64      	cmp	r3, #100	; 0x64
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e21f      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800780e:	4b61      	ldr	r3, [pc, #388]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f0      	beq.n	80077fc <HAL_RCC_OscConfig+0xe8>
 800781a:	e014      	b.n	8007846 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800781c:	f7fc fe8e 	bl	800453c <HAL_GetTick>
 8007820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007822:	e008      	b.n	8007836 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007824:	f7fc fe8a 	bl	800453c <HAL_GetTick>
 8007828:	4602      	mov	r2, r0
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	2b64      	cmp	r3, #100	; 0x64
 8007830:	d901      	bls.n	8007836 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007832:	2303      	movs	r3, #3
 8007834:	e20b      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007836:	4b57      	ldr	r3, [pc, #348]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f0      	bne.n	8007824 <HAL_RCC_OscConfig+0x110>
 8007842:	e000      	b.n	8007846 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d069      	beq.n	8007926 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007852:	4b50      	ldr	r3, [pc, #320]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f003 030c 	and.w	r3, r3, #12
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00b      	beq.n	8007876 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800785e:	4b4d      	ldr	r3, [pc, #308]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 030c 	and.w	r3, r3, #12
 8007866:	2b08      	cmp	r3, #8
 8007868:	d11c      	bne.n	80078a4 <HAL_RCC_OscConfig+0x190>
 800786a:	4b4a      	ldr	r3, [pc, #296]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d116      	bne.n	80078a4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007876:	4b47      	ldr	r3, [pc, #284]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0302 	and.w	r3, r3, #2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <HAL_RCC_OscConfig+0x17a>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d001      	beq.n	800788e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e1df      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800788e:	4b41      	ldr	r3, [pc, #260]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	00db      	lsls	r3, r3, #3
 800789c:	493d      	ldr	r1, [pc, #244]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078a2:	e040      	b.n	8007926 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d023      	beq.n	80078f4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078ac:	4b39      	ldr	r3, [pc, #228]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a38      	ldr	r2, [pc, #224]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80078b2:	f043 0301 	orr.w	r3, r3, #1
 80078b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fc fe40 	bl	800453c <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078c0:	f7fc fe3c 	bl	800453c <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e1bd      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d2:	4b30      	ldr	r3, [pc, #192]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078de:	4b2d      	ldr	r3, [pc, #180]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	4929      	ldr	r1, [pc, #164]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	600b      	str	r3, [r1, #0]
 80078f2:	e018      	b.n	8007926 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078f4:	4b27      	ldr	r3, [pc, #156]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a26      	ldr	r2, [pc, #152]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 80078fa:	f023 0301 	bic.w	r3, r3, #1
 80078fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007900:	f7fc fe1c 	bl	800453c <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007908:	f7fc fe18 	bl	800453c <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e199      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800791a:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d038      	beq.n	80079a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d019      	beq.n	800796e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800793a:	4b16      	ldr	r3, [pc, #88]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 800793c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800793e:	4a15      	ldr	r2, [pc, #84]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007940:	f043 0301 	orr.w	r3, r3, #1
 8007944:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007946:	f7fc fdf9 	bl	800453c <HAL_GetTick>
 800794a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800794c:	e008      	b.n	8007960 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800794e:	f7fc fdf5 	bl	800453c <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e176      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007960:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0f0      	beq.n	800794e <HAL_RCC_OscConfig+0x23a>
 800796c:	e01a      	b.n	80079a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007972:	4a08      	ldr	r2, [pc, #32]	; (8007994 <HAL_RCC_OscConfig+0x280>)
 8007974:	f023 0301 	bic.w	r3, r3, #1
 8007978:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800797a:	f7fc fddf 	bl	800453c <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007980:	e00a      	b.n	8007998 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007982:	f7fc fddb 	bl	800453c <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d903      	bls.n	8007998 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e15c      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
 8007994:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007998:	4b91      	ldr	r3, [pc, #580]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 800799a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800799c:	f003 0302 	and.w	r3, r3, #2
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1ee      	bne.n	8007982 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0304 	and.w	r3, r3, #4
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80a4 	beq.w	8007afa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079b2:	4b8b      	ldr	r3, [pc, #556]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80079be:	4b88      	ldr	r3, [pc, #544]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	4a87      	ldr	r2, [pc, #540]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ca:	4b85      	ldr	r3, [pc, #532]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d2:	60bb      	str	r3, [r7, #8]
 80079d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079d6:	2301      	movs	r3, #1
 80079d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079da:	4b82      	ldr	r3, [pc, #520]	; (8007be4 <HAL_RCC_OscConfig+0x4d0>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d118      	bne.n	8007a18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80079e6:	4b7f      	ldr	r3, [pc, #508]	; (8007be4 <HAL_RCC_OscConfig+0x4d0>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a7e      	ldr	r2, [pc, #504]	; (8007be4 <HAL_RCC_OscConfig+0x4d0>)
 80079ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f2:	f7fc fda3 	bl	800453c <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079fa:	f7fc fd9f 	bl	800453c <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b64      	cmp	r3, #100	; 0x64
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e120      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a0c:	4b75      	ldr	r3, [pc, #468]	; (8007be4 <HAL_RCC_OscConfig+0x4d0>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d106      	bne.n	8007a2e <HAL_RCC_OscConfig+0x31a>
 8007a20:	4b6f      	ldr	r3, [pc, #444]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a24:	4a6e      	ldr	r2, [pc, #440]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a26:	f043 0301 	orr.w	r3, r3, #1
 8007a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007a2c:	e02d      	b.n	8007a8a <HAL_RCC_OscConfig+0x376>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10c      	bne.n	8007a50 <HAL_RCC_OscConfig+0x33c>
 8007a36:	4b6a      	ldr	r3, [pc, #424]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3a:	4a69      	ldr	r2, [pc, #420]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a3c:	f023 0301 	bic.w	r3, r3, #1
 8007a40:	6713      	str	r3, [r2, #112]	; 0x70
 8007a42:	4b67      	ldr	r3, [pc, #412]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	4a66      	ldr	r2, [pc, #408]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a4e:	e01c      	b.n	8007a8a <HAL_RCC_OscConfig+0x376>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	2b05      	cmp	r3, #5
 8007a56:	d10c      	bne.n	8007a72 <HAL_RCC_OscConfig+0x35e>
 8007a58:	4b61      	ldr	r3, [pc, #388]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a5c:	4a60      	ldr	r2, [pc, #384]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a5e:	f043 0304 	orr.w	r3, r3, #4
 8007a62:	6713      	str	r3, [r2, #112]	; 0x70
 8007a64:	4b5e      	ldr	r3, [pc, #376]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a68:	4a5d      	ldr	r2, [pc, #372]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a70:	e00b      	b.n	8007a8a <HAL_RCC_OscConfig+0x376>
 8007a72:	4b5b      	ldr	r3, [pc, #364]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a76:	4a5a      	ldr	r2, [pc, #360]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8007a7e:	4b58      	ldr	r3, [pc, #352]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a82:	4a57      	ldr	r2, [pc, #348]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007a84:	f023 0304 	bic.w	r3, r3, #4
 8007a88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d015      	beq.n	8007abe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a92:	f7fc fd53 	bl	800453c <HAL_GetTick>
 8007a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a98:	e00a      	b.n	8007ab0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a9a:	f7fc fd4f 	bl	800453c <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e0ce      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ab0:	4b4b      	ldr	r3, [pc, #300]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0ee      	beq.n	8007a9a <HAL_RCC_OscConfig+0x386>
 8007abc:	e014      	b.n	8007ae8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007abe:	f7fc fd3d 	bl	800453c <HAL_GetTick>
 8007ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007ac4:	e00a      	b.n	8007adc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ac6:	f7fc fd39 	bl	800453c <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d901      	bls.n	8007adc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e0b8      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007adc:	4b40      	ldr	r3, [pc, #256]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1ee      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d105      	bne.n	8007afa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007aee:	4b3c      	ldr	r3, [pc, #240]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	4a3b      	ldr	r2, [pc, #236]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	699b      	ldr	r3, [r3, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 80a4 	beq.w	8007c4c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007b04:	4b36      	ldr	r3, [pc, #216]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	f003 030c 	and.w	r3, r3, #12
 8007b0c:	2b08      	cmp	r3, #8
 8007b0e:	d06b      	beq.n	8007be8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d149      	bne.n	8007bac <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b18:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a30      	ldr	r2, [pc, #192]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b24:	f7fc fd0a 	bl	800453c <HAL_GetTick>
 8007b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b2a:	e008      	b.n	8007b3e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b2c:	f7fc fd06 	bl	800453c <HAL_GetTick>
 8007b30:	4602      	mov	r2, r0
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d901      	bls.n	8007b3e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007b3a:	2303      	movs	r3, #3
 8007b3c:	e087      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3e:	4b28      	ldr	r3, [pc, #160]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d1f0      	bne.n	8007b2c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	69da      	ldr	r2, [r3, #28]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	431a      	orrs	r2, r3
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	019b      	lsls	r3, r3, #6
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b60:	085b      	lsrs	r3, r3, #1
 8007b62:	3b01      	subs	r3, #1
 8007b64:	041b      	lsls	r3, r3, #16
 8007b66:	431a      	orrs	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	061b      	lsls	r3, r3, #24
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	4a1b      	ldr	r2, [pc, #108]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b78:	4b19      	ldr	r3, [pc, #100]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a18      	ldr	r2, [pc, #96]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b84:	f7fc fcda 	bl	800453c <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b8c:	f7fc fcd6 	bl	800453c <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e057      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b9e:	4b10      	ldr	r3, [pc, #64]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d0f0      	beq.n	8007b8c <HAL_RCC_OscConfig+0x478>
 8007baa:	e04f      	b.n	8007c4c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007bac:	4b0c      	ldr	r3, [pc, #48]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a0b      	ldr	r2, [pc, #44]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb8:	f7fc fcc0 	bl	800453c <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bbe:	e008      	b.n	8007bd2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007bc0:	f7fc fcbc 	bl	800453c <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e03d      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bd2:	4b03      	ldr	r3, [pc, #12]	; (8007be0 <HAL_RCC_OscConfig+0x4cc>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d1f0      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x4ac>
 8007bde:	e035      	b.n	8007c4c <HAL_RCC_OscConfig+0x538>
 8007be0:	40023800 	.word	0x40023800
 8007be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007be8:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <HAL_RCC_OscConfig+0x544>)
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	699b      	ldr	r3, [r3, #24]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d028      	beq.n	8007c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d121      	bne.n	8007c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d11a      	bne.n	8007c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c12:	68fa      	ldr	r2, [r7, #12]
 8007c14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c18:	4013      	ands	r3, r2
 8007c1a:	687a      	ldr	r2, [r7, #4]
 8007c1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c1e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d111      	bne.n	8007c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2e:	085b      	lsrs	r3, r3, #1
 8007c30:	3b01      	subs	r3, #1
 8007c32:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d107      	bne.n	8007c48 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c42:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d001      	beq.n	8007c4c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e000      	b.n	8007c4e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3718      	adds	r7, #24
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	40023800 	.word	0x40023800

08007c5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b084      	sub	sp, #16
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0d0      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c74:	4b6a      	ldr	r3, [pc, #424]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	683a      	ldr	r2, [r7, #0]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d910      	bls.n	8007ca4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c82:	4b67      	ldr	r3, [pc, #412]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f023 020f 	bic.w	r2, r3, #15
 8007c8a:	4965      	ldr	r1, [pc, #404]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c92:	4b63      	ldr	r3, [pc, #396]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	683a      	ldr	r2, [r7, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d001      	beq.n	8007ca4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e0b8      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d020      	beq.n	8007cf2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d005      	beq.n	8007cc8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007cbc:	4b59      	ldr	r3, [pc, #356]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	4a58      	ldr	r2, [pc, #352]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007cc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007cc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d005      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007cd4:	4b53      	ldr	r3, [pc, #332]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007cd6:	689b      	ldr	r3, [r3, #8]
 8007cd8:	4a52      	ldr	r2, [pc, #328]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007cda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cde:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ce0:	4b50      	ldr	r3, [pc, #320]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	494d      	ldr	r1, [pc, #308]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d040      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d107      	bne.n	8007d16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d06:	4b47      	ldr	r3, [pc, #284]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d115      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e07f      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	685b      	ldr	r3, [r3, #4]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d107      	bne.n	8007d2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d1e:	4b41      	ldr	r3, [pc, #260]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e073      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d2e:	4b3d      	ldr	r3, [pc, #244]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e06b      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d3e:	4b39      	ldr	r3, [pc, #228]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	f023 0203 	bic.w	r2, r3, #3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	4936      	ldr	r1, [pc, #216]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d50:	f7fc fbf4 	bl	800453c <HAL_GetTick>
 8007d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d56:	e00a      	b.n	8007d6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d58:	f7fc fbf0 	bl	800453c <HAL_GetTick>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e053      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d6e:	4b2d      	ldr	r3, [pc, #180]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	f003 020c 	and.w	r2, r3, #12
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d1eb      	bne.n	8007d58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d80:	4b27      	ldr	r3, [pc, #156]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 030f 	and.w	r3, r3, #15
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d210      	bcs.n	8007db0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d8e:	4b24      	ldr	r3, [pc, #144]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f023 020f 	bic.w	r2, r3, #15
 8007d96:	4922      	ldr	r1, [pc, #136]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d9e:	4b20      	ldr	r3, [pc, #128]	; (8007e20 <HAL_RCC_ClockConfig+0x1c4>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d001      	beq.n	8007db0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e032      	b.n	8007e16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 0304 	and.w	r3, r3, #4
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d008      	beq.n	8007dce <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dbc:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	4916      	ldr	r1, [pc, #88]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d009      	beq.n	8007dee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007dda:	4b12      	ldr	r3, [pc, #72]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	691b      	ldr	r3, [r3, #16]
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	490e      	ldr	r1, [pc, #56]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007dee:	f000 f821 	bl	8007e34 <HAL_RCC_GetSysClockFreq>
 8007df2:	4602      	mov	r2, r0
 8007df4:	4b0b      	ldr	r3, [pc, #44]	; (8007e24 <HAL_RCC_ClockConfig+0x1c8>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	091b      	lsrs	r3, r3, #4
 8007dfa:	f003 030f 	and.w	r3, r3, #15
 8007dfe:	490a      	ldr	r1, [pc, #40]	; (8007e28 <HAL_RCC_ClockConfig+0x1cc>)
 8007e00:	5ccb      	ldrb	r3, [r1, r3]
 8007e02:	fa22 f303 	lsr.w	r3, r2, r3
 8007e06:	4a09      	ldr	r2, [pc, #36]	; (8007e2c <HAL_RCC_ClockConfig+0x1d0>)
 8007e08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <HAL_RCC_ClockConfig+0x1d4>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fc fa5a 	bl	80042c8 <HAL_InitTick>

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	40023c00 	.word	0x40023c00
 8007e24:	40023800 	.word	0x40023800
 8007e28:	08013448 	.word	0x08013448
 8007e2c:	2000003c 	.word	0x2000003c
 8007e30:	20000040 	.word	0x20000040

08007e34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e38:	b090      	sub	sp, #64	; 0x40
 8007e3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e40:	2300      	movs	r3, #0
 8007e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e44:	2300      	movs	r3, #0
 8007e46:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e4c:	4b59      	ldr	r3, [pc, #356]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	f003 030c 	and.w	r3, r3, #12
 8007e54:	2b08      	cmp	r3, #8
 8007e56:	d00d      	beq.n	8007e74 <HAL_RCC_GetSysClockFreq+0x40>
 8007e58:	2b08      	cmp	r3, #8
 8007e5a:	f200 80a1 	bhi.w	8007fa0 <HAL_RCC_GetSysClockFreq+0x16c>
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_RCC_GetSysClockFreq+0x34>
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d003      	beq.n	8007e6e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e66:	e09b      	b.n	8007fa0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e68:	4b53      	ldr	r3, [pc, #332]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e6c:	e09b      	b.n	8007fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e6e:	4b53      	ldr	r3, [pc, #332]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8007e70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e72:	e098      	b.n	8007fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e74:	4b4f      	ldr	r3, [pc, #316]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e7c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007e7e:	4b4d      	ldr	r3, [pc, #308]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d028      	beq.n	8007edc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e8a:	4b4a      	ldr	r3, [pc, #296]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	099b      	lsrs	r3, r3, #6
 8007e90:	2200      	movs	r2, #0
 8007e92:	623b      	str	r3, [r7, #32]
 8007e94:	627a      	str	r2, [r7, #36]	; 0x24
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e9c:	2100      	movs	r1, #0
 8007e9e:	4b47      	ldr	r3, [pc, #284]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8007ea0:	fb03 f201 	mul.w	r2, r3, r1
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	fb00 f303 	mul.w	r3, r0, r3
 8007eaa:	4413      	add	r3, r2
 8007eac:	4a43      	ldr	r2, [pc, #268]	; (8007fbc <HAL_RCC_GetSysClockFreq+0x188>)
 8007eae:	fba0 1202 	umull	r1, r2, r0, r2
 8007eb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eb4:	460a      	mov	r2, r1
 8007eb6:	62ba      	str	r2, [r7, #40]	; 0x28
 8007eb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eba:	4413      	add	r3, r2
 8007ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	61fa      	str	r2, [r7, #28]
 8007ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007ece:	f7f8 f9ef 	bl	80002b0 <__aeabi_uldivmod>
 8007ed2:	4602      	mov	r2, r0
 8007ed4:	460b      	mov	r3, r1
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eda:	e053      	b.n	8007f84 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007edc:	4b35      	ldr	r3, [pc, #212]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	099b      	lsrs	r3, r3, #6
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	617a      	str	r2, [r7, #20]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007eee:	f04f 0b00 	mov.w	fp, #0
 8007ef2:	4652      	mov	r2, sl
 8007ef4:	465b      	mov	r3, fp
 8007ef6:	f04f 0000 	mov.w	r0, #0
 8007efa:	f04f 0100 	mov.w	r1, #0
 8007efe:	0159      	lsls	r1, r3, #5
 8007f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f04:	0150      	lsls	r0, r2, #5
 8007f06:	4602      	mov	r2, r0
 8007f08:	460b      	mov	r3, r1
 8007f0a:	ebb2 080a 	subs.w	r8, r2, sl
 8007f0e:	eb63 090b 	sbc.w	r9, r3, fp
 8007f12:	f04f 0200 	mov.w	r2, #0
 8007f16:	f04f 0300 	mov.w	r3, #0
 8007f1a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f1e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f22:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f26:	ebb2 0408 	subs.w	r4, r2, r8
 8007f2a:	eb63 0509 	sbc.w	r5, r3, r9
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	00eb      	lsls	r3, r5, #3
 8007f38:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f3c:	00e2      	lsls	r2, r4, #3
 8007f3e:	4614      	mov	r4, r2
 8007f40:	461d      	mov	r5, r3
 8007f42:	eb14 030a 	adds.w	r3, r4, sl
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	eb45 030b 	adc.w	r3, r5, fp
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	028b      	lsls	r3, r1, #10
 8007f5e:	4621      	mov	r1, r4
 8007f60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f64:	4621      	mov	r1, r4
 8007f66:	028a      	lsls	r2, r1, #10
 8007f68:	4610      	mov	r0, r2
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6e:	2200      	movs	r2, #0
 8007f70:	60bb      	str	r3, [r7, #8]
 8007f72:	60fa      	str	r2, [r7, #12]
 8007f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f78:	f7f8 f99a 	bl	80002b0 <__aeabi_uldivmod>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	4613      	mov	r3, r2
 8007f82:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007f84:	4b0b      	ldr	r3, [pc, #44]	; (8007fb4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	0c1b      	lsrs	r3, r3, #16
 8007f8a:	f003 0303 	and.w	r3, r3, #3
 8007f8e:	3301      	adds	r3, #1
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007f94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f9c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f9e:	e002      	b.n	8007fa6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007fa0:	4b05      	ldr	r3, [pc, #20]	; (8007fb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007fa2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007fa4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3740      	adds	r7, #64	; 0x40
 8007fac:	46bd      	mov	sp, r7
 8007fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fb2:	bf00      	nop
 8007fb4:	40023800 	.word	0x40023800
 8007fb8:	00f42400 	.word	0x00f42400
 8007fbc:	017d7840 	.word	0x017d7840

08007fc0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007fc4:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	2000003c 	.word	0x2000003c

08007fd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007fdc:	f7ff fff0 	bl	8007fc0 <HAL_RCC_GetHCLKFreq>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	0a9b      	lsrs	r3, r3, #10
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	4903      	ldr	r1, [pc, #12]	; (8007ffc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fee:	5ccb      	ldrb	r3, [r1, r3]
 8007ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	40023800 	.word	0x40023800
 8007ffc:	08013458 	.word	0x08013458

08008000 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008004:	f7ff ffdc 	bl	8007fc0 <HAL_RCC_GetHCLKFreq>
 8008008:	4602      	mov	r2, r0
 800800a:	4b05      	ldr	r3, [pc, #20]	; (8008020 <HAL_RCC_GetPCLK2Freq+0x20>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	0b5b      	lsrs	r3, r3, #13
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	4903      	ldr	r1, [pc, #12]	; (8008024 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008016:	5ccb      	ldrb	r3, [r1, r3]
 8008018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800801c:	4618      	mov	r0, r3
 800801e:	bd80      	pop	{r7, pc}
 8008020:	40023800 	.word	0x40023800
 8008024:	08013458 	.word	0x08013458

08008028 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	220f      	movs	r2, #15
 8008036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008038:	4b12      	ldr	r3, [pc, #72]	; (8008084 <HAL_RCC_GetClockConfig+0x5c>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 0203 	and.w	r2, r3, #3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008044:	4b0f      	ldr	r3, [pc, #60]	; (8008084 <HAL_RCC_GetClockConfig+0x5c>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <HAL_RCC_GetClockConfig+0x5c>)
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800805c:	4b09      	ldr	r3, [pc, #36]	; (8008084 <HAL_RCC_GetClockConfig+0x5c>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	08db      	lsrs	r3, r3, #3
 8008062:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800806a:	4b07      	ldr	r3, [pc, #28]	; (8008088 <HAL_RCC_GetClockConfig+0x60>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	601a      	str	r2, [r3, #0]
}
 8008076:	bf00      	nop
 8008078:	370c      	adds	r7, #12
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	40023800 	.word	0x40023800
 8008088:	40023c00 	.word	0x40023c00

0800808c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800809c:	2300      	movs	r3, #0
 800809e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80080a0:	2300      	movs	r3, #0
 80080a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80080a4:	2300      	movs	r3, #0
 80080a6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d012      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80080b4:	4b69      	ldr	r3, [pc, #420]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	4a68      	ldr	r2, [pc, #416]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80080be:	6093      	str	r3, [r2, #8]
 80080c0:	4b66      	ldr	r3, [pc, #408]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080c2:	689a      	ldr	r2, [r3, #8]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	4964      	ldr	r1, [pc, #400]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d101      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80080d6:	2301      	movs	r3, #1
 80080d8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d017      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080e6:	4b5d      	ldr	r3, [pc, #372]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f4:	4959      	ldr	r1, [pc, #356]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008104:	d101      	bne.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008106:	2301      	movs	r3, #1
 8008108:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008112:	2301      	movs	r3, #1
 8008114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d017      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008122:	4b4e      	ldr	r3, [pc, #312]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008128:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008130:	494a      	ldr	r1, [pc, #296]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008140:	d101      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008142:	2301      	movs	r3, #1
 8008144:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800814e:	2301      	movs	r3, #1
 8008150:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800815e:	2301      	movs	r3, #1
 8008160:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0320 	and.w	r3, r3, #32
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 808b 	beq.w	8008286 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008170:	4b3a      	ldr	r3, [pc, #232]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008174:	4a39      	ldr	r2, [pc, #228]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817a:	6413      	str	r3, [r2, #64]	; 0x40
 800817c:	4b37      	ldr	r3, [pc, #220]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008184:	60bb      	str	r3, [r7, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008188:	4b35      	ldr	r3, [pc, #212]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a34      	ldr	r2, [pc, #208]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800818e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008194:	f7fc f9d2 	bl	800453c <HAL_GetTick>
 8008198:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800819a:	e008      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800819c:	f7fc f9ce 	bl	800453c <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b64      	cmp	r3, #100	; 0x64
 80081a8:	d901      	bls.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e357      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80081ae:	4b2c      	ldr	r3, [pc, #176]	; (8008260 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d0f0      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80081ba:	4b28      	ldr	r3, [pc, #160]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081c2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d035      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081d2:	693a      	ldr	r2, [r7, #16]
 80081d4:	429a      	cmp	r2, r3
 80081d6:	d02e      	beq.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80081d8:	4b20      	ldr	r3, [pc, #128]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081e0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80081e2:	4b1e      	ldr	r3, [pc, #120]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e6:	4a1d      	ldr	r2, [pc, #116]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081ec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80081ee:	4b1b      	ldr	r3, [pc, #108]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f2:	4a1a      	ldr	r2, [pc, #104]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081f8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80081fa:	4a18      	ldr	r2, [pc, #96]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008200:	4b16      	ldr	r3, [pc, #88]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008204:	f003 0301 	and.w	r3, r3, #1
 8008208:	2b01      	cmp	r3, #1
 800820a:	d114      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fc f996 	bl	800453c <HAL_GetTick>
 8008210:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008212:	e00a      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008214:	f7fc f992 	bl	800453c <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008222:	4293      	cmp	r3, r2
 8008224:	d901      	bls.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e319      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800822a:	4b0c      	ldr	r3, [pc, #48]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d0ee      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800823a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800823e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008242:	d111      	bne.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008244:	4b05      	ldr	r3, [pc, #20]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008250:	4b04      	ldr	r3, [pc, #16]	; (8008264 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008252:	400b      	ands	r3, r1
 8008254:	4901      	ldr	r1, [pc, #4]	; (800825c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008256:	4313      	orrs	r3, r2
 8008258:	608b      	str	r3, [r1, #8]
 800825a:	e00b      	b.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800825c:	40023800 	.word	0x40023800
 8008260:	40007000 	.word	0x40007000
 8008264:	0ffffcff 	.word	0x0ffffcff
 8008268:	4baa      	ldr	r3, [pc, #680]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	4aa9      	ldr	r2, [pc, #676]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800826e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008272:	6093      	str	r3, [r2, #8]
 8008274:	4ba7      	ldr	r3, [pc, #668]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008280:	49a4      	ldr	r1, [pc, #656]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008282:	4313      	orrs	r3, r2
 8008284:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	d010      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008292:	4ba0      	ldr	r3, [pc, #640]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008298:	4a9e      	ldr	r2, [pc, #632]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800829a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800829e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80082a2:	4b9c      	ldr	r3, [pc, #624]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	4999      	ldr	r1, [pc, #612]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00a      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80082c0:	4b94      	ldr	r3, [pc, #592]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082ce:	4991      	ldr	r1, [pc, #580]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00a      	beq.n	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80082e2:	4b8c      	ldr	r3, [pc, #560]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082f0:	4988      	ldr	r1, [pc, #544]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00a      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008304:	4b83      	ldr	r3, [pc, #524]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008312:	4980      	ldr	r1, [pc, #512]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008314:	4313      	orrs	r3, r2
 8008316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008326:	4b7b      	ldr	r3, [pc, #492]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008334:	4977      	ldr	r1, [pc, #476]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00a      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008348:	4b72      	ldr	r3, [pc, #456]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834e:	f023 0203 	bic.w	r2, r3, #3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008356:	496f      	ldr	r1, [pc, #444]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008358:	4313      	orrs	r3, r2
 800835a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008366:	2b00      	cmp	r3, #0
 8008368:	d00a      	beq.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800836a:	4b6a      	ldr	r3, [pc, #424]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	f023 020c 	bic.w	r2, r3, #12
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008378:	4966      	ldr	r1, [pc, #408]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800837a:	4313      	orrs	r3, r2
 800837c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800838c:	4b61      	ldr	r3, [pc, #388]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800838e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008392:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839a:	495e      	ldr	r1, [pc, #376]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800839c:	4313      	orrs	r3, r2
 800839e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80083ae:	4b59      	ldr	r3, [pc, #356]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083bc:	4955      	ldr	r1, [pc, #340]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80083d0:	4b50      	ldr	r3, [pc, #320]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083de:	494d      	ldr	r1, [pc, #308]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083e0:	4313      	orrs	r3, r2
 80083e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00a      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80083f2:	4b48      	ldr	r3, [pc, #288]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80083f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008400:	4944      	ldr	r1, [pc, #272]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008402:	4313      	orrs	r3, r2
 8008404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008410:	2b00      	cmp	r3, #0
 8008412:	d00a      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008414:	4b3f      	ldr	r3, [pc, #252]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008422:	493c      	ldr	r1, [pc, #240]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008424:	4313      	orrs	r3, r2
 8008426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00a      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008436:	4b37      	ldr	r3, [pc, #220]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800843c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008444:	4933      	ldr	r1, [pc, #204]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008446:	4313      	orrs	r3, r2
 8008448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00a      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008458:	4b2e      	ldr	r3, [pc, #184]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800845a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800845e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008466:	492b      	ldr	r1, [pc, #172]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008468:	4313      	orrs	r3, r2
 800846a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d011      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800847a:	4b26      	ldr	r3, [pc, #152]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800847c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008480:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008488:	4922      	ldr	r1, [pc, #136]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800848a:	4313      	orrs	r3, r2
 800848c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008494:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008498:	d101      	bne.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800849a:	2301      	movs	r3, #1
 800849c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80084aa:	2301      	movs	r3, #1
 80084ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084ba:	4b16      	ldr	r3, [pc, #88]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c8:	4912      	ldr	r1, [pc, #72]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ca:	4313      	orrs	r3, r2
 80084cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80084dc:	4b0d      	ldr	r3, [pc, #52]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084ec:	4909      	ldr	r1, [pc, #36]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d006      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008502:	2b00      	cmp	r3, #0
 8008504:	f000 80d9 	beq.w	80086ba <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008508:	4b02      	ldr	r3, [pc, #8]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a01      	ldr	r2, [pc, #4]	; (8008514 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008512:	e001      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008514:	40023800 	.word	0x40023800
 8008518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800851a:	f7fc f80f 	bl	800453c <HAL_GetTick>
 800851e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008520:	e008      	b.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008522:	f7fc f80b 	bl	800453c <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b64      	cmp	r3, #100	; 0x64
 800852e:	d901      	bls.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e194      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008534:	4b6c      	ldr	r3, [pc, #432]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1f0      	bne.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d021      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11d      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008554:	4b64      	ldr	r3, [pc, #400]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800855a:	0c1b      	lsrs	r3, r3, #16
 800855c:	f003 0303 	and.w	r3, r3, #3
 8008560:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008562:	4b61      	ldr	r3, [pc, #388]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008568:	0e1b      	lsrs	r3, r3, #24
 800856a:	f003 030f 	and.w	r3, r3, #15
 800856e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	019a      	lsls	r2, r3, #6
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	041b      	lsls	r3, r3, #16
 800857a:	431a      	orrs	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	061b      	lsls	r3, r3, #24
 8008580:	431a      	orrs	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	071b      	lsls	r3, r3, #28
 8008588:	4957      	ldr	r1, [pc, #348]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d004      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085a4:	d00a      	beq.n	80085bc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d02e      	beq.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ba:	d129      	bne.n	8008610 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80085bc:	4b4a      	ldr	r3, [pc, #296]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085c2:	0c1b      	lsrs	r3, r3, #16
 80085c4:	f003 0303 	and.w	r3, r3, #3
 80085c8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80085ca:	4b47      	ldr	r3, [pc, #284]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085d0:	0f1b      	lsrs	r3, r3, #28
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	019a      	lsls	r2, r3, #6
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	431a      	orrs	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	061b      	lsls	r3, r3, #24
 80085ea:	431a      	orrs	r2, r3
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	071b      	lsls	r3, r3, #28
 80085f0:	493d      	ldr	r1, [pc, #244]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085f2:	4313      	orrs	r3, r2
 80085f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80085f8:	4b3b      	ldr	r3, [pc, #236]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80085fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fe:	f023 021f 	bic.w	r2, r3, #31
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008606:	3b01      	subs	r3, #1
 8008608:	4937      	ldr	r1, [pc, #220]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800860a:	4313      	orrs	r3, r2
 800860c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d01d      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800861c:	4b32      	ldr	r3, [pc, #200]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800861e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008622:	0e1b      	lsrs	r3, r3, #24
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800862a:	4b2f      	ldr	r3, [pc, #188]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800862c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008630:	0f1b      	lsrs	r3, r3, #28
 8008632:	f003 0307 	and.w	r3, r3, #7
 8008636:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	019a      	lsls	r2, r3, #6
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	041b      	lsls	r3, r3, #16
 8008644:	431a      	orrs	r2, r3
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	061b      	lsls	r3, r3, #24
 800864a:	431a      	orrs	r2, r3
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	071b      	lsls	r3, r3, #28
 8008650:	4925      	ldr	r1, [pc, #148]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d011      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	019a      	lsls	r2, r3, #6
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	041b      	lsls	r3, r3, #16
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	071b      	lsls	r3, r3, #28
 8008680:	4919      	ldr	r1, [pc, #100]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008682:	4313      	orrs	r3, r2
 8008684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008688:	4b17      	ldr	r3, [pc, #92]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a16      	ldr	r2, [pc, #88]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800868e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008692:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008694:	f7fb ff52 	bl	800453c <HAL_GetTick>
 8008698:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800869a:	e008      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800869c:	f7fb ff4e 	bl	800453c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	2b64      	cmp	r3, #100	; 0x64
 80086a8:	d901      	bls.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086aa:	2303      	movs	r3, #3
 80086ac:	e0d7      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80086ae:	4b0e      	ldr	r3, [pc, #56]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d0f0      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	f040 80cd 	bne.w	800885c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80086c2:	4b09      	ldr	r3, [pc, #36]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a08      	ldr	r2, [pc, #32]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80086c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086ce:	f7fb ff35 	bl	800453c <HAL_GetTick>
 80086d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086d4:	e00a      	b.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80086d6:	f7fb ff31 	bl	800453c <HAL_GetTick>
 80086da:	4602      	mov	r2, r0
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	1ad3      	subs	r3, r2, r3
 80086e0:	2b64      	cmp	r3, #100	; 0x64
 80086e2:	d903      	bls.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80086e4:	2303      	movs	r3, #3
 80086e6:	e0ba      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80086e8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80086ec:	4b5e      	ldr	r3, [pc, #376]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f8:	d0ed      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008716:	2b00      	cmp	r3, #0
 8008718:	d02e      	beq.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871e:	2b00      	cmp	r3, #0
 8008720:	d12a      	bne.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008722:	4b51      	ldr	r3, [pc, #324]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008728:	0c1b      	lsrs	r3, r3, #16
 800872a:	f003 0303 	and.w	r3, r3, #3
 800872e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008730:	4b4d      	ldr	r3, [pc, #308]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008736:	0f1b      	lsrs	r3, r3, #28
 8008738:	f003 0307 	and.w	r3, r3, #7
 800873c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	019a      	lsls	r2, r3, #6
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	041b      	lsls	r3, r3, #16
 8008748:	431a      	orrs	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	061b      	lsls	r3, r3, #24
 8008750:	431a      	orrs	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	071b      	lsls	r3, r3, #28
 8008756:	4944      	ldr	r1, [pc, #272]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008758:	4313      	orrs	r3, r2
 800875a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800875e:	4b42      	ldr	r3, [pc, #264]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008764:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	3b01      	subs	r3, #1
 800876e:	021b      	lsls	r3, r3, #8
 8008770:	493d      	ldr	r1, [pc, #244]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008772:	4313      	orrs	r3, r2
 8008774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d022      	beq.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800878c:	d11d      	bne.n	80087ca <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800878e:	4b36      	ldr	r3, [pc, #216]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008794:	0e1b      	lsrs	r3, r3, #24
 8008796:	f003 030f 	and.w	r3, r3, #15
 800879a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800879c:	4b32      	ldr	r3, [pc, #200]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800879e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a2:	0f1b      	lsrs	r3, r3, #28
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	695b      	ldr	r3, [r3, #20]
 80087ae:	019a      	lsls	r2, r3, #6
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	041b      	lsls	r3, r3, #16
 80087b6:	431a      	orrs	r2, r3
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	061b      	lsls	r3, r3, #24
 80087bc:	431a      	orrs	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	071b      	lsls	r3, r3, #28
 80087c2:	4929      	ldr	r1, [pc, #164]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087c4:	4313      	orrs	r3, r2
 80087c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d028      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80087d6:	4b24      	ldr	r3, [pc, #144]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087dc:	0e1b      	lsrs	r3, r3, #24
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80087e4:	4b20      	ldr	r3, [pc, #128]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80087e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ea:	0c1b      	lsrs	r3, r3, #16
 80087ec:	f003 0303 	and.w	r3, r3, #3
 80087f0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	695b      	ldr	r3, [r3, #20]
 80087f6:	019a      	lsls	r2, r3, #6
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	041b      	lsls	r3, r3, #16
 80087fc:	431a      	orrs	r2, r3
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	061b      	lsls	r3, r3, #24
 8008802:	431a      	orrs	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	69db      	ldr	r3, [r3, #28]
 8008808:	071b      	lsls	r3, r3, #28
 800880a:	4917      	ldr	r1, [pc, #92]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800880c:	4313      	orrs	r3, r2
 800880e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008812:	4b15      	ldr	r3, [pc, #84]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	4911      	ldr	r1, [pc, #68]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008828:	4b0f      	ldr	r3, [pc, #60]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a0e      	ldr	r2, [pc, #56]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800882e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008832:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008834:	f7fb fe82 	bl	800453c <HAL_GetTick>
 8008838:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800883a:	e008      	b.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800883c:	f7fb fe7e 	bl	800453c <HAL_GetTick>
 8008840:	4602      	mov	r2, r0
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	2b64      	cmp	r3, #100	; 0x64
 8008848:	d901      	bls.n	800884e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800884a:	2303      	movs	r3, #3
 800884c:	e007      	b.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800884e:	4b06      	ldr	r3, [pc, #24]	; (8008868 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800885a:	d1ef      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3720      	adds	r7, #32
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	40023800 	.word	0x40023800

0800886c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d101      	bne.n	800887e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	e081      	b.n	8008982 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	7f5b      	ldrb	r3, [r3, #29]
 8008882:	b2db      	uxtb	r3, r3
 8008884:	2b00      	cmp	r3, #0
 8008886:	d105      	bne.n	8008894 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f7fb fa46 	bl	8003d20 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	22ca      	movs	r2, #202	; 0xca
 80088a0:	625a      	str	r2, [r3, #36]	; 0x24
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2253      	movs	r2, #83	; 0x53
 80088a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fb16 	bl	8008edc <RTC_EnterInitMode>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d008      	beq.n	80088c8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	22ff      	movs	r2, #255	; 0xff
 80088bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2204      	movs	r2, #4
 80088c2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e05c      	b.n	8008982 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6899      	ldr	r1, [r3, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	4b2e      	ldr	r3, [pc, #184]	; (800898c <HAL_RTC_Init+0x120>)
 80088d4:	400b      	ands	r3, r1
 80088d6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6899      	ldr	r1, [r3, #8]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685a      	ldr	r2, [r3, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	691b      	ldr	r3, [r3, #16]
 80088e6:	431a      	orrs	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	431a      	orrs	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	430a      	orrs	r2, r1
 80088f4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	68d2      	ldr	r2, [r2, #12]
 80088fe:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6919      	ldr	r1, [r3, #16]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	041a      	lsls	r2, r3, #16
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	430a      	orrs	r2, r1
 8008912:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008922:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10e      	bne.n	8008950 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 faaa 	bl	8008e8c <HAL_RTC_WaitForSynchro>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d008      	beq.n	8008950 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	22ff      	movs	r2, #255	; 0xff
 8008944:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2204      	movs	r2, #4
 800894a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e018      	b.n	8008982 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0208 	bic.w	r2, r2, #8
 800895e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	430a      	orrs	r2, r1
 8008970:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	22ff      	movs	r2, #255	; 0xff
 8008978:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008980:	2300      	movs	r3, #0
  }
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	ff8fffbf 	.word	0xff8fffbf

08008990 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008990:	b590      	push	{r4, r7, lr}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	7f1b      	ldrb	r3, [r3, #28]
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d101      	bne.n	80089ac <HAL_RTC_SetTime+0x1c>
 80089a8:	2302      	movs	r3, #2
 80089aa:	e0a8      	b.n	8008afe <HAL_RTC_SetTime+0x16e>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2202      	movs	r2, #2
 80089b6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d126      	bne.n	8008a0c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d102      	bne.n	80089d2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2200      	movs	r2, #0
 80089d0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 faac 	bl	8008f34 <RTC_ByteToBcd2>
 80089dc:	4603      	mov	r3, r0
 80089de:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	785b      	ldrb	r3, [r3, #1]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 faa5 	bl	8008f34 <RTC_ByteToBcd2>
 80089ea:	4603      	mov	r3, r0
 80089ec:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80089ee:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	789b      	ldrb	r3, [r3, #2]
 80089f4:	4618      	mov	r0, r3
 80089f6:	f000 fa9d 	bl	8008f34 <RTC_ByteToBcd2>
 80089fa:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80089fc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	7b1b      	ldrb	r3, [r3, #12]
 8008a04:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008a06:	4313      	orrs	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	e018      	b.n	8008a3e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	689b      	ldr	r3, [r3, #8]
 8008a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d102      	bne.n	8008a20 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008a2c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008a32:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	7b1b      	ldrb	r3, [r3, #12]
 8008a38:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	22ca      	movs	r2, #202	; 0xca
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	2253      	movs	r2, #83	; 0x53
 8008a4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f000 fa44 	bl	8008edc <RTC_EnterInitMode>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	22ff      	movs	r2, #255	; 0xff
 8008a60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2204      	movs	r2, #4
 8008a66:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e045      	b.n	8008afe <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	6979      	ldr	r1, [r7, #20]
 8008a78:	4b23      	ldr	r3, [pc, #140]	; (8008b08 <HAL_RTC_SetTime+0x178>)
 8008a7a:	400b      	ands	r3, r1
 8008a7c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	689a      	ldr	r2, [r3, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008a8c:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	6899      	ldr	r1, [r3, #8]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	691a      	ldr	r2, [r3, #16]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	695b      	ldr	r3, [r3, #20]
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ab4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	689b      	ldr	r3, [r3, #8]
 8008abc:	f003 0320 	and.w	r3, r3, #32
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d111      	bne.n	8008ae8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f9e1 	bl	8008e8c <HAL_RTC_WaitForSynchro>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d00b      	beq.n	8008ae8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	2204      	movs	r2, #4
 8008adc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008ae4:	2301      	movs	r3, #1
 8008ae6:	e00a      	b.n	8008afe <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	22ff      	movs	r2, #255	; 0xff
 8008aee:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2201      	movs	r2, #1
 8008af4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2200      	movs	r2, #0
 8008afa:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008afc:	2300      	movs	r3, #0
  }
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd90      	pop	{r4, r7, pc}
 8008b06:	bf00      	nop
 8008b08:	007f7f7f 	.word	0x007f7f7f

08008b0c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008b0c:	b590      	push	{r4, r7, lr}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	7f1b      	ldrb	r3, [r3, #28]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d101      	bne.n	8008b28 <HAL_RTC_SetDate+0x1c>
 8008b24:	2302      	movs	r3, #2
 8008b26:	e092      	b.n	8008c4e <HAL_RTC_SetDate+0x142>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2202      	movs	r2, #2
 8008b32:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10e      	bne.n	8008b58 <HAL_RTC_SetDate+0x4c>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	f003 0310 	and.w	r3, r3, #16
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d008      	beq.n	8008b58 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	f023 0310 	bic.w	r3, r3, #16
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	330a      	adds	r3, #10
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d11c      	bne.n	8008b98 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	78db      	ldrb	r3, [r3, #3]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f9e6 	bl	8008f34 <RTC_ByteToBcd2>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	785b      	ldrb	r3, [r3, #1]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 f9df 	bl	8008f34 <RTC_ByteToBcd2>
 8008b76:	4603      	mov	r3, r0
 8008b78:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b7a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	789b      	ldrb	r3, [r3, #2]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 f9d7 	bl	8008f34 <RTC_ByteToBcd2>
 8008b86:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008b88:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e00e      	b.n	8008bb6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	78db      	ldrb	r3, [r3, #3]
 8008b9c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	785b      	ldrb	r3, [r3, #1]
 8008ba2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008ba4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008ba6:	68ba      	ldr	r2, [r7, #8]
 8008ba8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008baa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	22ca      	movs	r2, #202	; 0xca
 8008bbc:	625a      	str	r2, [r3, #36]	; 0x24
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2253      	movs	r2, #83	; 0x53
 8008bc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 f988 	bl	8008edc <RTC_EnterInitMode>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00b      	beq.n	8008bea <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	22ff      	movs	r2, #255	; 0xff
 8008bd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2204      	movs	r2, #4
 8008bde:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	e031      	b.n	8008c4e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	6979      	ldr	r1, [r7, #20]
 8008bf0:	4b19      	ldr	r3, [pc, #100]	; (8008c58 <HAL_RTC_SetDate+0x14c>)
 8008bf2:	400b      	ands	r3, r1
 8008bf4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68da      	ldr	r2, [r3, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	f003 0320 	and.w	r3, r3, #32
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d111      	bne.n	8008c38 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 f939 	bl	8008e8c <HAL_RTC_WaitForSynchro>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d00b      	beq.n	8008c38 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	22ff      	movs	r2, #255	; 0xff
 8008c26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	2204      	movs	r2, #4
 8008c2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e00a      	b.n	8008c4e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	22ff      	movs	r2, #255	; 0xff
 8008c3e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2201      	movs	r2, #1
 8008c44:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
  }
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd90      	pop	{r4, r7, pc}
 8008c56:	bf00      	nop
 8008c58:	00ffff3f 	.word	0x00ffff3f

08008c5c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008c5c:	b590      	push	{r4, r7, lr}
 8008c5e:	b089      	sub	sp, #36	; 0x24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61fb      	str	r3, [r7, #28]
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	7f1b      	ldrb	r3, [r3, #28]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_RTC_SetAlarm+0x24>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e101      	b.n	8008e84 <HAL_RTC_SetAlarm+0x228>
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2201      	movs	r2, #1
 8008c84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	2202      	movs	r2, #2
 8008c8a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d137      	bne.n	8008d02 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	781b      	ldrb	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f000 f942 	bl	8008f34 <RTC_ByteToBcd2>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	785b      	ldrb	r3, [r3, #1]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 f93b 	bl	8008f34 <RTC_ByteToBcd2>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008cc2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	789b      	ldrb	r3, [r3, #2]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f000 f933 	bl	8008f34 <RTC_ByteToBcd2>
 8008cce:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008cd0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	7b1b      	ldrb	r3, [r3, #12]
 8008cd8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008cda:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 f925 	bl	8008f34 <RTC_ByteToBcd2>
 8008cea:	4603      	mov	r3, r0
 8008cec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008cee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008cf6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	61fb      	str	r3, [r7, #28]
 8008d00:	e023      	b.n	8008d4a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2200      	movs	r2, #0
 8008d14:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	785b      	ldrb	r3, [r3, #1]
 8008d20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008d22:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008d24:	68ba      	ldr	r2, [r7, #8]
 8008d26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008d28:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	7b1b      	ldrb	r3, [r3, #12]
 8008d2e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008d30:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008d38:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008d3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008d40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008d46:	4313      	orrs	r3, r2
 8008d48:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	22ca      	movs	r2, #202	; 0xca
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	2253      	movs	r2, #83	; 0x53
 8008d64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6e:	d13f      	bne.n	8008df0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d7e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	689a      	ldr	r2, [r3, #8]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008d8e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d90:	f7fb fbd4 	bl	800453c <HAL_GetTick>
 8008d94:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008d96:	e013      	b.n	8008dc0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d98:	f7fb fbd0 	bl	800453c <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008da6:	d90b      	bls.n	8008dc0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	22ff      	movs	r2, #255	; 0xff
 8008dae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2203      	movs	r2, #3
 8008db4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e061      	b.n	8008e84 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d0e4      	beq.n	8008d98 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	69fa      	ldr	r2, [r7, #28]
 8008dd4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	697a      	ldr	r2, [r7, #20]
 8008ddc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	689a      	ldr	r2, [r3, #8]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dec:	609a      	str	r2, [r3, #8]
 8008dee:	e03e      	b.n	8008e6e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	689a      	ldr	r2, [r3, #8]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008dfe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e0e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008e10:	f7fb fb94 	bl	800453c <HAL_GetTick>
 8008e14:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008e16:	e013      	b.n	8008e40 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008e18:	f7fb fb90 	bl	800453c <HAL_GetTick>
 8008e1c:	4602      	mov	r2, r0
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	1ad3      	subs	r3, r2, r3
 8008e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e26:	d90b      	bls.n	8008e40 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	22ff      	movs	r2, #255	; 0xff
 8008e2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2203      	movs	r2, #3
 8008e34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e021      	b.n	8008e84 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	f003 0302 	and.w	r3, r3, #2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0e4      	beq.n	8008e18 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69fa      	ldr	r2, [r7, #28]
 8008e54:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	697a      	ldr	r2, [r7, #20]
 8008e5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	689a      	ldr	r2, [r3, #8]
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	22ff      	movs	r2, #255	; 0xff
 8008e74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3724      	adds	r7, #36	; 0x24
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd90      	pop	{r4, r7, pc}

08008e8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68da      	ldr	r2, [r3, #12]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ea6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ea8:	f7fb fb48 	bl	800453c <HAL_GetTick>
 8008eac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008eae:	e009      	b.n	8008ec4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008eb0:	f7fb fb44 	bl	800453c <HAL_GetTick>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e007      	b.n	8008ed4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68db      	ldr	r3, [r3, #12]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0ee      	beq.n	8008eb0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d119      	bne.n	8008f2a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f04f 32ff 	mov.w	r2, #4294967295
 8008efe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008f00:	f7fb fb1c 	bl	800453c <HAL_GetTick>
 8008f04:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f06:	e009      	b.n	8008f1c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008f08:	f7fb fb18 	bl	800453c <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f16:	d901      	bls.n	8008f1c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008f18:	2303      	movs	r3, #3
 8008f1a:	e007      	b.n	8008f2c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d0ee      	beq.n	8008f08 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008f42:	e005      	b.n	8008f50 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	3301      	adds	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	3b0a      	subs	r3, #10
 8008f4e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008f50:	79fb      	ldrb	r3, [r7, #7]
 8008f52:	2b09      	cmp	r3, #9
 8008f54:	d8f6      	bhi.n	8008f44 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	011b      	lsls	r3, r3, #4
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	b2db      	uxtb	r3, r3
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3714      	adds	r7, #20
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b087      	sub	sp, #28
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	7f1b      	ldrb	r3, [r3, #28]
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	d101      	bne.n	8008f8c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e03e      	b.n	800900a <HAL_RTCEx_SetTimeStamp+0x9a>
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	4b1e      	ldr	r3, [pc, #120]	; (8009018 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	22ca      	movs	r2, #202	; 0xca
 8008fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2253      	movs	r2, #83	; 0x53
 8008fba:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f022 0206 	bic.w	r2, r2, #6
 8008fca:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ff2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	22ff      	movs	r2, #255	; 0xff
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2201      	movs	r2, #1
 8009000:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	371c      	adds	r7, #28
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	fffff7f7 	.word	0xfffff7f7

0800901c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d101      	bne.n	8009030 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e025      	b.n	800907c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009036:	b2db      	uxtb	r3, r3
 8009038:	2b00      	cmp	r3, #0
 800903a:	d106      	bne.n	800904a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7fb f935 	bl	80042b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2202      	movs	r2, #2
 800904e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3304      	adds	r3, #4
 800905a:	4619      	mov	r1, r3
 800905c:	4610      	mov	r0, r2
 800905e:	f002 f957 	bl	800b310 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6818      	ldr	r0, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	461a      	mov	r2, r3
 800906c:	6839      	ldr	r1, [r7, #0]
 800906e:	f002 f9ab 	bl	800b3c8 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}

08009084 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009096:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d101      	bne.n	80090a2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800909e:	2302      	movs	r3, #2
 80090a0:	e021      	b.n	80090e6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80090a2:	7dfb      	ldrb	r3, [r7, #23]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d002      	beq.n	80090ae <HAL_SDRAM_SendCommand+0x2a>
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	2b05      	cmp	r3, #5
 80090ac:	d118      	bne.n	80090e0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	2202      	movs	r2, #2
 80090b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	68b9      	ldr	r1, [r7, #8]
 80090be:	4618      	mov	r0, r3
 80090c0:	f002 f9ec 	bl	800b49c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	d104      	bne.n	80090d6 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2205      	movs	r2, #5
 80090d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80090d4:	e006      	b.n	80090e4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80090de:	e001      	b.n	80090e4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3718      	adds	r7, #24
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b082      	sub	sp, #8
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
 80090f6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b02      	cmp	r3, #2
 8009102:	d101      	bne.n	8009108 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009104:	2302      	movs	r3, #2
 8009106:	e016      	b.n	8009136 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b01      	cmp	r3, #1
 8009112:	d10f      	bne.n	8009134 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2202      	movs	r2, #2
 8009118:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	4618      	mov	r0, r3
 8009124:	f002 f9de 	bl	800b4e4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2201      	movs	r2, #1
 800912c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	e000      	b.n	8009136 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009134:	2301      	movs	r3, #1
}
 8009136:	4618      	mov	r0, r3
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b084      	sub	sp, #16
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800914c:	2301      	movs	r3, #1
 800914e:	e09d      	b.n	800928c <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	d108      	bne.n	800916a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009160:	d009      	beq.n	8009176 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	61da      	str	r2, [r3, #28]
 8009168:	e005      	b.n	8009176 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2200      	movs	r2, #0
 8009174:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2200      	movs	r2, #0
 800917a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009182:	b2db      	uxtb	r3, r3
 8009184:	2b00      	cmp	r3, #0
 8009186:	d106      	bne.n	8009196 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7fa fdf3 	bl	8003d7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2202      	movs	r2, #2
 800919a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	681a      	ldr	r2, [r3, #0]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091b6:	d902      	bls.n	80091be <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e002      	b.n	80091c4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091cc:	d007      	beq.n	80091de <HAL_SPI_Init+0xa0>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091d6:	d002      	beq.n	80091de <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80091ee:	431a      	orrs	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	431a      	orrs	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0301 	and.w	r3, r3, #1
 8009202:	431a      	orrs	r2, r3
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800920c:	431a      	orrs	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	69db      	ldr	r3, [r3, #28]
 8009212:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009216:	431a      	orrs	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a1b      	ldr	r3, [r3, #32]
 800921c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009220:	ea42 0103 	orr.w	r1, r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009228:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	430a      	orrs	r2, r1
 8009232:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	0c1b      	lsrs	r3, r3, #16
 800923a:	f003 0204 	and.w	r2, r3, #4
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	f003 0310 	and.w	r3, r3, #16
 8009246:	431a      	orrs	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800924c:	f003 0308 	and.w	r3, r3, #8
 8009250:	431a      	orrs	r2, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800925a:	ea42 0103 	orr.w	r1, r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69da      	ldr	r2, [r3, #28]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800927a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e049      	b.n	800933a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fa fdc0 	bl	8003e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	3304      	adds	r3, #4
 80092d0:	4619      	mov	r1, r3
 80092d2:	4610      	mov	r0, r2
 80092d4:	f000 fac0 	bl	8009858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2201      	movs	r2, #1
 80092dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2201      	movs	r2, #1
 80092e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2201      	movs	r2, #1
 8009324:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2201      	movs	r2, #1
 8009334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
	...

08009344 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b01      	cmp	r3, #1
 8009356:	d001      	beq.n	800935c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	e054      	b.n	8009406 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2202      	movs	r2, #2
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68da      	ldr	r2, [r3, #12]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f042 0201 	orr.w	r2, r2, #1
 8009372:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a26      	ldr	r2, [pc, #152]	; (8009414 <HAL_TIM_Base_Start_IT+0xd0>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d022      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x80>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009386:	d01d      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x80>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4a22      	ldr	r2, [pc, #136]	; (8009418 <HAL_TIM_Base_Start_IT+0xd4>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d018      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x80>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a21      	ldr	r2, [pc, #132]	; (800941c <HAL_TIM_Base_Start_IT+0xd8>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d013      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x80>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a1f      	ldr	r2, [pc, #124]	; (8009420 <HAL_TIM_Base_Start_IT+0xdc>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d00e      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x80>
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4a1e      	ldr	r2, [pc, #120]	; (8009424 <HAL_TIM_Base_Start_IT+0xe0>)
 80093ac:	4293      	cmp	r3, r2
 80093ae:	d009      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x80>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a1c      	ldr	r2, [pc, #112]	; (8009428 <HAL_TIM_Base_Start_IT+0xe4>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d004      	beq.n	80093c4 <HAL_TIM_Base_Start_IT+0x80>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a1b      	ldr	r2, [pc, #108]	; (800942c <HAL_TIM_Base_Start_IT+0xe8>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d115      	bne.n	80093f0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	689a      	ldr	r2, [r3, #8]
 80093ca:	4b19      	ldr	r3, [pc, #100]	; (8009430 <HAL_TIM_Base_Start_IT+0xec>)
 80093cc:	4013      	ands	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b06      	cmp	r3, #6
 80093d4:	d015      	beq.n	8009402 <HAL_TIM_Base_Start_IT+0xbe>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093dc:	d011      	beq.n	8009402 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f042 0201 	orr.w	r2, r2, #1
 80093ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093ee:	e008      	b.n	8009402 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f042 0201 	orr.w	r2, r2, #1
 80093fe:	601a      	str	r2, [r3, #0]
 8009400:	e000      	b.n	8009404 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009402:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009404:	2300      	movs	r3, #0
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	40010000 	.word	0x40010000
 8009418:	40000400 	.word	0x40000400
 800941c:	40000800 	.word	0x40000800
 8009420:	40000c00 	.word	0x40000c00
 8009424:	40010400 	.word	0x40010400
 8009428:	40014000 	.word	0x40014000
 800942c:	40001800 	.word	0x40001800
 8009430:	00010007 	.word	0x00010007

08009434 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b082      	sub	sp, #8
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b02      	cmp	r3, #2
 8009448:	d122      	bne.n	8009490 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b02      	cmp	r3, #2
 8009456:	d11b      	bne.n	8009490 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0202 	mvn.w	r2, #2
 8009460:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	2201      	movs	r2, #1
 8009466:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	f003 0303 	and.w	r3, r3, #3
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	f000 f9d0 	bl	800981c <HAL_TIM_IC_CaptureCallback>
 800947c:	e005      	b.n	800948a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9c2 	bl	8009808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f9d3 	bl	8009830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b04      	cmp	r3, #4
 800949c:	d122      	bne.n	80094e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	f003 0304 	and.w	r3, r3, #4
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	d11b      	bne.n	80094e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f06f 0204 	mvn.w	r2, #4
 80094b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2202      	movs	r2, #2
 80094ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f9a6 	bl	800981c <HAL_TIM_IC_CaptureCallback>
 80094d0:	e005      	b.n	80094de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f998 	bl	8009808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 f9a9 	bl	8009830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	691b      	ldr	r3, [r3, #16]
 80094ea:	f003 0308 	and.w	r3, r3, #8
 80094ee:	2b08      	cmp	r3, #8
 80094f0:	d122      	bne.n	8009538 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	f003 0308 	and.w	r3, r3, #8
 80094fc:	2b08      	cmp	r3, #8
 80094fe:	d11b      	bne.n	8009538 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f06f 0208 	mvn.w	r2, #8
 8009508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2204      	movs	r2, #4
 800950e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f97c 	bl	800981c <HAL_TIM_IC_CaptureCallback>
 8009524:	e005      	b.n	8009532 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f000 f96e 	bl	8009808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f97f 	bl	8009830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0310 	and.w	r3, r3, #16
 8009542:	2b10      	cmp	r3, #16
 8009544:	d122      	bne.n	800958c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	68db      	ldr	r3, [r3, #12]
 800954c:	f003 0310 	and.w	r3, r3, #16
 8009550:	2b10      	cmp	r3, #16
 8009552:	d11b      	bne.n	800958c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f06f 0210 	mvn.w	r2, #16
 800955c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2208      	movs	r2, #8
 8009562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f952 	bl	800981c <HAL_TIM_IC_CaptureCallback>
 8009578:	e005      	b.n	8009586 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f944 	bl	8009808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f955 	bl	8009830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	2200      	movs	r2, #0
 800958a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b01      	cmp	r3, #1
 8009598:	d10e      	bne.n	80095b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d107      	bne.n	80095b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f06f 0201 	mvn.w	r2, #1
 80095b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7f8 fec0 	bl	8002338 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095c2:	2b80      	cmp	r3, #128	; 0x80
 80095c4:	d10e      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095d0:	2b80      	cmp	r3, #128	; 0x80
 80095d2:	d107      	bne.n	80095e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095de:	6878      	ldr	r0, [r7, #4]
 80095e0:	f000 fb0c 	bl	8009bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095f2:	d10e      	bne.n	8009612 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095fe:	2b80      	cmp	r3, #128	; 0x80
 8009600:	d107      	bne.n	8009612 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800960a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f000 faff 	bl	8009c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800961c:	2b40      	cmp	r3, #64	; 0x40
 800961e:	d10e      	bne.n	800963e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962a:	2b40      	cmp	r3, #64	; 0x40
 800962c:	d107      	bne.n	800963e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f903 	bl	8009844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	f003 0320 	and.w	r3, r3, #32
 8009648:	2b20      	cmp	r3, #32
 800964a:	d10e      	bne.n	800966a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f003 0320 	and.w	r3, r3, #32
 8009656:	2b20      	cmp	r3, #32
 8009658:	d107      	bne.n	800966a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f06f 0220 	mvn.w	r2, #32
 8009662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f000 fabf 	bl	8009be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
	...

08009674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800967e:	2300      	movs	r3, #0
 8009680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009688:	2b01      	cmp	r3, #1
 800968a:	d101      	bne.n	8009690 <HAL_TIM_ConfigClockSource+0x1c>
 800968c:	2302      	movs	r3, #2
 800968e:	e0b4      	b.n	80097fa <HAL_TIM_ConfigClockSource+0x186>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2202      	movs	r2, #2
 800969c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	4b56      	ldr	r3, [pc, #344]	; (8009804 <HAL_TIM_ConfigClockSource+0x190>)
 80096ac:	4013      	ands	r3, r2
 80096ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096b0:	68bb      	ldr	r3, [r7, #8]
 80096b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096c8:	d03e      	beq.n	8009748 <HAL_TIM_ConfigClockSource+0xd4>
 80096ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096ce:	f200 8087 	bhi.w	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096d6:	f000 8086 	beq.w	80097e6 <HAL_TIM_ConfigClockSource+0x172>
 80096da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096de:	d87f      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e0:	2b70      	cmp	r3, #112	; 0x70
 80096e2:	d01a      	beq.n	800971a <HAL_TIM_ConfigClockSource+0xa6>
 80096e4:	2b70      	cmp	r3, #112	; 0x70
 80096e6:	d87b      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096e8:	2b60      	cmp	r3, #96	; 0x60
 80096ea:	d050      	beq.n	800978e <HAL_TIM_ConfigClockSource+0x11a>
 80096ec:	2b60      	cmp	r3, #96	; 0x60
 80096ee:	d877      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096f0:	2b50      	cmp	r3, #80	; 0x50
 80096f2:	d03c      	beq.n	800976e <HAL_TIM_ConfigClockSource+0xfa>
 80096f4:	2b50      	cmp	r3, #80	; 0x50
 80096f6:	d873      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 80096f8:	2b40      	cmp	r3, #64	; 0x40
 80096fa:	d058      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x13a>
 80096fc:	2b40      	cmp	r3, #64	; 0x40
 80096fe:	d86f      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009700:	2b30      	cmp	r3, #48	; 0x30
 8009702:	d064      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 8009704:	2b30      	cmp	r3, #48	; 0x30
 8009706:	d86b      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009708:	2b20      	cmp	r3, #32
 800970a:	d060      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 800970c:	2b20      	cmp	r3, #32
 800970e:	d867      	bhi.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
 8009710:	2b00      	cmp	r3, #0
 8009712:	d05c      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 8009714:	2b10      	cmp	r3, #16
 8009716:	d05a      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x15a>
 8009718:	e062      	b.n	80097e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	6899      	ldr	r1, [r3, #8]
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	68db      	ldr	r3, [r3, #12]
 800972a:	f000 f9af 	bl	8009a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800973c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	68ba      	ldr	r2, [r7, #8]
 8009744:	609a      	str	r2, [r3, #8]
      break;
 8009746:	e04f      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	6899      	ldr	r1, [r3, #8]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	685a      	ldr	r2, [r3, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f000 f998 	bl	8009a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	689a      	ldr	r2, [r3, #8]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800976a:	609a      	str	r2, [r3, #8]
      break;
 800976c:	e03c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6818      	ldr	r0, [r3, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	6859      	ldr	r1, [r3, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	461a      	mov	r2, r3
 800977c:	f000 f90c 	bl	8009998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2150      	movs	r1, #80	; 0x50
 8009786:	4618      	mov	r0, r3
 8009788:	f000 f965 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 800978c:	e02c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6818      	ldr	r0, [r3, #0]
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	6859      	ldr	r1, [r3, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	461a      	mov	r2, r3
 800979c:	f000 f92b 	bl	80099f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2160      	movs	r1, #96	; 0x60
 80097a6:	4618      	mov	r0, r3
 80097a8:	f000 f955 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 80097ac:	e01c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6818      	ldr	r0, [r3, #0]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	6859      	ldr	r1, [r3, #4]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
 80097ba:	461a      	mov	r2, r3
 80097bc:	f000 f8ec 	bl	8009998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2140      	movs	r1, #64	; 0x40
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 f945 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 80097cc:	e00c      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681a      	ldr	r2, [r3, #0]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4619      	mov	r1, r3
 80097d8:	4610      	mov	r0, r2
 80097da:	f000 f93c 	bl	8009a56 <TIM_ITRx_SetConfig>
      break;
 80097de:	e003      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	73fb      	strb	r3, [r7, #15]
      break;
 80097e4:	e000      	b.n	80097e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80097e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3710      	adds	r7, #16
 80097fe:	46bd      	mov	sp, r7
 8009800:	bd80      	pop	{r7, pc}
 8009802:	bf00      	nop
 8009804:	fffeff88 	.word	0xfffeff88

08009808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009838:	bf00      	nop
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009844:	b480      	push	{r7}
 8009846:	b083      	sub	sp, #12
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a40      	ldr	r2, [pc, #256]	; (800996c <TIM_Base_SetConfig+0x114>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d013      	beq.n	8009898 <TIM_Base_SetConfig+0x40>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009876:	d00f      	beq.n	8009898 <TIM_Base_SetConfig+0x40>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a3d      	ldr	r2, [pc, #244]	; (8009970 <TIM_Base_SetConfig+0x118>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d00b      	beq.n	8009898 <TIM_Base_SetConfig+0x40>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a3c      	ldr	r2, [pc, #240]	; (8009974 <TIM_Base_SetConfig+0x11c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d007      	beq.n	8009898 <TIM_Base_SetConfig+0x40>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a3b      	ldr	r2, [pc, #236]	; (8009978 <TIM_Base_SetConfig+0x120>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d003      	beq.n	8009898 <TIM_Base_SetConfig+0x40>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a3a      	ldr	r2, [pc, #232]	; (800997c <TIM_Base_SetConfig+0x124>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d108      	bne.n	80098aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	4313      	orrs	r3, r2
 80098a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a2f      	ldr	r2, [pc, #188]	; (800996c <TIM_Base_SetConfig+0x114>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d02b      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098b8:	d027      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a2c      	ldr	r2, [pc, #176]	; (8009970 <TIM_Base_SetConfig+0x118>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d023      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2b      	ldr	r2, [pc, #172]	; (8009974 <TIM_Base_SetConfig+0x11c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d01f      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a2a      	ldr	r2, [pc, #168]	; (8009978 <TIM_Base_SetConfig+0x120>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d01b      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a29      	ldr	r2, [pc, #164]	; (800997c <TIM_Base_SetConfig+0x124>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d017      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a28      	ldr	r2, [pc, #160]	; (8009980 <TIM_Base_SetConfig+0x128>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d013      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a27      	ldr	r2, [pc, #156]	; (8009984 <TIM_Base_SetConfig+0x12c>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d00f      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a26      	ldr	r2, [pc, #152]	; (8009988 <TIM_Base_SetConfig+0x130>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d00b      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a25      	ldr	r2, [pc, #148]	; (800998c <TIM_Base_SetConfig+0x134>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d007      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a24      	ldr	r2, [pc, #144]	; (8009990 <TIM_Base_SetConfig+0x138>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d003      	beq.n	800990a <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a23      	ldr	r2, [pc, #140]	; (8009994 <TIM_Base_SetConfig+0x13c>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d108      	bne.n	800991c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	68db      	ldr	r3, [r3, #12]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	4313      	orrs	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	4313      	orrs	r3, r2
 8009928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	689a      	ldr	r2, [r3, #8]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a0a      	ldr	r2, [pc, #40]	; (800996c <TIM_Base_SetConfig+0x114>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d003      	beq.n	8009950 <TIM_Base_SetConfig+0xf8>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a0c      	ldr	r2, [pc, #48]	; (800997c <TIM_Base_SetConfig+0x124>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d103      	bne.n	8009958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	615a      	str	r2, [r3, #20]
}
 800995e:	bf00      	nop
 8009960:	3714      	adds	r7, #20
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	40010000 	.word	0x40010000
 8009970:	40000400 	.word	0x40000400
 8009974:	40000800 	.word	0x40000800
 8009978:	40000c00 	.word	0x40000c00
 800997c:	40010400 	.word	0x40010400
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800
 800998c:	40001800 	.word	0x40001800
 8009990:	40001c00 	.word	0x40001c00
 8009994:	40002000 	.word	0x40002000

08009998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009998:	b480      	push	{r7}
 800999a:	b087      	sub	sp, #28
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	6a1b      	ldr	r3, [r3, #32]
 80099ae:	f023 0201 	bic.w	r2, r3, #1
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	011b      	lsls	r3, r3, #4
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 030a 	bic.w	r3, r3, #10
 80099d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	4313      	orrs	r3, r2
 80099dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	621a      	str	r2, [r3, #32]
}
 80099ea:	bf00      	nop
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099f6:	b480      	push	{r7}
 80099f8:	b087      	sub	sp, #28
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60f8      	str	r0, [r7, #12]
 80099fe:	60b9      	str	r1, [r7, #8]
 8009a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	6a1b      	ldr	r3, [r3, #32]
 8009a06:	f023 0210 	bic.w	r2, r3, #16
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	699b      	ldr	r3, [r3, #24]
 8009a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a1b      	ldr	r3, [r3, #32]
 8009a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	031b      	lsls	r3, r3, #12
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	621a      	str	r2, [r3, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b085      	sub	sp, #20
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	f043 0307 	orr.w	r3, r3, #7
 8009a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	609a      	str	r2, [r3, #8]
}
 8009a80:	bf00      	nop
 8009a82:	3714      	adds	r7, #20
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr

08009a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	021a      	lsls	r2, r3, #8
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	431a      	orrs	r2, r3
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	609a      	str	r2, [r3, #8]
}
 8009ac0:	bf00      	nop
 8009ac2:	371c      	adds	r7, #28
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
 8009ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e06d      	b.n	8009bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2202      	movs	r2, #2
 8009af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a30      	ldr	r2, [pc, #192]	; (8009bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d004      	beq.n	8009b18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a2f      	ldr	r2, [pc, #188]	; (8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d108      	bne.n	8009b2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	4313      	orrs	r3, r2
 8009b28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	68fa      	ldr	r2, [r7, #12]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a20      	ldr	r2, [pc, #128]	; (8009bcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d022      	beq.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b56:	d01d      	beq.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a1d      	ldr	r2, [pc, #116]	; (8009bd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d018      	beq.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a1c      	ldr	r2, [pc, #112]	; (8009bd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d013      	beq.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a1a      	ldr	r2, [pc, #104]	; (8009bdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d00e      	beq.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a15      	ldr	r2, [pc, #84]	; (8009bd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d009      	beq.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a16      	ldr	r2, [pc, #88]	; (8009be0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d004      	beq.n	8009b94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a15      	ldr	r2, [pc, #84]	; (8009be4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d10c      	bne.n	8009bae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68ba      	ldr	r2, [r7, #8]
 8009bac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
}
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	3714      	adds	r7, #20
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bca:	4770      	bx	lr
 8009bcc:	40010000 	.word	0x40010000
 8009bd0:	40010400 	.word	0x40010400
 8009bd4:	40000400 	.word	0x40000400
 8009bd8:	40000800 	.word	0x40000800
 8009bdc:	40000c00 	.word	0x40000c00
 8009be0:	40014000 	.word	0x40014000
 8009be4:	40001800 	.word	0x40001800

08009be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009bf0:	bf00      	nop
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	b083      	sub	sp, #12
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009c18:	bf00      	nop
 8009c1a:	370c      	adds	r7, #12
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e040      	b.n	8009cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d106      	bne.n	8009c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f7fa f98c 	bl	8003f64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2224      	movs	r2, #36	; 0x24
 8009c50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f022 0201 	bic.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fbd2 	bl	800a40c <UART_SetConfig>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d101      	bne.n	8009c72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e022      	b.n	8009cb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d002      	beq.n	8009c80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 fe2a 	bl	800a8d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	685a      	ldr	r2, [r3, #4]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689a      	ldr	r2, [r3, #8]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0201 	orr.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 feb1 	bl	800aa18 <UART_CheckIdleState>
 8009cb6:	4603      	mov	r3, r0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009cc0:	b480      	push	{r7}
 8009cc2:	b08b      	sub	sp, #44	; 0x2c
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	4613      	mov	r3, r2
 8009ccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009cd2:	2b20      	cmp	r3, #32
 8009cd4:	d156      	bne.n	8009d84 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d002      	beq.n	8009ce2 <HAL_UART_Transmit_IT+0x22>
 8009cdc:	88fb      	ldrh	r3, [r7, #6]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d101      	bne.n	8009ce6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e04f      	b.n	8009d86 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d101      	bne.n	8009cf4 <HAL_UART_Transmit_IT+0x34>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e048      	b.n	8009d86 <HAL_UART_Transmit_IT+0xc6>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	88fa      	ldrh	r2, [r7, #6]
 8009d06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	88fa      	ldrh	r2, [r7, #6]
 8009d0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2221      	movs	r2, #33	; 0x21
 8009d24:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	689b      	ldr	r3, [r3, #8]
 8009d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d2e:	d107      	bne.n	8009d40 <HAL_UART_Transmit_IT+0x80>
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d103      	bne.n	8009d40 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4a16      	ldr	r2, [pc, #88]	; (8009d94 <HAL_UART_Transmit_IT+0xd4>)
 8009d3c:	669a      	str	r2, [r3, #104]	; 0x68
 8009d3e:	e002      	b.n	8009d46 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4a15      	ldr	r2, [pc, #84]	; (8009d98 <HAL_UART_Transmit_IT+0xd8>)
 8009d44:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d62:	627b      	str	r3, [r7, #36]	; 0x24
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	623b      	str	r3, [r7, #32]
 8009d6e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	69f9      	ldr	r1, [r7, #28]
 8009d72:	6a3a      	ldr	r2, [r7, #32]
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d7a:	69bb      	ldr	r3, [r7, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e6      	bne.n	8009d4e <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	e000      	b.n	8009d86 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8009d84:	2302      	movs	r3, #2
  }
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	372c      	adds	r7, #44	; 0x2c
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	0800af45 	.word	0x0800af45
 8009d98:	0800ae8f 	.word	0x0800ae8f

08009d9c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b08a      	sub	sp, #40	; 0x28
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009dae:	2b20      	cmp	r3, #32
 8009db0:	d13d      	bne.n	8009e2e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d002      	beq.n	8009dbe <HAL_UART_Receive_IT+0x22>
 8009db8:	88fb      	ldrh	r3, [r7, #6]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e036      	b.n	8009e30 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d101      	bne.n	8009dd0 <HAL_UART_Receive_IT+0x34>
 8009dcc:	2302      	movs	r3, #2
 8009dce:	e02f      	b.n	8009e30 <HAL_UART_Receive_IT+0x94>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d018      	beq.n	8009e1e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	e853 3f00 	ldrex	r3, [r3]
 8009df8:	613b      	str	r3, [r7, #16]
   return(result);
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	623b      	str	r3, [r7, #32]
 8009e0c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e0e:	69f9      	ldr	r1, [r7, #28]
 8009e10:	6a3a      	ldr	r2, [r7, #32]
 8009e12:	e841 2300 	strex	r3, r2, [r1]
 8009e16:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d1e6      	bne.n	8009dec <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009e1e:	88fb      	ldrh	r3, [r7, #6]
 8009e20:	461a      	mov	r2, r3
 8009e22:	68b9      	ldr	r1, [r7, #8]
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 feef 	bl	800ac08 <UART_Start_Receive_IT>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	e000      	b.n	8009e30 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e2e:	2302      	movs	r3, #2
  }
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3728      	adds	r7, #40	; 0x28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b0ba      	sub	sp, #232	; 0xe8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009e5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009e62:	f640 030f 	movw	r3, #2063	; 0x80f
 8009e66:	4013      	ands	r3, r2
 8009e68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009e6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d115      	bne.n	8009ea0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009e74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e78:	f003 0320 	and.w	r3, r3, #32
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d00f      	beq.n	8009ea0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009e80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d009      	beq.n	8009ea0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 828f 	beq.w	800a3b4 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
      }
      return;
 8009e9e:	e289      	b.n	800a3b4 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009ea0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f000 8117 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d106      	bne.n	8009ec4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009eb6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009eba:	4b85      	ldr	r3, [pc, #532]	; (800a0d0 <HAL_UART_IRQHandler+0x298>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 810a 	beq.w	800a0d8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d011      	beq.n	8009ef4 <HAL_UART_IRQHandler+0xbc>
 8009ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00b      	beq.n	8009ef4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009eea:	f043 0201 	orr.w	r2, r3, #1
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ef8:	f003 0302 	and.w	r3, r3, #2
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d011      	beq.n	8009f24 <HAL_UART_IRQHandler+0xec>
 8009f00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f04:	f003 0301 	and.w	r3, r3, #1
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00b      	beq.n	8009f24 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2202      	movs	r2, #2
 8009f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f1a:	f043 0204 	orr.w	r2, r3, #4
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f28:	f003 0304 	and.w	r3, r3, #4
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d011      	beq.n	8009f54 <HAL_UART_IRQHandler+0x11c>
 8009f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00b      	beq.n	8009f54 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	2204      	movs	r2, #4
 8009f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f4a:	f043 0202 	orr.w	r2, r3, #2
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f58:	f003 0308 	and.w	r3, r3, #8
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d017      	beq.n	8009f90 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d105      	bne.n	8009f78 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009f6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f70:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00b      	beq.n	8009f90 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f86:	f043 0208 	orr.w	r2, r3, #8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d012      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x18a>
 8009f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fa0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00c      	beq.n	8009fc2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fb8:	f043 0220 	orr.w	r2, r3, #32
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 81f5 	beq.w	800a3b8 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fd2:	f003 0320 	and.w	r3, r3, #32
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00d      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fde:	f003 0320 	and.w	r3, r3, #32
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d007      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a00a:	2b40      	cmp	r3, #64	; 0x40
 800a00c:	d005      	beq.n	800a01a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a00e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a012:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a016:	2b00      	cmp	r3, #0
 800a018:	d04f      	beq.n	800a0ba <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 febe 	bl	800ad9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02a:	2b40      	cmp	r3, #64	; 0x40
 800a02c:	d141      	bne.n	800a0b2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a038:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a03c:	e853 3f00 	ldrex	r3, [r3]
 800a040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a048:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a04c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	3308      	adds	r3, #8
 800a056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a05a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a05e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a06a:	e841 2300 	strex	r3, r2, [r1]
 800a06e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d1d9      	bne.n	800a02e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d013      	beq.n	800a0aa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a086:	4a13      	ldr	r2, [pc, #76]	; (800a0d4 <HAL_UART_IRQHandler+0x29c>)
 800a088:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08e:	4618      	mov	r0, r3
 800a090:	f7fb f9bc 	bl	800540c <HAL_DMA_Abort_IT>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d017      	beq.n	800a0ca <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0a8:	e00f      	b.n	800a0ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f998 	bl	800a3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b0:	e00b      	b.n	800a0ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f994 	bl	800a3e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0b8:	e007      	b.n	800a0ca <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f990 	bl	800a3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800a0c8:	e176      	b.n	800a3b8 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a0ca:	bf00      	nop
    return;
 800a0cc:	e174      	b.n	800a3b8 <HAL_UART_IRQHandler+0x580>
 800a0ce:	bf00      	nop
 800a0d0:	04000120 	.word	0x04000120
 800a0d4:	0800ae63 	.word	0x0800ae63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	f040 8144 	bne.w	800a36a <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a0e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0e6:	f003 0310 	and.w	r3, r3, #16
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f000 813d 	beq.w	800a36a <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f4:	f003 0310 	and.w	r3, r3, #16
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8136 	beq.w	800a36a <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2210      	movs	r2, #16
 800a104:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	689b      	ldr	r3, [r3, #8]
 800a10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a110:	2b40      	cmp	r3, #64	; 0x40
 800a112:	f040 80b2 	bne.w	800a27a <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a122:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 8148 	beq.w	800a3bc <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a136:	429a      	cmp	r2, r3
 800a138:	f080 8140 	bcs.w	800a3bc <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a142:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a150:	f000 8085 	beq.w	800a25e <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a15c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a160:	e853 3f00 	ldrex	r3, [r3]
 800a164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a16c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a170:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a17e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a182:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a186:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a18a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a18e:	e841 2300 	strex	r3, r2, [r1]
 800a192:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a196:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1da      	bne.n	800a154 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3308      	adds	r3, #8
 800a1a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1a8:	e853 3f00 	ldrex	r3, [r3]
 800a1ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a1ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1b0:	f023 0301 	bic.w	r3, r3, #1
 800a1b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	3308      	adds	r3, #8
 800a1be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a1c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a1c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a1ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a1ce:	e841 2300 	strex	r3, r2, [r1]
 800a1d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a1d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1e1      	bne.n	800a19e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	3308      	adds	r3, #8
 800a1e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a1e4:	e853 3f00 	ldrex	r3, [r3]
 800a1e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a1ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a1f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	3308      	adds	r3, #8
 800a1fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a1fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a206:	e841 2300 	strex	r3, r2, [r1]
 800a20a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a20c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1e3      	bne.n	800a1da <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2220      	movs	r2, #32
 800a216:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2200      	movs	r2, #0
 800a21c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a22e:	f023 0310 	bic.w	r3, r3, #16
 800a232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a240:	65bb      	str	r3, [r7, #88]	; 0x58
 800a242:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a248:	e841 2300 	strex	r3, r2, [r1]
 800a24c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e4      	bne.n	800a21e <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a258:	4618      	mov	r0, r3
 800a25a:	f7fb f867 	bl	800532c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	b29b      	uxth	r3, r3
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f8be 	bl	800a3f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a278:	e0a0      	b.n	800a3bc <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a286:	b29b      	uxth	r3, r3
 800a288:	1ad3      	subs	r3, r2, r3
 800a28a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a294:	b29b      	uxth	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 8092 	beq.w	800a3c0 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 800a29c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	f000 808d 	beq.w	800a3c0 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a2b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a2ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	461a      	mov	r2, r3
 800a2c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a2c8:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a2ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a2d0:	e841 2300 	strex	r3, r2, [r1]
 800a2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a2d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d1e4      	bne.n	800a2a6 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	3308      	adds	r3, #8
 800a2e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	e853 3f00 	ldrex	r3, [r3]
 800a2ea:	623b      	str	r3, [r7, #32]
   return(result);
 800a2ec:	6a3b      	ldr	r3, [r7, #32]
 800a2ee:	f023 0301 	bic.w	r3, r3, #1
 800a2f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3308      	adds	r3, #8
 800a2fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a300:	633a      	str	r2, [r7, #48]	; 0x30
 800a302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a308:	e841 2300 	strex	r3, r2, [r1]
 800a30c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a30e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1e3      	bne.n	800a2dc <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2200      	movs	r2, #0
 800a31e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	e853 3f00 	ldrex	r3, [r3]
 800a332:	60fb      	str	r3, [r7, #12]
   return(result);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 0310 	bic.w	r3, r3, #16
 800a33a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	461a      	mov	r2, r3
 800a344:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a348:	61fb      	str	r3, [r7, #28]
 800a34a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a34c:	69b9      	ldr	r1, [r7, #24]
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	e841 2300 	strex	r3, r2, [r1]
 800a354:	617b      	str	r3, [r7, #20]
   return(result);
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e4      	bne.n	800a326 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a35c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a360:	4619      	mov	r1, r3
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 f846 	bl	800a3f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a368:	e02a      	b.n	800a3c0 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a36a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a36e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00e      	beq.n	800a394 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a376:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a37a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d008      	beq.n	800a394 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a386:	2b00      	cmp	r3, #0
 800a388:	d01c      	beq.n	800a3c4 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
    }
    return;
 800a392:	e017      	b.n	800a3c4 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d012      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x58e>
 800a3a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d00c      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fe29 	bl	800b004 <UART_EndTransmit_IT>
    return;
 800a3b2:	e008      	b.n	800a3c6 <HAL_UART_IRQHandler+0x58e>
      return;
 800a3b4:	bf00      	nop
 800a3b6:	e006      	b.n	800a3c6 <HAL_UART_IRQHandler+0x58e>
    return;
 800a3b8:	bf00      	nop
 800a3ba:	e004      	b.n	800a3c6 <HAL_UART_IRQHandler+0x58e>
      return;
 800a3bc:	bf00      	nop
 800a3be:	e002      	b.n	800a3c6 <HAL_UART_IRQHandler+0x58e>
      return;
 800a3c0:	bf00      	nop
 800a3c2:	e000      	b.n	800a3c6 <HAL_UART_IRQHandler+0x58e>
    return;
 800a3c4:	bf00      	nop
  }

}
 800a3c6:	37e8      	adds	r7, #232	; 0xe8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}

0800a3cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b088      	sub	sp, #32
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a414:	2300      	movs	r3, #0
 800a416:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	431a      	orrs	r2, r3
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	431a      	orrs	r2, r3
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	69db      	ldr	r3, [r3, #28]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4ba6      	ldr	r3, [pc, #664]	; (800a6d0 <UART_SetConfig+0x2c4>)
 800a438:	4013      	ands	r3, r2
 800a43a:	687a      	ldr	r2, [r7, #4]
 800a43c:	6812      	ldr	r2, [r2, #0]
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	430b      	orrs	r3, r1
 800a442:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	430a      	orrs	r2, r1
 800a458:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	699b      	ldr	r3, [r3, #24]
 800a45e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	697a      	ldr	r2, [r7, #20]
 800a466:	4313      	orrs	r3, r2
 800a468:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a94      	ldr	r2, [pc, #592]	; (800a6d4 <UART_SetConfig+0x2c8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d120      	bne.n	800a4ca <UART_SetConfig+0xbe>
 800a488:	4b93      	ldr	r3, [pc, #588]	; (800a6d8 <UART_SetConfig+0x2cc>)
 800a48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a48e:	f003 0303 	and.w	r3, r3, #3
 800a492:	2b03      	cmp	r3, #3
 800a494:	d816      	bhi.n	800a4c4 <UART_SetConfig+0xb8>
 800a496:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <UART_SetConfig+0x90>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a4ad 	.word	0x0800a4ad
 800a4a0:	0800a4b9 	.word	0x0800a4b9
 800a4a4:	0800a4b3 	.word	0x0800a4b3
 800a4a8:	0800a4bf 	.word	0x0800a4bf
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	77fb      	strb	r3, [r7, #31]
 800a4b0:	e150      	b.n	800a754 <UART_SetConfig+0x348>
 800a4b2:	2302      	movs	r3, #2
 800a4b4:	77fb      	strb	r3, [r7, #31]
 800a4b6:	e14d      	b.n	800a754 <UART_SetConfig+0x348>
 800a4b8:	2304      	movs	r3, #4
 800a4ba:	77fb      	strb	r3, [r7, #31]
 800a4bc:	e14a      	b.n	800a754 <UART_SetConfig+0x348>
 800a4be:	2308      	movs	r3, #8
 800a4c0:	77fb      	strb	r3, [r7, #31]
 800a4c2:	e147      	b.n	800a754 <UART_SetConfig+0x348>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	77fb      	strb	r3, [r7, #31]
 800a4c8:	e144      	b.n	800a754 <UART_SetConfig+0x348>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a83      	ldr	r2, [pc, #524]	; (800a6dc <UART_SetConfig+0x2d0>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d132      	bne.n	800a53a <UART_SetConfig+0x12e>
 800a4d4:	4b80      	ldr	r3, [pc, #512]	; (800a6d8 <UART_SetConfig+0x2cc>)
 800a4d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4da:	f003 030c 	and.w	r3, r3, #12
 800a4de:	2b0c      	cmp	r3, #12
 800a4e0:	d828      	bhi.n	800a534 <UART_SetConfig+0x128>
 800a4e2:	a201      	add	r2, pc, #4	; (adr r2, 800a4e8 <UART_SetConfig+0xdc>)
 800a4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e8:	0800a51d 	.word	0x0800a51d
 800a4ec:	0800a535 	.word	0x0800a535
 800a4f0:	0800a535 	.word	0x0800a535
 800a4f4:	0800a535 	.word	0x0800a535
 800a4f8:	0800a529 	.word	0x0800a529
 800a4fc:	0800a535 	.word	0x0800a535
 800a500:	0800a535 	.word	0x0800a535
 800a504:	0800a535 	.word	0x0800a535
 800a508:	0800a523 	.word	0x0800a523
 800a50c:	0800a535 	.word	0x0800a535
 800a510:	0800a535 	.word	0x0800a535
 800a514:	0800a535 	.word	0x0800a535
 800a518:	0800a52f 	.word	0x0800a52f
 800a51c:	2300      	movs	r3, #0
 800a51e:	77fb      	strb	r3, [r7, #31]
 800a520:	e118      	b.n	800a754 <UART_SetConfig+0x348>
 800a522:	2302      	movs	r3, #2
 800a524:	77fb      	strb	r3, [r7, #31]
 800a526:	e115      	b.n	800a754 <UART_SetConfig+0x348>
 800a528:	2304      	movs	r3, #4
 800a52a:	77fb      	strb	r3, [r7, #31]
 800a52c:	e112      	b.n	800a754 <UART_SetConfig+0x348>
 800a52e:	2308      	movs	r3, #8
 800a530:	77fb      	strb	r3, [r7, #31]
 800a532:	e10f      	b.n	800a754 <UART_SetConfig+0x348>
 800a534:	2310      	movs	r3, #16
 800a536:	77fb      	strb	r3, [r7, #31]
 800a538:	e10c      	b.n	800a754 <UART_SetConfig+0x348>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4a68      	ldr	r2, [pc, #416]	; (800a6e0 <UART_SetConfig+0x2d4>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d120      	bne.n	800a586 <UART_SetConfig+0x17a>
 800a544:	4b64      	ldr	r3, [pc, #400]	; (800a6d8 <UART_SetConfig+0x2cc>)
 800a546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a54a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a54e:	2b30      	cmp	r3, #48	; 0x30
 800a550:	d013      	beq.n	800a57a <UART_SetConfig+0x16e>
 800a552:	2b30      	cmp	r3, #48	; 0x30
 800a554:	d814      	bhi.n	800a580 <UART_SetConfig+0x174>
 800a556:	2b20      	cmp	r3, #32
 800a558:	d009      	beq.n	800a56e <UART_SetConfig+0x162>
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	d810      	bhi.n	800a580 <UART_SetConfig+0x174>
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <UART_SetConfig+0x15c>
 800a562:	2b10      	cmp	r3, #16
 800a564:	d006      	beq.n	800a574 <UART_SetConfig+0x168>
 800a566:	e00b      	b.n	800a580 <UART_SetConfig+0x174>
 800a568:	2300      	movs	r3, #0
 800a56a:	77fb      	strb	r3, [r7, #31]
 800a56c:	e0f2      	b.n	800a754 <UART_SetConfig+0x348>
 800a56e:	2302      	movs	r3, #2
 800a570:	77fb      	strb	r3, [r7, #31]
 800a572:	e0ef      	b.n	800a754 <UART_SetConfig+0x348>
 800a574:	2304      	movs	r3, #4
 800a576:	77fb      	strb	r3, [r7, #31]
 800a578:	e0ec      	b.n	800a754 <UART_SetConfig+0x348>
 800a57a:	2308      	movs	r3, #8
 800a57c:	77fb      	strb	r3, [r7, #31]
 800a57e:	e0e9      	b.n	800a754 <UART_SetConfig+0x348>
 800a580:	2310      	movs	r3, #16
 800a582:	77fb      	strb	r3, [r7, #31]
 800a584:	e0e6      	b.n	800a754 <UART_SetConfig+0x348>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a56      	ldr	r2, [pc, #344]	; (800a6e4 <UART_SetConfig+0x2d8>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d120      	bne.n	800a5d2 <UART_SetConfig+0x1c6>
 800a590:	4b51      	ldr	r3, [pc, #324]	; (800a6d8 <UART_SetConfig+0x2cc>)
 800a592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a596:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a59a:	2bc0      	cmp	r3, #192	; 0xc0
 800a59c:	d013      	beq.n	800a5c6 <UART_SetConfig+0x1ba>
 800a59e:	2bc0      	cmp	r3, #192	; 0xc0
 800a5a0:	d814      	bhi.n	800a5cc <UART_SetConfig+0x1c0>
 800a5a2:	2b80      	cmp	r3, #128	; 0x80
 800a5a4:	d009      	beq.n	800a5ba <UART_SetConfig+0x1ae>
 800a5a6:	2b80      	cmp	r3, #128	; 0x80
 800a5a8:	d810      	bhi.n	800a5cc <UART_SetConfig+0x1c0>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d002      	beq.n	800a5b4 <UART_SetConfig+0x1a8>
 800a5ae:	2b40      	cmp	r3, #64	; 0x40
 800a5b0:	d006      	beq.n	800a5c0 <UART_SetConfig+0x1b4>
 800a5b2:	e00b      	b.n	800a5cc <UART_SetConfig+0x1c0>
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	77fb      	strb	r3, [r7, #31]
 800a5b8:	e0cc      	b.n	800a754 <UART_SetConfig+0x348>
 800a5ba:	2302      	movs	r3, #2
 800a5bc:	77fb      	strb	r3, [r7, #31]
 800a5be:	e0c9      	b.n	800a754 <UART_SetConfig+0x348>
 800a5c0:	2304      	movs	r3, #4
 800a5c2:	77fb      	strb	r3, [r7, #31]
 800a5c4:	e0c6      	b.n	800a754 <UART_SetConfig+0x348>
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	77fb      	strb	r3, [r7, #31]
 800a5ca:	e0c3      	b.n	800a754 <UART_SetConfig+0x348>
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	77fb      	strb	r3, [r7, #31]
 800a5d0:	e0c0      	b.n	800a754 <UART_SetConfig+0x348>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	4a44      	ldr	r2, [pc, #272]	; (800a6e8 <UART_SetConfig+0x2dc>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d125      	bne.n	800a628 <UART_SetConfig+0x21c>
 800a5dc:	4b3e      	ldr	r3, [pc, #248]	; (800a6d8 <UART_SetConfig+0x2cc>)
 800a5de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5ea:	d017      	beq.n	800a61c <UART_SetConfig+0x210>
 800a5ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5f0:	d817      	bhi.n	800a622 <UART_SetConfig+0x216>
 800a5f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5f6:	d00b      	beq.n	800a610 <UART_SetConfig+0x204>
 800a5f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5fc:	d811      	bhi.n	800a622 <UART_SetConfig+0x216>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <UART_SetConfig+0x1fe>
 800a602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a606:	d006      	beq.n	800a616 <UART_SetConfig+0x20a>
 800a608:	e00b      	b.n	800a622 <UART_SetConfig+0x216>
 800a60a:	2300      	movs	r3, #0
 800a60c:	77fb      	strb	r3, [r7, #31]
 800a60e:	e0a1      	b.n	800a754 <UART_SetConfig+0x348>
 800a610:	2302      	movs	r3, #2
 800a612:	77fb      	strb	r3, [r7, #31]
 800a614:	e09e      	b.n	800a754 <UART_SetConfig+0x348>
 800a616:	2304      	movs	r3, #4
 800a618:	77fb      	strb	r3, [r7, #31]
 800a61a:	e09b      	b.n	800a754 <UART_SetConfig+0x348>
 800a61c:	2308      	movs	r3, #8
 800a61e:	77fb      	strb	r3, [r7, #31]
 800a620:	e098      	b.n	800a754 <UART_SetConfig+0x348>
 800a622:	2310      	movs	r3, #16
 800a624:	77fb      	strb	r3, [r7, #31]
 800a626:	e095      	b.n	800a754 <UART_SetConfig+0x348>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a2f      	ldr	r2, [pc, #188]	; (800a6ec <UART_SetConfig+0x2e0>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d125      	bne.n	800a67e <UART_SetConfig+0x272>
 800a632:	4b29      	ldr	r3, [pc, #164]	; (800a6d8 <UART_SetConfig+0x2cc>)
 800a634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a638:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a63c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a640:	d017      	beq.n	800a672 <UART_SetConfig+0x266>
 800a642:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a646:	d817      	bhi.n	800a678 <UART_SetConfig+0x26c>
 800a648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a64c:	d00b      	beq.n	800a666 <UART_SetConfig+0x25a>
 800a64e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a652:	d811      	bhi.n	800a678 <UART_SetConfig+0x26c>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d003      	beq.n	800a660 <UART_SetConfig+0x254>
 800a658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a65c:	d006      	beq.n	800a66c <UART_SetConfig+0x260>
 800a65e:	e00b      	b.n	800a678 <UART_SetConfig+0x26c>
 800a660:	2301      	movs	r3, #1
 800a662:	77fb      	strb	r3, [r7, #31]
 800a664:	e076      	b.n	800a754 <UART_SetConfig+0x348>
 800a666:	2302      	movs	r3, #2
 800a668:	77fb      	strb	r3, [r7, #31]
 800a66a:	e073      	b.n	800a754 <UART_SetConfig+0x348>
 800a66c:	2304      	movs	r3, #4
 800a66e:	77fb      	strb	r3, [r7, #31]
 800a670:	e070      	b.n	800a754 <UART_SetConfig+0x348>
 800a672:	2308      	movs	r3, #8
 800a674:	77fb      	strb	r3, [r7, #31]
 800a676:	e06d      	b.n	800a754 <UART_SetConfig+0x348>
 800a678:	2310      	movs	r3, #16
 800a67a:	77fb      	strb	r3, [r7, #31]
 800a67c:	e06a      	b.n	800a754 <UART_SetConfig+0x348>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	4a1b      	ldr	r2, [pc, #108]	; (800a6f0 <UART_SetConfig+0x2e4>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d138      	bne.n	800a6fa <UART_SetConfig+0x2ee>
 800a688:	4b13      	ldr	r3, [pc, #76]	; (800a6d8 <UART_SetConfig+0x2cc>)
 800a68a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a68e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a696:	d017      	beq.n	800a6c8 <UART_SetConfig+0x2bc>
 800a698:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a69c:	d82a      	bhi.n	800a6f4 <UART_SetConfig+0x2e8>
 800a69e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a2:	d00b      	beq.n	800a6bc <UART_SetConfig+0x2b0>
 800a6a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6a8:	d824      	bhi.n	800a6f4 <UART_SetConfig+0x2e8>
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d003      	beq.n	800a6b6 <UART_SetConfig+0x2aa>
 800a6ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6b2:	d006      	beq.n	800a6c2 <UART_SetConfig+0x2b6>
 800a6b4:	e01e      	b.n	800a6f4 <UART_SetConfig+0x2e8>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	77fb      	strb	r3, [r7, #31]
 800a6ba:	e04b      	b.n	800a754 <UART_SetConfig+0x348>
 800a6bc:	2302      	movs	r3, #2
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	e048      	b.n	800a754 <UART_SetConfig+0x348>
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	77fb      	strb	r3, [r7, #31]
 800a6c6:	e045      	b.n	800a754 <UART_SetConfig+0x348>
 800a6c8:	2308      	movs	r3, #8
 800a6ca:	77fb      	strb	r3, [r7, #31]
 800a6cc:	e042      	b.n	800a754 <UART_SetConfig+0x348>
 800a6ce:	bf00      	nop
 800a6d0:	efff69f3 	.word	0xefff69f3
 800a6d4:	40011000 	.word	0x40011000
 800a6d8:	40023800 	.word	0x40023800
 800a6dc:	40004400 	.word	0x40004400
 800a6e0:	40004800 	.word	0x40004800
 800a6e4:	40004c00 	.word	0x40004c00
 800a6e8:	40005000 	.word	0x40005000
 800a6ec:	40011400 	.word	0x40011400
 800a6f0:	40007800 	.word	0x40007800
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	77fb      	strb	r3, [r7, #31]
 800a6f8:	e02c      	b.n	800a754 <UART_SetConfig+0x348>
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4a72      	ldr	r2, [pc, #456]	; (800a8c8 <UART_SetConfig+0x4bc>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d125      	bne.n	800a750 <UART_SetConfig+0x344>
 800a704:	4b71      	ldr	r3, [pc, #452]	; (800a8cc <UART_SetConfig+0x4c0>)
 800a706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a70a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a70e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a712:	d017      	beq.n	800a744 <UART_SetConfig+0x338>
 800a714:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a718:	d817      	bhi.n	800a74a <UART_SetConfig+0x33e>
 800a71a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a71e:	d00b      	beq.n	800a738 <UART_SetConfig+0x32c>
 800a720:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a724:	d811      	bhi.n	800a74a <UART_SetConfig+0x33e>
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <UART_SetConfig+0x326>
 800a72a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a72e:	d006      	beq.n	800a73e <UART_SetConfig+0x332>
 800a730:	e00b      	b.n	800a74a <UART_SetConfig+0x33e>
 800a732:	2300      	movs	r3, #0
 800a734:	77fb      	strb	r3, [r7, #31]
 800a736:	e00d      	b.n	800a754 <UART_SetConfig+0x348>
 800a738:	2302      	movs	r3, #2
 800a73a:	77fb      	strb	r3, [r7, #31]
 800a73c:	e00a      	b.n	800a754 <UART_SetConfig+0x348>
 800a73e:	2304      	movs	r3, #4
 800a740:	77fb      	strb	r3, [r7, #31]
 800a742:	e007      	b.n	800a754 <UART_SetConfig+0x348>
 800a744:	2308      	movs	r3, #8
 800a746:	77fb      	strb	r3, [r7, #31]
 800a748:	e004      	b.n	800a754 <UART_SetConfig+0x348>
 800a74a:	2310      	movs	r3, #16
 800a74c:	77fb      	strb	r3, [r7, #31]
 800a74e:	e001      	b.n	800a754 <UART_SetConfig+0x348>
 800a750:	2310      	movs	r3, #16
 800a752:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a75c:	d15b      	bne.n	800a816 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a75e:	7ffb      	ldrb	r3, [r7, #31]
 800a760:	2b08      	cmp	r3, #8
 800a762:	d828      	bhi.n	800a7b6 <UART_SetConfig+0x3aa>
 800a764:	a201      	add	r2, pc, #4	; (adr r2, 800a76c <UART_SetConfig+0x360>)
 800a766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a76a:	bf00      	nop
 800a76c:	0800a791 	.word	0x0800a791
 800a770:	0800a799 	.word	0x0800a799
 800a774:	0800a7a1 	.word	0x0800a7a1
 800a778:	0800a7b7 	.word	0x0800a7b7
 800a77c:	0800a7a7 	.word	0x0800a7a7
 800a780:	0800a7b7 	.word	0x0800a7b7
 800a784:	0800a7b7 	.word	0x0800a7b7
 800a788:	0800a7b7 	.word	0x0800a7b7
 800a78c:	0800a7af 	.word	0x0800a7af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a790:	f7fd fc22 	bl	8007fd8 <HAL_RCC_GetPCLK1Freq>
 800a794:	61b8      	str	r0, [r7, #24]
        break;
 800a796:	e013      	b.n	800a7c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a798:	f7fd fc32 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
 800a79c:	61b8      	str	r0, [r7, #24]
        break;
 800a79e:	e00f      	b.n	800a7c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7a0:	4b4b      	ldr	r3, [pc, #300]	; (800a8d0 <UART_SetConfig+0x4c4>)
 800a7a2:	61bb      	str	r3, [r7, #24]
        break;
 800a7a4:	e00c      	b.n	800a7c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7a6:	f7fd fb45 	bl	8007e34 <HAL_RCC_GetSysClockFreq>
 800a7aa:	61b8      	str	r0, [r7, #24]
        break;
 800a7ac:	e008      	b.n	800a7c0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7b2:	61bb      	str	r3, [r7, #24]
        break;
 800a7b4:	e004      	b.n	800a7c0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	77bb      	strb	r3, [r7, #30]
        break;
 800a7be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d074      	beq.n	800a8b0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	005a      	lsls	r2, r3, #1
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	085b      	lsrs	r3, r3, #1
 800a7d0:	441a      	add	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	2b0f      	cmp	r3, #15
 800a7e0:	d916      	bls.n	800a810 <UART_SetConfig+0x404>
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7e8:	d212      	bcs.n	800a810 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	f023 030f 	bic.w	r3, r3, #15
 800a7f2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	89fb      	ldrh	r3, [r7, #14]
 800a802:	4313      	orrs	r3, r2
 800a804:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	89fa      	ldrh	r2, [r7, #14]
 800a80c:	60da      	str	r2, [r3, #12]
 800a80e:	e04f      	b.n	800a8b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	77bb      	strb	r3, [r7, #30]
 800a814:	e04c      	b.n	800a8b0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a816:	7ffb      	ldrb	r3, [r7, #31]
 800a818:	2b08      	cmp	r3, #8
 800a81a:	d828      	bhi.n	800a86e <UART_SetConfig+0x462>
 800a81c:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <UART_SetConfig+0x418>)
 800a81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a822:	bf00      	nop
 800a824:	0800a849 	.word	0x0800a849
 800a828:	0800a851 	.word	0x0800a851
 800a82c:	0800a859 	.word	0x0800a859
 800a830:	0800a86f 	.word	0x0800a86f
 800a834:	0800a85f 	.word	0x0800a85f
 800a838:	0800a86f 	.word	0x0800a86f
 800a83c:	0800a86f 	.word	0x0800a86f
 800a840:	0800a86f 	.word	0x0800a86f
 800a844:	0800a867 	.word	0x0800a867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a848:	f7fd fbc6 	bl	8007fd8 <HAL_RCC_GetPCLK1Freq>
 800a84c:	61b8      	str	r0, [r7, #24]
        break;
 800a84e:	e013      	b.n	800a878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a850:	f7fd fbd6 	bl	8008000 <HAL_RCC_GetPCLK2Freq>
 800a854:	61b8      	str	r0, [r7, #24]
        break;
 800a856:	e00f      	b.n	800a878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a858:	4b1d      	ldr	r3, [pc, #116]	; (800a8d0 <UART_SetConfig+0x4c4>)
 800a85a:	61bb      	str	r3, [r7, #24]
        break;
 800a85c:	e00c      	b.n	800a878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a85e:	f7fd fae9 	bl	8007e34 <HAL_RCC_GetSysClockFreq>
 800a862:	61b8      	str	r0, [r7, #24]
        break;
 800a864:	e008      	b.n	800a878 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a86a:	61bb      	str	r3, [r7, #24]
        break;
 800a86c:	e004      	b.n	800a878 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	77bb      	strb	r3, [r7, #30]
        break;
 800a876:	bf00      	nop
    }

    if (pclk != 0U)
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d018      	beq.n	800a8b0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	085a      	lsrs	r2, r3, #1
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	441a      	add	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a890:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	2b0f      	cmp	r3, #15
 800a896:	d909      	bls.n	800a8ac <UART_SetConfig+0x4a0>
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a89e:	d205      	bcs.n	800a8ac <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	60da      	str	r2, [r3, #12]
 800a8aa:	e001      	b.n	800a8b0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a8bc:	7fbb      	ldrb	r3, [r7, #30]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	40007c00 	.word	0x40007c00
 800a8cc:	40023800 	.word	0x40023800
 800a8d0:	00f42400 	.word	0x00f42400

0800a8d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e0:	f003 0301 	and.w	r3, r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d00a      	beq.n	800a8fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	430a      	orrs	r2, r1
 800a8fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a902:	f003 0302 	and.w	r3, r3, #2
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	430a      	orrs	r2, r1
 800a91e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00a      	beq.n	800a942 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a946:	f003 0308 	and.w	r3, r3, #8
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	f003 0310 	and.w	r3, r3, #16
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	689b      	ldr	r3, [r3, #8]
 800a976:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	f003 0320 	and.w	r3, r3, #32
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d01a      	beq.n	800a9ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9d2:	d10a      	bne.n	800a9ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	605a      	str	r2, [r3, #4]
  }
}
 800aa0c:	bf00      	nop
 800aa0e:	370c      	adds	r7, #12
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr

0800aa18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b086      	sub	sp, #24
 800aa1c:	af02      	add	r7, sp, #8
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa28:	f7f9 fd88 	bl	800453c <HAL_GetTick>
 800aa2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0308 	and.w	r3, r3, #8
 800aa38:	2b08      	cmp	r3, #8
 800aa3a:	d10e      	bne.n	800aa5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 f817 	bl	800aa7e <UART_WaitOnFlagUntilTimeout>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e00d      	b.n	800aa76 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2220      	movs	r2, #32
 800aa5e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2220      	movs	r2, #32
 800aa64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b09c      	sub	sp, #112	; 0x70
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	603b      	str	r3, [r7, #0]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa8e:	e0a5      	b.n	800abdc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa96:	f000 80a1 	beq.w	800abdc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa9a:	f7f9 fd4f 	bl	800453c <HAL_GetTick>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	1ad3      	subs	r3, r2, r3
 800aaa4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d302      	bcc.n	800aab0 <UART_WaitOnFlagUntilTimeout+0x32>
 800aaaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d13e      	bne.n	800ab2e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aabe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aac0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aac4:	667b      	str	r3, [r7, #100]	; 0x64
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aace:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aad0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aad4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aadc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e6      	bne.n	800aab0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3308      	adds	r3, #8
 800aae8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaec:	e853 3f00 	ldrex	r3, [r3]
 800aaf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	f023 0301 	bic.w	r3, r3, #1
 800aaf8:	663b      	str	r3, [r7, #96]	; 0x60
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	3308      	adds	r3, #8
 800ab00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab02:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab04:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab0a:	e841 2300 	strex	r3, r2, [r1]
 800ab0e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d1e5      	bne.n	800aae2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	2220      	movs	r2, #32
 800ab1a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2220      	movs	r2, #32
 800ab20:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	e067      	b.n	800abfe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d04f      	beq.n	800abdc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab4a:	d147      	bne.n	800abdc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5e:	e853 3f00 	ldrex	r3, [r3]
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab74:	637b      	str	r3, [r7, #52]	; 0x34
 800ab76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab7c:	e841 2300 	strex	r3, r2, [r1]
 800ab80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d1e6      	bne.n	800ab56 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3308      	adds	r3, #8
 800ab8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	e853 3f00 	ldrex	r3, [r3]
 800ab96:	613b      	str	r3, [r7, #16]
   return(result);
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	f023 0301 	bic.w	r3, r3, #1
 800ab9e:	66bb      	str	r3, [r7, #104]	; 0x68
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	3308      	adds	r3, #8
 800aba6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aba8:	623a      	str	r2, [r7, #32]
 800abaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abac:	69f9      	ldr	r1, [r7, #28]
 800abae:	6a3a      	ldr	r2, [r7, #32]
 800abb0:	e841 2300 	strex	r3, r2, [r1]
 800abb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1e5      	bne.n	800ab88 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2220      	movs	r2, #32
 800abc0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2220      	movs	r2, #32
 800abc6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2220      	movs	r2, #32
 800abcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e010      	b.n	800abfe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	69da      	ldr	r2, [r3, #28]
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	4013      	ands	r3, r2
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	429a      	cmp	r2, r3
 800abea:	bf0c      	ite	eq
 800abec:	2301      	moveq	r3, #1
 800abee:	2300      	movne	r3, #0
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	461a      	mov	r2, r3
 800abf4:	79fb      	ldrb	r3, [r7, #7]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	f43f af4a 	beq.w	800aa90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3770      	adds	r7, #112	; 0x70
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
	...

0800ac08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b097      	sub	sp, #92	; 0x5c
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	4613      	mov	r3, r2
 800ac14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	88fa      	ldrh	r2, [r7, #6]
 800ac20:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	88fa      	ldrh	r2, [r7, #6]
 800ac28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac3a:	d10e      	bne.n	800ac5a <UART_Start_Receive_IT+0x52>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d105      	bne.n	800ac50 <UART_Start_Receive_IT+0x48>
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac4e:	e02d      	b.n	800acac <UART_Start_Receive_IT+0xa4>
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	22ff      	movs	r2, #255	; 0xff
 800ac54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac58:	e028      	b.n	800acac <UART_Start_Receive_IT+0xa4>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10d      	bne.n	800ac7e <UART_Start_Receive_IT+0x76>
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d104      	bne.n	800ac74 <UART_Start_Receive_IT+0x6c>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	22ff      	movs	r2, #255	; 0xff
 800ac6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac72:	e01b      	b.n	800acac <UART_Start_Receive_IT+0xa4>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	227f      	movs	r2, #127	; 0x7f
 800ac78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac7c:	e016      	b.n	800acac <UART_Start_Receive_IT+0xa4>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	689b      	ldr	r3, [r3, #8]
 800ac82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac86:	d10d      	bne.n	800aca4 <UART_Start_Receive_IT+0x9c>
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d104      	bne.n	800ac9a <UART_Start_Receive_IT+0x92>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	227f      	movs	r2, #127	; 0x7f
 800ac94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac98:	e008      	b.n	800acac <UART_Start_Receive_IT+0xa4>
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	223f      	movs	r2, #63	; 0x3f
 800ac9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aca2:	e003      	b.n	800acac <UART_Start_Receive_IT+0xa4>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2200      	movs	r2, #0
 800acb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	2222      	movs	r2, #34	; 0x22
 800acb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3308      	adds	r3, #8
 800acc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acc4:	e853 3f00 	ldrex	r3, [r3]
 800acc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800accc:	f043 0301 	orr.w	r3, r3, #1
 800acd0:	657b      	str	r3, [r7, #84]	; 0x54
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3308      	adds	r3, #8
 800acd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acda:	64ba      	str	r2, [r7, #72]	; 0x48
 800acdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ace0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ace2:	e841 2300 	strex	r3, r2, [r1]
 800ace6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ace8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	d1e5      	bne.n	800acba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acf6:	d107      	bne.n	800ad08 <UART_Start_Receive_IT+0x100>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d103      	bne.n	800ad08 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	4a24      	ldr	r2, [pc, #144]	; (800ad94 <UART_Start_Receive_IT+0x18c>)
 800ad04:	665a      	str	r2, [r3, #100]	; 0x64
 800ad06:	e002      	b.n	800ad0e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	4a23      	ldr	r2, [pc, #140]	; (800ad98 <UART_Start_Receive_IT+0x190>)
 800ad0c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2200      	movs	r2, #0
 800ad12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d019      	beq.n	800ad52 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad26:	e853 3f00 	ldrex	r3, [r3]
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ad32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad3c:	637b      	str	r3, [r7, #52]	; 0x34
 800ad3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e6      	bne.n	800ad1e <UART_Start_Receive_IT+0x116>
 800ad50:	e018      	b.n	800ad84 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	e853 3f00 	ldrex	r3, [r3]
 800ad5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	f043 0320 	orr.w	r3, r3, #32
 800ad66:	653b      	str	r3, [r7, #80]	; 0x50
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad70:	623b      	str	r3, [r7, #32]
 800ad72:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	69f9      	ldr	r1, [r7, #28]
 800ad76:	6a3a      	ldr	r2, [r7, #32]
 800ad78:	e841 2300 	strex	r3, r2, [r1]
 800ad7c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1e6      	bne.n	800ad52 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	375c      	adds	r7, #92	; 0x5c
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	0800b1b5 	.word	0x0800b1b5
 800ad98:	0800b059 	.word	0x0800b059

0800ad9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b095      	sub	sp, #84	; 0x54
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800adb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	461a      	mov	r2, r3
 800adc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adc2:	643b      	str	r3, [r7, #64]	; 0x40
 800adc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adca:	e841 2300 	strex	r3, r2, [r1]
 800adce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1e6      	bne.n	800ada4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	3308      	adds	r3, #8
 800addc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	e853 3f00 	ldrex	r3, [r3]
 800ade4:	61fb      	str	r3, [r7, #28]
   return(result);
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	f023 0301 	bic.w	r3, r3, #1
 800adec:	64bb      	str	r3, [r7, #72]	; 0x48
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3308      	adds	r3, #8
 800adf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adf8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adfe:	e841 2300 	strex	r3, r2, [r1]
 800ae02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1e5      	bne.n	800add6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d118      	bne.n	800ae44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	e853 3f00 	ldrex	r3, [r3]
 800ae1e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	f023 0310 	bic.w	r3, r3, #16
 800ae26:	647b      	str	r3, [r7, #68]	; 0x44
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae30:	61bb      	str	r3, [r7, #24]
 800ae32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae34:	6979      	ldr	r1, [r7, #20]
 800ae36:	69ba      	ldr	r2, [r7, #24]
 800ae38:	e841 2300 	strex	r3, r2, [r1]
 800ae3c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d1e6      	bne.n	800ae12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2220      	movs	r2, #32
 800ae48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2200      	movs	r2, #0
 800ae54:	665a      	str	r2, [r3, #100]	; 0x64
}
 800ae56:	bf00      	nop
 800ae58:	3754      	adds	r7, #84	; 0x54
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae62:	b580      	push	{r7, lr}
 800ae64:	b084      	sub	sp, #16
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f7ff faad 	bl	800a3e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae86:	bf00      	nop
 800ae88:	3710      	adds	r7, #16
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}

0800ae8e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b08f      	sub	sp, #60	; 0x3c
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae9a:	2b21      	cmp	r3, #33	; 0x21
 800ae9c:	d14c      	bne.n	800af38 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800aea4:	b29b      	uxth	r3, r3
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d132      	bne.n	800af10 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	e853 3f00 	ldrex	r3, [r3]
 800aeb6:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aebe:	637b      	str	r3, [r7, #52]	; 0x34
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aeca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aed0:	e841 2300 	strex	r3, r2, [r1]
 800aed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d1e6      	bne.n	800aeaa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	e853 3f00 	ldrex	r3, [r3]
 800aee8:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aef0:	633b      	str	r3, [r7, #48]	; 0x30
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	461a      	mov	r2, r3
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	61bb      	str	r3, [r7, #24]
 800aefc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefe:	6979      	ldr	r1, [r7, #20]
 800af00:	69ba      	ldr	r2, [r7, #24]
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	613b      	str	r3, [r7, #16]
   return(result);
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e6      	bne.n	800aedc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800af0e:	e013      	b.n	800af38 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af14:	781a      	ldrb	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af20:	1c5a      	adds	r2, r3, #1
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	3b01      	subs	r3, #1
 800af30:	b29a      	uxth	r2, r3
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800af38:	bf00      	nop
 800af3a:	373c      	adds	r7, #60	; 0x3c
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800af44:	b480      	push	{r7}
 800af46:	b091      	sub	sp, #68	; 0x44
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af50:	2b21      	cmp	r3, #33	; 0x21
 800af52:	d151      	bne.n	800aff8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d132      	bne.n	800afc6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	e853 3f00 	ldrex	r3, [r3]
 800af6c:	623b      	str	r3, [r7, #32]
   return(result);
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af74:	63bb      	str	r3, [r7, #56]	; 0x38
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	461a      	mov	r2, r3
 800af7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af7e:	633b      	str	r3, [r7, #48]	; 0x30
 800af80:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af86:	e841 2300 	strex	r3, r2, [r1]
 800af8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1e6      	bne.n	800af60 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	e853 3f00 	ldrex	r3, [r3]
 800af9e:	60fb      	str	r3, [r7, #12]
   return(result);
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa6:	637b      	str	r3, [r7, #52]	; 0x34
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	461a      	mov	r2, r3
 800afae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb0:	61fb      	str	r3, [r7, #28]
 800afb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb4:	69b9      	ldr	r1, [r7, #24]
 800afb6:	69fa      	ldr	r2, [r7, #28]
 800afb8:	e841 2300 	strex	r3, r2, [r1]
 800afbc:	617b      	str	r3, [r7, #20]
   return(result);
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1e6      	bne.n	800af92 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800afc4:	e018      	b.n	800aff8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800afcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afce:	881b      	ldrh	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800afda:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afe0:	1c9a      	adds	r2, r3, #2
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800afec:	b29b      	uxth	r3, r3
 800afee:	3b01      	subs	r3, #1
 800aff0:	b29a      	uxth	r2, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800aff8:	bf00      	nop
 800affa:	3744      	adds	r7, #68	; 0x44
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	e853 3f00 	ldrex	r3, [r3]
 800b018:	60bb      	str	r3, [r7, #8]
   return(result);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b020:	61fb      	str	r3, [r7, #28]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	61bb      	str	r3, [r7, #24]
 800b02c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02e:	6979      	ldr	r1, [r7, #20]
 800b030:	69ba      	ldr	r2, [r7, #24]
 800b032:	e841 2300 	strex	r3, r2, [r1]
 800b036:	613b      	str	r3, [r7, #16]
   return(result);
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d1e6      	bne.n	800b00c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2220      	movs	r2, #32
 800b042:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff f9be 	bl	800a3cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b050:	bf00      	nop
 800b052:	3720      	adds	r7, #32
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b096      	sub	sp, #88	; 0x58
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b066:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b06e:	2b22      	cmp	r3, #34	; 0x22
 800b070:	f040 8094 	bne.w	800b19c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b07a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b07e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800b082:	b2d9      	uxtb	r1, r3
 800b084:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b088:	b2da      	uxtb	r2, r3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b08e:	400a      	ands	r2, r1
 800b090:	b2d2      	uxtb	r2, r2
 800b092:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b098:	1c5a      	adds	r2, r3, #1
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	3b01      	subs	r3, #1
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d177      	bne.n	800b1ac <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	e853 3f00 	ldrex	r3, [r3]
 800b0c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0d0:	653b      	str	r3, [r7, #80]	; 0x50
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0da:	647b      	str	r3, [r7, #68]	; 0x44
 800b0dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0e2:	e841 2300 	strex	r3, r2, [r1]
 800b0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d1e6      	bne.n	800b0bc <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	3308      	adds	r3, #8
 800b0f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f8:	e853 3f00 	ldrex	r3, [r3]
 800b0fc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0fe:	6a3b      	ldr	r3, [r7, #32]
 800b100:	f023 0301 	bic.w	r3, r3, #1
 800b104:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	3308      	adds	r3, #8
 800b10c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b10e:	633a      	str	r2, [r7, #48]	; 0x30
 800b110:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b112:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b116:	e841 2300 	strex	r3, r2, [r1]
 800b11a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d1e5      	bne.n	800b0ee <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2220      	movs	r2, #32
 800b126:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b132:	2b01      	cmp	r3, #1
 800b134:	d12e      	bne.n	800b194 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2200      	movs	r2, #0
 800b13a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	60fb      	str	r3, [r7, #12]
   return(result);
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	f023 0310 	bic.w	r3, r3, #16
 800b150:	64bb      	str	r3, [r7, #72]	; 0x48
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	461a      	mov	r2, r3
 800b158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b15a:	61fb      	str	r3, [r7, #28]
 800b15c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b15e:	69b9      	ldr	r1, [r7, #24]
 800b160:	69fa      	ldr	r2, [r7, #28]
 800b162:	e841 2300 	strex	r3, r2, [r1]
 800b166:	617b      	str	r3, [r7, #20]
   return(result);
 800b168:	697b      	ldr	r3, [r7, #20]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d1e6      	bne.n	800b13c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	69db      	ldr	r3, [r3, #28]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2b10      	cmp	r3, #16
 800b17a:	d103      	bne.n	800b184 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2210      	movs	r2, #16
 800b182:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b18a:	4619      	mov	r1, r3
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f7ff f931 	bl	800a3f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b192:	e00b      	b.n	800b1ac <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7f6 fe0b 	bl	8001db0 <HAL_UART_RxCpltCallback>
}
 800b19a:	e007      	b.n	800b1ac <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	699a      	ldr	r2, [r3, #24]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f042 0208 	orr.w	r2, r2, #8
 800b1aa:	619a      	str	r2, [r3, #24]
}
 800b1ac:	bf00      	nop
 800b1ae:	3758      	adds	r7, #88	; 0x58
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b096      	sub	sp, #88	; 0x58
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1ca:	2b22      	cmp	r3, #34	; 0x22
 800b1cc:	f040 8094 	bne.w	800b2f8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b1e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b1e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	b29a      	uxth	r2, r3
 800b1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f4:	1c9a      	adds	r2, r3, #2
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b200:	b29b      	uxth	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	b29a      	uxth	r2, r3
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b212:	b29b      	uxth	r3, r3
 800b214:	2b00      	cmp	r3, #0
 800b216:	d177      	bne.n	800b308 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b220:	e853 3f00 	ldrex	r3, [r3]
 800b224:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b22c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	461a      	mov	r2, r3
 800b234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b236:	643b      	str	r3, [r7, #64]	; 0x40
 800b238:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b23c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b23e:	e841 2300 	strex	r3, r2, [r1]
 800b242:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	2b00      	cmp	r3, #0
 800b248:	d1e6      	bne.n	800b218 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	3308      	adds	r3, #8
 800b250:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	e853 3f00 	ldrex	r3, [r3]
 800b258:	61fb      	str	r3, [r7, #28]
   return(result);
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	f023 0301 	bic.w	r3, r3, #1
 800b260:	64bb      	str	r3, [r7, #72]	; 0x48
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	3308      	adds	r3, #8
 800b268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b26a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b26c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b272:	e841 2300 	strex	r3, r2, [r1]
 800b276:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1e5      	bne.n	800b24a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2220      	movs	r2, #32
 800b282:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b28e:	2b01      	cmp	r3, #1
 800b290:	d12e      	bne.n	800b2f0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	e853 3f00 	ldrex	r3, [r3]
 800b2a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	f023 0310 	bic.w	r3, r3, #16
 800b2ac:	647b      	str	r3, [r7, #68]	; 0x44
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b6:	61bb      	str	r3, [r7, #24]
 800b2b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ba:	6979      	ldr	r1, [r7, #20]
 800b2bc:	69ba      	ldr	r2, [r7, #24]
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d1e6      	bne.n	800b298 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f003 0310 	and.w	r3, r3, #16
 800b2d4:	2b10      	cmp	r3, #16
 800b2d6:	d103      	bne.n	800b2e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2210      	movs	r2, #16
 800b2de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	6878      	ldr	r0, [r7, #4]
 800b2ea:	f7ff f883 	bl	800a3f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2ee:	e00b      	b.n	800b308 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f7f6 fd5d 	bl	8001db0 <HAL_UART_RxCpltCallback>
}
 800b2f6:	e007      	b.n	800b308 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	699a      	ldr	r2, [r3, #24]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f042 0208 	orr.w	r2, r2, #8
 800b306:	619a      	str	r2, [r3, #24]
}
 800b308:	bf00      	nop
 800b30a:	3758      	adds	r7, #88	; 0x58
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d121      	bne.n	800b366 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681a      	ldr	r2, [r3, #0]
 800b326:	4b27      	ldr	r3, [pc, #156]	; (800b3c4 <FMC_SDRAM_Init+0xb4>)
 800b328:	4013      	ands	r3, r2
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	6851      	ldr	r1, [r2, #4]
 800b32e:	683a      	ldr	r2, [r7, #0]
 800b330:	6892      	ldr	r2, [r2, #8]
 800b332:	4311      	orrs	r1, r2
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	68d2      	ldr	r2, [r2, #12]
 800b338:	4311      	orrs	r1, r2
 800b33a:	683a      	ldr	r2, [r7, #0]
 800b33c:	6912      	ldr	r2, [r2, #16]
 800b33e:	4311      	orrs	r1, r2
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	6952      	ldr	r2, [r2, #20]
 800b344:	4311      	orrs	r1, r2
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	6992      	ldr	r2, [r2, #24]
 800b34a:	4311      	orrs	r1, r2
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	69d2      	ldr	r2, [r2, #28]
 800b350:	4311      	orrs	r1, r2
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	6a12      	ldr	r2, [r2, #32]
 800b356:	4311      	orrs	r1, r2
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b35c:	430a      	orrs	r2, r1
 800b35e:	431a      	orrs	r2, r3
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	601a      	str	r2, [r3, #0]
 800b364:	e026      	b.n	800b3b4 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	69d9      	ldr	r1, [r3, #28]
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	6a1b      	ldr	r3, [r3, #32]
 800b376:	4319      	orrs	r1, r3
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	430b      	orrs	r3, r1
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685a      	ldr	r2, [r3, #4]
 800b388:	4b0e      	ldr	r3, [pc, #56]	; (800b3c4 <FMC_SDRAM_Init+0xb4>)
 800b38a:	4013      	ands	r3, r2
 800b38c:	683a      	ldr	r2, [r7, #0]
 800b38e:	6851      	ldr	r1, [r2, #4]
 800b390:	683a      	ldr	r2, [r7, #0]
 800b392:	6892      	ldr	r2, [r2, #8]
 800b394:	4311      	orrs	r1, r2
 800b396:	683a      	ldr	r2, [r7, #0]
 800b398:	68d2      	ldr	r2, [r2, #12]
 800b39a:	4311      	orrs	r1, r2
 800b39c:	683a      	ldr	r2, [r7, #0]
 800b39e:	6912      	ldr	r2, [r2, #16]
 800b3a0:	4311      	orrs	r1, r2
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	6952      	ldr	r2, [r2, #20]
 800b3a6:	4311      	orrs	r1, r2
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	6992      	ldr	r2, [r2, #24]
 800b3ac:	430a      	orrs	r2, r1
 800b3ae:	431a      	orrs	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800b3b4:	2300      	movs	r3, #0
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	370c      	adds	r7, #12
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c0:	4770      	bx	lr
 800b3c2:	bf00      	nop
 800b3c4:	ffff8000 	.word	0xffff8000

0800b3c8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b3c8:	b480      	push	{r7}
 800b3ca:	b085      	sub	sp, #20
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d128      	bne.n	800b42c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	689b      	ldr	r3, [r3, #8]
 800b3de:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	1e59      	subs	r1, r3, #1
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	685b      	ldr	r3, [r3, #4]
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	011b      	lsls	r3, r3, #4
 800b3f0:	4319      	orrs	r1, r3
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	689b      	ldr	r3, [r3, #8]
 800b3f6:	3b01      	subs	r3, #1
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	4319      	orrs	r1, r3
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	3b01      	subs	r3, #1
 800b402:	031b      	lsls	r3, r3, #12
 800b404:	4319      	orrs	r1, r3
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	3b01      	subs	r3, #1
 800b40c:	041b      	lsls	r3, r3, #16
 800b40e:	4319      	orrs	r1, r3
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	695b      	ldr	r3, [r3, #20]
 800b414:	3b01      	subs	r3, #1
 800b416:	051b      	lsls	r3, r3, #20
 800b418:	4319      	orrs	r1, r3
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	699b      	ldr	r3, [r3, #24]
 800b41e:	3b01      	subs	r3, #1
 800b420:	061b      	lsls	r3, r3, #24
 800b422:	430b      	orrs	r3, r1
 800b424:	431a      	orrs	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	609a      	str	r2, [r3, #8]
 800b42a:	e02d      	b.n	800b488 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	689a      	ldr	r2, [r3, #8]
 800b430:	4b19      	ldr	r3, [pc, #100]	; (800b498 <FMC_SDRAM_Timing_Init+0xd0>)
 800b432:	4013      	ands	r3, r2
 800b434:	68ba      	ldr	r2, [r7, #8]
 800b436:	68d2      	ldr	r2, [r2, #12]
 800b438:	3a01      	subs	r2, #1
 800b43a:	0311      	lsls	r1, r2, #12
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	6952      	ldr	r2, [r2, #20]
 800b440:	3a01      	subs	r2, #1
 800b442:	0512      	lsls	r2, r2, #20
 800b444:	430a      	orrs	r2, r1
 800b446:	431a      	orrs	r2, r3
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	68db      	ldr	r3, [r3, #12]
 800b450:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	1e59      	subs	r1, r3, #1
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	3b01      	subs	r3, #1
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	4319      	orrs	r1, r3
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	3b01      	subs	r3, #1
 800b46a:	021b      	lsls	r3, r3, #8
 800b46c:	4319      	orrs	r1, r3
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	3b01      	subs	r3, #1
 800b474:	041b      	lsls	r3, r3, #16
 800b476:	4319      	orrs	r1, r3
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	699b      	ldr	r3, [r3, #24]
 800b47c:	3b01      	subs	r3, #1
 800b47e:	061b      	lsls	r3, r3, #24
 800b480:	430b      	orrs	r3, r1
 800b482:	431a      	orrs	r2, r3
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3714      	adds	r7, #20
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	ff0f0fff 	.word	0xff0f0fff

0800b49c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	691a      	ldr	r2, [r3, #16]
 800b4ac:	4b0c      	ldr	r3, [pc, #48]	; (800b4e0 <FMC_SDRAM_SendCommand+0x44>)
 800b4ae:	4013      	ands	r3, r2
 800b4b0:	68ba      	ldr	r2, [r7, #8]
 800b4b2:	6811      	ldr	r1, [r2, #0]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	6852      	ldr	r2, [r2, #4]
 800b4b8:	4311      	orrs	r1, r2
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	6892      	ldr	r2, [r2, #8]
 800b4be:	3a01      	subs	r2, #1
 800b4c0:	0152      	lsls	r2, r2, #5
 800b4c2:	4311      	orrs	r1, r2
 800b4c4:	68ba      	ldr	r2, [r7, #8]
 800b4c6:	68d2      	ldr	r2, [r2, #12]
 800b4c8:	0252      	lsls	r2, r2, #9
 800b4ca:	430a      	orrs	r2, r1
 800b4cc:	431a      	orrs	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800b4d2:	2300      	movs	r3, #0
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	ffc00000 	.word	0xffc00000

0800b4e4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	695a      	ldr	r2, [r3, #20]
 800b4f2:	4b07      	ldr	r3, [pc, #28]	; (800b510 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	0052      	lsls	r2, r2, #1
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800b500:	2300      	movs	r3, #0
}
 800b502:	4618      	mov	r0, r3
 800b504:	370c      	adds	r7, #12
 800b506:	46bd      	mov	sp, r7
 800b508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50c:	4770      	bx	lr
 800b50e:	bf00      	nop
 800b510:	ffffc001 	.word	0xffffc001

0800b514 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b514:	b480      	push	{r7}
 800b516:	b085      	sub	sp, #20
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b51e:	2300      	movs	r3, #0
 800b520:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b522:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b526:	2b84      	cmp	r3, #132	; 0x84
 800b528:	d005      	beq.n	800b536 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b52a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	4413      	add	r3, r2
 800b532:	3303      	adds	r3, #3
 800b534:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b536:	68fb      	ldr	r3, [r7, #12]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b548:	f001 fa18 	bl	800c97c <vTaskStartScheduler>
  
  return osOK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	bd80      	pop	{r7, pc}

0800b552 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b552:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b554:	b089      	sub	sp, #36	; 0x24
 800b556:	af04      	add	r7, sp, #16
 800b558:	6078      	str	r0, [r7, #4]
 800b55a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d020      	beq.n	800b5a6 <osThreadCreate+0x54>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	699b      	ldr	r3, [r3, #24]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d01c      	beq.n	800b5a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	685c      	ldr	r4, [r3, #4]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681d      	ldr	r5, [r3, #0]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	691e      	ldr	r6, [r3, #16]
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff ffc8 	bl	800b514 <makeFreeRtosPriority>
 800b584:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	695b      	ldr	r3, [r3, #20]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b58e:	9202      	str	r2, [sp, #8]
 800b590:	9301      	str	r3, [sp, #4]
 800b592:	9100      	str	r1, [sp, #0]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	4632      	mov	r2, r6
 800b598:	4629      	mov	r1, r5
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fef0 	bl	800c380 <xTaskCreateStatic>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e01c      	b.n	800b5e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	685c      	ldr	r4, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b5b2:	b29e      	uxth	r6, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff ffaa 	bl	800b514 <makeFreeRtosPriority>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	f107 030c 	add.w	r3, r7, #12
 800b5c6:	9301      	str	r3, [sp, #4]
 800b5c8:	9200      	str	r2, [sp, #0]
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	4632      	mov	r2, r6
 800b5ce:	4629      	mov	r1, r5
 800b5d0:	4620      	mov	r0, r4
 800b5d2:	f000 ff38 	bl	800c446 <xTaskCreate>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d001      	beq.n	800b5e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e000      	b.n	800b5e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3714      	adds	r7, #20
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b5ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b5ea:	b580      	push	{r7, lr}
 800b5ec:	b084      	sub	sp, #16
 800b5ee:	af00      	add	r7, sp, #0
 800b5f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d001      	beq.n	800b600 <osDelay+0x16>
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	e000      	b.n	800b602 <osDelay+0x18>
 800b600:	2301      	movs	r3, #1
 800b602:	4618      	mov	r0, r3
 800b604:	f001 f984 	bl	800c910 <vTaskDelay>
  
  return osOK;
 800b608:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3710      	adds	r7, #16
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}

0800b612 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b082      	sub	sp, #8
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	685b      	ldr	r3, [r3, #4]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d007      	beq.n	800b632 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	685b      	ldr	r3, [r3, #4]
 800b626:	4619      	mov	r1, r3
 800b628:	2001      	movs	r0, #1
 800b62a:	f000 fa66 	bl	800bafa <xQueueCreateMutexStatic>
 800b62e:	4603      	mov	r3, r0
 800b630:	e003      	b.n	800b63a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b632:	2001      	movs	r0, #1
 800b634:	f000 fa49 	bl	800baca <xQueueCreateMutex>
 800b638:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b642:	b590      	push	{r4, r7, lr}
 800b644:	b085      	sub	sp, #20
 800b646:	af02      	add	r7, sp, #8
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d011      	beq.n	800b678 <osMessageCreate+0x36>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68db      	ldr	r3, [r3, #12]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d00d      	beq.n	800b678 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6818      	ldr	r0, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6859      	ldr	r1, [r3, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	689a      	ldr	r2, [r3, #8]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	2400      	movs	r4, #0
 800b66e:	9400      	str	r4, [sp, #0]
 800b670:	f000 f92e 	bl	800b8d0 <xQueueGenericCreateStatic>
 800b674:	4603      	mov	r3, r0
 800b676:	e008      	b.n	800b68a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	6818      	ldr	r0, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	4619      	mov	r1, r3
 800b684:	f000 f9a6 	bl	800b9d4 <xQueueGenericCreate>
 800b688:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd90      	pop	{r4, r7, pc}

0800b692 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b692:	b480      	push	{r7}
 800b694:	b083      	sub	sp, #12
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f103 0208 	add.w	r2, r3, #8
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f103 0208 	add.w	r2, r3, #8
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f103 0208 	add.w	r2, r3, #8
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b6c6:	bf00      	nop
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr

0800b6d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b6d2:	b480      	push	{r7}
 800b6d4:	b083      	sub	sp, #12
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b6e0:	bf00      	nop
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr

0800b6ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	689a      	ldr	r2, [r3, #8]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	683a      	ldr	r2, [r7, #0]
 800b716:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	601a      	str	r2, [r3, #0]
}
 800b728:	bf00      	nop
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74a:	d103      	bne.n	800b754 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	e00c      	b.n	800b76e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3308      	adds	r3, #8
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	e002      	b.n	800b762 <vListInsert+0x2e>
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	685b      	ldr	r3, [r3, #4]
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d2f6      	bcs.n	800b75c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	1c5a      	adds	r2, r3, #1
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	601a      	str	r2, [r3, #0]
}
 800b79a:	bf00      	nop
 800b79c:	3714      	adds	r7, #20
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	b085      	sub	sp, #20
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	6892      	ldr	r2, [r2, #8]
 800b7bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	6852      	ldr	r2, [r2, #4]
 800b7c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d103      	bne.n	800b7da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	689a      	ldr	r2, [r3, #8]
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	1e5a      	subs	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
	...

0800b7fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b084      	sub	sp, #16
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10c      	bne.n	800b82a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b814:	b672      	cpsid	i
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	b662      	cpsie	i
 800b824:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b826:	bf00      	nop
 800b828:	e7fe      	b.n	800b828 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b82a:	f002 f817 	bl	800d85c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b836:	68f9      	ldr	r1, [r7, #12]
 800b838:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b83a:	fb01 f303 	mul.w	r3, r1, r3
 800b83e:	441a      	add	r2, r3
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2200      	movs	r2, #0
 800b848:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b85a:	3b01      	subs	r3, #1
 800b85c:	68f9      	ldr	r1, [r7, #12]
 800b85e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b860:	fb01 f303 	mul.w	r3, r1, r3
 800b864:	441a      	add	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	22ff      	movs	r2, #255	; 0xff
 800b86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	22ff      	movs	r2, #255	; 0xff
 800b876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d114      	bne.n	800b8aa <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01a      	beq.n	800b8be <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3310      	adds	r3, #16
 800b88c:	4618      	mov	r0, r3
 800b88e:	f001 fad3 	bl	800ce38 <xTaskRemoveFromEventList>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d012      	beq.n	800b8be <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b898:	4b0c      	ldr	r3, [pc, #48]	; (800b8cc <xQueueGenericReset+0xd0>)
 800b89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b89e:	601a      	str	r2, [r3, #0]
 800b8a0:	f3bf 8f4f 	dsb	sy
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	e009      	b.n	800b8be <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	3310      	adds	r3, #16
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7ff feef 	bl	800b692 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	3324      	adds	r3, #36	; 0x24
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f7ff feea 	bl	800b692 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b8be:	f002 f801 	bl	800d8c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b8c2:	2301      	movs	r3, #1
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3710      	adds	r7, #16
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}
 800b8cc:	e000ed04 	.word	0xe000ed04

0800b8d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b08e      	sub	sp, #56	; 0x38
 800b8d4:	af02      	add	r7, sp, #8
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10c      	bne.n	800b8fe <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8e8:	b672      	cpsid	i
 800b8ea:	f383 8811 	msr	BASEPRI, r3
 800b8ee:	f3bf 8f6f 	isb	sy
 800b8f2:	f3bf 8f4f 	dsb	sy
 800b8f6:	b662      	cpsie	i
 800b8f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b8fa:	bf00      	nop
 800b8fc:	e7fe      	b.n	800b8fc <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10c      	bne.n	800b91e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b908:	b672      	cpsid	i
 800b90a:	f383 8811 	msr	BASEPRI, r3
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f3bf 8f4f 	dsb	sy
 800b916:	b662      	cpsie	i
 800b918:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b91a:	bf00      	nop
 800b91c:	e7fe      	b.n	800b91c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <xQueueGenericCreateStatic+0x5a>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d001      	beq.n	800b92e <xQueueGenericCreateStatic+0x5e>
 800b92a:	2301      	movs	r3, #1
 800b92c:	e000      	b.n	800b930 <xQueueGenericCreateStatic+0x60>
 800b92e:	2300      	movs	r3, #0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10c      	bne.n	800b94e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	b672      	cpsid	i
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	b662      	cpsie	i
 800b948:	623b      	str	r3, [r7, #32]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d102      	bne.n	800b95a <xQueueGenericCreateStatic+0x8a>
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <xQueueGenericCreateStatic+0x8e>
 800b95a:	2301      	movs	r3, #1
 800b95c:	e000      	b.n	800b960 <xQueueGenericCreateStatic+0x90>
 800b95e:	2300      	movs	r3, #0
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10c      	bne.n	800b97e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	b672      	cpsid	i
 800b96a:	f383 8811 	msr	BASEPRI, r3
 800b96e:	f3bf 8f6f 	isb	sy
 800b972:	f3bf 8f4f 	dsb	sy
 800b976:	b662      	cpsie	i
 800b978:	61fb      	str	r3, [r7, #28]
}
 800b97a:	bf00      	nop
 800b97c:	e7fe      	b.n	800b97c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b97e:	2348      	movs	r3, #72	; 0x48
 800b980:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b982:	697b      	ldr	r3, [r7, #20]
 800b984:	2b48      	cmp	r3, #72	; 0x48
 800b986:	d00c      	beq.n	800b9a2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800b988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b98c:	b672      	cpsid	i
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	b662      	cpsie	i
 800b99c:	61bb      	str	r3, [r7, #24]
}
 800b99e:	bf00      	nop
 800b9a0:	e7fe      	b.n	800b9a0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00d      	beq.n	800b9ca <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b9b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800b9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	4613      	mov	r3, r2
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f000 f847 	bl	800ba58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3730      	adds	r7, #48	; 0x30
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b08a      	sub	sp, #40	; 0x28
 800b9d8:	af02      	add	r7, sp, #8
 800b9da:	60f8      	str	r0, [r7, #12]
 800b9dc:	60b9      	str	r1, [r7, #8]
 800b9de:	4613      	mov	r3, r2
 800b9e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d10c      	bne.n	800ba02 <xQueueGenericCreate+0x2e>
	__asm volatile
 800b9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ec:	b672      	cpsid	i
 800b9ee:	f383 8811 	msr	BASEPRI, r3
 800b9f2:	f3bf 8f6f 	isb	sy
 800b9f6:	f3bf 8f4f 	dsb	sy
 800b9fa:	b662      	cpsie	i
 800b9fc:	613b      	str	r3, [r7, #16]
}
 800b9fe:	bf00      	nop
 800ba00:	e7fe      	b.n	800ba00 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d102      	bne.n	800ba0e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	61fb      	str	r3, [r7, #28]
 800ba0c:	e004      	b.n	800ba18 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	fb02 f303 	mul.w	r3, r2, r3
 800ba16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	3348      	adds	r3, #72	; 0x48
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f002 f805 	bl	800da2c <pvPortMalloc>
 800ba22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d011      	beq.n	800ba4e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	3348      	adds	r3, #72	; 0x48
 800ba32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba34:	69bb      	ldr	r3, [r7, #24]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba3c:	79fa      	ldrb	r2, [r7, #7]
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	9300      	str	r3, [sp, #0]
 800ba42:	4613      	mov	r3, r2
 800ba44:	697a      	ldr	r2, [r7, #20]
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 f805 	bl	800ba58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba4e:	69bb      	ldr	r3, [r7, #24]
	}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3720      	adds	r7, #32
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d103      	bne.n	800ba74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	69ba      	ldr	r2, [r7, #24]
 800ba70:	601a      	str	r2, [r3, #0]
 800ba72:	e002      	b.n	800ba7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ba86:	2101      	movs	r1, #1
 800ba88:	69b8      	ldr	r0, [r7, #24]
 800ba8a:	f7ff feb7 	bl	800b7fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ba8e:	bf00      	nop
 800ba90:	3710      	adds	r7, #16
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d00e      	beq.n	800bac2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bab6:	2300      	movs	r3, #0
 800bab8:	2200      	movs	r2, #0
 800baba:	2100      	movs	r1, #0
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f837 	bl	800bb30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bac2:	bf00      	nop
 800bac4:	3708      	adds	r7, #8
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}

0800baca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800baca:	b580      	push	{r7, lr}
 800bacc:	b086      	sub	sp, #24
 800bace:	af00      	add	r7, sp, #0
 800bad0:	4603      	mov	r3, r0
 800bad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bad4:	2301      	movs	r3, #1
 800bad6:	617b      	str	r3, [r7, #20]
 800bad8:	2300      	movs	r3, #0
 800bada:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800badc:	79fb      	ldrb	r3, [r7, #7]
 800bade:	461a      	mov	r2, r3
 800bae0:	6939      	ldr	r1, [r7, #16]
 800bae2:	6978      	ldr	r0, [r7, #20]
 800bae4:	f7ff ff76 	bl	800b9d4 <xQueueGenericCreate>
 800bae8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff ffd3 	bl	800ba96 <prvInitialiseMutex>

		return xNewQueue;
 800baf0:	68fb      	ldr	r3, [r7, #12]
	}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3718      	adds	r7, #24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}

0800bafa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bafa:	b580      	push	{r7, lr}
 800bafc:	b088      	sub	sp, #32
 800bafe:	af02      	add	r7, sp, #8
 800bb00:	4603      	mov	r3, r0
 800bb02:	6039      	str	r1, [r7, #0]
 800bb04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb06:	2301      	movs	r3, #1
 800bb08:	617b      	str	r3, [r7, #20]
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	9300      	str	r3, [sp, #0]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	2200      	movs	r2, #0
 800bb16:	6939      	ldr	r1, [r7, #16]
 800bb18:	6978      	ldr	r0, [r7, #20]
 800bb1a:	f7ff fed9 	bl	800b8d0 <xQueueGenericCreateStatic>
 800bb1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb20:	68f8      	ldr	r0, [r7, #12]
 800bb22:	f7ff ffb8 	bl	800ba96 <prvInitialiseMutex>

		return xNewQueue;
 800bb26:	68fb      	ldr	r3, [r7, #12]
	}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b08e      	sub	sp, #56	; 0x38
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	60f8      	str	r0, [r7, #12]
 800bb38:	60b9      	str	r1, [r7, #8]
 800bb3a:	607a      	str	r2, [r7, #4]
 800bb3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10c      	bne.n	800bb66 <xQueueGenericSend+0x36>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	b672      	cpsid	i
 800bb52:	f383 8811 	msr	BASEPRI, r3
 800bb56:	f3bf 8f6f 	isb	sy
 800bb5a:	f3bf 8f4f 	dsb	sy
 800bb5e:	b662      	cpsie	i
 800bb60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bb62:	bf00      	nop
 800bb64:	e7fe      	b.n	800bb64 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bb66:	68bb      	ldr	r3, [r7, #8]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d103      	bne.n	800bb74 <xQueueGenericSend+0x44>
 800bb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <xQueueGenericSend+0x48>
 800bb74:	2301      	movs	r3, #1
 800bb76:	e000      	b.n	800bb7a <xQueueGenericSend+0x4a>
 800bb78:	2300      	movs	r3, #0
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10c      	bne.n	800bb98 <xQueueGenericSend+0x68>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	b672      	cpsid	i
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	b662      	cpsie	i
 800bb92:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d103      	bne.n	800bba6 <xQueueGenericSend+0x76>
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d101      	bne.n	800bbaa <xQueueGenericSend+0x7a>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e000      	b.n	800bbac <xQueueGenericSend+0x7c>
 800bbaa:	2300      	movs	r3, #0
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10c      	bne.n	800bbca <xQueueGenericSend+0x9a>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	b672      	cpsid	i
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	b662      	cpsie	i
 800bbc4:	623b      	str	r3, [r7, #32]
}
 800bbc6:	bf00      	nop
 800bbc8:	e7fe      	b.n	800bbc8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bbca:	f001 fafd 	bl	800d1c8 <xTaskGetSchedulerState>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <xQueueGenericSend+0xaa>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <xQueueGenericSend+0xae>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	e000      	b.n	800bbe0 <xQueueGenericSend+0xb0>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d10c      	bne.n	800bbfe <xQueueGenericSend+0xce>
	__asm volatile
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	b672      	cpsid	i
 800bbea:	f383 8811 	msr	BASEPRI, r3
 800bbee:	f3bf 8f6f 	isb	sy
 800bbf2:	f3bf 8f4f 	dsb	sy
 800bbf6:	b662      	cpsie	i
 800bbf8:	61fb      	str	r3, [r7, #28]
}
 800bbfa:	bf00      	nop
 800bbfc:	e7fe      	b.n	800bbfc <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bbfe:	f001 fe2d 	bl	800d85c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d302      	bcc.n	800bc14 <xQueueGenericSend+0xe4>
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d129      	bne.n	800bc68 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc14:	683a      	ldr	r2, [r7, #0]
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc1a:	f000 faa1 	bl	800c160 <prvCopyDataToQueue>
 800bc1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d010      	beq.n	800bc4a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2a:	3324      	adds	r3, #36	; 0x24
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f001 f903 	bl	800ce38 <xTaskRemoveFromEventList>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d013      	beq.n	800bc60 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bc38:	4b3f      	ldr	r3, [pc, #252]	; (800bd38 <xQueueGenericSend+0x208>)
 800bc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc3e:	601a      	str	r2, [r3, #0]
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	e00a      	b.n	800bc60 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bc4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d007      	beq.n	800bc60 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bc50:	4b39      	ldr	r3, [pc, #228]	; (800bd38 <xQueueGenericSend+0x208>)
 800bc52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bc60:	f001 fe30 	bl	800d8c4 <vPortExitCritical>
				return pdPASS;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e063      	b.n	800bd30 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d103      	bne.n	800bc76 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bc6e:	f001 fe29 	bl	800d8c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e05c      	b.n	800bd30 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bc76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d106      	bne.n	800bc8a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bc7c:	f107 0314 	add.w	r3, r7, #20
 800bc80:	4618      	mov	r0, r3
 800bc82:	f001 f93d 	bl	800cf00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bc86:	2301      	movs	r3, #1
 800bc88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bc8a:	f001 fe1b 	bl	800d8c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bc8e:	f000 fee3 	bl	800ca58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bc92:	f001 fde3 	bl	800d85c <vPortEnterCritical>
 800bc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc9c:	b25b      	sxtb	r3, r3
 800bc9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bca2:	d103      	bne.n	800bcac <xQueueGenericSend+0x17c>
 800bca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcb2:	b25b      	sxtb	r3, r3
 800bcb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb8:	d103      	bne.n	800bcc2 <xQueueGenericSend+0x192>
 800bcba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bcc2:	f001 fdff 	bl	800d8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcc6:	1d3a      	adds	r2, r7, #4
 800bcc8:	f107 0314 	add.w	r3, r7, #20
 800bccc:	4611      	mov	r1, r2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f001 f92c 	bl	800cf2c <xTaskCheckForTimeOut>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d124      	bne.n	800bd24 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bcda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcdc:	f000 fb38 	bl	800c350 <prvIsQueueFull>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d018      	beq.n	800bd18 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	3310      	adds	r3, #16
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	4611      	mov	r1, r2
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 f87c 	bl	800cdec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bcf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcf6:	f000 fac3 	bl	800c280 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bcfa:	f000 febb 	bl	800ca74 <xTaskResumeAll>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f47f af7c 	bne.w	800bbfe <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bd06:	4b0c      	ldr	r3, [pc, #48]	; (800bd38 <xQueueGenericSend+0x208>)
 800bd08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd0c:	601a      	str	r2, [r3, #0]
 800bd0e:	f3bf 8f4f 	dsb	sy
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	e772      	b.n	800bbfe <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bd18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd1a:	f000 fab1 	bl	800c280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd1e:	f000 fea9 	bl	800ca74 <xTaskResumeAll>
 800bd22:	e76c      	b.n	800bbfe <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bd24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd26:	f000 faab 	bl	800c280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd2a:	f000 fea3 	bl	800ca74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bd2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3738      	adds	r7, #56	; 0x38
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	e000ed04 	.word	0xe000ed04

0800bd3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b08c      	sub	sp, #48	; 0x30
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d10c      	bne.n	800bd70 <xQueueReceive+0x34>
	__asm volatile
 800bd56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd5a:	b672      	cpsid	i
 800bd5c:	f383 8811 	msr	BASEPRI, r3
 800bd60:	f3bf 8f6f 	isb	sy
 800bd64:	f3bf 8f4f 	dsb	sy
 800bd68:	b662      	cpsie	i
 800bd6a:	623b      	str	r3, [r7, #32]
}
 800bd6c:	bf00      	nop
 800bd6e:	e7fe      	b.n	800bd6e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d103      	bne.n	800bd7e <xQueueReceive+0x42>
 800bd76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d101      	bne.n	800bd82 <xQueueReceive+0x46>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e000      	b.n	800bd84 <xQueueReceive+0x48>
 800bd82:	2300      	movs	r3, #0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10c      	bne.n	800bda2 <xQueueReceive+0x66>
	__asm volatile
 800bd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd8c:	b672      	cpsid	i
 800bd8e:	f383 8811 	msr	BASEPRI, r3
 800bd92:	f3bf 8f6f 	isb	sy
 800bd96:	f3bf 8f4f 	dsb	sy
 800bd9a:	b662      	cpsie	i
 800bd9c:	61fb      	str	r3, [r7, #28]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bda2:	f001 fa11 	bl	800d1c8 <xTaskGetSchedulerState>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d102      	bne.n	800bdb2 <xQueueReceive+0x76>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d101      	bne.n	800bdb6 <xQueueReceive+0x7a>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e000      	b.n	800bdb8 <xQueueReceive+0x7c>
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10c      	bne.n	800bdd6 <xQueueReceive+0x9a>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc0:	b672      	cpsid	i
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	b662      	cpsie	i
 800bdd0:	61bb      	str	r3, [r7, #24]
}
 800bdd2:	bf00      	nop
 800bdd4:	e7fe      	b.n	800bdd4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdd6:	f001 fd41 	bl	800d85c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdde:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d01f      	beq.n	800be26 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bde6:	68b9      	ldr	r1, [r7, #8]
 800bde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdea:	f000 fa23 	bl	800c234 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	1e5a      	subs	r2, r3, #1
 800bdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d00f      	beq.n	800be1e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be00:	3310      	adds	r3, #16
 800be02:	4618      	mov	r0, r3
 800be04:	f001 f818 	bl	800ce38 <xTaskRemoveFromEventList>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d007      	beq.n	800be1e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be0e:	4b3d      	ldr	r3, [pc, #244]	; (800bf04 <xQueueReceive+0x1c8>)
 800be10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	f3bf 8f4f 	dsb	sy
 800be1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800be1e:	f001 fd51 	bl	800d8c4 <vPortExitCritical>
				return pdPASS;
 800be22:	2301      	movs	r3, #1
 800be24:	e069      	b.n	800befa <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d103      	bne.n	800be34 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be2c:	f001 fd4a 	bl	800d8c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800be30:	2300      	movs	r3, #0
 800be32:	e062      	b.n	800befa <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be36:	2b00      	cmp	r3, #0
 800be38:	d106      	bne.n	800be48 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be3a:	f107 0310 	add.w	r3, r7, #16
 800be3e:	4618      	mov	r0, r3
 800be40:	f001 f85e 	bl	800cf00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be44:	2301      	movs	r3, #1
 800be46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be48:	f001 fd3c 	bl	800d8c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be4c:	f000 fe04 	bl	800ca58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be50:	f001 fd04 	bl	800d85c <vPortEnterCritical>
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be5a:	b25b      	sxtb	r3, r3
 800be5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be60:	d103      	bne.n	800be6a <xQueueReceive+0x12e>
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	2200      	movs	r2, #0
 800be66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be70:	b25b      	sxtb	r3, r3
 800be72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be76:	d103      	bne.n	800be80 <xQueueReceive+0x144>
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	2200      	movs	r2, #0
 800be7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800be80:	f001 fd20 	bl	800d8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800be84:	1d3a      	adds	r2, r7, #4
 800be86:	f107 0310 	add.w	r3, r7, #16
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f001 f84d 	bl	800cf2c <xTaskCheckForTimeOut>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d123      	bne.n	800bee0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800be98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be9a:	f000 fa43 	bl	800c324 <prvIsQueueEmpty>
 800be9e:	4603      	mov	r3, r0
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d017      	beq.n	800bed4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea6:	3324      	adds	r3, #36	; 0x24
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	4611      	mov	r1, r2
 800beac:	4618      	mov	r0, r3
 800beae:	f000 ff9d 	bl	800cdec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800beb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb4:	f000 f9e4 	bl	800c280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800beb8:	f000 fddc 	bl	800ca74 <xTaskResumeAll>
 800bebc:	4603      	mov	r3, r0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d189      	bne.n	800bdd6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800bec2:	4b10      	ldr	r3, [pc, #64]	; (800bf04 <xQueueReceive+0x1c8>)
 800bec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bec8:	601a      	str	r2, [r3, #0]
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	f3bf 8f6f 	isb	sy
 800bed2:	e780      	b.n	800bdd6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bed6:	f000 f9d3 	bl	800c280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800beda:	f000 fdcb 	bl	800ca74 <xTaskResumeAll>
 800bede:	e77a      	b.n	800bdd6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bee2:	f000 f9cd 	bl	800c280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bee6:	f000 fdc5 	bl	800ca74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800beea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beec:	f000 fa1a 	bl	800c324 <prvIsQueueEmpty>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f43f af6f 	beq.w	800bdd6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bef8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800befa:	4618      	mov	r0, r3
 800befc:	3730      	adds	r7, #48	; 0x30
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	e000ed04 	.word	0xe000ed04

0800bf08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b08e      	sub	sp, #56	; 0x38
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf12:	2300      	movs	r3, #0
 800bf14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10c      	bne.n	800bf3e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	b672      	cpsid	i
 800bf2a:	f383 8811 	msr	BASEPRI, r3
 800bf2e:	f3bf 8f6f 	isb	sy
 800bf32:	f3bf 8f4f 	dsb	sy
 800bf36:	b662      	cpsie	i
 800bf38:	623b      	str	r3, [r7, #32]
}
 800bf3a:	bf00      	nop
 800bf3c:	e7fe      	b.n	800bf3c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00c      	beq.n	800bf60 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4a:	b672      	cpsid	i
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	b662      	cpsie	i
 800bf5a:	61fb      	str	r3, [r7, #28]
}
 800bf5c:	bf00      	nop
 800bf5e:	e7fe      	b.n	800bf5e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf60:	f001 f932 	bl	800d1c8 <xTaskGetSchedulerState>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d102      	bne.n	800bf70 <xQueueSemaphoreTake+0x68>
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d101      	bne.n	800bf74 <xQueueSemaphoreTake+0x6c>
 800bf70:	2301      	movs	r3, #1
 800bf72:	e000      	b.n	800bf76 <xQueueSemaphoreTake+0x6e>
 800bf74:	2300      	movs	r3, #0
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10c      	bne.n	800bf94 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800bf7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7e:	b672      	cpsid	i
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	b662      	cpsie	i
 800bf8e:	61bb      	str	r3, [r7, #24]
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf94:	f001 fc62 	bl	800d85c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d024      	beq.n	800bfee <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800bfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfa6:	1e5a      	subs	r2, r3, #1
 800bfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfaa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bfac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d104      	bne.n	800bfbe <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800bfb4:	f001 face 	bl	800d554 <pvTaskIncrementMutexHeldCount>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc0:	691b      	ldr	r3, [r3, #16]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00f      	beq.n	800bfe6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	3310      	adds	r3, #16
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 ff34 	bl	800ce38 <xTaskRemoveFromEventList>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d007      	beq.n	800bfe6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bfd6:	4b55      	ldr	r3, [pc, #340]	; (800c12c <xQueueSemaphoreTake+0x224>)
 800bfd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bfe6:	f001 fc6d 	bl	800d8c4 <vPortExitCritical>
				return pdPASS;
 800bfea:	2301      	movs	r3, #1
 800bfec:	e099      	b.n	800c122 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d113      	bne.n	800c01c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800bff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00c      	beq.n	800c014 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffe:	b672      	cpsid	i
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	b662      	cpsie	i
 800c00e:	617b      	str	r3, [r7, #20]
}
 800c010:	bf00      	nop
 800c012:	e7fe      	b.n	800c012 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c014:	f001 fc56 	bl	800d8c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c018:	2300      	movs	r3, #0
 800c01a:	e082      	b.n	800c122 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d106      	bne.n	800c030 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c022:	f107 030c 	add.w	r3, r7, #12
 800c026:	4618      	mov	r0, r3
 800c028:	f000 ff6a 	bl	800cf00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c02c:	2301      	movs	r3, #1
 800c02e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c030:	f001 fc48 	bl	800d8c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c034:	f000 fd10 	bl	800ca58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c038:	f001 fc10 	bl	800d85c <vPortEnterCritical>
 800c03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c042:	b25b      	sxtb	r3, r3
 800c044:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c048:	d103      	bne.n	800c052 <xQueueSemaphoreTake+0x14a>
 800c04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c054:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c058:	b25b      	sxtb	r3, r3
 800c05a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c05e:	d103      	bne.n	800c068 <xQueueSemaphoreTake+0x160>
 800c060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c062:	2200      	movs	r2, #0
 800c064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c068:	f001 fc2c 	bl	800d8c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c06c:	463a      	mov	r2, r7
 800c06e:	f107 030c 	add.w	r3, r7, #12
 800c072:	4611      	mov	r1, r2
 800c074:	4618      	mov	r0, r3
 800c076:	f000 ff59 	bl	800cf2c <xTaskCheckForTimeOut>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d132      	bne.n	800c0e6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c080:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c082:	f000 f94f 	bl	800c324 <prvIsQueueEmpty>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d026      	beq.n	800c0da <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d109      	bne.n	800c0a8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800c094:	f001 fbe2 	bl	800d85c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	4618      	mov	r0, r3
 800c09e:	f001 f8b1 	bl	800d204 <xTaskPriorityInherit>
 800c0a2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c0a4:	f001 fc0e 	bl	800d8c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0aa:	3324      	adds	r3, #36	; 0x24
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fe9b 	bl	800cdec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c0b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0b8:	f000 f8e2 	bl	800c280 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c0bc:	f000 fcda 	bl	800ca74 <xTaskResumeAll>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f47f af66 	bne.w	800bf94 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800c0c8:	4b18      	ldr	r3, [pc, #96]	; (800c12c <xQueueSemaphoreTake+0x224>)
 800c0ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0ce:	601a      	str	r2, [r3, #0]
 800c0d0:	f3bf 8f4f 	dsb	sy
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	e75c      	b.n	800bf94 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c0da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0dc:	f000 f8d0 	bl	800c280 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c0e0:	f000 fcc8 	bl	800ca74 <xTaskResumeAll>
 800c0e4:	e756      	b.n	800bf94 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c0e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0e8:	f000 f8ca 	bl	800c280 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0ec:	f000 fcc2 	bl	800ca74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0f2:	f000 f917 	bl	800c324 <prvIsQueueEmpty>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f43f af4b 	beq.w	800bf94 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c100:	2b00      	cmp	r3, #0
 800c102:	d00d      	beq.n	800c120 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800c104:	f001 fbaa 	bl	800d85c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c108:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c10a:	f000 f811 	bl	800c130 <prvGetDisinheritPriorityAfterTimeout>
 800c10e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	689b      	ldr	r3, [r3, #8]
 800c114:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c116:	4618      	mov	r0, r3
 800c118:	f001 f97e 	bl	800d418 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c11c:	f001 fbd2 	bl	800d8c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c120:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c122:	4618      	mov	r0, r3
 800c124:	3738      	adds	r7, #56	; 0x38
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
 800c12a:	bf00      	nop
 800c12c:	e000ed04 	.word	0xe000ed04

0800c130 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c130:	b480      	push	{r7}
 800c132:	b085      	sub	sp, #20
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d006      	beq.n	800c14e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f1c3 0307 	rsb	r3, r3, #7
 800c14a:	60fb      	str	r3, [r7, #12]
 800c14c:	e001      	b.n	800c152 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c14e:	2300      	movs	r3, #0
 800c150:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c152:	68fb      	ldr	r3, [r7, #12]
	}
 800c154:	4618      	mov	r0, r3
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b086      	sub	sp, #24
 800c164:	af00      	add	r7, sp, #0
 800c166:	60f8      	str	r0, [r7, #12]
 800c168:	60b9      	str	r1, [r7, #8]
 800c16a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c16c:	2300      	movs	r3, #0
 800c16e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c174:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d10d      	bne.n	800c19a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d14d      	bne.n	800c222 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f001 f8ba 	bl	800d304 <xTaskPriorityDisinherit>
 800c190:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	609a      	str	r2, [r3, #8]
 800c198:	e043      	b.n	800c222 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d119      	bne.n	800c1d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6858      	ldr	r0, [r3, #4]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a8:	461a      	mov	r2, r3
 800c1aa:	68b9      	ldr	r1, [r7, #8]
 800c1ac:	f001 fe4e 	bl	800de4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1b8:	441a      	add	r2, r3
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	685a      	ldr	r2, [r3, #4]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d32b      	bcc.n	800c222 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	605a      	str	r2, [r3, #4]
 800c1d2:	e026      	b.n	800c222 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	68d8      	ldr	r0, [r3, #12]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1dc:	461a      	mov	r2, r3
 800c1de:	68b9      	ldr	r1, [r7, #8]
 800c1e0:	f001 fe34 	bl	800de4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	68da      	ldr	r2, [r3, #12]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ec:	425b      	negs	r3, r3
 800c1ee:	441a      	add	r2, r3
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	68da      	ldr	r2, [r3, #12]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d207      	bcs.n	800c210 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	689a      	ldr	r2, [r3, #8]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c208:	425b      	negs	r3, r3
 800c20a:	441a      	add	r2, r3
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b02      	cmp	r3, #2
 800c214:	d105      	bne.n	800c222 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d002      	beq.n	800c222 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c21c:	693b      	ldr	r3, [r7, #16]
 800c21e:	3b01      	subs	r3, #1
 800c220:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	1c5a      	adds	r2, r3, #1
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c22a:	697b      	ldr	r3, [r7, #20]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3718      	adds	r7, #24
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c242:	2b00      	cmp	r3, #0
 800c244:	d018      	beq.n	800c278 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	68da      	ldr	r2, [r3, #12]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24e:	441a      	add	r2, r3
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	68da      	ldr	r2, [r3, #12]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d303      	bcc.n	800c268 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	68d9      	ldr	r1, [r3, #12]
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c270:	461a      	mov	r2, r3
 800c272:	6838      	ldr	r0, [r7, #0]
 800c274:	f001 fdea 	bl	800de4c <memcpy>
	}
}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c288:	f001 fae8 	bl	800d85c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c292:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c294:	e011      	b.n	800c2ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d012      	beq.n	800c2c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	3324      	adds	r3, #36	; 0x24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f000 fdc8 	bl	800ce38 <xTaskRemoveFromEventList>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2ae:	f000 fea3 	bl	800cff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	dce9      	bgt.n	800c296 <prvUnlockQueue+0x16>
 800c2c2:	e000      	b.n	800c2c6 <prvUnlockQueue+0x46>
					break;
 800c2c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	22ff      	movs	r2, #255	; 0xff
 800c2ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c2ce:	f001 faf9 	bl	800d8c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c2d2:	f001 fac3 	bl	800d85c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2de:	e011      	b.n	800c304 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d012      	beq.n	800c30e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	3310      	adds	r3, #16
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fda3 	bl	800ce38 <xTaskRemoveFromEventList>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d001      	beq.n	800c2fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2f8:	f000 fe7e 	bl	800cff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2fc:	7bbb      	ldrb	r3, [r7, #14]
 800c2fe:	3b01      	subs	r3, #1
 800c300:	b2db      	uxtb	r3, r3
 800c302:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c304:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	dce9      	bgt.n	800c2e0 <prvUnlockQueue+0x60>
 800c30c:	e000      	b.n	800c310 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c30e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	22ff      	movs	r2, #255	; 0xff
 800c314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c318:	f001 fad4 	bl	800d8c4 <vPortExitCritical>
}
 800c31c:	bf00      	nop
 800c31e:	3710      	adds	r7, #16
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c32c:	f001 fa96 	bl	800d85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c338:	2301      	movs	r3, #1
 800c33a:	60fb      	str	r3, [r7, #12]
 800c33c:	e001      	b.n	800c342 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c342:	f001 fabf 	bl	800d8c4 <vPortExitCritical>

	return xReturn;
 800c346:	68fb      	ldr	r3, [r7, #12]
}
 800c348:	4618      	mov	r0, r3
 800c34a:	3710      	adds	r7, #16
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b084      	sub	sp, #16
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c358:	f001 fa80 	bl	800d85c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c364:	429a      	cmp	r2, r3
 800c366:	d102      	bne.n	800c36e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c368:	2301      	movs	r3, #1
 800c36a:	60fb      	str	r3, [r7, #12]
 800c36c:	e001      	b.n	800c372 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c372:	f001 faa7 	bl	800d8c4 <vPortExitCritical>

	return xReturn;
 800c376:	68fb      	ldr	r3, [r7, #12]
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c380:	b580      	push	{r7, lr}
 800c382:	b08e      	sub	sp, #56	; 0x38
 800c384:	af04      	add	r7, sp, #16
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10c      	bne.n	800c3ae <xTaskCreateStatic+0x2e>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	b672      	cpsid	i
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	b662      	cpsie	i
 800c3a8:	623b      	str	r3, [r7, #32]
}
 800c3aa:	bf00      	nop
 800c3ac:	e7fe      	b.n	800c3ac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d10c      	bne.n	800c3ce <xTaskCreateStatic+0x4e>
	__asm volatile
 800c3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b8:	b672      	cpsid	i
 800c3ba:	f383 8811 	msr	BASEPRI, r3
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f3bf 8f4f 	dsb	sy
 800c3c6:	b662      	cpsie	i
 800c3c8:	61fb      	str	r3, [r7, #28]
}
 800c3ca:	bf00      	nop
 800c3cc:	e7fe      	b.n	800c3cc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c3ce:	23b4      	movs	r3, #180	; 0xb4
 800c3d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	2bb4      	cmp	r3, #180	; 0xb4
 800c3d6:	d00c      	beq.n	800c3f2 <xTaskCreateStatic+0x72>
	__asm volatile
 800c3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3dc:	b672      	cpsid	i
 800c3de:	f383 8811 	msr	BASEPRI, r3
 800c3e2:	f3bf 8f6f 	isb	sy
 800c3e6:	f3bf 8f4f 	dsb	sy
 800c3ea:	b662      	cpsie	i
 800c3ec:	61bb      	str	r3, [r7, #24]
}
 800c3ee:	bf00      	nop
 800c3f0:	e7fe      	b.n	800c3f0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d01e      	beq.n	800c438 <xTaskCreateStatic+0xb8>
 800c3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d01b      	beq.n	800c438 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c402:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c408:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40c:	2202      	movs	r2, #2
 800c40e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c412:	2300      	movs	r3, #0
 800c414:	9303      	str	r3, [sp, #12]
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	9302      	str	r3, [sp, #8]
 800c41a:	f107 0314 	add.w	r3, r7, #20
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c422:	9300      	str	r3, [sp, #0]
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	68b9      	ldr	r1, [r7, #8]
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f000 f850 	bl	800c4d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c430:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c432:	f000 f8ed 	bl	800c610 <prvAddNewTaskToReadyList>
 800c436:	e001      	b.n	800c43c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c438:	2300      	movs	r3, #0
 800c43a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c43c:	697b      	ldr	r3, [r7, #20]
	}
 800c43e:	4618      	mov	r0, r3
 800c440:	3728      	adds	r7, #40	; 0x28
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c446:	b580      	push	{r7, lr}
 800c448:	b08c      	sub	sp, #48	; 0x30
 800c44a:	af04      	add	r7, sp, #16
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	603b      	str	r3, [r7, #0]
 800c452:	4613      	mov	r3, r2
 800c454:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c456:	88fb      	ldrh	r3, [r7, #6]
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f001 fae6 	bl	800da2c <pvPortMalloc>
 800c460:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00e      	beq.n	800c486 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c468:	20b4      	movs	r0, #180	; 0xb4
 800c46a:	f001 fadf 	bl	800da2c <pvPortMalloc>
 800c46e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d003      	beq.n	800c47e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	631a      	str	r2, [r3, #48]	; 0x30
 800c47c:	e005      	b.n	800c48a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c47e:	6978      	ldr	r0, [r7, #20]
 800c480:	f001 fb9e 	bl	800dbc0 <vPortFree>
 800c484:	e001      	b.n	800c48a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d017      	beq.n	800c4c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c498:	88fa      	ldrh	r2, [r7, #6]
 800c49a:	2300      	movs	r3, #0
 800c49c:	9303      	str	r3, [sp, #12]
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	9302      	str	r3, [sp, #8]
 800c4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a4:	9301      	str	r3, [sp, #4]
 800c4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a8:	9300      	str	r3, [sp, #0]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	68b9      	ldr	r1, [r7, #8]
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f000 f80e 	bl	800c4d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4b4:	69f8      	ldr	r0, [r7, #28]
 800c4b6:	f000 f8ab 	bl	800c610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	61bb      	str	r3, [r7, #24]
 800c4be:	e002      	b.n	800c4c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800c4c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c4c6:	69bb      	ldr	r3, [r7, #24]
	}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3720      	adds	r7, #32
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c4d0:	b580      	push	{r7, lr}
 800c4d2:	b088      	sub	sp, #32
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	607a      	str	r2, [r7, #4]
 800c4dc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c4e2:	6879      	ldr	r1, [r7, #4]
 800c4e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c4e8:	440b      	add	r3, r1
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	f023 0307 	bic.w	r3, r3, #7
 800c4f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	f003 0307 	and.w	r3, r3, #7
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d00c      	beq.n	800c51c <prvInitialiseNewTask+0x4c>
	__asm volatile
 800c502:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c506:	b672      	cpsid	i
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	b662      	cpsie	i
 800c516:	617b      	str	r3, [r7, #20]
}
 800c518:	bf00      	nop
 800c51a:	e7fe      	b.n	800c51a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d01f      	beq.n	800c562 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c522:	2300      	movs	r3, #0
 800c524:	61fb      	str	r3, [r7, #28]
 800c526:	e012      	b.n	800c54e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	69fb      	ldr	r3, [r7, #28]
 800c52c:	4413      	add	r3, r2
 800c52e:	7819      	ldrb	r1, [r3, #0]
 800c530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	4413      	add	r3, r2
 800c536:	3334      	adds	r3, #52	; 0x34
 800c538:	460a      	mov	r2, r1
 800c53a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c53c:	68ba      	ldr	r2, [r7, #8]
 800c53e:	69fb      	ldr	r3, [r7, #28]
 800c540:	4413      	add	r3, r2
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d006      	beq.n	800c556 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c548:	69fb      	ldr	r3, [r7, #28]
 800c54a:	3301      	adds	r3, #1
 800c54c:	61fb      	str	r3, [r7, #28]
 800c54e:	69fb      	ldr	r3, [r7, #28]
 800c550:	2b0f      	cmp	r3, #15
 800c552:	d9e9      	bls.n	800c528 <prvInitialiseNewTask+0x58>
 800c554:	e000      	b.n	800c558 <prvInitialiseNewTask+0x88>
			{
				break;
 800c556:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55a:	2200      	movs	r2, #0
 800c55c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c560:	e003      	b.n	800c56a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c564:	2200      	movs	r2, #0
 800c566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56c:	2b06      	cmp	r3, #6
 800c56e:	d901      	bls.n	800c574 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c570:	2306      	movs	r3, #6
 800c572:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c578:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c57e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c582:	2200      	movs	r2, #0
 800c584:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c588:	3304      	adds	r3, #4
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff f8a1 	bl	800b6d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c592:	3318      	adds	r3, #24
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff f89c 	bl	800b6d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c59e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	f1c3 0207 	rsb	r2, r3, #7
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c2:	334c      	adds	r3, #76	; 0x4c
 800c5c4:	2260      	movs	r2, #96	; 0x60
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f001 fc4d 	bl	800de68 <memset>
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	4a0c      	ldr	r2, [pc, #48]	; (800c604 <prvInitialiseNewTask+0x134>)
 800c5d2:	651a      	str	r2, [r3, #80]	; 0x50
 800c5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d6:	4a0c      	ldr	r2, [pc, #48]	; (800c608 <prvInitialiseNewTask+0x138>)
 800c5d8:	655a      	str	r2, [r3, #84]	; 0x54
 800c5da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5dc:	4a0b      	ldr	r2, [pc, #44]	; (800c60c <prvInitialiseNewTask+0x13c>)
 800c5de:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c5e0:	683a      	ldr	r2, [r7, #0]
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	69b8      	ldr	r0, [r7, #24]
 800c5e6:	f001 f82f 	bl	800d648 <pxPortInitialiseStack>
 800c5ea:	4602      	mov	r2, r0
 800c5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5fc:	bf00      	nop
 800c5fe:	3720      	adds	r7, #32
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	08013488 	.word	0x08013488
 800c608:	080134a8 	.word	0x080134a8
 800c60c:	08013468 	.word	0x08013468

0800c610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c618:	f001 f920 	bl	800d85c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c61c:	4b2a      	ldr	r3, [pc, #168]	; (800c6c8 <prvAddNewTaskToReadyList+0xb8>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	3301      	adds	r3, #1
 800c622:	4a29      	ldr	r2, [pc, #164]	; (800c6c8 <prvAddNewTaskToReadyList+0xb8>)
 800c624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c626:	4b29      	ldr	r3, [pc, #164]	; (800c6cc <prvAddNewTaskToReadyList+0xbc>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d109      	bne.n	800c642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c62e:	4a27      	ldr	r2, [pc, #156]	; (800c6cc <prvAddNewTaskToReadyList+0xbc>)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c634:	4b24      	ldr	r3, [pc, #144]	; (800c6c8 <prvAddNewTaskToReadyList+0xb8>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d110      	bne.n	800c65e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c63c:	f000 fd00 	bl	800d040 <prvInitialiseTaskLists>
 800c640:	e00d      	b.n	800c65e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c642:	4b23      	ldr	r3, [pc, #140]	; (800c6d0 <prvAddNewTaskToReadyList+0xc0>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d109      	bne.n	800c65e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c64a:	4b20      	ldr	r3, [pc, #128]	; (800c6cc <prvAddNewTaskToReadyList+0xbc>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c654:	429a      	cmp	r2, r3
 800c656:	d802      	bhi.n	800c65e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c658:	4a1c      	ldr	r2, [pc, #112]	; (800c6cc <prvAddNewTaskToReadyList+0xbc>)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c65e:	4b1d      	ldr	r3, [pc, #116]	; (800c6d4 <prvAddNewTaskToReadyList+0xc4>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	4a1b      	ldr	r2, [pc, #108]	; (800c6d4 <prvAddNewTaskToReadyList+0xc4>)
 800c666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c66c:	2201      	movs	r2, #1
 800c66e:	409a      	lsls	r2, r3
 800c670:	4b19      	ldr	r3, [pc, #100]	; (800c6d8 <prvAddNewTaskToReadyList+0xc8>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4313      	orrs	r3, r2
 800c676:	4a18      	ldr	r2, [pc, #96]	; (800c6d8 <prvAddNewTaskToReadyList+0xc8>)
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67e:	4613      	mov	r3, r2
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4413      	add	r3, r2
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4a15      	ldr	r2, [pc, #84]	; (800c6dc <prvAddNewTaskToReadyList+0xcc>)
 800c688:	441a      	add	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	3304      	adds	r3, #4
 800c68e:	4619      	mov	r1, r3
 800c690:	4610      	mov	r0, r2
 800c692:	f7ff f82b 	bl	800b6ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c696:	f001 f915 	bl	800d8c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c69a:	4b0d      	ldr	r3, [pc, #52]	; (800c6d0 <prvAddNewTaskToReadyList+0xc0>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00e      	beq.n	800c6c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6a2:	4b0a      	ldr	r3, [pc, #40]	; (800c6cc <prvAddNewTaskToReadyList+0xbc>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d207      	bcs.n	800c6c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c6b0:	4b0b      	ldr	r3, [pc, #44]	; (800c6e0 <prvAddNewTaskToReadyList+0xd0>)
 800c6b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6b6:	601a      	str	r2, [r3, #0]
 800c6b8:	f3bf 8f4f 	dsb	sy
 800c6bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	20000db0 	.word	0x20000db0
 800c6cc:	20000cb0 	.word	0x20000cb0
 800c6d0:	20000dbc 	.word	0x20000dbc
 800c6d4:	20000dcc 	.word	0x20000dcc
 800c6d8:	20000db8 	.word	0x20000db8
 800c6dc:	20000cb4 	.word	0x20000cb4
 800c6e0:	e000ed04 	.word	0xe000ed04

0800c6e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c6ec:	f001 f8b6 	bl	800d85c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d102      	bne.n	800c6fc <vTaskDelete+0x18>
 800c6f6:	4b3a      	ldr	r3, [pc, #232]	; (800c7e0 <vTaskDelete+0xfc>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	e000      	b.n	800c6fe <vTaskDelete+0x1a>
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	3304      	adds	r3, #4
 800c704:	4618      	mov	r0, r3
 800c706:	f7ff f84e 	bl	800b7a6 <uxListRemove>
 800c70a:	4603      	mov	r3, r0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d115      	bne.n	800c73c <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c714:	4933      	ldr	r1, [pc, #204]	; (800c7e4 <vTaskDelete+0x100>)
 800c716:	4613      	mov	r3, r2
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	440b      	add	r3, r1
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10a      	bne.n	800c73c <vTaskDelete+0x58>
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c72a:	2201      	movs	r2, #1
 800c72c:	fa02 f303 	lsl.w	r3, r2, r3
 800c730:	43da      	mvns	r2, r3
 800c732:	4b2d      	ldr	r3, [pc, #180]	; (800c7e8 <vTaskDelete+0x104>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4013      	ands	r3, r2
 800c738:	4a2b      	ldr	r2, [pc, #172]	; (800c7e8 <vTaskDelete+0x104>)
 800c73a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c740:	2b00      	cmp	r3, #0
 800c742:	d004      	beq.n	800c74e <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3318      	adds	r3, #24
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff f82c 	bl	800b7a6 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800c74e:	4b27      	ldr	r3, [pc, #156]	; (800c7ec <vTaskDelete+0x108>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	3301      	adds	r3, #1
 800c754:	4a25      	ldr	r2, [pc, #148]	; (800c7ec <vTaskDelete+0x108>)
 800c756:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800c758:	4b21      	ldr	r3, [pc, #132]	; (800c7e0 <vTaskDelete+0xfc>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	429a      	cmp	r2, r3
 800c760:	d10b      	bne.n	800c77a <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	3304      	adds	r3, #4
 800c766:	4619      	mov	r1, r3
 800c768:	4821      	ldr	r0, [pc, #132]	; (800c7f0 <vTaskDelete+0x10c>)
 800c76a:	f7fe ffbf 	bl	800b6ec <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800c76e:	4b21      	ldr	r3, [pc, #132]	; (800c7f4 <vTaskDelete+0x110>)
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3301      	adds	r3, #1
 800c774:	4a1f      	ldr	r2, [pc, #124]	; (800c7f4 <vTaskDelete+0x110>)
 800c776:	6013      	str	r3, [r2, #0]
 800c778:	e009      	b.n	800c78e <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800c77a:	4b1f      	ldr	r3, [pc, #124]	; (800c7f8 <vTaskDelete+0x114>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	3b01      	subs	r3, #1
 800c780:	4a1d      	ldr	r2, [pc, #116]	; (800c7f8 <vTaskDelete+0x114>)
 800c782:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800c784:	68f8      	ldr	r0, [r7, #12]
 800c786:	f000 fcc9 	bl	800d11c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800c78a:	f000 fcfd 	bl	800d188 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800c78e:	f001 f899 	bl	800d8c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800c792:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <vTaskDelete+0x118>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d01d      	beq.n	800c7d6 <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800c79a:	4b11      	ldr	r3, [pc, #68]	; (800c7e0 <vTaskDelete+0xfc>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	68fa      	ldr	r2, [r7, #12]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d118      	bne.n	800c7d6 <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800c7a4:	4b16      	ldr	r3, [pc, #88]	; (800c800 <vTaskDelete+0x11c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00c      	beq.n	800c7c6 <vTaskDelete+0xe2>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7b0:	b672      	cpsid	i
 800c7b2:	f383 8811 	msr	BASEPRI, r3
 800c7b6:	f3bf 8f6f 	isb	sy
 800c7ba:	f3bf 8f4f 	dsb	sy
 800c7be:	b662      	cpsie	i
 800c7c0:	60bb      	str	r3, [r7, #8]
}
 800c7c2:	bf00      	nop
 800c7c4:	e7fe      	b.n	800c7c4 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800c7c6:	4b0f      	ldr	r3, [pc, #60]	; (800c804 <vTaskDelete+0x120>)
 800c7c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7cc:	601a      	str	r2, [r3, #0]
 800c7ce:	f3bf 8f4f 	dsb	sy
 800c7d2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c7d6:	bf00      	nop
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	20000cb0 	.word	0x20000cb0
 800c7e4:	20000cb4 	.word	0x20000cb4
 800c7e8:	20000db8 	.word	0x20000db8
 800c7ec:	20000dcc 	.word	0x20000dcc
 800c7f0:	20000d84 	.word	0x20000d84
 800c7f4:	20000d98 	.word	0x20000d98
 800c7f8:	20000db0 	.word	0x20000db0
 800c7fc:	20000dbc 	.word	0x20000dbc
 800c800:	20000dd8 	.word	0x20000dd8
 800c804:	e000ed04 	.word	0xe000ed04

0800c808 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b08a      	sub	sp, #40	; 0x28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c812:	2300      	movs	r3, #0
 800c814:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d10c      	bne.n	800c836 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c820:	b672      	cpsid	i
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	b662      	cpsie	i
 800c830:	617b      	str	r3, [r7, #20]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10c      	bne.n	800c856 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	b672      	cpsid	i
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	b662      	cpsie	i
 800c850:	613b      	str	r3, [r7, #16]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c856:	4b2b      	ldr	r3, [pc, #172]	; (800c904 <vTaskDelayUntil+0xfc>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00c      	beq.n	800c878 <vTaskDelayUntil+0x70>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c862:	b672      	cpsid	i
 800c864:	f383 8811 	msr	BASEPRI, r3
 800c868:	f3bf 8f6f 	isb	sy
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	b662      	cpsie	i
 800c872:	60fb      	str	r3, [r7, #12]
}
 800c874:	bf00      	nop
 800c876:	e7fe      	b.n	800c876 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c878:	f000 f8ee 	bl	800ca58 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c87c:	4b22      	ldr	r3, [pc, #136]	; (800c908 <vTaskDelayUntil+0x100>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	683a      	ldr	r2, [r7, #0]
 800c888:	4413      	add	r3, r2
 800c88a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	6a3a      	ldr	r2, [r7, #32]
 800c892:	429a      	cmp	r2, r3
 800c894:	d20b      	bcs.n	800c8ae <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	69fa      	ldr	r2, [r7, #28]
 800c89c:	429a      	cmp	r2, r3
 800c89e:	d211      	bcs.n	800c8c4 <vTaskDelayUntil+0xbc>
 800c8a0:	69fa      	ldr	r2, [r7, #28]
 800c8a2:	6a3b      	ldr	r3, [r7, #32]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	d90d      	bls.n	800c8c4 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	627b      	str	r3, [r7, #36]	; 0x24
 800c8ac:	e00a      	b.n	800c8c4 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	69fa      	ldr	r2, [r7, #28]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d303      	bcc.n	800c8c0 <vTaskDelayUntil+0xb8>
 800c8b8:	69fa      	ldr	r2, [r7, #28]
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d901      	bls.n	800c8c4 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	69fa      	ldr	r2, [r7, #28]
 800c8c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d006      	beq.n	800c8de <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c8d0:	69fa      	ldr	r2, [r7, #28]
 800c8d2:	6a3b      	ldr	r3, [r7, #32]
 800c8d4:	1ad3      	subs	r3, r2, r3
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f000 fe4f 	bl	800d57c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c8de:	f000 f8c9 	bl	800ca74 <xTaskResumeAll>
 800c8e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d107      	bne.n	800c8fa <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c8ea:	4b08      	ldr	r3, [pc, #32]	; (800c90c <vTaskDelayUntil+0x104>)
 800c8ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c8fa:	bf00      	nop
 800c8fc:	3728      	adds	r7, #40	; 0x28
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}
 800c902:	bf00      	nop
 800c904:	20000dd8 	.word	0x20000dd8
 800c908:	20000db4 	.word	0x20000db4
 800c90c:	e000ed04 	.word	0xe000ed04

0800c910 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c918:	2300      	movs	r3, #0
 800c91a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d019      	beq.n	800c956 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c922:	4b14      	ldr	r3, [pc, #80]	; (800c974 <vTaskDelay+0x64>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d00c      	beq.n	800c944 <vTaskDelay+0x34>
	__asm volatile
 800c92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c92e:	b672      	cpsid	i
 800c930:	f383 8811 	msr	BASEPRI, r3
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	f3bf 8f4f 	dsb	sy
 800c93c:	b662      	cpsie	i
 800c93e:	60bb      	str	r3, [r7, #8]
}
 800c940:	bf00      	nop
 800c942:	e7fe      	b.n	800c942 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c944:	f000 f888 	bl	800ca58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c948:	2100      	movs	r1, #0
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fe16 	bl	800d57c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c950:	f000 f890 	bl	800ca74 <xTaskResumeAll>
 800c954:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d107      	bne.n	800c96c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c95c:	4b06      	ldr	r3, [pc, #24]	; (800c978 <vTaskDelay+0x68>)
 800c95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c962:	601a      	str	r2, [r3, #0]
 800c964:	f3bf 8f4f 	dsb	sy
 800c968:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c96c:	bf00      	nop
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	20000dd8 	.word	0x20000dd8
 800c978:	e000ed04 	.word	0xe000ed04

0800c97c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	; 0x28
 800c980:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c982:	2300      	movs	r3, #0
 800c984:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c986:	2300      	movs	r3, #0
 800c988:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c98a:	463a      	mov	r2, r7
 800c98c:	1d39      	adds	r1, r7, #4
 800c98e:	f107 0308 	add.w	r3, r7, #8
 800c992:	4618      	mov	r0, r3
 800c994:	f7f3 fe0e 	bl	80005b4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	68ba      	ldr	r2, [r7, #8]
 800c99e:	9202      	str	r2, [sp, #8]
 800c9a0:	9301      	str	r3, [sp, #4]
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	460a      	mov	r2, r1
 800c9aa:	4923      	ldr	r1, [pc, #140]	; (800ca38 <vTaskStartScheduler+0xbc>)
 800c9ac:	4823      	ldr	r0, [pc, #140]	; (800ca3c <vTaskStartScheduler+0xc0>)
 800c9ae:	f7ff fce7 	bl	800c380 <xTaskCreateStatic>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4a22      	ldr	r2, [pc, #136]	; (800ca40 <vTaskStartScheduler+0xc4>)
 800c9b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9b8:	4b21      	ldr	r3, [pc, #132]	; (800ca40 <vTaskStartScheduler+0xc4>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	617b      	str	r3, [r7, #20]
 800c9c4:	e001      	b.n	800c9ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9ca:	697b      	ldr	r3, [r7, #20]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d11d      	bne.n	800ca0c <vTaskStartScheduler+0x90>
	__asm volatile
 800c9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d4:	b672      	cpsid	i
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	b662      	cpsie	i
 800c9e4:	613b      	str	r3, [r7, #16]
}
 800c9e6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c9e8:	4b16      	ldr	r3, [pc, #88]	; (800ca44 <vTaskStartScheduler+0xc8>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	334c      	adds	r3, #76	; 0x4c
 800c9ee:	4a16      	ldr	r2, [pc, #88]	; (800ca48 <vTaskStartScheduler+0xcc>)
 800c9f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9f2:	4b16      	ldr	r3, [pc, #88]	; (800ca4c <vTaskStartScheduler+0xd0>)
 800c9f4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9fa:	4b15      	ldr	r3, [pc, #84]	; (800ca50 <vTaskStartScheduler+0xd4>)
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca00:	4b14      	ldr	r3, [pc, #80]	; (800ca54 <vTaskStartScheduler+0xd8>)
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca06:	f000 feab 	bl	800d760 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca0a:	e010      	b.n	800ca2e <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca12:	d10c      	bne.n	800ca2e <vTaskStartScheduler+0xb2>
	__asm volatile
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	b672      	cpsid	i
 800ca1a:	f383 8811 	msr	BASEPRI, r3
 800ca1e:	f3bf 8f6f 	isb	sy
 800ca22:	f3bf 8f4f 	dsb	sy
 800ca26:	b662      	cpsie	i
 800ca28:	60fb      	str	r3, [r7, #12]
}
 800ca2a:	bf00      	nop
 800ca2c:	e7fe      	b.n	800ca2c <vTaskStartScheduler+0xb0>
}
 800ca2e:	bf00      	nop
 800ca30:	3718      	adds	r7, #24
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	0800e94c 	.word	0x0800e94c
 800ca3c:	0800d011 	.word	0x0800d011
 800ca40:	20000dd4 	.word	0x20000dd4
 800ca44:	20000cb0 	.word	0x20000cb0
 800ca48:	2000004c 	.word	0x2000004c
 800ca4c:	20000dd0 	.word	0x20000dd0
 800ca50:	20000dbc 	.word	0x20000dbc
 800ca54:	20000db4 	.word	0x20000db4

0800ca58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ca5c:	4b04      	ldr	r3, [pc, #16]	; (800ca70 <vTaskSuspendAll+0x18>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	3301      	adds	r3, #1
 800ca62:	4a03      	ldr	r2, [pc, #12]	; (800ca70 <vTaskSuspendAll+0x18>)
 800ca64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca66:	bf00      	nop
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6e:	4770      	bx	lr
 800ca70:	20000dd8 	.word	0x20000dd8

0800ca74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca82:	4b42      	ldr	r3, [pc, #264]	; (800cb8c <xTaskResumeAll+0x118>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10c      	bne.n	800caa4 <xTaskResumeAll+0x30>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca8e:	b672      	cpsid	i
 800ca90:	f383 8811 	msr	BASEPRI, r3
 800ca94:	f3bf 8f6f 	isb	sy
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	b662      	cpsie	i
 800ca9e:	603b      	str	r3, [r7, #0]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800caa4:	f000 feda 	bl	800d85c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800caa8:	4b38      	ldr	r3, [pc, #224]	; (800cb8c <xTaskResumeAll+0x118>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	3b01      	subs	r3, #1
 800caae:	4a37      	ldr	r2, [pc, #220]	; (800cb8c <xTaskResumeAll+0x118>)
 800cab0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cab2:	4b36      	ldr	r3, [pc, #216]	; (800cb8c <xTaskResumeAll+0x118>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d161      	bne.n	800cb7e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800caba:	4b35      	ldr	r3, [pc, #212]	; (800cb90 <xTaskResumeAll+0x11c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d05d      	beq.n	800cb7e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cac2:	e02e      	b.n	800cb22 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cac4:	4b33      	ldr	r3, [pc, #204]	; (800cb94 <xTaskResumeAll+0x120>)
 800cac6:	68db      	ldr	r3, [r3, #12]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3318      	adds	r3, #24
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7fe fe68 	bl	800b7a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3304      	adds	r3, #4
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe fe63 	bl	800b7a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae4:	2201      	movs	r2, #1
 800cae6:	409a      	lsls	r2, r3
 800cae8:	4b2b      	ldr	r3, [pc, #172]	; (800cb98 <xTaskResumeAll+0x124>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	4313      	orrs	r3, r2
 800caee:	4a2a      	ldr	r2, [pc, #168]	; (800cb98 <xTaskResumeAll+0x124>)
 800caf0:	6013      	str	r3, [r2, #0]
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caf6:	4613      	mov	r3, r2
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	4a27      	ldr	r2, [pc, #156]	; (800cb9c <xTaskResumeAll+0x128>)
 800cb00:	441a      	add	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3304      	adds	r3, #4
 800cb06:	4619      	mov	r1, r3
 800cb08:	4610      	mov	r0, r2
 800cb0a:	f7fe fdef 	bl	800b6ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb12:	4b23      	ldr	r3, [pc, #140]	; (800cba0 <xTaskResumeAll+0x12c>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d302      	bcc.n	800cb22 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800cb1c:	4b21      	ldr	r3, [pc, #132]	; (800cba4 <xTaskResumeAll+0x130>)
 800cb1e:	2201      	movs	r2, #1
 800cb20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb22:	4b1c      	ldr	r3, [pc, #112]	; (800cb94 <xTaskResumeAll+0x120>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1cc      	bne.n	800cac4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d001      	beq.n	800cb34 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb30:	f000 fb2a 	bl	800d188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb34:	4b1c      	ldr	r3, [pc, #112]	; (800cba8 <xTaskResumeAll+0x134>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d010      	beq.n	800cb62 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb40:	f000 f836 	bl	800cbb0 <xTaskIncrementTick>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800cb4a:	4b16      	ldr	r3, [pc, #88]	; (800cba4 <xTaskResumeAll+0x130>)
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	3b01      	subs	r3, #1
 800cb54:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1f1      	bne.n	800cb40 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800cb5c:	4b12      	ldr	r3, [pc, #72]	; (800cba8 <xTaskResumeAll+0x134>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb62:	4b10      	ldr	r3, [pc, #64]	; (800cba4 <xTaskResumeAll+0x130>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d009      	beq.n	800cb7e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb6e:	4b0f      	ldr	r3, [pc, #60]	; (800cbac <xTaskResumeAll+0x138>)
 800cb70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb74:	601a      	str	r2, [r3, #0]
 800cb76:	f3bf 8f4f 	dsb	sy
 800cb7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb7e:	f000 fea1 	bl	800d8c4 <vPortExitCritical>

	return xAlreadyYielded;
 800cb82:	68bb      	ldr	r3, [r7, #8]
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}
 800cb8c:	20000dd8 	.word	0x20000dd8
 800cb90:	20000db0 	.word	0x20000db0
 800cb94:	20000d70 	.word	0x20000d70
 800cb98:	20000db8 	.word	0x20000db8
 800cb9c:	20000cb4 	.word	0x20000cb4
 800cba0:	20000cb0 	.word	0x20000cb0
 800cba4:	20000dc4 	.word	0x20000dc4
 800cba8:	20000dc0 	.word	0x20000dc0
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b086      	sub	sp, #24
 800cbb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbba:	4b4f      	ldr	r3, [pc, #316]	; (800ccf8 <xTaskIncrementTick+0x148>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	f040 808a 	bne.w	800ccd8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbc4:	4b4d      	ldr	r3, [pc, #308]	; (800ccfc <xTaskIncrementTick+0x14c>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	3301      	adds	r3, #1
 800cbca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbcc:	4a4b      	ldr	r2, [pc, #300]	; (800ccfc <xTaskIncrementTick+0x14c>)
 800cbce:	693b      	ldr	r3, [r7, #16]
 800cbd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d122      	bne.n	800cc1e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800cbd8:	4b49      	ldr	r3, [pc, #292]	; (800cd00 <xTaskIncrementTick+0x150>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00c      	beq.n	800cbfc <xTaskIncrementTick+0x4c>
	__asm volatile
 800cbe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe6:	b672      	cpsid	i
 800cbe8:	f383 8811 	msr	BASEPRI, r3
 800cbec:	f3bf 8f6f 	isb	sy
 800cbf0:	f3bf 8f4f 	dsb	sy
 800cbf4:	b662      	cpsie	i
 800cbf6:	603b      	str	r3, [r7, #0]
}
 800cbf8:	bf00      	nop
 800cbfa:	e7fe      	b.n	800cbfa <xTaskIncrementTick+0x4a>
 800cbfc:	4b40      	ldr	r3, [pc, #256]	; (800cd00 <xTaskIncrementTick+0x150>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	60fb      	str	r3, [r7, #12]
 800cc02:	4b40      	ldr	r3, [pc, #256]	; (800cd04 <xTaskIncrementTick+0x154>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	4a3e      	ldr	r2, [pc, #248]	; (800cd00 <xTaskIncrementTick+0x150>)
 800cc08:	6013      	str	r3, [r2, #0]
 800cc0a:	4a3e      	ldr	r2, [pc, #248]	; (800cd04 <xTaskIncrementTick+0x154>)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	4b3d      	ldr	r3, [pc, #244]	; (800cd08 <xTaskIncrementTick+0x158>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	4a3c      	ldr	r2, [pc, #240]	; (800cd08 <xTaskIncrementTick+0x158>)
 800cc18:	6013      	str	r3, [r2, #0]
 800cc1a:	f000 fab5 	bl	800d188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc1e:	4b3b      	ldr	r3, [pc, #236]	; (800cd0c <xTaskIncrementTick+0x15c>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	693a      	ldr	r2, [r7, #16]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d348      	bcc.n	800ccba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc28:	4b35      	ldr	r3, [pc, #212]	; (800cd00 <xTaskIncrementTick+0x150>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d104      	bne.n	800cc3c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc32:	4b36      	ldr	r3, [pc, #216]	; (800cd0c <xTaskIncrementTick+0x15c>)
 800cc34:	f04f 32ff 	mov.w	r2, #4294967295
 800cc38:	601a      	str	r2, [r3, #0]
					break;
 800cc3a:	e03e      	b.n	800ccba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc3c:	4b30      	ldr	r3, [pc, #192]	; (800cd00 <xTaskIncrementTick+0x150>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc46:	68bb      	ldr	r3, [r7, #8]
 800cc48:	685b      	ldr	r3, [r3, #4]
 800cc4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d203      	bcs.n	800cc5c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc54:	4a2d      	ldr	r2, [pc, #180]	; (800cd0c <xTaskIncrementTick+0x15c>)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc5a:	e02e      	b.n	800ccba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	4618      	mov	r0, r3
 800cc62:	f7fe fda0 	bl	800b7a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d004      	beq.n	800cc78 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	3318      	adds	r3, #24
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fe fd97 	bl	800b7a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc7c:	2201      	movs	r2, #1
 800cc7e:	409a      	lsls	r2, r3
 800cc80:	4b23      	ldr	r3, [pc, #140]	; (800cd10 <xTaskIncrementTick+0x160>)
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	4a22      	ldr	r2, [pc, #136]	; (800cd10 <xTaskIncrementTick+0x160>)
 800cc88:	6013      	str	r3, [r2, #0]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc8e:	4613      	mov	r3, r2
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	4413      	add	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4a1f      	ldr	r2, [pc, #124]	; (800cd14 <xTaskIncrementTick+0x164>)
 800cc98:	441a      	add	r2, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	3304      	adds	r3, #4
 800cc9e:	4619      	mov	r1, r3
 800cca0:	4610      	mov	r0, r2
 800cca2:	f7fe fd23 	bl	800b6ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccaa:	4b1b      	ldr	r3, [pc, #108]	; (800cd18 <xTaskIncrementTick+0x168>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d3b9      	bcc.n	800cc28 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccb8:	e7b6      	b.n	800cc28 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ccba:	4b17      	ldr	r3, [pc, #92]	; (800cd18 <xTaskIncrementTick+0x168>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccc0:	4914      	ldr	r1, [pc, #80]	; (800cd14 <xTaskIncrementTick+0x164>)
 800ccc2:	4613      	mov	r3, r2
 800ccc4:	009b      	lsls	r3, r3, #2
 800ccc6:	4413      	add	r3, r2
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	440b      	add	r3, r1
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d907      	bls.n	800cce2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	617b      	str	r3, [r7, #20]
 800ccd6:	e004      	b.n	800cce2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ccd8:	4b10      	ldr	r3, [pc, #64]	; (800cd1c <xTaskIncrementTick+0x16c>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	4a0f      	ldr	r2, [pc, #60]	; (800cd1c <xTaskIncrementTick+0x16c>)
 800cce0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cce2:	4b0f      	ldr	r3, [pc, #60]	; (800cd20 <xTaskIncrementTick+0x170>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d001      	beq.n	800ccee <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ccea:	2301      	movs	r3, #1
 800ccec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ccee:	697b      	ldr	r3, [r7, #20]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3718      	adds	r7, #24
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	20000dd8 	.word	0x20000dd8
 800ccfc:	20000db4 	.word	0x20000db4
 800cd00:	20000d68 	.word	0x20000d68
 800cd04:	20000d6c 	.word	0x20000d6c
 800cd08:	20000dc8 	.word	0x20000dc8
 800cd0c:	20000dd0 	.word	0x20000dd0
 800cd10:	20000db8 	.word	0x20000db8
 800cd14:	20000cb4 	.word	0x20000cb4
 800cd18:	20000cb0 	.word	0x20000cb0
 800cd1c:	20000dc0 	.word	0x20000dc0
 800cd20:	20000dc4 	.word	0x20000dc4

0800cd24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd2a:	4b2a      	ldr	r3, [pc, #168]	; (800cdd4 <vTaskSwitchContext+0xb0>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd32:	4b29      	ldr	r3, [pc, #164]	; (800cdd8 <vTaskSwitchContext+0xb4>)
 800cd34:	2201      	movs	r2, #1
 800cd36:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd38:	e046      	b.n	800cdc8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800cd3a:	4b27      	ldr	r3, [pc, #156]	; (800cdd8 <vTaskSwitchContext+0xb4>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cd40:	4b26      	ldr	r3, [pc, #152]	; (800cddc <vTaskSwitchContext+0xb8>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	fab3 f383 	clz	r3, r3
 800cd4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cd4e:	7afb      	ldrb	r3, [r7, #11]
 800cd50:	f1c3 031f 	rsb	r3, r3, #31
 800cd54:	617b      	str	r3, [r7, #20]
 800cd56:	4922      	ldr	r1, [pc, #136]	; (800cde0 <vTaskSwitchContext+0xbc>)
 800cd58:	697a      	ldr	r2, [r7, #20]
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	440b      	add	r3, r1
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10c      	bne.n	800cd84 <vTaskSwitchContext+0x60>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	b672      	cpsid	i
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	b662      	cpsie	i
 800cd7e:	607b      	str	r3, [r7, #4]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <vTaskSwitchContext+0x5e>
 800cd84:	697a      	ldr	r2, [r7, #20]
 800cd86:	4613      	mov	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	4413      	add	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4a14      	ldr	r2, [pc, #80]	; (800cde0 <vTaskSwitchContext+0xbc>)
 800cd90:	4413      	add	r3, r2
 800cd92:	613b      	str	r3, [r7, #16]
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	685b      	ldr	r3, [r3, #4]
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	605a      	str	r2, [r3, #4]
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	3308      	adds	r3, #8
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d104      	bne.n	800cdb4 <vTaskSwitchContext+0x90>
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	685a      	ldr	r2, [r3, #4]
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	605a      	str	r2, [r3, #4]
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	4a0a      	ldr	r2, [pc, #40]	; (800cde4 <vTaskSwitchContext+0xc0>)
 800cdbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cdbe:	4b09      	ldr	r3, [pc, #36]	; (800cde4 <vTaskSwitchContext+0xc0>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	334c      	adds	r3, #76	; 0x4c
 800cdc4:	4a08      	ldr	r2, [pc, #32]	; (800cde8 <vTaskSwitchContext+0xc4>)
 800cdc6:	6013      	str	r3, [r2, #0]
}
 800cdc8:	bf00      	nop
 800cdca:	371c      	adds	r7, #28
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd2:	4770      	bx	lr
 800cdd4:	20000dd8 	.word	0x20000dd8
 800cdd8:	20000dc4 	.word	0x20000dc4
 800cddc:	20000db8 	.word	0x20000db8
 800cde0:	20000cb4 	.word	0x20000cb4
 800cde4:	20000cb0 	.word	0x20000cb0
 800cde8:	2000004c 	.word	0x2000004c

0800cdec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10c      	bne.n	800ce16 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	b672      	cpsid	i
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	b662      	cpsie	i
 800ce10:	60fb      	str	r3, [r7, #12]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce16:	4b07      	ldr	r3, [pc, #28]	; (800ce34 <vTaskPlaceOnEventList+0x48>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	3318      	adds	r3, #24
 800ce1c:	4619      	mov	r1, r3
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f7fe fc88 	bl	800b734 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce24:	2101      	movs	r1, #1
 800ce26:	6838      	ldr	r0, [r7, #0]
 800ce28:	f000 fba8 	bl	800d57c <prvAddCurrentTaskToDelayedList>
}
 800ce2c:	bf00      	nop
 800ce2e:	3710      	adds	r7, #16
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}
 800ce34:	20000cb0 	.word	0x20000cb0

0800ce38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	68db      	ldr	r3, [r3, #12]
 800ce44:	68db      	ldr	r3, [r3, #12]
 800ce46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ce48:	693b      	ldr	r3, [r7, #16]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10c      	bne.n	800ce68 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ce4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce52:	b672      	cpsid	i
 800ce54:	f383 8811 	msr	BASEPRI, r3
 800ce58:	f3bf 8f6f 	isb	sy
 800ce5c:	f3bf 8f4f 	dsb	sy
 800ce60:	b662      	cpsie	i
 800ce62:	60fb      	str	r3, [r7, #12]
}
 800ce64:	bf00      	nop
 800ce66:	e7fe      	b.n	800ce66 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	3318      	adds	r3, #24
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7fe fc9a 	bl	800b7a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce72:	4b1d      	ldr	r3, [pc, #116]	; (800cee8 <xTaskRemoveFromEventList+0xb0>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d11c      	bne.n	800ceb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	3304      	adds	r3, #4
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f7fe fc91 	bl	800b7a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce88:	2201      	movs	r2, #1
 800ce8a:	409a      	lsls	r2, r3
 800ce8c:	4b17      	ldr	r3, [pc, #92]	; (800ceec <xTaskRemoveFromEventList+0xb4>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	4a16      	ldr	r2, [pc, #88]	; (800ceec <xTaskRemoveFromEventList+0xb4>)
 800ce94:	6013      	str	r3, [r2, #0]
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	4a13      	ldr	r2, [pc, #76]	; (800cef0 <xTaskRemoveFromEventList+0xb8>)
 800cea4:	441a      	add	r2, r3
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f7fe fc1d 	bl	800b6ec <vListInsertEnd>
 800ceb2:	e005      	b.n	800cec0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	3318      	adds	r3, #24
 800ceb8:	4619      	mov	r1, r3
 800ceba:	480e      	ldr	r0, [pc, #56]	; (800cef4 <xTaskRemoveFromEventList+0xbc>)
 800cebc:	f7fe fc16 	bl	800b6ec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cec4:	4b0c      	ldr	r3, [pc, #48]	; (800cef8 <xTaskRemoveFromEventList+0xc0>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d905      	bls.n	800ceda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cece:	2301      	movs	r3, #1
 800ced0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ced2:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <xTaskRemoveFromEventList+0xc4>)
 800ced4:	2201      	movs	r2, #1
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	e001      	b.n	800cede <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ceda:	2300      	movs	r3, #0
 800cedc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cede:	697b      	ldr	r3, [r7, #20]
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3718      	adds	r7, #24
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	20000dd8 	.word	0x20000dd8
 800ceec:	20000db8 	.word	0x20000db8
 800cef0:	20000cb4 	.word	0x20000cb4
 800cef4:	20000d70 	.word	0x20000d70
 800cef8:	20000cb0 	.word	0x20000cb0
 800cefc:	20000dc4 	.word	0x20000dc4

0800cf00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf08:	4b06      	ldr	r3, [pc, #24]	; (800cf24 <vTaskInternalSetTimeOutState+0x24>)
 800cf0a:	681a      	ldr	r2, [r3, #0]
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <vTaskInternalSetTimeOutState+0x28>)
 800cf12:	681a      	ldr	r2, [r3, #0]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	605a      	str	r2, [r3, #4]
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	20000dc8 	.word	0x20000dc8
 800cf28:	20000db4 	.word	0x20000db4

0800cf2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b088      	sub	sp, #32
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
 800cf34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d10c      	bne.n	800cf56 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf40:	b672      	cpsid	i
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	b662      	cpsie	i
 800cf50:	613b      	str	r3, [r7, #16]
}
 800cf52:	bf00      	nop
 800cf54:	e7fe      	b.n	800cf54 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d10c      	bne.n	800cf76 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cf5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf60:	b672      	cpsid	i
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	b662      	cpsie	i
 800cf70:	60fb      	str	r3, [r7, #12]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cf76:	f000 fc71 	bl	800d85c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf7a:	4b1d      	ldr	r3, [pc, #116]	; (800cff0 <xTaskCheckForTimeOut+0xc4>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	69ba      	ldr	r2, [r7, #24]
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf92:	d102      	bne.n	800cf9a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf94:	2300      	movs	r3, #0
 800cf96:	61fb      	str	r3, [r7, #28]
 800cf98:	e023      	b.n	800cfe2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681a      	ldr	r2, [r3, #0]
 800cf9e:	4b15      	ldr	r3, [pc, #84]	; (800cff4 <xTaskCheckForTimeOut+0xc8>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d007      	beq.n	800cfb6 <xTaskCheckForTimeOut+0x8a>
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	69ba      	ldr	r2, [r7, #24]
 800cfac:	429a      	cmp	r2, r3
 800cfae:	d302      	bcc.n	800cfb6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	61fb      	str	r3, [r7, #28]
 800cfb4:	e015      	b.n	800cfe2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	697a      	ldr	r2, [r7, #20]
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d20b      	bcs.n	800cfd8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	1ad2      	subs	r2, r2, r3
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff ff97 	bl	800cf00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	61fb      	str	r3, [r7, #28]
 800cfd6:	e004      	b.n	800cfe2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cfde:	2301      	movs	r3, #1
 800cfe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cfe2:	f000 fc6f 	bl	800d8c4 <vPortExitCritical>

	return xReturn;
 800cfe6:	69fb      	ldr	r3, [r7, #28]
}
 800cfe8:	4618      	mov	r0, r3
 800cfea:	3720      	adds	r7, #32
 800cfec:	46bd      	mov	sp, r7
 800cfee:	bd80      	pop	{r7, pc}
 800cff0:	20000db4 	.word	0x20000db4
 800cff4:	20000dc8 	.word	0x20000dc8

0800cff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cff8:	b480      	push	{r7}
 800cffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cffc:	4b03      	ldr	r3, [pc, #12]	; (800d00c <vTaskMissedYield+0x14>)
 800cffe:	2201      	movs	r2, #1
 800d000:	601a      	str	r2, [r3, #0]
}
 800d002:	bf00      	nop
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	20000dc4 	.word	0x20000dc4

0800d010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b082      	sub	sp, #8
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d018:	f000 f852 	bl	800d0c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d01c:	4b06      	ldr	r3, [pc, #24]	; (800d038 <prvIdleTask+0x28>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2b01      	cmp	r3, #1
 800d022:	d9f9      	bls.n	800d018 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d024:	4b05      	ldr	r3, [pc, #20]	; (800d03c <prvIdleTask+0x2c>)
 800d026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d02a:	601a      	str	r2, [r3, #0]
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d034:	e7f0      	b.n	800d018 <prvIdleTask+0x8>
 800d036:	bf00      	nop
 800d038:	20000cb4 	.word	0x20000cb4
 800d03c:	e000ed04 	.word	0xe000ed04

0800d040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d046:	2300      	movs	r3, #0
 800d048:	607b      	str	r3, [r7, #4]
 800d04a:	e00c      	b.n	800d066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d04c:	687a      	ldr	r2, [r7, #4]
 800d04e:	4613      	mov	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4413      	add	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	4a12      	ldr	r2, [pc, #72]	; (800d0a0 <prvInitialiseTaskLists+0x60>)
 800d058:	4413      	add	r3, r2
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7fe fb19 	bl	800b692 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	3301      	adds	r3, #1
 800d064:	607b      	str	r3, [r7, #4]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2b06      	cmp	r3, #6
 800d06a:	d9ef      	bls.n	800d04c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d06c:	480d      	ldr	r0, [pc, #52]	; (800d0a4 <prvInitialiseTaskLists+0x64>)
 800d06e:	f7fe fb10 	bl	800b692 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d072:	480d      	ldr	r0, [pc, #52]	; (800d0a8 <prvInitialiseTaskLists+0x68>)
 800d074:	f7fe fb0d 	bl	800b692 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d078:	480c      	ldr	r0, [pc, #48]	; (800d0ac <prvInitialiseTaskLists+0x6c>)
 800d07a:	f7fe fb0a 	bl	800b692 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d07e:	480c      	ldr	r0, [pc, #48]	; (800d0b0 <prvInitialiseTaskLists+0x70>)
 800d080:	f7fe fb07 	bl	800b692 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d084:	480b      	ldr	r0, [pc, #44]	; (800d0b4 <prvInitialiseTaskLists+0x74>)
 800d086:	f7fe fb04 	bl	800b692 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d08a:	4b0b      	ldr	r3, [pc, #44]	; (800d0b8 <prvInitialiseTaskLists+0x78>)
 800d08c:	4a05      	ldr	r2, [pc, #20]	; (800d0a4 <prvInitialiseTaskLists+0x64>)
 800d08e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d090:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <prvInitialiseTaskLists+0x7c>)
 800d092:	4a05      	ldr	r2, [pc, #20]	; (800d0a8 <prvInitialiseTaskLists+0x68>)
 800d094:	601a      	str	r2, [r3, #0]
}
 800d096:	bf00      	nop
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000cb4 	.word	0x20000cb4
 800d0a4:	20000d40 	.word	0x20000d40
 800d0a8:	20000d54 	.word	0x20000d54
 800d0ac:	20000d70 	.word	0x20000d70
 800d0b0:	20000d84 	.word	0x20000d84
 800d0b4:	20000d9c 	.word	0x20000d9c
 800d0b8:	20000d68 	.word	0x20000d68
 800d0bc:	20000d6c 	.word	0x20000d6c

0800d0c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0c6:	e019      	b.n	800d0fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d0c8:	f000 fbc8 	bl	800d85c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0cc:	4b10      	ldr	r3, [pc, #64]	; (800d110 <prvCheckTasksWaitingTermination+0x50>)
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	3304      	adds	r3, #4
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fe fb64 	bl	800b7a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d0de:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <prvCheckTasksWaitingTermination+0x54>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	3b01      	subs	r3, #1
 800d0e4:	4a0b      	ldr	r2, [pc, #44]	; (800d114 <prvCheckTasksWaitingTermination+0x54>)
 800d0e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d0e8:	4b0b      	ldr	r3, [pc, #44]	; (800d118 <prvCheckTasksWaitingTermination+0x58>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	3b01      	subs	r3, #1
 800d0ee:	4a0a      	ldr	r2, [pc, #40]	; (800d118 <prvCheckTasksWaitingTermination+0x58>)
 800d0f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d0f2:	f000 fbe7 	bl	800d8c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 f810 	bl	800d11c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d0fc:	4b06      	ldr	r3, [pc, #24]	; (800d118 <prvCheckTasksWaitingTermination+0x58>)
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1e1      	bne.n	800d0c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d104:	bf00      	nop
 800d106:	bf00      	nop
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	20000d84 	.word	0x20000d84
 800d114:	20000db0 	.word	0x20000db0
 800d118:	20000d98 	.word	0x20000d98

0800d11c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	334c      	adds	r3, #76	; 0x4c
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 ff47 	bl	800dfbc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d134:	2b00      	cmp	r3, #0
 800d136:	d108      	bne.n	800d14a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 fd3f 	bl	800dbc0 <vPortFree>
				vPortFree( pxTCB );
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f000 fd3c 	bl	800dbc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d148:	e01a      	b.n	800d180 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d150:	2b01      	cmp	r3, #1
 800d152:	d103      	bne.n	800d15c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 fd33 	bl	800dbc0 <vPortFree>
	}
 800d15a:	e011      	b.n	800d180 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d162:	2b02      	cmp	r3, #2
 800d164:	d00c      	beq.n	800d180 <prvDeleteTCB+0x64>
	__asm volatile
 800d166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16a:	b672      	cpsid	i
 800d16c:	f383 8811 	msr	BASEPRI, r3
 800d170:	f3bf 8f6f 	isb	sy
 800d174:	f3bf 8f4f 	dsb	sy
 800d178:	b662      	cpsie	i
 800d17a:	60fb      	str	r3, [r7, #12]
}
 800d17c:	bf00      	nop
 800d17e:	e7fe      	b.n	800d17e <prvDeleteTCB+0x62>
	}
 800d180:	bf00      	nop
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d18e:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <prvResetNextTaskUnblockTime+0x38>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d104      	bne.n	800d1a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d198:	4b0a      	ldr	r3, [pc, #40]	; (800d1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d19a:	f04f 32ff 	mov.w	r2, #4294967295
 800d19e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1a0:	e008      	b.n	800d1b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1a2:	4b07      	ldr	r3, [pc, #28]	; (800d1c0 <prvResetNextTaskUnblockTime+0x38>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	68db      	ldr	r3, [r3, #12]
 800d1aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	685b      	ldr	r3, [r3, #4]
 800d1b0:	4a04      	ldr	r2, [pc, #16]	; (800d1c4 <prvResetNextTaskUnblockTime+0x3c>)
 800d1b2:	6013      	str	r3, [r2, #0]
}
 800d1b4:	bf00      	nop
 800d1b6:	370c      	adds	r7, #12
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1be:	4770      	bx	lr
 800d1c0:	20000d68 	.word	0x20000d68
 800d1c4:	20000dd0 	.word	0x20000dd0

0800d1c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b083      	sub	sp, #12
 800d1cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d1ce:	4b0b      	ldr	r3, [pc, #44]	; (800d1fc <xTaskGetSchedulerState+0x34>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d102      	bne.n	800d1dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	607b      	str	r3, [r7, #4]
 800d1da:	e008      	b.n	800d1ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1dc:	4b08      	ldr	r3, [pc, #32]	; (800d200 <xTaskGetSchedulerState+0x38>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d102      	bne.n	800d1ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	607b      	str	r3, [r7, #4]
 800d1e8:	e001      	b.n	800d1ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d1ee:	687b      	ldr	r3, [r7, #4]
	}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	20000dbc 	.word	0x20000dbc
 800d200:	20000dd8 	.word	0x20000dd8

0800d204 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d204:	b580      	push	{r7, lr}
 800d206:	b084      	sub	sp, #16
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d069      	beq.n	800d2ee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d21a:	68bb      	ldr	r3, [r7, #8]
 800d21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d21e:	4b36      	ldr	r3, [pc, #216]	; (800d2f8 <xTaskPriorityInherit+0xf4>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d224:	429a      	cmp	r2, r3
 800d226:	d259      	bcs.n	800d2dc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	699b      	ldr	r3, [r3, #24]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	db06      	blt.n	800d23e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d230:	4b31      	ldr	r3, [pc, #196]	; (800d2f8 <xTaskPriorityInherit+0xf4>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d236:	f1c3 0207 	rsb	r2, r3, #7
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	6959      	ldr	r1, [r3, #20]
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	4a2b      	ldr	r2, [pc, #172]	; (800d2fc <xTaskPriorityInherit+0xf8>)
 800d250:	4413      	add	r3, r2
 800d252:	4299      	cmp	r1, r3
 800d254:	d13a      	bne.n	800d2cc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	3304      	adds	r3, #4
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7fe faa3 	bl	800b7a6 <uxListRemove>
 800d260:	4603      	mov	r3, r0
 800d262:	2b00      	cmp	r3, #0
 800d264:	d115      	bne.n	800d292 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d26a:	4924      	ldr	r1, [pc, #144]	; (800d2fc <xTaskPriorityInherit+0xf8>)
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	440b      	add	r3, r1
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10a      	bne.n	800d292 <xTaskPriorityInherit+0x8e>
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d280:	2201      	movs	r2, #1
 800d282:	fa02 f303 	lsl.w	r3, r2, r3
 800d286:	43da      	mvns	r2, r3
 800d288:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <xTaskPriorityInherit+0xfc>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4013      	ands	r3, r2
 800d28e:	4a1c      	ldr	r2, [pc, #112]	; (800d300 <xTaskPriorityInherit+0xfc>)
 800d290:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d292:	4b19      	ldr	r3, [pc, #100]	; (800d2f8 <xTaskPriorityInherit+0xf4>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	409a      	lsls	r2, r3
 800d2a4:	4b16      	ldr	r3, [pc, #88]	; (800d300 <xTaskPriorityInherit+0xfc>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	4a15      	ldr	r2, [pc, #84]	; (800d300 <xTaskPriorityInherit+0xfc>)
 800d2ac:	6013      	str	r3, [r2, #0]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b2:	4613      	mov	r3, r2
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	009b      	lsls	r3, r3, #2
 800d2ba:	4a10      	ldr	r2, [pc, #64]	; (800d2fc <xTaskPriorityInherit+0xf8>)
 800d2bc:	441a      	add	r2, r3
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	3304      	adds	r3, #4
 800d2c2:	4619      	mov	r1, r3
 800d2c4:	4610      	mov	r0, r2
 800d2c6:	f7fe fa11 	bl	800b6ec <vListInsertEnd>
 800d2ca:	e004      	b.n	800d2d6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2cc:	4b0a      	ldr	r3, [pc, #40]	; (800d2f8 <xTaskPriorityInherit+0xf4>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	60fb      	str	r3, [r7, #12]
 800d2da:	e008      	b.n	800d2ee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2e0:	4b05      	ldr	r3, [pc, #20]	; (800d2f8 <xTaskPriorityInherit+0xf4>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d201      	bcs.n	800d2ee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
	}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	20000cb0 	.word	0x20000cb0
 800d2fc:	20000cb4 	.word	0x20000cb4
 800d300:	20000db8 	.word	0x20000db8

0800d304 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d304:	b580      	push	{r7, lr}
 800d306:	b086      	sub	sp, #24
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d310:	2300      	movs	r3, #0
 800d312:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d072      	beq.n	800d400 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d31a:	4b3c      	ldr	r3, [pc, #240]	; (800d40c <xTaskPriorityDisinherit+0x108>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	429a      	cmp	r2, r3
 800d322:	d00c      	beq.n	800d33e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d328:	b672      	cpsid	i
 800d32a:	f383 8811 	msr	BASEPRI, r3
 800d32e:	f3bf 8f6f 	isb	sy
 800d332:	f3bf 8f4f 	dsb	sy
 800d336:	b662      	cpsie	i
 800d338:	60fb      	str	r3, [r7, #12]
}
 800d33a:	bf00      	nop
 800d33c:	e7fe      	b.n	800d33c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d342:	2b00      	cmp	r3, #0
 800d344:	d10c      	bne.n	800d360 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34a:	b672      	cpsid	i
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	b662      	cpsie	i
 800d35a:	60bb      	str	r3, [r7, #8]
}
 800d35c:	bf00      	nop
 800d35e:	e7fe      	b.n	800d35e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d364:	1e5a      	subs	r2, r3, #1
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d36e:	693b      	ldr	r3, [r7, #16]
 800d370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d372:	429a      	cmp	r2, r3
 800d374:	d044      	beq.n	800d400 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d140      	bne.n	800d400 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	3304      	adds	r3, #4
 800d382:	4618      	mov	r0, r3
 800d384:	f7fe fa0f 	bl	800b7a6 <uxListRemove>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d115      	bne.n	800d3ba <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d38e:	693b      	ldr	r3, [r7, #16]
 800d390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d392:	491f      	ldr	r1, [pc, #124]	; (800d410 <xTaskPriorityDisinherit+0x10c>)
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d10a      	bne.n	800d3ba <xTaskPriorityDisinherit+0xb6>
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a8:	2201      	movs	r2, #1
 800d3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800d3ae:	43da      	mvns	r2, r3
 800d3b0:	4b18      	ldr	r3, [pc, #96]	; (800d414 <xTaskPriorityDisinherit+0x110>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	4013      	ands	r3, r2
 800d3b6:	4a17      	ldr	r2, [pc, #92]	; (800d414 <xTaskPriorityDisinherit+0x110>)
 800d3b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c6:	f1c3 0207 	rsb	r2, r3, #7
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d2:	2201      	movs	r2, #1
 800d3d4:	409a      	lsls	r2, r3
 800d3d6:	4b0f      	ldr	r3, [pc, #60]	; (800d414 <xTaskPriorityDisinherit+0x110>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4313      	orrs	r3, r2
 800d3dc:	4a0d      	ldr	r2, [pc, #52]	; (800d414 <xTaskPriorityDisinherit+0x110>)
 800d3de:	6013      	str	r3, [r2, #0]
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e4:	4613      	mov	r3, r2
 800d3e6:	009b      	lsls	r3, r3, #2
 800d3e8:	4413      	add	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4a08      	ldr	r2, [pc, #32]	; (800d410 <xTaskPriorityDisinherit+0x10c>)
 800d3ee:	441a      	add	r2, r3
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	3304      	adds	r3, #4
 800d3f4:	4619      	mov	r1, r3
 800d3f6:	4610      	mov	r0, r2
 800d3f8:	f7fe f978 	bl	800b6ec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d400:	697b      	ldr	r3, [r7, #20]
	}
 800d402:	4618      	mov	r0, r3
 800d404:	3718      	adds	r7, #24
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}
 800d40a:	bf00      	nop
 800d40c:	20000cb0 	.word	0x20000cb0
 800d410:	20000cb4 	.word	0x20000cb4
 800d414:	20000db8 	.word	0x20000db8

0800d418 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d426:	2301      	movs	r3, #1
 800d428:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	f000 8087 	beq.w	800d540 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d432:	69bb      	ldr	r3, [r7, #24]
 800d434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d436:	2b00      	cmp	r3, #0
 800d438:	d10c      	bne.n	800d454 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d43a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d43e:	b672      	cpsid	i
 800d440:	f383 8811 	msr	BASEPRI, r3
 800d444:	f3bf 8f6f 	isb	sy
 800d448:	f3bf 8f4f 	dsb	sy
 800d44c:	b662      	cpsie	i
 800d44e:	60fb      	str	r3, [r7, #12]
}
 800d450:	bf00      	nop
 800d452:	e7fe      	b.n	800d452 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d458:	683a      	ldr	r2, [r7, #0]
 800d45a:	429a      	cmp	r2, r3
 800d45c:	d902      	bls.n	800d464 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	61fb      	str	r3, [r7, #28]
 800d462:	e002      	b.n	800d46a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d464:	69bb      	ldr	r3, [r7, #24]
 800d466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d468:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d46e:	69fa      	ldr	r2, [r7, #28]
 800d470:	429a      	cmp	r2, r3
 800d472:	d065      	beq.n	800d540 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d478:	697a      	ldr	r2, [r7, #20]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d160      	bne.n	800d540 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d47e:	4b32      	ldr	r3, [pc, #200]	; (800d548 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	69ba      	ldr	r2, [r7, #24]
 800d484:	429a      	cmp	r2, r3
 800d486:	d10c      	bne.n	800d4a2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d48c:	b672      	cpsid	i
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	b662      	cpsie	i
 800d49c:	60bb      	str	r3, [r7, #8]
}
 800d49e:	bf00      	nop
 800d4a0:	e7fe      	b.n	800d4a0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4a6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	69fa      	ldr	r2, [r7, #28]
 800d4ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	699b      	ldr	r3, [r3, #24]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	db04      	blt.n	800d4c0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	f1c3 0207 	rsb	r2, r3, #7
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	6959      	ldr	r1, [r3, #20]
 800d4c4:	693a      	ldr	r2, [r7, #16]
 800d4c6:	4613      	mov	r3, r2
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	4413      	add	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4a1f      	ldr	r2, [pc, #124]	; (800d54c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d4d0:	4413      	add	r3, r2
 800d4d2:	4299      	cmp	r1, r3
 800d4d4:	d134      	bne.n	800d540 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4d6:	69bb      	ldr	r3, [r7, #24]
 800d4d8:	3304      	adds	r3, #4
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fe f963 	bl	800b7a6 <uxListRemove>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d115      	bne.n	800d512 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4ea:	4918      	ldr	r1, [pc, #96]	; (800d54c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	440b      	add	r3, r1
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d10a      	bne.n	800d512 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d4fc:	69bb      	ldr	r3, [r7, #24]
 800d4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d500:	2201      	movs	r2, #1
 800d502:	fa02 f303 	lsl.w	r3, r2, r3
 800d506:	43da      	mvns	r2, r3
 800d508:	4b11      	ldr	r3, [pc, #68]	; (800d550 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4013      	ands	r3, r2
 800d50e:	4a10      	ldr	r2, [pc, #64]	; (800d550 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d510:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d512:	69bb      	ldr	r3, [r7, #24]
 800d514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d516:	2201      	movs	r2, #1
 800d518:	409a      	lsls	r2, r3
 800d51a:	4b0d      	ldr	r3, [pc, #52]	; (800d550 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4313      	orrs	r3, r2
 800d520:	4a0b      	ldr	r2, [pc, #44]	; (800d550 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d522:	6013      	str	r3, [r2, #0]
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d528:	4613      	mov	r3, r2
 800d52a:	009b      	lsls	r3, r3, #2
 800d52c:	4413      	add	r3, r2
 800d52e:	009b      	lsls	r3, r3, #2
 800d530:	4a06      	ldr	r2, [pc, #24]	; (800d54c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d532:	441a      	add	r2, r3
 800d534:	69bb      	ldr	r3, [r7, #24]
 800d536:	3304      	adds	r3, #4
 800d538:	4619      	mov	r1, r3
 800d53a:	4610      	mov	r0, r2
 800d53c:	f7fe f8d6 	bl	800b6ec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d540:	bf00      	nop
 800d542:	3720      	adds	r7, #32
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}
 800d548:	20000cb0 	.word	0x20000cb0
 800d54c:	20000cb4 	.word	0x20000cb4
 800d550:	20000db8 	.word	0x20000db8

0800d554 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d554:	b480      	push	{r7}
 800d556:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d558:	4b07      	ldr	r3, [pc, #28]	; (800d578 <pvTaskIncrementMutexHeldCount+0x24>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d004      	beq.n	800d56a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d560:	4b05      	ldr	r3, [pc, #20]	; (800d578 <pvTaskIncrementMutexHeldCount+0x24>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d566:	3201      	adds	r2, #1
 800d568:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d56a:	4b03      	ldr	r3, [pc, #12]	; (800d578 <pvTaskIncrementMutexHeldCount+0x24>)
 800d56c:	681b      	ldr	r3, [r3, #0]
	}
 800d56e:	4618      	mov	r0, r3
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	20000cb0 	.word	0x20000cb0

0800d57c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b084      	sub	sp, #16
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d586:	4b29      	ldr	r3, [pc, #164]	; (800d62c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d58c:	4b28      	ldr	r3, [pc, #160]	; (800d630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	3304      	adds	r3, #4
 800d592:	4618      	mov	r0, r3
 800d594:	f7fe f907 	bl	800b7a6 <uxListRemove>
 800d598:	4603      	mov	r3, r0
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10b      	bne.n	800d5b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d59e:	4b24      	ldr	r3, [pc, #144]	; (800d630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5aa:	43da      	mvns	r2, r3
 800d5ac:	4b21      	ldr	r3, [pc, #132]	; (800d634 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	4013      	ands	r3, r2
 800d5b2:	4a20      	ldr	r2, [pc, #128]	; (800d634 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5bc:	d10a      	bne.n	800d5d4 <prvAddCurrentTaskToDelayedList+0x58>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d007      	beq.n	800d5d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5c4:	4b1a      	ldr	r3, [pc, #104]	; (800d630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3304      	adds	r3, #4
 800d5ca:	4619      	mov	r1, r3
 800d5cc:	481a      	ldr	r0, [pc, #104]	; (800d638 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d5ce:	f7fe f88d 	bl	800b6ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5d2:	e026      	b.n	800d622 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5d4:	68fa      	ldr	r2, [r7, #12]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4413      	add	r3, r2
 800d5da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5dc:	4b14      	ldr	r3, [pc, #80]	; (800d630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5e4:	68ba      	ldr	r2, [r7, #8]
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d209      	bcs.n	800d600 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5ec:	4b13      	ldr	r3, [pc, #76]	; (800d63c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d5ee:	681a      	ldr	r2, [r3, #0]
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	; (800d630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	f7fe f89b 	bl	800b734 <vListInsert>
}
 800d5fe:	e010      	b.n	800d622 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d600:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d602:	681a      	ldr	r2, [r3, #0]
 800d604:	4b0a      	ldr	r3, [pc, #40]	; (800d630 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	3304      	adds	r3, #4
 800d60a:	4619      	mov	r1, r3
 800d60c:	4610      	mov	r0, r2
 800d60e:	f7fe f891 	bl	800b734 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d612:	4b0c      	ldr	r3, [pc, #48]	; (800d644 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	68ba      	ldr	r2, [r7, #8]
 800d618:	429a      	cmp	r2, r3
 800d61a:	d202      	bcs.n	800d622 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d61c:	4a09      	ldr	r2, [pc, #36]	; (800d644 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	6013      	str	r3, [r2, #0]
}
 800d622:	bf00      	nop
 800d624:	3710      	adds	r7, #16
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	20000db4 	.word	0x20000db4
 800d630:	20000cb0 	.word	0x20000cb0
 800d634:	20000db8 	.word	0x20000db8
 800d638:	20000d9c 	.word	0x20000d9c
 800d63c:	20000d6c 	.word	0x20000d6c
 800d640:	20000d68 	.word	0x20000d68
 800d644:	20000dd0 	.word	0x20000dd0

0800d648 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d648:	b480      	push	{r7}
 800d64a:	b085      	sub	sp, #20
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	3b04      	subs	r3, #4
 800d658:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d660:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	3b04      	subs	r3, #4
 800d666:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	f023 0201 	bic.w	r2, r3, #1
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3b04      	subs	r3, #4
 800d676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d678:	4a0c      	ldr	r2, [pc, #48]	; (800d6ac <pxPortInitialiseStack+0x64>)
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	3b14      	subs	r3, #20
 800d682:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	3b04      	subs	r3, #4
 800d68e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f06f 0202 	mvn.w	r2, #2
 800d696:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	3b20      	subs	r3, #32
 800d69c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d69e:	68fb      	ldr	r3, [r7, #12]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr
 800d6ac:	0800d6b1 	.word	0x0800d6b1

0800d6b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d6ba:	4b14      	ldr	r3, [pc, #80]	; (800d70c <prvTaskExitError+0x5c>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6c2:	d00c      	beq.n	800d6de <prvTaskExitError+0x2e>
	__asm volatile
 800d6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c8:	b672      	cpsid	i
 800d6ca:	f383 8811 	msr	BASEPRI, r3
 800d6ce:	f3bf 8f6f 	isb	sy
 800d6d2:	f3bf 8f4f 	dsb	sy
 800d6d6:	b662      	cpsie	i
 800d6d8:	60fb      	str	r3, [r7, #12]
}
 800d6da:	bf00      	nop
 800d6dc:	e7fe      	b.n	800d6dc <prvTaskExitError+0x2c>
	__asm volatile
 800d6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e2:	b672      	cpsid	i
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	b662      	cpsie	i
 800d6f2:	60bb      	str	r3, [r7, #8]
}
 800d6f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6f6:	bf00      	nop
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d0fc      	beq.n	800d6f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d6fe:	bf00      	nop
 800d700:	bf00      	nop
 800d702:	3714      	adds	r7, #20
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	20000048 	.word	0x20000048

0800d710 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d710:	4b07      	ldr	r3, [pc, #28]	; (800d730 <pxCurrentTCBConst2>)
 800d712:	6819      	ldr	r1, [r3, #0]
 800d714:	6808      	ldr	r0, [r1, #0]
 800d716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d71a:	f380 8809 	msr	PSP, r0
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f04f 0000 	mov.w	r0, #0
 800d726:	f380 8811 	msr	BASEPRI, r0
 800d72a:	4770      	bx	lr
 800d72c:	f3af 8000 	nop.w

0800d730 <pxCurrentTCBConst2>:
 800d730:	20000cb0 	.word	0x20000cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d734:	bf00      	nop
 800d736:	bf00      	nop

0800d738 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d738:	4808      	ldr	r0, [pc, #32]	; (800d75c <prvPortStartFirstTask+0x24>)
 800d73a:	6800      	ldr	r0, [r0, #0]
 800d73c:	6800      	ldr	r0, [r0, #0]
 800d73e:	f380 8808 	msr	MSP, r0
 800d742:	f04f 0000 	mov.w	r0, #0
 800d746:	f380 8814 	msr	CONTROL, r0
 800d74a:	b662      	cpsie	i
 800d74c:	b661      	cpsie	f
 800d74e:	f3bf 8f4f 	dsb	sy
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	df00      	svc	0
 800d758:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d75a:	bf00      	nop
 800d75c:	e000ed08 	.word	0xe000ed08

0800d760 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b084      	sub	sp, #16
 800d764:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d766:	4b37      	ldr	r3, [pc, #220]	; (800d844 <xPortStartScheduler+0xe4>)
 800d768:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	b2db      	uxtb	r3, r3
 800d770:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	22ff      	movs	r2, #255	; 0xff
 800d776:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d780:	78fb      	ldrb	r3, [r7, #3]
 800d782:	b2db      	uxtb	r3, r3
 800d784:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	4b2f      	ldr	r3, [pc, #188]	; (800d848 <xPortStartScheduler+0xe8>)
 800d78c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d78e:	4b2f      	ldr	r3, [pc, #188]	; (800d84c <xPortStartScheduler+0xec>)
 800d790:	2207      	movs	r2, #7
 800d792:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d794:	e009      	b.n	800d7aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d796:	4b2d      	ldr	r3, [pc, #180]	; (800d84c <xPortStartScheduler+0xec>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	4a2b      	ldr	r2, [pc, #172]	; (800d84c <xPortStartScheduler+0xec>)
 800d79e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7a0:	78fb      	ldrb	r3, [r7, #3]
 800d7a2:	b2db      	uxtb	r3, r3
 800d7a4:	005b      	lsls	r3, r3, #1
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7aa:	78fb      	ldrb	r3, [r7, #3]
 800d7ac:	b2db      	uxtb	r3, r3
 800d7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7b2:	2b80      	cmp	r3, #128	; 0x80
 800d7b4:	d0ef      	beq.n	800d796 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d7b6:	4b25      	ldr	r3, [pc, #148]	; (800d84c <xPortStartScheduler+0xec>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	f1c3 0307 	rsb	r3, r3, #7
 800d7be:	2b04      	cmp	r3, #4
 800d7c0:	d00c      	beq.n	800d7dc <xPortStartScheduler+0x7c>
	__asm volatile
 800d7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c6:	b672      	cpsid	i
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	b662      	cpsie	i
 800d7d6:	60bb      	str	r3, [r7, #8]
}
 800d7d8:	bf00      	nop
 800d7da:	e7fe      	b.n	800d7da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d7dc:	4b1b      	ldr	r3, [pc, #108]	; (800d84c <xPortStartScheduler+0xec>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	021b      	lsls	r3, r3, #8
 800d7e2:	4a1a      	ldr	r2, [pc, #104]	; (800d84c <xPortStartScheduler+0xec>)
 800d7e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d7e6:	4b19      	ldr	r3, [pc, #100]	; (800d84c <xPortStartScheduler+0xec>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d7ee:	4a17      	ldr	r2, [pc, #92]	; (800d84c <xPortStartScheduler+0xec>)
 800d7f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d7fa:	4b15      	ldr	r3, [pc, #84]	; (800d850 <xPortStartScheduler+0xf0>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	4a14      	ldr	r2, [pc, #80]	; (800d850 <xPortStartScheduler+0xf0>)
 800d800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d804:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d806:	4b12      	ldr	r3, [pc, #72]	; (800d850 <xPortStartScheduler+0xf0>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	4a11      	ldr	r2, [pc, #68]	; (800d850 <xPortStartScheduler+0xf0>)
 800d80c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d810:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d812:	f000 f8dd 	bl	800d9d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d816:	4b0f      	ldr	r3, [pc, #60]	; (800d854 <xPortStartScheduler+0xf4>)
 800d818:	2200      	movs	r2, #0
 800d81a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d81c:	f000 f8fc 	bl	800da18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d820:	4b0d      	ldr	r3, [pc, #52]	; (800d858 <xPortStartScheduler+0xf8>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	4a0c      	ldr	r2, [pc, #48]	; (800d858 <xPortStartScheduler+0xf8>)
 800d826:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d82a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d82c:	f7ff ff84 	bl	800d738 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d830:	f7ff fa78 	bl	800cd24 <vTaskSwitchContext>
	prvTaskExitError();
 800d834:	f7ff ff3c 	bl	800d6b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	3710      	adds	r7, #16
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd80      	pop	{r7, pc}
 800d842:	bf00      	nop
 800d844:	e000e400 	.word	0xe000e400
 800d848:	20000ddc 	.word	0x20000ddc
 800d84c:	20000de0 	.word	0x20000de0
 800d850:	e000ed20 	.word	0xe000ed20
 800d854:	20000048 	.word	0x20000048
 800d858:	e000ef34 	.word	0xe000ef34

0800d85c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d85c:	b480      	push	{r7}
 800d85e:	b083      	sub	sp, #12
 800d860:	af00      	add	r7, sp, #0
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	b672      	cpsid	i
 800d868:	f383 8811 	msr	BASEPRI, r3
 800d86c:	f3bf 8f6f 	isb	sy
 800d870:	f3bf 8f4f 	dsb	sy
 800d874:	b662      	cpsie	i
 800d876:	607b      	str	r3, [r7, #4]
}
 800d878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d87a:	4b10      	ldr	r3, [pc, #64]	; (800d8bc <vPortEnterCritical+0x60>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3301      	adds	r3, #1
 800d880:	4a0e      	ldr	r2, [pc, #56]	; (800d8bc <vPortEnterCritical+0x60>)
 800d882:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d884:	4b0d      	ldr	r3, [pc, #52]	; (800d8bc <vPortEnterCritical+0x60>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d111      	bne.n	800d8b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d88c:	4b0c      	ldr	r3, [pc, #48]	; (800d8c0 <vPortEnterCritical+0x64>)
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b00      	cmp	r3, #0
 800d894:	d00c      	beq.n	800d8b0 <vPortEnterCritical+0x54>
	__asm volatile
 800d896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d89a:	b672      	cpsid	i
 800d89c:	f383 8811 	msr	BASEPRI, r3
 800d8a0:	f3bf 8f6f 	isb	sy
 800d8a4:	f3bf 8f4f 	dsb	sy
 800d8a8:	b662      	cpsie	i
 800d8aa:	603b      	str	r3, [r7, #0]
}
 800d8ac:	bf00      	nop
 800d8ae:	e7fe      	b.n	800d8ae <vPortEnterCritical+0x52>
	}
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	20000048 	.word	0x20000048
 800d8c0:	e000ed04 	.word	0xe000ed04

0800d8c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b083      	sub	sp, #12
 800d8c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d8ca:	4b13      	ldr	r3, [pc, #76]	; (800d918 <vPortExitCritical+0x54>)
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d10c      	bne.n	800d8ec <vPortExitCritical+0x28>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	b672      	cpsid	i
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	b662      	cpsie	i
 800d8e6:	607b      	str	r3, [r7, #4]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d8ec:	4b0a      	ldr	r3, [pc, #40]	; (800d918 <vPortExitCritical+0x54>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	4a09      	ldr	r2, [pc, #36]	; (800d918 <vPortExitCritical+0x54>)
 800d8f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d8f6:	4b08      	ldr	r3, [pc, #32]	; (800d918 <vPortExitCritical+0x54>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d105      	bne.n	800d90a <vPortExitCritical+0x46>
 800d8fe:	2300      	movs	r3, #0
 800d900:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d908:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d90a:	bf00      	nop
 800d90c:	370c      	adds	r7, #12
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	20000048 	.word	0x20000048
 800d91c:	00000000 	.word	0x00000000

0800d920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d920:	f3ef 8009 	mrs	r0, PSP
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	4b15      	ldr	r3, [pc, #84]	; (800d980 <pxCurrentTCBConst>)
 800d92a:	681a      	ldr	r2, [r3, #0]
 800d92c:	f01e 0f10 	tst.w	lr, #16
 800d930:	bf08      	it	eq
 800d932:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d936:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d93a:	6010      	str	r0, [r2, #0]
 800d93c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d940:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d944:	b672      	cpsid	i
 800d946:	f380 8811 	msr	BASEPRI, r0
 800d94a:	f3bf 8f4f 	dsb	sy
 800d94e:	f3bf 8f6f 	isb	sy
 800d952:	b662      	cpsie	i
 800d954:	f7ff f9e6 	bl	800cd24 <vTaskSwitchContext>
 800d958:	f04f 0000 	mov.w	r0, #0
 800d95c:	f380 8811 	msr	BASEPRI, r0
 800d960:	bc09      	pop	{r0, r3}
 800d962:	6819      	ldr	r1, [r3, #0]
 800d964:	6808      	ldr	r0, [r1, #0]
 800d966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96a:	f01e 0f10 	tst.w	lr, #16
 800d96e:	bf08      	it	eq
 800d970:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d974:	f380 8809 	msr	PSP, r0
 800d978:	f3bf 8f6f 	isb	sy
 800d97c:	4770      	bx	lr
 800d97e:	bf00      	nop

0800d980 <pxCurrentTCBConst>:
 800d980:	20000cb0 	.word	0x20000cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d984:	bf00      	nop
 800d986:	bf00      	nop

0800d988 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
	__asm volatile
 800d98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d992:	b672      	cpsid	i
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	b662      	cpsie	i
 800d9a2:	607b      	str	r3, [r7, #4]
}
 800d9a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d9a6:	f7ff f903 	bl	800cbb0 <xTaskIncrementTick>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d003      	beq.n	800d9b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9b0:	4b06      	ldr	r3, [pc, #24]	; (800d9cc <SysTick_Handler+0x44>)
 800d9b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	f383 8811 	msr	BASEPRI, r3
}
 800d9c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d9c4:	bf00      	nop
 800d9c6:	3708      	adds	r7, #8
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	e000ed04 	.word	0xe000ed04

0800d9d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d9d4:	4b0b      	ldr	r3, [pc, #44]	; (800da04 <vPortSetupTimerInterrupt+0x34>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d9da:	4b0b      	ldr	r3, [pc, #44]	; (800da08 <vPortSetupTimerInterrupt+0x38>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d9e0:	4b0a      	ldr	r3, [pc, #40]	; (800da0c <vPortSetupTimerInterrupt+0x3c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	4a0a      	ldr	r2, [pc, #40]	; (800da10 <vPortSetupTimerInterrupt+0x40>)
 800d9e6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ea:	099b      	lsrs	r3, r3, #6
 800d9ec:	4a09      	ldr	r2, [pc, #36]	; (800da14 <vPortSetupTimerInterrupt+0x44>)
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d9f2:	4b04      	ldr	r3, [pc, #16]	; (800da04 <vPortSetupTimerInterrupt+0x34>)
 800d9f4:	2207      	movs	r2, #7
 800d9f6:	601a      	str	r2, [r3, #0]
}
 800d9f8:	bf00      	nop
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da00:	4770      	bx	lr
 800da02:	bf00      	nop
 800da04:	e000e010 	.word	0xe000e010
 800da08:	e000e018 	.word	0xe000e018
 800da0c:	2000003c 	.word	0x2000003c
 800da10:	10624dd3 	.word	0x10624dd3
 800da14:	e000e014 	.word	0xe000e014

0800da18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800da28 <vPortEnableVFP+0x10>
 800da1c:	6801      	ldr	r1, [r0, #0]
 800da1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da22:	6001      	str	r1, [r0, #0]
 800da24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da26:	bf00      	nop
 800da28:	e000ed88 	.word	0xe000ed88

0800da2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b08a      	sub	sp, #40	; 0x28
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da34:	2300      	movs	r3, #0
 800da36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da38:	f7ff f80e 	bl	800ca58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da3c:	4b5b      	ldr	r3, [pc, #364]	; (800dbac <pvPortMalloc+0x180>)
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d101      	bne.n	800da48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da44:	f000 f91a 	bl	800dc7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da48:	4b59      	ldr	r3, [pc, #356]	; (800dbb0 <pvPortMalloc+0x184>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	4013      	ands	r3, r2
 800da50:	2b00      	cmp	r3, #0
 800da52:	f040 8092 	bne.w	800db7a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d01f      	beq.n	800da9c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800da5c:	2208      	movs	r2, #8
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	4413      	add	r3, r2
 800da62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f003 0307 	and.w	r3, r3, #7
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d016      	beq.n	800da9c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f023 0307 	bic.w	r3, r3, #7
 800da74:	3308      	adds	r3, #8
 800da76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f003 0307 	and.w	r3, r3, #7
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d00c      	beq.n	800da9c <pvPortMalloc+0x70>
	__asm volatile
 800da82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da86:	b672      	cpsid	i
 800da88:	f383 8811 	msr	BASEPRI, r3
 800da8c:	f3bf 8f6f 	isb	sy
 800da90:	f3bf 8f4f 	dsb	sy
 800da94:	b662      	cpsie	i
 800da96:	617b      	str	r3, [r7, #20]
}
 800da98:	bf00      	nop
 800da9a:	e7fe      	b.n	800da9a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d06b      	beq.n	800db7a <pvPortMalloc+0x14e>
 800daa2:	4b44      	ldr	r3, [pc, #272]	; (800dbb4 <pvPortMalloc+0x188>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	687a      	ldr	r2, [r7, #4]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d866      	bhi.n	800db7a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800daac:	4b42      	ldr	r3, [pc, #264]	; (800dbb8 <pvPortMalloc+0x18c>)
 800daae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dab0:	4b41      	ldr	r3, [pc, #260]	; (800dbb8 <pvPortMalloc+0x18c>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dab6:	e004      	b.n	800dac2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800dab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac4:	685b      	ldr	r3, [r3, #4]
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	429a      	cmp	r2, r3
 800daca:	d903      	bls.n	800dad4 <pvPortMalloc+0xa8>
 800dacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1f1      	bne.n	800dab8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dad4:	4b35      	ldr	r3, [pc, #212]	; (800dbac <pvPortMalloc+0x180>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dada:	429a      	cmp	r2, r3
 800dadc:	d04d      	beq.n	800db7a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dade:	6a3b      	ldr	r3, [r7, #32]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	2208      	movs	r2, #8
 800dae4:	4413      	add	r3, r2
 800dae6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	6a3b      	ldr	r3, [r7, #32]
 800daee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	685a      	ldr	r2, [r3, #4]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	1ad2      	subs	r2, r2, r3
 800daf8:	2308      	movs	r3, #8
 800dafa:	005b      	lsls	r3, r3, #1
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d921      	bls.n	800db44 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4413      	add	r3, r2
 800db06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db08:	69bb      	ldr	r3, [r7, #24]
 800db0a:	f003 0307 	and.w	r3, r3, #7
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00c      	beq.n	800db2c <pvPortMalloc+0x100>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db16:	b672      	cpsid	i
 800db18:	f383 8811 	msr	BASEPRI, r3
 800db1c:	f3bf 8f6f 	isb	sy
 800db20:	f3bf 8f4f 	dsb	sy
 800db24:	b662      	cpsie	i
 800db26:	613b      	str	r3, [r7, #16]
}
 800db28:	bf00      	nop
 800db2a:	e7fe      	b.n	800db2a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	1ad2      	subs	r2, r2, r3
 800db34:	69bb      	ldr	r3, [r7, #24]
 800db36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db3e:	69b8      	ldr	r0, [r7, #24]
 800db40:	f000 f8fe 	bl	800dd40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db44:	4b1b      	ldr	r3, [pc, #108]	; (800dbb4 <pvPortMalloc+0x188>)
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	4a19      	ldr	r2, [pc, #100]	; (800dbb4 <pvPortMalloc+0x188>)
 800db50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db52:	4b18      	ldr	r3, [pc, #96]	; (800dbb4 <pvPortMalloc+0x188>)
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	4b19      	ldr	r3, [pc, #100]	; (800dbbc <pvPortMalloc+0x190>)
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d203      	bcs.n	800db66 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db5e:	4b15      	ldr	r3, [pc, #84]	; (800dbb4 <pvPortMalloc+0x188>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a16      	ldr	r2, [pc, #88]	; (800dbbc <pvPortMalloc+0x190>)
 800db64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	4b11      	ldr	r3, [pc, #68]	; (800dbb0 <pvPortMalloc+0x184>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	431a      	orrs	r2, r3
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	2200      	movs	r2, #0
 800db78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db7a:	f7fe ff7b 	bl	800ca74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	f003 0307 	and.w	r3, r3, #7
 800db84:	2b00      	cmp	r3, #0
 800db86:	d00c      	beq.n	800dba2 <pvPortMalloc+0x176>
	__asm volatile
 800db88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8c:	b672      	cpsid	i
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	b662      	cpsie	i
 800db9c:	60fb      	str	r3, [r7, #12]
}
 800db9e:	bf00      	nop
 800dba0:	e7fe      	b.n	800dba0 <pvPortMalloc+0x174>
	return pvReturn;
 800dba2:	69fb      	ldr	r3, [r7, #28]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3728      	adds	r7, #40	; 0x28
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	200049ec 	.word	0x200049ec
 800dbb0:	200049f8 	.word	0x200049f8
 800dbb4:	200049f0 	.word	0x200049f0
 800dbb8:	200049e4 	.word	0x200049e4
 800dbbc:	200049f4 	.word	0x200049f4

0800dbc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b086      	sub	sp, #24
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d04c      	beq.n	800dc6c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbd2:	2308      	movs	r3, #8
 800dbd4:	425b      	negs	r3, r3
 800dbd6:	697a      	ldr	r2, [r7, #20]
 800dbd8:	4413      	add	r3, r2
 800dbda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	4b23      	ldr	r3, [pc, #140]	; (800dc74 <vPortFree+0xb4>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4013      	ands	r3, r2
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d10c      	bne.n	800dc08 <vPortFree+0x48>
	__asm volatile
 800dbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbf2:	b672      	cpsid	i
 800dbf4:	f383 8811 	msr	BASEPRI, r3
 800dbf8:	f3bf 8f6f 	isb	sy
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	b662      	cpsie	i
 800dc02:	60fb      	str	r3, [r7, #12]
}
 800dc04:	bf00      	nop
 800dc06:	e7fe      	b.n	800dc06 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00c      	beq.n	800dc2a <vPortFree+0x6a>
	__asm volatile
 800dc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc14:	b672      	cpsid	i
 800dc16:	f383 8811 	msr	BASEPRI, r3
 800dc1a:	f3bf 8f6f 	isb	sy
 800dc1e:	f3bf 8f4f 	dsb	sy
 800dc22:	b662      	cpsie	i
 800dc24:	60bb      	str	r3, [r7, #8]
}
 800dc26:	bf00      	nop
 800dc28:	e7fe      	b.n	800dc28 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	685a      	ldr	r2, [r3, #4]
 800dc2e:	4b11      	ldr	r3, [pc, #68]	; (800dc74 <vPortFree+0xb4>)
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4013      	ands	r3, r2
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d019      	beq.n	800dc6c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d115      	bne.n	800dc6c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	685a      	ldr	r2, [r3, #4]
 800dc44:	4b0b      	ldr	r3, [pc, #44]	; (800dc74 <vPortFree+0xb4>)
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	43db      	mvns	r3, r3
 800dc4a:	401a      	ands	r2, r3
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc50:	f7fe ff02 	bl	800ca58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	685a      	ldr	r2, [r3, #4]
 800dc58:	4b07      	ldr	r3, [pc, #28]	; (800dc78 <vPortFree+0xb8>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	4a06      	ldr	r2, [pc, #24]	; (800dc78 <vPortFree+0xb8>)
 800dc60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc62:	6938      	ldr	r0, [r7, #16]
 800dc64:	f000 f86c 	bl	800dd40 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dc68:	f7fe ff04 	bl	800ca74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc6c:	bf00      	nop
 800dc6e:	3718      	adds	r7, #24
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}
 800dc74:	200049f8 	.word	0x200049f8
 800dc78:	200049f0 	.word	0x200049f0

0800dc7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc82:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dc88:	4b27      	ldr	r3, [pc, #156]	; (800dd28 <prvHeapInit+0xac>)
 800dc8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f003 0307 	and.w	r3, r3, #7
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00c      	beq.n	800dcb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	3307      	adds	r3, #7
 800dc9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	f023 0307 	bic.w	r3, r3, #7
 800dca2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	4a1f      	ldr	r2, [pc, #124]	; (800dd28 <prvHeapInit+0xac>)
 800dcac:	4413      	add	r3, r2
 800dcae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcb4:	4a1d      	ldr	r2, [pc, #116]	; (800dd2c <prvHeapInit+0xb0>)
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcba:	4b1c      	ldr	r3, [pc, #112]	; (800dd2c <prvHeapInit+0xb0>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	68ba      	ldr	r2, [r7, #8]
 800dcc4:	4413      	add	r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dcc8:	2208      	movs	r2, #8
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	1a9b      	subs	r3, r3, r2
 800dcce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f023 0307 	bic.w	r3, r3, #7
 800dcd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	4a15      	ldr	r2, [pc, #84]	; (800dd30 <prvHeapInit+0xb4>)
 800dcdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dcde:	4b14      	ldr	r3, [pc, #80]	; (800dd30 <prvHeapInit+0xb4>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2200      	movs	r2, #0
 800dce4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dce6:	4b12      	ldr	r3, [pc, #72]	; (800dd30 <prvHeapInit+0xb4>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	1ad2      	subs	r2, r2, r3
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dcfc:	4b0c      	ldr	r3, [pc, #48]	; (800dd30 <prvHeapInit+0xb4>)
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	4a0a      	ldr	r2, [pc, #40]	; (800dd34 <prvHeapInit+0xb8>)
 800dd0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	685b      	ldr	r3, [r3, #4]
 800dd10:	4a09      	ldr	r2, [pc, #36]	; (800dd38 <prvHeapInit+0xbc>)
 800dd12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd14:	4b09      	ldr	r3, [pc, #36]	; (800dd3c <prvHeapInit+0xc0>)
 800dd16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd1a:	601a      	str	r2, [r3, #0]
}
 800dd1c:	bf00      	nop
 800dd1e:	3714      	adds	r7, #20
 800dd20:	46bd      	mov	sp, r7
 800dd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd26:	4770      	bx	lr
 800dd28:	20000de4 	.word	0x20000de4
 800dd2c:	200049e4 	.word	0x200049e4
 800dd30:	200049ec 	.word	0x200049ec
 800dd34:	200049f4 	.word	0x200049f4
 800dd38:	200049f0 	.word	0x200049f0
 800dd3c:	200049f8 	.word	0x200049f8

0800dd40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd48:	4b28      	ldr	r3, [pc, #160]	; (800ddec <prvInsertBlockIntoFreeList+0xac>)
 800dd4a:	60fb      	str	r3, [r7, #12]
 800dd4c:	e002      	b.n	800dd54 <prvInsertBlockIntoFreeList+0x14>
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d8f7      	bhi.n	800dd4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	685b      	ldr	r3, [r3, #4]
 800dd66:	68ba      	ldr	r2, [r7, #8]
 800dd68:	4413      	add	r3, r2
 800dd6a:	687a      	ldr	r2, [r7, #4]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d108      	bne.n	800dd82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	685a      	ldr	r2, [r3, #4]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	441a      	add	r2, r3
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	685b      	ldr	r3, [r3, #4]
 800dd8a:	68ba      	ldr	r2, [r7, #8]
 800dd8c:	441a      	add	r2, r3
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d118      	bne.n	800ddc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	4b15      	ldr	r3, [pc, #84]	; (800ddf0 <prvInsertBlockIntoFreeList+0xb0>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	429a      	cmp	r2, r3
 800dda0:	d00d      	beq.n	800ddbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	441a      	add	r2, r3
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	601a      	str	r2, [r3, #0]
 800ddbc:	e008      	b.n	800ddd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddbe:	4b0c      	ldr	r3, [pc, #48]	; (800ddf0 <prvInsertBlockIntoFreeList+0xb0>)
 800ddc0:	681a      	ldr	r2, [r3, #0]
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	601a      	str	r2, [r3, #0]
 800ddc6:	e003      	b.n	800ddd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ddd0:	68fa      	ldr	r2, [r7, #12]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	429a      	cmp	r2, r3
 800ddd6:	d002      	beq.n	800ddde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddde:	bf00      	nop
 800dde0:	3714      	adds	r7, #20
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr
 800ddea:	bf00      	nop
 800ddec:	200049e4 	.word	0x200049e4
 800ddf0:	200049ec 	.word	0x200049ec

0800ddf4 <__errno>:
 800ddf4:	4b01      	ldr	r3, [pc, #4]	; (800ddfc <__errno+0x8>)
 800ddf6:	6818      	ldr	r0, [r3, #0]
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	2000004c 	.word	0x2000004c

0800de00 <__libc_init_array>:
 800de00:	b570      	push	{r4, r5, r6, lr}
 800de02:	4d0d      	ldr	r5, [pc, #52]	; (800de38 <__libc_init_array+0x38>)
 800de04:	4c0d      	ldr	r4, [pc, #52]	; (800de3c <__libc_init_array+0x3c>)
 800de06:	1b64      	subs	r4, r4, r5
 800de08:	10a4      	asrs	r4, r4, #2
 800de0a:	2600      	movs	r6, #0
 800de0c:	42a6      	cmp	r6, r4
 800de0e:	d109      	bne.n	800de24 <__libc_init_array+0x24>
 800de10:	4d0b      	ldr	r5, [pc, #44]	; (800de40 <__libc_init_array+0x40>)
 800de12:	4c0c      	ldr	r4, [pc, #48]	; (800de44 <__libc_init_array+0x44>)
 800de14:	f000 fcf8 	bl	800e808 <_init>
 800de18:	1b64      	subs	r4, r4, r5
 800de1a:	10a4      	asrs	r4, r4, #2
 800de1c:	2600      	movs	r6, #0
 800de1e:	42a6      	cmp	r6, r4
 800de20:	d105      	bne.n	800de2e <__libc_init_array+0x2e>
 800de22:	bd70      	pop	{r4, r5, r6, pc}
 800de24:	f855 3b04 	ldr.w	r3, [r5], #4
 800de28:	4798      	blx	r3
 800de2a:	3601      	adds	r6, #1
 800de2c:	e7ee      	b.n	800de0c <__libc_init_array+0xc>
 800de2e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de32:	4798      	blx	r3
 800de34:	3601      	adds	r6, #1
 800de36:	e7f2      	b.n	800de1e <__libc_init_array+0x1e>
 800de38:	08013504 	.word	0x08013504
 800de3c:	08013504 	.word	0x08013504
 800de40:	08013504 	.word	0x08013504
 800de44:	08013508 	.word	0x08013508

0800de48 <__retarget_lock_acquire_recursive>:
 800de48:	4770      	bx	lr

0800de4a <__retarget_lock_release_recursive>:
 800de4a:	4770      	bx	lr

0800de4c <memcpy>:
 800de4c:	440a      	add	r2, r1
 800de4e:	4291      	cmp	r1, r2
 800de50:	f100 33ff 	add.w	r3, r0, #4294967295
 800de54:	d100      	bne.n	800de58 <memcpy+0xc>
 800de56:	4770      	bx	lr
 800de58:	b510      	push	{r4, lr}
 800de5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de62:	4291      	cmp	r1, r2
 800de64:	d1f9      	bne.n	800de5a <memcpy+0xe>
 800de66:	bd10      	pop	{r4, pc}

0800de68 <memset>:
 800de68:	4402      	add	r2, r0
 800de6a:	4603      	mov	r3, r0
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d100      	bne.n	800de72 <memset+0xa>
 800de70:	4770      	bx	lr
 800de72:	f803 1b01 	strb.w	r1, [r3], #1
 800de76:	e7f9      	b.n	800de6c <memset+0x4>

0800de78 <sbrk_aligned>:
 800de78:	b570      	push	{r4, r5, r6, lr}
 800de7a:	4e0e      	ldr	r6, [pc, #56]	; (800deb4 <sbrk_aligned+0x3c>)
 800de7c:	460c      	mov	r4, r1
 800de7e:	6831      	ldr	r1, [r6, #0]
 800de80:	4605      	mov	r5, r0
 800de82:	b911      	cbnz	r1, 800de8a <sbrk_aligned+0x12>
 800de84:	f000 f8f6 	bl	800e074 <_sbrk_r>
 800de88:	6030      	str	r0, [r6, #0]
 800de8a:	4621      	mov	r1, r4
 800de8c:	4628      	mov	r0, r5
 800de8e:	f000 f8f1 	bl	800e074 <_sbrk_r>
 800de92:	1c43      	adds	r3, r0, #1
 800de94:	d00a      	beq.n	800deac <sbrk_aligned+0x34>
 800de96:	1cc4      	adds	r4, r0, #3
 800de98:	f024 0403 	bic.w	r4, r4, #3
 800de9c:	42a0      	cmp	r0, r4
 800de9e:	d007      	beq.n	800deb0 <sbrk_aligned+0x38>
 800dea0:	1a21      	subs	r1, r4, r0
 800dea2:	4628      	mov	r0, r5
 800dea4:	f000 f8e6 	bl	800e074 <_sbrk_r>
 800dea8:	3001      	adds	r0, #1
 800deaa:	d101      	bne.n	800deb0 <sbrk_aligned+0x38>
 800deac:	f04f 34ff 	mov.w	r4, #4294967295
 800deb0:	4620      	mov	r0, r4
 800deb2:	bd70      	pop	{r4, r5, r6, pc}
 800deb4:	20004a04 	.word	0x20004a04

0800deb8 <_malloc_r>:
 800deb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800debc:	1ccd      	adds	r5, r1, #3
 800debe:	f025 0503 	bic.w	r5, r5, #3
 800dec2:	3508      	adds	r5, #8
 800dec4:	2d0c      	cmp	r5, #12
 800dec6:	bf38      	it	cc
 800dec8:	250c      	movcc	r5, #12
 800deca:	2d00      	cmp	r5, #0
 800decc:	4607      	mov	r7, r0
 800dece:	db01      	blt.n	800ded4 <_malloc_r+0x1c>
 800ded0:	42a9      	cmp	r1, r5
 800ded2:	d905      	bls.n	800dee0 <_malloc_r+0x28>
 800ded4:	230c      	movs	r3, #12
 800ded6:	603b      	str	r3, [r7, #0]
 800ded8:	2600      	movs	r6, #0
 800deda:	4630      	mov	r0, r6
 800dedc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dee0:	4e2e      	ldr	r6, [pc, #184]	; (800df9c <_malloc_r+0xe4>)
 800dee2:	f000 f8f7 	bl	800e0d4 <__malloc_lock>
 800dee6:	6833      	ldr	r3, [r6, #0]
 800dee8:	461c      	mov	r4, r3
 800deea:	bb34      	cbnz	r4, 800df3a <_malloc_r+0x82>
 800deec:	4629      	mov	r1, r5
 800deee:	4638      	mov	r0, r7
 800def0:	f7ff ffc2 	bl	800de78 <sbrk_aligned>
 800def4:	1c43      	adds	r3, r0, #1
 800def6:	4604      	mov	r4, r0
 800def8:	d14d      	bne.n	800df96 <_malloc_r+0xde>
 800defa:	6834      	ldr	r4, [r6, #0]
 800defc:	4626      	mov	r6, r4
 800defe:	2e00      	cmp	r6, #0
 800df00:	d140      	bne.n	800df84 <_malloc_r+0xcc>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	4631      	mov	r1, r6
 800df06:	4638      	mov	r0, r7
 800df08:	eb04 0803 	add.w	r8, r4, r3
 800df0c:	f000 f8b2 	bl	800e074 <_sbrk_r>
 800df10:	4580      	cmp	r8, r0
 800df12:	d13a      	bne.n	800df8a <_malloc_r+0xd2>
 800df14:	6821      	ldr	r1, [r4, #0]
 800df16:	3503      	adds	r5, #3
 800df18:	1a6d      	subs	r5, r5, r1
 800df1a:	f025 0503 	bic.w	r5, r5, #3
 800df1e:	3508      	adds	r5, #8
 800df20:	2d0c      	cmp	r5, #12
 800df22:	bf38      	it	cc
 800df24:	250c      	movcc	r5, #12
 800df26:	4629      	mov	r1, r5
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff ffa5 	bl	800de78 <sbrk_aligned>
 800df2e:	3001      	adds	r0, #1
 800df30:	d02b      	beq.n	800df8a <_malloc_r+0xd2>
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	442b      	add	r3, r5
 800df36:	6023      	str	r3, [r4, #0]
 800df38:	e00e      	b.n	800df58 <_malloc_r+0xa0>
 800df3a:	6822      	ldr	r2, [r4, #0]
 800df3c:	1b52      	subs	r2, r2, r5
 800df3e:	d41e      	bmi.n	800df7e <_malloc_r+0xc6>
 800df40:	2a0b      	cmp	r2, #11
 800df42:	d916      	bls.n	800df72 <_malloc_r+0xba>
 800df44:	1961      	adds	r1, r4, r5
 800df46:	42a3      	cmp	r3, r4
 800df48:	6025      	str	r5, [r4, #0]
 800df4a:	bf18      	it	ne
 800df4c:	6059      	strne	r1, [r3, #4]
 800df4e:	6863      	ldr	r3, [r4, #4]
 800df50:	bf08      	it	eq
 800df52:	6031      	streq	r1, [r6, #0]
 800df54:	5162      	str	r2, [r4, r5]
 800df56:	604b      	str	r3, [r1, #4]
 800df58:	4638      	mov	r0, r7
 800df5a:	f104 060b 	add.w	r6, r4, #11
 800df5e:	f000 f8bf 	bl	800e0e0 <__malloc_unlock>
 800df62:	f026 0607 	bic.w	r6, r6, #7
 800df66:	1d23      	adds	r3, r4, #4
 800df68:	1af2      	subs	r2, r6, r3
 800df6a:	d0b6      	beq.n	800deda <_malloc_r+0x22>
 800df6c:	1b9b      	subs	r3, r3, r6
 800df6e:	50a3      	str	r3, [r4, r2]
 800df70:	e7b3      	b.n	800deda <_malloc_r+0x22>
 800df72:	6862      	ldr	r2, [r4, #4]
 800df74:	42a3      	cmp	r3, r4
 800df76:	bf0c      	ite	eq
 800df78:	6032      	streq	r2, [r6, #0]
 800df7a:	605a      	strne	r2, [r3, #4]
 800df7c:	e7ec      	b.n	800df58 <_malloc_r+0xa0>
 800df7e:	4623      	mov	r3, r4
 800df80:	6864      	ldr	r4, [r4, #4]
 800df82:	e7b2      	b.n	800deea <_malloc_r+0x32>
 800df84:	4634      	mov	r4, r6
 800df86:	6876      	ldr	r6, [r6, #4]
 800df88:	e7b9      	b.n	800defe <_malloc_r+0x46>
 800df8a:	230c      	movs	r3, #12
 800df8c:	603b      	str	r3, [r7, #0]
 800df8e:	4638      	mov	r0, r7
 800df90:	f000 f8a6 	bl	800e0e0 <__malloc_unlock>
 800df94:	e7a1      	b.n	800deda <_malloc_r+0x22>
 800df96:	6025      	str	r5, [r4, #0]
 800df98:	e7de      	b.n	800df58 <_malloc_r+0xa0>
 800df9a:	bf00      	nop
 800df9c:	20004a00 	.word	0x20004a00

0800dfa0 <cleanup_glue>:
 800dfa0:	b538      	push	{r3, r4, r5, lr}
 800dfa2:	460c      	mov	r4, r1
 800dfa4:	6809      	ldr	r1, [r1, #0]
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	b109      	cbz	r1, 800dfae <cleanup_glue+0xe>
 800dfaa:	f7ff fff9 	bl	800dfa0 <cleanup_glue>
 800dfae:	4621      	mov	r1, r4
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dfb6:	f000 b899 	b.w	800e0ec <_free_r>
	...

0800dfbc <_reclaim_reent>:
 800dfbc:	4b2c      	ldr	r3, [pc, #176]	; (800e070 <_reclaim_reent+0xb4>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4283      	cmp	r3, r0
 800dfc2:	b570      	push	{r4, r5, r6, lr}
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	d051      	beq.n	800e06c <_reclaim_reent+0xb0>
 800dfc8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800dfca:	b143      	cbz	r3, 800dfde <_reclaim_reent+0x22>
 800dfcc:	68db      	ldr	r3, [r3, #12]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d14a      	bne.n	800e068 <_reclaim_reent+0xac>
 800dfd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfd4:	6819      	ldr	r1, [r3, #0]
 800dfd6:	b111      	cbz	r1, 800dfde <_reclaim_reent+0x22>
 800dfd8:	4620      	mov	r0, r4
 800dfda:	f000 f887 	bl	800e0ec <_free_r>
 800dfde:	6961      	ldr	r1, [r4, #20]
 800dfe0:	b111      	cbz	r1, 800dfe8 <_reclaim_reent+0x2c>
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	f000 f882 	bl	800e0ec <_free_r>
 800dfe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dfea:	b111      	cbz	r1, 800dff2 <_reclaim_reent+0x36>
 800dfec:	4620      	mov	r0, r4
 800dfee:	f000 f87d 	bl	800e0ec <_free_r>
 800dff2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800dff4:	b111      	cbz	r1, 800dffc <_reclaim_reent+0x40>
 800dff6:	4620      	mov	r0, r4
 800dff8:	f000 f878 	bl	800e0ec <_free_r>
 800dffc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800dffe:	b111      	cbz	r1, 800e006 <_reclaim_reent+0x4a>
 800e000:	4620      	mov	r0, r4
 800e002:	f000 f873 	bl	800e0ec <_free_r>
 800e006:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e008:	b111      	cbz	r1, 800e010 <_reclaim_reent+0x54>
 800e00a:	4620      	mov	r0, r4
 800e00c:	f000 f86e 	bl	800e0ec <_free_r>
 800e010:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e012:	b111      	cbz	r1, 800e01a <_reclaim_reent+0x5e>
 800e014:	4620      	mov	r0, r4
 800e016:	f000 f869 	bl	800e0ec <_free_r>
 800e01a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e01c:	b111      	cbz	r1, 800e024 <_reclaim_reent+0x68>
 800e01e:	4620      	mov	r0, r4
 800e020:	f000 f864 	bl	800e0ec <_free_r>
 800e024:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e026:	b111      	cbz	r1, 800e02e <_reclaim_reent+0x72>
 800e028:	4620      	mov	r0, r4
 800e02a:	f000 f85f 	bl	800e0ec <_free_r>
 800e02e:	69a3      	ldr	r3, [r4, #24]
 800e030:	b1e3      	cbz	r3, 800e06c <_reclaim_reent+0xb0>
 800e032:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e034:	4620      	mov	r0, r4
 800e036:	4798      	blx	r3
 800e038:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e03a:	b1b9      	cbz	r1, 800e06c <_reclaim_reent+0xb0>
 800e03c:	4620      	mov	r0, r4
 800e03e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e042:	f7ff bfad 	b.w	800dfa0 <cleanup_glue>
 800e046:	5949      	ldr	r1, [r1, r5]
 800e048:	b941      	cbnz	r1, 800e05c <_reclaim_reent+0xa0>
 800e04a:	3504      	adds	r5, #4
 800e04c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e04e:	2d80      	cmp	r5, #128	; 0x80
 800e050:	68d9      	ldr	r1, [r3, #12]
 800e052:	d1f8      	bne.n	800e046 <_reclaim_reent+0x8a>
 800e054:	4620      	mov	r0, r4
 800e056:	f000 f849 	bl	800e0ec <_free_r>
 800e05a:	e7ba      	b.n	800dfd2 <_reclaim_reent+0x16>
 800e05c:	680e      	ldr	r6, [r1, #0]
 800e05e:	4620      	mov	r0, r4
 800e060:	f000 f844 	bl	800e0ec <_free_r>
 800e064:	4631      	mov	r1, r6
 800e066:	e7ef      	b.n	800e048 <_reclaim_reent+0x8c>
 800e068:	2500      	movs	r5, #0
 800e06a:	e7ef      	b.n	800e04c <_reclaim_reent+0x90>
 800e06c:	bd70      	pop	{r4, r5, r6, pc}
 800e06e:	bf00      	nop
 800e070:	2000004c 	.word	0x2000004c

0800e074 <_sbrk_r>:
 800e074:	b538      	push	{r3, r4, r5, lr}
 800e076:	4d06      	ldr	r5, [pc, #24]	; (800e090 <_sbrk_r+0x1c>)
 800e078:	2300      	movs	r3, #0
 800e07a:	4604      	mov	r4, r0
 800e07c:	4608      	mov	r0, r1
 800e07e:	602b      	str	r3, [r5, #0]
 800e080:	f7f6 f9ca 	bl	8004418 <_sbrk>
 800e084:	1c43      	adds	r3, r0, #1
 800e086:	d102      	bne.n	800e08e <_sbrk_r+0x1a>
 800e088:	682b      	ldr	r3, [r5, #0]
 800e08a:	b103      	cbz	r3, 800e08e <_sbrk_r+0x1a>
 800e08c:	6023      	str	r3, [r4, #0]
 800e08e:	bd38      	pop	{r3, r4, r5, pc}
 800e090:	20004a08 	.word	0x20004a08

0800e094 <siprintf>:
 800e094:	b40e      	push	{r1, r2, r3}
 800e096:	b500      	push	{lr}
 800e098:	b09c      	sub	sp, #112	; 0x70
 800e09a:	ab1d      	add	r3, sp, #116	; 0x74
 800e09c:	9002      	str	r0, [sp, #8]
 800e09e:	9006      	str	r0, [sp, #24]
 800e0a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e0a4:	4809      	ldr	r0, [pc, #36]	; (800e0cc <siprintf+0x38>)
 800e0a6:	9107      	str	r1, [sp, #28]
 800e0a8:	9104      	str	r1, [sp, #16]
 800e0aa:	4909      	ldr	r1, [pc, #36]	; (800e0d0 <siprintf+0x3c>)
 800e0ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0b0:	9105      	str	r1, [sp, #20]
 800e0b2:	6800      	ldr	r0, [r0, #0]
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	a902      	add	r1, sp, #8
 800e0b8:	f000 f8c0 	bl	800e23c <_svfiprintf_r>
 800e0bc:	9b02      	ldr	r3, [sp, #8]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	701a      	strb	r2, [r3, #0]
 800e0c2:	b01c      	add	sp, #112	; 0x70
 800e0c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0c8:	b003      	add	sp, #12
 800e0ca:	4770      	bx	lr
 800e0cc:	2000004c 	.word	0x2000004c
 800e0d0:	ffff0208 	.word	0xffff0208

0800e0d4 <__malloc_lock>:
 800e0d4:	4801      	ldr	r0, [pc, #4]	; (800e0dc <__malloc_lock+0x8>)
 800e0d6:	f7ff beb7 	b.w	800de48 <__retarget_lock_acquire_recursive>
 800e0da:	bf00      	nop
 800e0dc:	200049fc 	.word	0x200049fc

0800e0e0 <__malloc_unlock>:
 800e0e0:	4801      	ldr	r0, [pc, #4]	; (800e0e8 <__malloc_unlock+0x8>)
 800e0e2:	f7ff beb2 	b.w	800de4a <__retarget_lock_release_recursive>
 800e0e6:	bf00      	nop
 800e0e8:	200049fc 	.word	0x200049fc

0800e0ec <_free_r>:
 800e0ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e0ee:	2900      	cmp	r1, #0
 800e0f0:	d044      	beq.n	800e17c <_free_r+0x90>
 800e0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0f6:	9001      	str	r0, [sp, #4]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e0fe:	bfb8      	it	lt
 800e100:	18e4      	addlt	r4, r4, r3
 800e102:	f7ff ffe7 	bl	800e0d4 <__malloc_lock>
 800e106:	4a1e      	ldr	r2, [pc, #120]	; (800e180 <_free_r+0x94>)
 800e108:	9801      	ldr	r0, [sp, #4]
 800e10a:	6813      	ldr	r3, [r2, #0]
 800e10c:	b933      	cbnz	r3, 800e11c <_free_r+0x30>
 800e10e:	6063      	str	r3, [r4, #4]
 800e110:	6014      	str	r4, [r2, #0]
 800e112:	b003      	add	sp, #12
 800e114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e118:	f7ff bfe2 	b.w	800e0e0 <__malloc_unlock>
 800e11c:	42a3      	cmp	r3, r4
 800e11e:	d908      	bls.n	800e132 <_free_r+0x46>
 800e120:	6825      	ldr	r5, [r4, #0]
 800e122:	1961      	adds	r1, r4, r5
 800e124:	428b      	cmp	r3, r1
 800e126:	bf01      	itttt	eq
 800e128:	6819      	ldreq	r1, [r3, #0]
 800e12a:	685b      	ldreq	r3, [r3, #4]
 800e12c:	1949      	addeq	r1, r1, r5
 800e12e:	6021      	streq	r1, [r4, #0]
 800e130:	e7ed      	b.n	800e10e <_free_r+0x22>
 800e132:	461a      	mov	r2, r3
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	b10b      	cbz	r3, 800e13c <_free_r+0x50>
 800e138:	42a3      	cmp	r3, r4
 800e13a:	d9fa      	bls.n	800e132 <_free_r+0x46>
 800e13c:	6811      	ldr	r1, [r2, #0]
 800e13e:	1855      	adds	r5, r2, r1
 800e140:	42a5      	cmp	r5, r4
 800e142:	d10b      	bne.n	800e15c <_free_r+0x70>
 800e144:	6824      	ldr	r4, [r4, #0]
 800e146:	4421      	add	r1, r4
 800e148:	1854      	adds	r4, r2, r1
 800e14a:	42a3      	cmp	r3, r4
 800e14c:	6011      	str	r1, [r2, #0]
 800e14e:	d1e0      	bne.n	800e112 <_free_r+0x26>
 800e150:	681c      	ldr	r4, [r3, #0]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	6053      	str	r3, [r2, #4]
 800e156:	4421      	add	r1, r4
 800e158:	6011      	str	r1, [r2, #0]
 800e15a:	e7da      	b.n	800e112 <_free_r+0x26>
 800e15c:	d902      	bls.n	800e164 <_free_r+0x78>
 800e15e:	230c      	movs	r3, #12
 800e160:	6003      	str	r3, [r0, #0]
 800e162:	e7d6      	b.n	800e112 <_free_r+0x26>
 800e164:	6825      	ldr	r5, [r4, #0]
 800e166:	1961      	adds	r1, r4, r5
 800e168:	428b      	cmp	r3, r1
 800e16a:	bf04      	itt	eq
 800e16c:	6819      	ldreq	r1, [r3, #0]
 800e16e:	685b      	ldreq	r3, [r3, #4]
 800e170:	6063      	str	r3, [r4, #4]
 800e172:	bf04      	itt	eq
 800e174:	1949      	addeq	r1, r1, r5
 800e176:	6021      	streq	r1, [r4, #0]
 800e178:	6054      	str	r4, [r2, #4]
 800e17a:	e7ca      	b.n	800e112 <_free_r+0x26>
 800e17c:	b003      	add	sp, #12
 800e17e:	bd30      	pop	{r4, r5, pc}
 800e180:	20004a00 	.word	0x20004a00

0800e184 <__ssputs_r>:
 800e184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e188:	688e      	ldr	r6, [r1, #8]
 800e18a:	429e      	cmp	r6, r3
 800e18c:	4682      	mov	sl, r0
 800e18e:	460c      	mov	r4, r1
 800e190:	4690      	mov	r8, r2
 800e192:	461f      	mov	r7, r3
 800e194:	d838      	bhi.n	800e208 <__ssputs_r+0x84>
 800e196:	898a      	ldrh	r2, [r1, #12]
 800e198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e19c:	d032      	beq.n	800e204 <__ssputs_r+0x80>
 800e19e:	6825      	ldr	r5, [r4, #0]
 800e1a0:	6909      	ldr	r1, [r1, #16]
 800e1a2:	eba5 0901 	sub.w	r9, r5, r1
 800e1a6:	6965      	ldr	r5, [r4, #20]
 800e1a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e1ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	444b      	add	r3, r9
 800e1b4:	106d      	asrs	r5, r5, #1
 800e1b6:	429d      	cmp	r5, r3
 800e1b8:	bf38      	it	cc
 800e1ba:	461d      	movcc	r5, r3
 800e1bc:	0553      	lsls	r3, r2, #21
 800e1be:	d531      	bpl.n	800e224 <__ssputs_r+0xa0>
 800e1c0:	4629      	mov	r1, r5
 800e1c2:	f7ff fe79 	bl	800deb8 <_malloc_r>
 800e1c6:	4606      	mov	r6, r0
 800e1c8:	b950      	cbnz	r0, 800e1e0 <__ssputs_r+0x5c>
 800e1ca:	230c      	movs	r3, #12
 800e1cc:	f8ca 3000 	str.w	r3, [sl]
 800e1d0:	89a3      	ldrh	r3, [r4, #12]
 800e1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1d6:	81a3      	strh	r3, [r4, #12]
 800e1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1e0:	6921      	ldr	r1, [r4, #16]
 800e1e2:	464a      	mov	r2, r9
 800e1e4:	f7ff fe32 	bl	800de4c <memcpy>
 800e1e8:	89a3      	ldrh	r3, [r4, #12]
 800e1ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1f2:	81a3      	strh	r3, [r4, #12]
 800e1f4:	6126      	str	r6, [r4, #16]
 800e1f6:	6165      	str	r5, [r4, #20]
 800e1f8:	444e      	add	r6, r9
 800e1fa:	eba5 0509 	sub.w	r5, r5, r9
 800e1fe:	6026      	str	r6, [r4, #0]
 800e200:	60a5      	str	r5, [r4, #8]
 800e202:	463e      	mov	r6, r7
 800e204:	42be      	cmp	r6, r7
 800e206:	d900      	bls.n	800e20a <__ssputs_r+0x86>
 800e208:	463e      	mov	r6, r7
 800e20a:	6820      	ldr	r0, [r4, #0]
 800e20c:	4632      	mov	r2, r6
 800e20e:	4641      	mov	r1, r8
 800e210:	f000 faa8 	bl	800e764 <memmove>
 800e214:	68a3      	ldr	r3, [r4, #8]
 800e216:	1b9b      	subs	r3, r3, r6
 800e218:	60a3      	str	r3, [r4, #8]
 800e21a:	6823      	ldr	r3, [r4, #0]
 800e21c:	4433      	add	r3, r6
 800e21e:	6023      	str	r3, [r4, #0]
 800e220:	2000      	movs	r0, #0
 800e222:	e7db      	b.n	800e1dc <__ssputs_r+0x58>
 800e224:	462a      	mov	r2, r5
 800e226:	f000 fab7 	bl	800e798 <_realloc_r>
 800e22a:	4606      	mov	r6, r0
 800e22c:	2800      	cmp	r0, #0
 800e22e:	d1e1      	bne.n	800e1f4 <__ssputs_r+0x70>
 800e230:	6921      	ldr	r1, [r4, #16]
 800e232:	4650      	mov	r0, sl
 800e234:	f7ff ff5a 	bl	800e0ec <_free_r>
 800e238:	e7c7      	b.n	800e1ca <__ssputs_r+0x46>
	...

0800e23c <_svfiprintf_r>:
 800e23c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e240:	4698      	mov	r8, r3
 800e242:	898b      	ldrh	r3, [r1, #12]
 800e244:	061b      	lsls	r3, r3, #24
 800e246:	b09d      	sub	sp, #116	; 0x74
 800e248:	4607      	mov	r7, r0
 800e24a:	460d      	mov	r5, r1
 800e24c:	4614      	mov	r4, r2
 800e24e:	d50e      	bpl.n	800e26e <_svfiprintf_r+0x32>
 800e250:	690b      	ldr	r3, [r1, #16]
 800e252:	b963      	cbnz	r3, 800e26e <_svfiprintf_r+0x32>
 800e254:	2140      	movs	r1, #64	; 0x40
 800e256:	f7ff fe2f 	bl	800deb8 <_malloc_r>
 800e25a:	6028      	str	r0, [r5, #0]
 800e25c:	6128      	str	r0, [r5, #16]
 800e25e:	b920      	cbnz	r0, 800e26a <_svfiprintf_r+0x2e>
 800e260:	230c      	movs	r3, #12
 800e262:	603b      	str	r3, [r7, #0]
 800e264:	f04f 30ff 	mov.w	r0, #4294967295
 800e268:	e0d1      	b.n	800e40e <_svfiprintf_r+0x1d2>
 800e26a:	2340      	movs	r3, #64	; 0x40
 800e26c:	616b      	str	r3, [r5, #20]
 800e26e:	2300      	movs	r3, #0
 800e270:	9309      	str	r3, [sp, #36]	; 0x24
 800e272:	2320      	movs	r3, #32
 800e274:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e278:	f8cd 800c 	str.w	r8, [sp, #12]
 800e27c:	2330      	movs	r3, #48	; 0x30
 800e27e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e428 <_svfiprintf_r+0x1ec>
 800e282:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e286:	f04f 0901 	mov.w	r9, #1
 800e28a:	4623      	mov	r3, r4
 800e28c:	469a      	mov	sl, r3
 800e28e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e292:	b10a      	cbz	r2, 800e298 <_svfiprintf_r+0x5c>
 800e294:	2a25      	cmp	r2, #37	; 0x25
 800e296:	d1f9      	bne.n	800e28c <_svfiprintf_r+0x50>
 800e298:	ebba 0b04 	subs.w	fp, sl, r4
 800e29c:	d00b      	beq.n	800e2b6 <_svfiprintf_r+0x7a>
 800e29e:	465b      	mov	r3, fp
 800e2a0:	4622      	mov	r2, r4
 800e2a2:	4629      	mov	r1, r5
 800e2a4:	4638      	mov	r0, r7
 800e2a6:	f7ff ff6d 	bl	800e184 <__ssputs_r>
 800e2aa:	3001      	adds	r0, #1
 800e2ac:	f000 80aa 	beq.w	800e404 <_svfiprintf_r+0x1c8>
 800e2b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2b2:	445a      	add	r2, fp
 800e2b4:	9209      	str	r2, [sp, #36]	; 0x24
 800e2b6:	f89a 3000 	ldrb.w	r3, [sl]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	f000 80a2 	beq.w	800e404 <_svfiprintf_r+0x1c8>
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e2ca:	f10a 0a01 	add.w	sl, sl, #1
 800e2ce:	9304      	str	r3, [sp, #16]
 800e2d0:	9307      	str	r3, [sp, #28]
 800e2d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e2d6:	931a      	str	r3, [sp, #104]	; 0x68
 800e2d8:	4654      	mov	r4, sl
 800e2da:	2205      	movs	r2, #5
 800e2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2e0:	4851      	ldr	r0, [pc, #324]	; (800e428 <_svfiprintf_r+0x1ec>)
 800e2e2:	f7f1 ff95 	bl	8000210 <memchr>
 800e2e6:	9a04      	ldr	r2, [sp, #16]
 800e2e8:	b9d8      	cbnz	r0, 800e322 <_svfiprintf_r+0xe6>
 800e2ea:	06d0      	lsls	r0, r2, #27
 800e2ec:	bf44      	itt	mi
 800e2ee:	2320      	movmi	r3, #32
 800e2f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2f4:	0711      	lsls	r1, r2, #28
 800e2f6:	bf44      	itt	mi
 800e2f8:	232b      	movmi	r3, #43	; 0x2b
 800e2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2fe:	f89a 3000 	ldrb.w	r3, [sl]
 800e302:	2b2a      	cmp	r3, #42	; 0x2a
 800e304:	d015      	beq.n	800e332 <_svfiprintf_r+0xf6>
 800e306:	9a07      	ldr	r2, [sp, #28]
 800e308:	4654      	mov	r4, sl
 800e30a:	2000      	movs	r0, #0
 800e30c:	f04f 0c0a 	mov.w	ip, #10
 800e310:	4621      	mov	r1, r4
 800e312:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e316:	3b30      	subs	r3, #48	; 0x30
 800e318:	2b09      	cmp	r3, #9
 800e31a:	d94e      	bls.n	800e3ba <_svfiprintf_r+0x17e>
 800e31c:	b1b0      	cbz	r0, 800e34c <_svfiprintf_r+0x110>
 800e31e:	9207      	str	r2, [sp, #28]
 800e320:	e014      	b.n	800e34c <_svfiprintf_r+0x110>
 800e322:	eba0 0308 	sub.w	r3, r0, r8
 800e326:	fa09 f303 	lsl.w	r3, r9, r3
 800e32a:	4313      	orrs	r3, r2
 800e32c:	9304      	str	r3, [sp, #16]
 800e32e:	46a2      	mov	sl, r4
 800e330:	e7d2      	b.n	800e2d8 <_svfiprintf_r+0x9c>
 800e332:	9b03      	ldr	r3, [sp, #12]
 800e334:	1d19      	adds	r1, r3, #4
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	9103      	str	r1, [sp, #12]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	bfbb      	ittet	lt
 800e33e:	425b      	neglt	r3, r3
 800e340:	f042 0202 	orrlt.w	r2, r2, #2
 800e344:	9307      	strge	r3, [sp, #28]
 800e346:	9307      	strlt	r3, [sp, #28]
 800e348:	bfb8      	it	lt
 800e34a:	9204      	strlt	r2, [sp, #16]
 800e34c:	7823      	ldrb	r3, [r4, #0]
 800e34e:	2b2e      	cmp	r3, #46	; 0x2e
 800e350:	d10c      	bne.n	800e36c <_svfiprintf_r+0x130>
 800e352:	7863      	ldrb	r3, [r4, #1]
 800e354:	2b2a      	cmp	r3, #42	; 0x2a
 800e356:	d135      	bne.n	800e3c4 <_svfiprintf_r+0x188>
 800e358:	9b03      	ldr	r3, [sp, #12]
 800e35a:	1d1a      	adds	r2, r3, #4
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	9203      	str	r2, [sp, #12]
 800e360:	2b00      	cmp	r3, #0
 800e362:	bfb8      	it	lt
 800e364:	f04f 33ff 	movlt.w	r3, #4294967295
 800e368:	3402      	adds	r4, #2
 800e36a:	9305      	str	r3, [sp, #20]
 800e36c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e438 <_svfiprintf_r+0x1fc>
 800e370:	7821      	ldrb	r1, [r4, #0]
 800e372:	2203      	movs	r2, #3
 800e374:	4650      	mov	r0, sl
 800e376:	f7f1 ff4b 	bl	8000210 <memchr>
 800e37a:	b140      	cbz	r0, 800e38e <_svfiprintf_r+0x152>
 800e37c:	2340      	movs	r3, #64	; 0x40
 800e37e:	eba0 000a 	sub.w	r0, r0, sl
 800e382:	fa03 f000 	lsl.w	r0, r3, r0
 800e386:	9b04      	ldr	r3, [sp, #16]
 800e388:	4303      	orrs	r3, r0
 800e38a:	3401      	adds	r4, #1
 800e38c:	9304      	str	r3, [sp, #16]
 800e38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e392:	4826      	ldr	r0, [pc, #152]	; (800e42c <_svfiprintf_r+0x1f0>)
 800e394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e398:	2206      	movs	r2, #6
 800e39a:	f7f1 ff39 	bl	8000210 <memchr>
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d038      	beq.n	800e414 <_svfiprintf_r+0x1d8>
 800e3a2:	4b23      	ldr	r3, [pc, #140]	; (800e430 <_svfiprintf_r+0x1f4>)
 800e3a4:	bb1b      	cbnz	r3, 800e3ee <_svfiprintf_r+0x1b2>
 800e3a6:	9b03      	ldr	r3, [sp, #12]
 800e3a8:	3307      	adds	r3, #7
 800e3aa:	f023 0307 	bic.w	r3, r3, #7
 800e3ae:	3308      	adds	r3, #8
 800e3b0:	9303      	str	r3, [sp, #12]
 800e3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b4:	4433      	add	r3, r6
 800e3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b8:	e767      	b.n	800e28a <_svfiprintf_r+0x4e>
 800e3ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3be:	460c      	mov	r4, r1
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	e7a5      	b.n	800e310 <_svfiprintf_r+0xd4>
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	3401      	adds	r4, #1
 800e3c8:	9305      	str	r3, [sp, #20]
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	f04f 0c0a 	mov.w	ip, #10
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e3d6:	3a30      	subs	r2, #48	; 0x30
 800e3d8:	2a09      	cmp	r2, #9
 800e3da:	d903      	bls.n	800e3e4 <_svfiprintf_r+0x1a8>
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d0c5      	beq.n	800e36c <_svfiprintf_r+0x130>
 800e3e0:	9105      	str	r1, [sp, #20]
 800e3e2:	e7c3      	b.n	800e36c <_svfiprintf_r+0x130>
 800e3e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3e8:	4604      	mov	r4, r0
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	e7f0      	b.n	800e3d0 <_svfiprintf_r+0x194>
 800e3ee:	ab03      	add	r3, sp, #12
 800e3f0:	9300      	str	r3, [sp, #0]
 800e3f2:	462a      	mov	r2, r5
 800e3f4:	4b0f      	ldr	r3, [pc, #60]	; (800e434 <_svfiprintf_r+0x1f8>)
 800e3f6:	a904      	add	r1, sp, #16
 800e3f8:	4638      	mov	r0, r7
 800e3fa:	f3af 8000 	nop.w
 800e3fe:	1c42      	adds	r2, r0, #1
 800e400:	4606      	mov	r6, r0
 800e402:	d1d6      	bne.n	800e3b2 <_svfiprintf_r+0x176>
 800e404:	89ab      	ldrh	r3, [r5, #12]
 800e406:	065b      	lsls	r3, r3, #25
 800e408:	f53f af2c 	bmi.w	800e264 <_svfiprintf_r+0x28>
 800e40c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e40e:	b01d      	add	sp, #116	; 0x74
 800e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e414:	ab03      	add	r3, sp, #12
 800e416:	9300      	str	r3, [sp, #0]
 800e418:	462a      	mov	r2, r5
 800e41a:	4b06      	ldr	r3, [pc, #24]	; (800e434 <_svfiprintf_r+0x1f8>)
 800e41c:	a904      	add	r1, sp, #16
 800e41e:	4638      	mov	r0, r7
 800e420:	f000 f87a 	bl	800e518 <_printf_i>
 800e424:	e7eb      	b.n	800e3fe <_svfiprintf_r+0x1c2>
 800e426:	bf00      	nop
 800e428:	080134c8 	.word	0x080134c8
 800e42c:	080134d2 	.word	0x080134d2
 800e430:	00000000 	.word	0x00000000
 800e434:	0800e185 	.word	0x0800e185
 800e438:	080134ce 	.word	0x080134ce

0800e43c <_printf_common>:
 800e43c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e440:	4616      	mov	r6, r2
 800e442:	4699      	mov	r9, r3
 800e444:	688a      	ldr	r2, [r1, #8]
 800e446:	690b      	ldr	r3, [r1, #16]
 800e448:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e44c:	4293      	cmp	r3, r2
 800e44e:	bfb8      	it	lt
 800e450:	4613      	movlt	r3, r2
 800e452:	6033      	str	r3, [r6, #0]
 800e454:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e458:	4607      	mov	r7, r0
 800e45a:	460c      	mov	r4, r1
 800e45c:	b10a      	cbz	r2, 800e462 <_printf_common+0x26>
 800e45e:	3301      	adds	r3, #1
 800e460:	6033      	str	r3, [r6, #0]
 800e462:	6823      	ldr	r3, [r4, #0]
 800e464:	0699      	lsls	r1, r3, #26
 800e466:	bf42      	ittt	mi
 800e468:	6833      	ldrmi	r3, [r6, #0]
 800e46a:	3302      	addmi	r3, #2
 800e46c:	6033      	strmi	r3, [r6, #0]
 800e46e:	6825      	ldr	r5, [r4, #0]
 800e470:	f015 0506 	ands.w	r5, r5, #6
 800e474:	d106      	bne.n	800e484 <_printf_common+0x48>
 800e476:	f104 0a19 	add.w	sl, r4, #25
 800e47a:	68e3      	ldr	r3, [r4, #12]
 800e47c:	6832      	ldr	r2, [r6, #0]
 800e47e:	1a9b      	subs	r3, r3, r2
 800e480:	42ab      	cmp	r3, r5
 800e482:	dc26      	bgt.n	800e4d2 <_printf_common+0x96>
 800e484:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e488:	1e13      	subs	r3, r2, #0
 800e48a:	6822      	ldr	r2, [r4, #0]
 800e48c:	bf18      	it	ne
 800e48e:	2301      	movne	r3, #1
 800e490:	0692      	lsls	r2, r2, #26
 800e492:	d42b      	bmi.n	800e4ec <_printf_common+0xb0>
 800e494:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e498:	4649      	mov	r1, r9
 800e49a:	4638      	mov	r0, r7
 800e49c:	47c0      	blx	r8
 800e49e:	3001      	adds	r0, #1
 800e4a0:	d01e      	beq.n	800e4e0 <_printf_common+0xa4>
 800e4a2:	6823      	ldr	r3, [r4, #0]
 800e4a4:	68e5      	ldr	r5, [r4, #12]
 800e4a6:	6832      	ldr	r2, [r6, #0]
 800e4a8:	f003 0306 	and.w	r3, r3, #6
 800e4ac:	2b04      	cmp	r3, #4
 800e4ae:	bf08      	it	eq
 800e4b0:	1aad      	subeq	r5, r5, r2
 800e4b2:	68a3      	ldr	r3, [r4, #8]
 800e4b4:	6922      	ldr	r2, [r4, #16]
 800e4b6:	bf0c      	ite	eq
 800e4b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e4bc:	2500      	movne	r5, #0
 800e4be:	4293      	cmp	r3, r2
 800e4c0:	bfc4      	itt	gt
 800e4c2:	1a9b      	subgt	r3, r3, r2
 800e4c4:	18ed      	addgt	r5, r5, r3
 800e4c6:	2600      	movs	r6, #0
 800e4c8:	341a      	adds	r4, #26
 800e4ca:	42b5      	cmp	r5, r6
 800e4cc:	d11a      	bne.n	800e504 <_printf_common+0xc8>
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	e008      	b.n	800e4e4 <_printf_common+0xa8>
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	4652      	mov	r2, sl
 800e4d6:	4649      	mov	r1, r9
 800e4d8:	4638      	mov	r0, r7
 800e4da:	47c0      	blx	r8
 800e4dc:	3001      	adds	r0, #1
 800e4de:	d103      	bne.n	800e4e8 <_printf_common+0xac>
 800e4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e4e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4e8:	3501      	adds	r5, #1
 800e4ea:	e7c6      	b.n	800e47a <_printf_common+0x3e>
 800e4ec:	18e1      	adds	r1, r4, r3
 800e4ee:	1c5a      	adds	r2, r3, #1
 800e4f0:	2030      	movs	r0, #48	; 0x30
 800e4f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4f6:	4422      	add	r2, r4
 800e4f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e500:	3302      	adds	r3, #2
 800e502:	e7c7      	b.n	800e494 <_printf_common+0x58>
 800e504:	2301      	movs	r3, #1
 800e506:	4622      	mov	r2, r4
 800e508:	4649      	mov	r1, r9
 800e50a:	4638      	mov	r0, r7
 800e50c:	47c0      	blx	r8
 800e50e:	3001      	adds	r0, #1
 800e510:	d0e6      	beq.n	800e4e0 <_printf_common+0xa4>
 800e512:	3601      	adds	r6, #1
 800e514:	e7d9      	b.n	800e4ca <_printf_common+0x8e>
	...

0800e518 <_printf_i>:
 800e518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e51c:	7e0f      	ldrb	r7, [r1, #24]
 800e51e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e520:	2f78      	cmp	r7, #120	; 0x78
 800e522:	4691      	mov	r9, r2
 800e524:	4680      	mov	r8, r0
 800e526:	460c      	mov	r4, r1
 800e528:	469a      	mov	sl, r3
 800e52a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e52e:	d807      	bhi.n	800e540 <_printf_i+0x28>
 800e530:	2f62      	cmp	r7, #98	; 0x62
 800e532:	d80a      	bhi.n	800e54a <_printf_i+0x32>
 800e534:	2f00      	cmp	r7, #0
 800e536:	f000 80d8 	beq.w	800e6ea <_printf_i+0x1d2>
 800e53a:	2f58      	cmp	r7, #88	; 0x58
 800e53c:	f000 80a3 	beq.w	800e686 <_printf_i+0x16e>
 800e540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e544:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e548:	e03a      	b.n	800e5c0 <_printf_i+0xa8>
 800e54a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e54e:	2b15      	cmp	r3, #21
 800e550:	d8f6      	bhi.n	800e540 <_printf_i+0x28>
 800e552:	a101      	add	r1, pc, #4	; (adr r1, 800e558 <_printf_i+0x40>)
 800e554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e558:	0800e5b1 	.word	0x0800e5b1
 800e55c:	0800e5c5 	.word	0x0800e5c5
 800e560:	0800e541 	.word	0x0800e541
 800e564:	0800e541 	.word	0x0800e541
 800e568:	0800e541 	.word	0x0800e541
 800e56c:	0800e541 	.word	0x0800e541
 800e570:	0800e5c5 	.word	0x0800e5c5
 800e574:	0800e541 	.word	0x0800e541
 800e578:	0800e541 	.word	0x0800e541
 800e57c:	0800e541 	.word	0x0800e541
 800e580:	0800e541 	.word	0x0800e541
 800e584:	0800e6d1 	.word	0x0800e6d1
 800e588:	0800e5f5 	.word	0x0800e5f5
 800e58c:	0800e6b3 	.word	0x0800e6b3
 800e590:	0800e541 	.word	0x0800e541
 800e594:	0800e541 	.word	0x0800e541
 800e598:	0800e6f3 	.word	0x0800e6f3
 800e59c:	0800e541 	.word	0x0800e541
 800e5a0:	0800e5f5 	.word	0x0800e5f5
 800e5a4:	0800e541 	.word	0x0800e541
 800e5a8:	0800e541 	.word	0x0800e541
 800e5ac:	0800e6bb 	.word	0x0800e6bb
 800e5b0:	682b      	ldr	r3, [r5, #0]
 800e5b2:	1d1a      	adds	r2, r3, #4
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	602a      	str	r2, [r5, #0]
 800e5b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	e0a3      	b.n	800e70c <_printf_i+0x1f4>
 800e5c4:	6820      	ldr	r0, [r4, #0]
 800e5c6:	6829      	ldr	r1, [r5, #0]
 800e5c8:	0606      	lsls	r6, r0, #24
 800e5ca:	f101 0304 	add.w	r3, r1, #4
 800e5ce:	d50a      	bpl.n	800e5e6 <_printf_i+0xce>
 800e5d0:	680e      	ldr	r6, [r1, #0]
 800e5d2:	602b      	str	r3, [r5, #0]
 800e5d4:	2e00      	cmp	r6, #0
 800e5d6:	da03      	bge.n	800e5e0 <_printf_i+0xc8>
 800e5d8:	232d      	movs	r3, #45	; 0x2d
 800e5da:	4276      	negs	r6, r6
 800e5dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5e0:	485e      	ldr	r0, [pc, #376]	; (800e75c <_printf_i+0x244>)
 800e5e2:	230a      	movs	r3, #10
 800e5e4:	e019      	b.n	800e61a <_printf_i+0x102>
 800e5e6:	680e      	ldr	r6, [r1, #0]
 800e5e8:	602b      	str	r3, [r5, #0]
 800e5ea:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5ee:	bf18      	it	ne
 800e5f0:	b236      	sxthne	r6, r6
 800e5f2:	e7ef      	b.n	800e5d4 <_printf_i+0xbc>
 800e5f4:	682b      	ldr	r3, [r5, #0]
 800e5f6:	6820      	ldr	r0, [r4, #0]
 800e5f8:	1d19      	adds	r1, r3, #4
 800e5fa:	6029      	str	r1, [r5, #0]
 800e5fc:	0601      	lsls	r1, r0, #24
 800e5fe:	d501      	bpl.n	800e604 <_printf_i+0xec>
 800e600:	681e      	ldr	r6, [r3, #0]
 800e602:	e002      	b.n	800e60a <_printf_i+0xf2>
 800e604:	0646      	lsls	r6, r0, #25
 800e606:	d5fb      	bpl.n	800e600 <_printf_i+0xe8>
 800e608:	881e      	ldrh	r6, [r3, #0]
 800e60a:	4854      	ldr	r0, [pc, #336]	; (800e75c <_printf_i+0x244>)
 800e60c:	2f6f      	cmp	r7, #111	; 0x6f
 800e60e:	bf0c      	ite	eq
 800e610:	2308      	moveq	r3, #8
 800e612:	230a      	movne	r3, #10
 800e614:	2100      	movs	r1, #0
 800e616:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e61a:	6865      	ldr	r5, [r4, #4]
 800e61c:	60a5      	str	r5, [r4, #8]
 800e61e:	2d00      	cmp	r5, #0
 800e620:	bfa2      	ittt	ge
 800e622:	6821      	ldrge	r1, [r4, #0]
 800e624:	f021 0104 	bicge.w	r1, r1, #4
 800e628:	6021      	strge	r1, [r4, #0]
 800e62a:	b90e      	cbnz	r6, 800e630 <_printf_i+0x118>
 800e62c:	2d00      	cmp	r5, #0
 800e62e:	d04d      	beq.n	800e6cc <_printf_i+0x1b4>
 800e630:	4615      	mov	r5, r2
 800e632:	fbb6 f1f3 	udiv	r1, r6, r3
 800e636:	fb03 6711 	mls	r7, r3, r1, r6
 800e63a:	5dc7      	ldrb	r7, [r0, r7]
 800e63c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e640:	4637      	mov	r7, r6
 800e642:	42bb      	cmp	r3, r7
 800e644:	460e      	mov	r6, r1
 800e646:	d9f4      	bls.n	800e632 <_printf_i+0x11a>
 800e648:	2b08      	cmp	r3, #8
 800e64a:	d10b      	bne.n	800e664 <_printf_i+0x14c>
 800e64c:	6823      	ldr	r3, [r4, #0]
 800e64e:	07de      	lsls	r6, r3, #31
 800e650:	d508      	bpl.n	800e664 <_printf_i+0x14c>
 800e652:	6923      	ldr	r3, [r4, #16]
 800e654:	6861      	ldr	r1, [r4, #4]
 800e656:	4299      	cmp	r1, r3
 800e658:	bfde      	ittt	le
 800e65a:	2330      	movle	r3, #48	; 0x30
 800e65c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e660:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e664:	1b52      	subs	r2, r2, r5
 800e666:	6122      	str	r2, [r4, #16]
 800e668:	f8cd a000 	str.w	sl, [sp]
 800e66c:	464b      	mov	r3, r9
 800e66e:	aa03      	add	r2, sp, #12
 800e670:	4621      	mov	r1, r4
 800e672:	4640      	mov	r0, r8
 800e674:	f7ff fee2 	bl	800e43c <_printf_common>
 800e678:	3001      	adds	r0, #1
 800e67a:	d14c      	bne.n	800e716 <_printf_i+0x1fe>
 800e67c:	f04f 30ff 	mov.w	r0, #4294967295
 800e680:	b004      	add	sp, #16
 800e682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e686:	4835      	ldr	r0, [pc, #212]	; (800e75c <_printf_i+0x244>)
 800e688:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e68c:	6829      	ldr	r1, [r5, #0]
 800e68e:	6823      	ldr	r3, [r4, #0]
 800e690:	f851 6b04 	ldr.w	r6, [r1], #4
 800e694:	6029      	str	r1, [r5, #0]
 800e696:	061d      	lsls	r5, r3, #24
 800e698:	d514      	bpl.n	800e6c4 <_printf_i+0x1ac>
 800e69a:	07df      	lsls	r7, r3, #31
 800e69c:	bf44      	itt	mi
 800e69e:	f043 0320 	orrmi.w	r3, r3, #32
 800e6a2:	6023      	strmi	r3, [r4, #0]
 800e6a4:	b91e      	cbnz	r6, 800e6ae <_printf_i+0x196>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	f023 0320 	bic.w	r3, r3, #32
 800e6ac:	6023      	str	r3, [r4, #0]
 800e6ae:	2310      	movs	r3, #16
 800e6b0:	e7b0      	b.n	800e614 <_printf_i+0xfc>
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	f043 0320 	orr.w	r3, r3, #32
 800e6b8:	6023      	str	r3, [r4, #0]
 800e6ba:	2378      	movs	r3, #120	; 0x78
 800e6bc:	4828      	ldr	r0, [pc, #160]	; (800e760 <_printf_i+0x248>)
 800e6be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6c2:	e7e3      	b.n	800e68c <_printf_i+0x174>
 800e6c4:	0659      	lsls	r1, r3, #25
 800e6c6:	bf48      	it	mi
 800e6c8:	b2b6      	uxthmi	r6, r6
 800e6ca:	e7e6      	b.n	800e69a <_printf_i+0x182>
 800e6cc:	4615      	mov	r5, r2
 800e6ce:	e7bb      	b.n	800e648 <_printf_i+0x130>
 800e6d0:	682b      	ldr	r3, [r5, #0]
 800e6d2:	6826      	ldr	r6, [r4, #0]
 800e6d4:	6961      	ldr	r1, [r4, #20]
 800e6d6:	1d18      	adds	r0, r3, #4
 800e6d8:	6028      	str	r0, [r5, #0]
 800e6da:	0635      	lsls	r5, r6, #24
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	d501      	bpl.n	800e6e4 <_printf_i+0x1cc>
 800e6e0:	6019      	str	r1, [r3, #0]
 800e6e2:	e002      	b.n	800e6ea <_printf_i+0x1d2>
 800e6e4:	0670      	lsls	r0, r6, #25
 800e6e6:	d5fb      	bpl.n	800e6e0 <_printf_i+0x1c8>
 800e6e8:	8019      	strh	r1, [r3, #0]
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	6123      	str	r3, [r4, #16]
 800e6ee:	4615      	mov	r5, r2
 800e6f0:	e7ba      	b.n	800e668 <_printf_i+0x150>
 800e6f2:	682b      	ldr	r3, [r5, #0]
 800e6f4:	1d1a      	adds	r2, r3, #4
 800e6f6:	602a      	str	r2, [r5, #0]
 800e6f8:	681d      	ldr	r5, [r3, #0]
 800e6fa:	6862      	ldr	r2, [r4, #4]
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	4628      	mov	r0, r5
 800e700:	f7f1 fd86 	bl	8000210 <memchr>
 800e704:	b108      	cbz	r0, 800e70a <_printf_i+0x1f2>
 800e706:	1b40      	subs	r0, r0, r5
 800e708:	6060      	str	r0, [r4, #4]
 800e70a:	6863      	ldr	r3, [r4, #4]
 800e70c:	6123      	str	r3, [r4, #16]
 800e70e:	2300      	movs	r3, #0
 800e710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e714:	e7a8      	b.n	800e668 <_printf_i+0x150>
 800e716:	6923      	ldr	r3, [r4, #16]
 800e718:	462a      	mov	r2, r5
 800e71a:	4649      	mov	r1, r9
 800e71c:	4640      	mov	r0, r8
 800e71e:	47d0      	blx	sl
 800e720:	3001      	adds	r0, #1
 800e722:	d0ab      	beq.n	800e67c <_printf_i+0x164>
 800e724:	6823      	ldr	r3, [r4, #0]
 800e726:	079b      	lsls	r3, r3, #30
 800e728:	d413      	bmi.n	800e752 <_printf_i+0x23a>
 800e72a:	68e0      	ldr	r0, [r4, #12]
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	4298      	cmp	r0, r3
 800e730:	bfb8      	it	lt
 800e732:	4618      	movlt	r0, r3
 800e734:	e7a4      	b.n	800e680 <_printf_i+0x168>
 800e736:	2301      	movs	r3, #1
 800e738:	4632      	mov	r2, r6
 800e73a:	4649      	mov	r1, r9
 800e73c:	4640      	mov	r0, r8
 800e73e:	47d0      	blx	sl
 800e740:	3001      	adds	r0, #1
 800e742:	d09b      	beq.n	800e67c <_printf_i+0x164>
 800e744:	3501      	adds	r5, #1
 800e746:	68e3      	ldr	r3, [r4, #12]
 800e748:	9903      	ldr	r1, [sp, #12]
 800e74a:	1a5b      	subs	r3, r3, r1
 800e74c:	42ab      	cmp	r3, r5
 800e74e:	dcf2      	bgt.n	800e736 <_printf_i+0x21e>
 800e750:	e7eb      	b.n	800e72a <_printf_i+0x212>
 800e752:	2500      	movs	r5, #0
 800e754:	f104 0619 	add.w	r6, r4, #25
 800e758:	e7f5      	b.n	800e746 <_printf_i+0x22e>
 800e75a:	bf00      	nop
 800e75c:	080134d9 	.word	0x080134d9
 800e760:	080134ea 	.word	0x080134ea

0800e764 <memmove>:
 800e764:	4288      	cmp	r0, r1
 800e766:	b510      	push	{r4, lr}
 800e768:	eb01 0402 	add.w	r4, r1, r2
 800e76c:	d902      	bls.n	800e774 <memmove+0x10>
 800e76e:	4284      	cmp	r4, r0
 800e770:	4623      	mov	r3, r4
 800e772:	d807      	bhi.n	800e784 <memmove+0x20>
 800e774:	1e43      	subs	r3, r0, #1
 800e776:	42a1      	cmp	r1, r4
 800e778:	d008      	beq.n	800e78c <memmove+0x28>
 800e77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e77e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e782:	e7f8      	b.n	800e776 <memmove+0x12>
 800e784:	4402      	add	r2, r0
 800e786:	4601      	mov	r1, r0
 800e788:	428a      	cmp	r2, r1
 800e78a:	d100      	bne.n	800e78e <memmove+0x2a>
 800e78c:	bd10      	pop	{r4, pc}
 800e78e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e796:	e7f7      	b.n	800e788 <memmove+0x24>

0800e798 <_realloc_r>:
 800e798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e79c:	4680      	mov	r8, r0
 800e79e:	4614      	mov	r4, r2
 800e7a0:	460e      	mov	r6, r1
 800e7a2:	b921      	cbnz	r1, 800e7ae <_realloc_r+0x16>
 800e7a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a8:	4611      	mov	r1, r2
 800e7aa:	f7ff bb85 	b.w	800deb8 <_malloc_r>
 800e7ae:	b92a      	cbnz	r2, 800e7bc <_realloc_r+0x24>
 800e7b0:	f7ff fc9c 	bl	800e0ec <_free_r>
 800e7b4:	4625      	mov	r5, r4
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7bc:	f000 f81b 	bl	800e7f6 <_malloc_usable_size_r>
 800e7c0:	4284      	cmp	r4, r0
 800e7c2:	4607      	mov	r7, r0
 800e7c4:	d802      	bhi.n	800e7cc <_realloc_r+0x34>
 800e7c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7ca:	d812      	bhi.n	800e7f2 <_realloc_r+0x5a>
 800e7cc:	4621      	mov	r1, r4
 800e7ce:	4640      	mov	r0, r8
 800e7d0:	f7ff fb72 	bl	800deb8 <_malloc_r>
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d0ed      	beq.n	800e7b6 <_realloc_r+0x1e>
 800e7da:	42bc      	cmp	r4, r7
 800e7dc:	4622      	mov	r2, r4
 800e7de:	4631      	mov	r1, r6
 800e7e0:	bf28      	it	cs
 800e7e2:	463a      	movcs	r2, r7
 800e7e4:	f7ff fb32 	bl	800de4c <memcpy>
 800e7e8:	4631      	mov	r1, r6
 800e7ea:	4640      	mov	r0, r8
 800e7ec:	f7ff fc7e 	bl	800e0ec <_free_r>
 800e7f0:	e7e1      	b.n	800e7b6 <_realloc_r+0x1e>
 800e7f2:	4635      	mov	r5, r6
 800e7f4:	e7df      	b.n	800e7b6 <_realloc_r+0x1e>

0800e7f6 <_malloc_usable_size_r>:
 800e7f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7fa:	1f18      	subs	r0, r3, #4
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	bfbc      	itt	lt
 800e800:	580b      	ldrlt	r3, [r1, r0]
 800e802:	18c0      	addlt	r0, r0, r3
 800e804:	4770      	bx	lr
	...

0800e808 <_init>:
 800e808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e80a:	bf00      	nop
 800e80c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e80e:	bc08      	pop	{r3}
 800e810:	469e      	mov	lr, r3
 800e812:	4770      	bx	lr

0800e814 <_fini>:
 800e814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e816:	bf00      	nop
 800e818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e81a:	bc08      	pop	{r3}
 800e81c:	469e      	mov	lr, r3
 800e81e:	4770      	bx	lr
